
XMC4500_Blinky.elf:     file format elf32-littlearm
XMC4500_Blinky.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000201

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x0c000000 align 2**16
         filesz 0x0000ef68 memsz 0x0000ef68 flags r-x
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x0c00ef68 align 2**16
         filesz 0x00000080 memsz 0x00000588 flags rw-
    LOAD off    0x00030000 vaddr 0x30000000 paddr 0x0c00efe8 align 2**16
         filesz 0x00000000 memsz 0x00000e00 flags rw-
    LOAD off    0x00030000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x00000000 memsz 0x00000800 flags rw-
    LOAD off    0x0002ffc0 vaddr 0x2000ffc0 paddr 0x2000ffc0 align 2**16
         filesz 0x00000000 memsz 0x00000014 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .text         0000ef68  08000000  0c000000  00010000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00030000  2**0  ALLOC
  2 .ram_code     00000000  10000800  10000800  00020080  2**0  CONTENTS
  3 PSRAM_DATA    00000000  10000800  10000800  00020080  2**0  CONTENTS
  4 PSRAM_BSS     00000000  10000800  10000800  00020080  2**0  CONTENTS
  5 .data         00000080  20000000  0c00ef68  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000508  20000080  0c00efe8  00020080  2**2  ALLOC
  7 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2  ALLOC
  8 DSRAM2_DATA   00000000  30000000  30000000  00020080  2**0  CONTENTS
  9 DSRAM2_BSS    00000e00  30000000  0c00efe8  00030000  2**2  ALLOC
 10 .debug_aranges 00001920  00000000  00000000  00020080  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0001c5e7  00000000  00000000  000219a0  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000467b  00000000  00000000  0003df87  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ea72  00000000  00000000  00042602  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000069f8  00000000  00000000  00051074  2**2  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00095ce5  00000000  00000000  00057a6c  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000016f0  00000000  00000000  000ed751  2**0  CONTENTS, READONLY, DEBUGGING
 17 .build_attributes 0000085a  00000000  00000000  000eee41  2**0  CONTENTS, READONLY
 18 .debug_macro  0001e10c  00000000  00000000  000ef69b  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .text	00000000 .text
10000000 l    d  Stack	00000000 Stack
10000800 l    d  .ram_code	00000000 .ram_code
10000800 l    d  PSRAM_DATA	00000000 PSRAM_DATA
10000800 l    d  PSRAM_BSS	00000000 PSRAM_BSS
20000000 l    d  .data	00000000 .data
20000080 l    d  .bss	00000000 .bss
2000ffc0 l    d  .no_init	00000000 .no_init
30000000 l    d  DSRAM2_DATA	00000000 DSRAM2_DATA
30000000 l    d  DSRAM2_BSS	00000000 DSRAM2_BSS
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .build_attributes	00000000 .build_attributes
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 ./Startup/startup_XMC4500.o
08000248 l       .text	00000000 __copy_table_start__
08000278 l       .text	00000000 __copy_table_end__
08000278 l       .text	00000000 __zero_table_start__
08000290 l       .text	00000000 __zero_table_end__
00000000 l    df *ABS*	00000000 system_XMC4500.c
080002b4 l     F .text	00000028 delay
00000000 l    df *ABS*	00000000 xmc4_eru.c
00000000 l    df *ABS*	00000000 xmc4_flash.c
00000000 l    df *ABS*	00000000 xmc4_gpio.c
00000000 l    df *ABS*	00000000 xmc4_rtc.c
08000ef0 l     F .text	00000024 XMC_RTC_IsRunning
08000f14 l     F .text	00000018 XMC_SCU_GetMirrorStatus
00000000 l    df *ABS*	00000000 xmc4_scu.c
08001088 l     F .text	00000018 XMC_SCU_CLOCK_GetUsbClockSource
080010a0 l     F .text	00000018 XMC_SCU_CLOCK_GetWdtClockSource
080010b8 l     F .text	0000001c XMC_SCU_CLOCK_GetExternalOutputClockSource
080010d4 l     F .text	00000024 XMC_SCU_CLOCK_GetSystemClockFrequency
080010f8 l     F .text	00000014 XMC_SCU_CLOCK_GetCpuClockFrequency
0800110c l     F .text	00000048 XMC_SCU_lDelay
00000000 l    df *ABS*	00000000 xmc_can.c
08002800 l     F .text	00000026 XMC_CAN_IsPanelControlReady
08002828 l     F .text	0000003c XMC_CAN_PanelControl
08002864 l     F .text	0000001e XMC_CAN_NODE_EnableConfigurationChange
08002884 l     F .text	0000001e XMC_CAN_NODE_DisableConfigurationChange
080028a4 l     F .text	0000001e max
080028c4 l     F .text	0000001e min
00000000 l    df *ABS*	00000000 xmc_ccu4.c
080033e0 l     F .text	0000001e XMC_CCU4_StartPrescaler
08003400 l     F .text	0000001c XMC_CCU4_SLICE_SetDitherCompareValue
0800341c l     F .text	00000068 XMC_CCU4_lAssertReset
08003484 l     F .text	00000068 XMC_CCU4_lDeassertReset
00000000 l    df *ABS*	00000000 xmc_ccu8.c
08003e50 l     F .text	0000001e XMC_CCU8_StartPrescaler
08003e70 l     F .text	00000018 XMC_CCU8_SLICE_StopTimer
08003e88 l     F .text	0000001c XMC_CCU8_SLICE_SetDitherCompareValue
08003ea4 l     F .text	0000003c XMC_CCU8_lAssertReset
08003ee0 l     F .text	0000003c XMC_CCU8_lDeassertReset
00000000 l    df *ABS*	00000000 xmc_common.c
08004a9c l     F .text	00000026 XMC_PRIOARRAY_GetHead
08004ac4 l     F .text	00000026 XMC_PRIOARRAY_GetItemPriority
08004aec l     F .text	00000026 XMC_PRIOARRAY_GetItemNext
00000000 l    df *ABS*	00000000 xmc_dac.c
08004e10 l     F .text	0000002e XMC_DAC_CH_EnableOutput
08004e40 l     F .text	0000002e XMC_DAC_CH_EnablePatternSignOutput
08004e70 l     F .text	0000002e XMC_DAC_CH_DisablePatternSignOutput
08004ea0 l     F .text	00000028 XMC_DAC_CH_SetRampStart
08004ec8 l     F .text	0000003e XMC_DAC_CH_SetRampStop
08004f08 l     F .text	00000034 XMC_DAC_CH_SetTrigger
08004f3c l     F .text	00000034 XMC_DAC_CH_SetMode
00000000 l    df *ABS*	00000000 xmc_dma.c
08005368 l     F .text	00000018 XMC_DMA_GetEventStatus
08005380 l     F .text	00000018 XMC_DMA_GetChannelsTransferCompleteStatus
08005398 l     F .text	00000018 XMC_DMA_GetChannelsBlockCompleteStatus
080053b0 l     F .text	00000018 XMC_DMA_GetChannelsSourceTransactionCompleteStatus
080053c8 l     F .text	00000018 XMC_DMA_GetChannelsDestinationTransactionCompleteStatus
080053e0 l     F .text	00000018 XMC_DMA_GetChannelsErrorStatus
00000000 l    df *ABS*	00000000 xmc_dsd.c
00000000 l    df *ABS*	00000000 xmc_ebu.c
08006748 l     F .text	00000028 XMC_EBU_Enable
00000000 l    df *ABS*	00000000 xmc_ecat.c
00000000 l    df *ABS*	00000000 xmc_eru.c
00000000 l    df *ABS*	00000000 xmc_eth_mac.c
08006b40 l     F .text	0000003e XMC_ETH_MAC_Reset
08006b80 l     F .text	0000002e XMC_ETH_MAC_SetAddress
08006bb0 l     F .text	00000024 XMC_SCU_CLOCK_GetSystemClockFrequency
08006bd4 l     F .text	00000010 XMC_SCU_CLOCK_GetEthernetClockFrequency
08006be4 l     F .text	00000024 XCM_ETH_MAC_IsNormalEvent
08006c08 l     F .text	00000024 XCM_ETH_MAC_IsAbnormalEvent
00000000 l    df *ABS*	00000000 xmc_fce.c
00000000 l    df *ABS*	00000000 xmc_gpio.c
00000000 l    df *ABS*	00000000 xmc_hrpwm.c
00000000 l    df *ABS*	00000000 xmc_i2c.c
08007cf8 l     F .text	0000001e XMC_USIC_CH_GetTransmitBufferStatus
08007d18 l     F .text	00000026 XMC_USIC_CH_SetMode
08007d40 l     F .text	00000020 XMC_I2C_CH_ClearStatusFlag
00000000 l    df *ABS*	00000000 xmc_i2s.c
080081d8 l     F .text	0000001e XMC_USIC_CH_GetTransmitBufferStatus
080081f8 l     F .text	00000026 XMC_USIC_CH_SetMode
08008220 l     F .text	00000020 XMC_I2S_CH_ClearStatusFlag
00000000 l    df *ABS*	00000000 xmc_ledts.c
00000000 l    df *ABS*	00000000 xmc_posif.c
080088fc l     F .text	00000018 XMC_POSIF_Stop
00000000 l    df *ABS*	00000000 xmc_rtc.c
08008b20 l     F .text	00000018 XMC_SCU_GetMirrorStatus
00000000 l    df *ABS*	00000000 xmc_sdmmc.c
00000000 l    df *ABS*	00000000 xmc_spi.c
080091f4 l     F .text	0000001e XMC_USIC_CH_GetTransmitBufferStatus
08009214 l     F .text	00000026 XMC_USIC_CH_SetMode
0800923c l     F .text	00000020 XMC_SPI_CH_ClearStatusFlag
00000000 l    df *ABS*	00000000 xmc_uart.c
080095c4 l     F .text	0000001e XMC_USIC_CH_GetTransmitBufferStatus
080095e4 l     F .text	00000026 XMC_USIC_CH_SetMode
0800960c l     F .text	00000016 XMC_UART_CH_GetStatusFlag
08009624 l     F .text	0000001a XMC_UART_CH_ClearStatusFlag
00000000 l    df *ABS*	00000000 xmc_usbd.c
080098cc l     F .text	000000e8 XMC_USBD_lReadFifo
080099b4 l     F .text	000000a4 XMC_USBD_lWriteFifo
08009a58 l     F .text	0000007c XMC_USBD_lFlushTXFifo
08009ad4 l     F .text	00000068 XMC_USBD_lFlushRXFifo
08009b3c l     F .text	0000006c XMC_USBD_lAssignTXFifo
08009ba8 l     F .text	00000038 XMC_USBD_lUnassignFifo
08009be0 l     F .text	00000178 XMC_USBD_lStartReadXfer
08009d58 l     F .text	00000194 XMC_USBD_lStartWriteXfer
08009eec l     F .text	00000150 XMC_USBD_lHandleUSBReset
0800a03c l     F .text	00000048 XMC_USBD_lHandleOTGInt
0800a740 l     F .text	00000028 XMC_USBD_lClearEventOTG
0800a084 l     F .text	00000078 XMC_USBD_lHandleEnumDone
0800a0fc l     F .text	000001bc XMC_USBD_lHandleOEPInt
0800a2b8 l     F .text	000001bc XMC_USBD_lHandleIEPInt
0800a474 l     F .text	00000084 XMC_USBD_lHandleRxFLvl
00000000 l    df *ABS*	00000000 xmc_usbh.c
0800b45c l     F .text	00000030 NVIC_EnableIRQ
0800b48c l     F .text	00000034 NVIC_DisableIRQ
0800b4c0 l     F .text	00000034 NVIC_ClearPendingIRQ
0800b4f4 l     F .text	00000054 NVIC_SetPriority
0800ef00 l     O .text	00000004 xmc_usbh_driver_version
0800ef04 l     O .text	00000004 xmc_usbh_driver_capabilities
20000008 l     O .data	00000014 XMC_USBH0_device
200000b8 l     O .bss	00000038 XMC_USBH0_dfifo_ptr
0800b548 l     F .text	00000014 XMC_lClockGating
0800b55c l     F .text	00000024 XMC_lTriggerHaltChannel
0800b580 l     F .text	00000270 XMC_lStartTransfer
0800b7f0 l     F .text	00000028 XMC_USBH_GetVersion
0800b818 l     F .text	00000022 XMC_USBH_GetCapabilities
0800b83c l     F .text	0000007c XMC_USBH_Initialize
0800b8b8 l     F .text	0000001c XMC_USBH_Uninitialize
0800b8d4 l     F .text	00000204 XMC_USBH_PowerControl
0800bad8 l     F .text	0000009c XMC_USBH_PortVbusOnOff
0800bb74 l     F .text	000000a8 XMC_USBH_PortReset
0800bc1c l     F .text	00000074 XMC_USBH_PortSuspend
0800bc90 l     F .text	00000094 XMC_USBH_PortResume
0800bd24 l     F .text	00000088 XMC_USBH_PortGetState
0800bdac l     F .text	00000148 XMC_USBH_PipeCreate
0800bef4 l     F .text	000000ac XMC_USBH_PipeModify
0800bfa0 l     F .text	00000084 XMC_USBH_PipeDelete
0800c024 l     F .text	00000078 XMC_USBH_PipeReset
0800c09c l     F .text	00000118 XMC_USBH_PipeTransfer
0800c1b4 l     F .text	00000040 XMC_USBH_PipeTransferGetResult
0800c1f4 l     F .text	000000d8 XMC_USBH_PipeTransferAbort
0800c2cc l     F .text	00000034 XMC_USBH_GetFrameNumber
00000000 l    df *ABS*	00000000 xmc_usic.c
0800c9f4 l     F .text	0000003c XMC_USIC_CH_SetInputTriggerCombinationMode
0800ca30 l     F .text	00000026 XMC_USIC_CH_SetBRGInputClockSource
00000000 l    df *ABS*	00000000 xmc_vadc.c
0800cecc l     F .text	0000006c XMC_VADC_GROUP_ExternalMuxControlInit
0800cf38 l     F .text	00000022 XMC_VADC_GROUP_ScanEnableArbitrationSlot
0800cf5c l     F .text	00000022 XMC_VADC_GROUP_ScanDisableArbitrationSlot
0800cf80 l     F .text	00000022 XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
0800cfa4 l     F .text	00000022 XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
0800cfc8 l     F .text	00000022 XMC_VADC_GROUP_QueueEnableArbitrationSlot
0800cfec l     F .text	00000022 XMC_VADC_GROUP_QueueDisableArbitrationSlot
0800d010 l     F .text	00000032 XMC_VADC_GROUP_QueueFlushEntries
0800ef50 l     O .text	00000010 g_xmc_vadc_group_array
00000000 l    df *ABS*	00000000 xmc_wdt.c
00000000 l    df *ABS*	00000000 syscalls.c
200000f4 l     O .bss	00000004 heap_ptr.4466
00000000 l    df *ABS*	00000000 main.c
0800e7fc l     F .text	00000054 NVIC_SetPriority
0800e850 l     F .text	00000044 SysTick_Config
0800e894 l     F .text	00000022 XMC_GPIO_ToggleOutput
200000f8 l     O .bss	00000004 ticks.6971
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _arm_muldivsf3.o
00000000 l    df *ABS*	00000000 _arm_fixunssfsi.o
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
2000001c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
20000080 l       .data	00000000 __init_array_end
20000080 l       .data	00000000 __preinit_array_end
20000080 l       .data	00000000 __init_array_start
20000080 l       .data	00000000 __preinit_array_start
0800dbf4 g     F .text	0000003e XMC_VADC_GLOBAL_BackgroundSelectGating
08001730 g     F .text	00000024 XMC_SCU_INTERRUPT_DisableNmiRequest
08003994 g     F .text	000000c2 XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent
08008b60 g     F .text	00000028 XMC_RTC_Stop
08001330 g     F .text	00000020 XMC_SCU_DisableTemperatureSensor
08000ac4 g     F .text	00000070 XMC_FLASH_EraseUCB
30000e00 g       DSRAM2_BSS	00000000 Heap_Bank2_Start
080002b0  w    F .text	00000002 VADC0_C0_3_IRQHandler
00000000 g       *ABS*	00000000 __data2_size
080002b0  w    F .text	00000002 DSD0_7_IRQHandler
08002330 g     F .text	00000064 XMC_SCU_CLOCK_EnableLowPowerOscillator
080034ec g     F .text	0000001c XMC_CCU4_EnableModule
0800dc34 g     F .text	000000b4 XMC_VADC_GLOBAL_BackgroundAbortSequence
00000080 g       *ABS*	00000000 __data_size
08000000 g     O .text	00000200 __Vectors
080002b0  w    F .text	00000002 DebugMon_Handler
08006988 g     F .text	00000034 XMC_ERU_ETL_SetStatusFlagMode
080040c0 g     F .text	00000036 XMC_CCU8_SetMultiChannelShadowTransferMode
08004878 g     F .text	0000002c XMC_CCU8_SLICE_GetTimerCompareMatch
0800141c g     F .text	00000024 XMC_SCU_IsTemperatureSensorBusy
0800c300 g     F .text	00000660 XMC_USBH_HandleIrq
080011d4 g     F .text	0000001c XMC_SCU_INTERRUPT_ClearEventStatus
08007f78 g     F .text	0000004c XMC_I2C_CH_MasterStop
08001c10 g     F .text	00000028 XMC_SCU_CLOCK_SetCcuClockDivider
08006880 g     F .text	0000002a XMC_ERU_OGU_Init
080072f4 g     F .text	0000004e XMC_ETH_MAC_FlushTx
080006e8 g     F .text	00000044 XMC_FLASH_lWritePageCommand
080052c8 g     F .text	0000009e XMC_DAC_CH_SetPattern
080002b0  w    F .text	00000002 VADC0_C0_0_IRQHandler
080023c4 g     F .text	00000030 XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput
08003560 g     F .text	00000034 XMC_CCU4_SetModuleClock
080016a0 g     F .text	00000024 XMC_SCU_PARITY_Disable
080002b0  w    F .text	00000002 CAN0_4_IRQHandler
080002b0  w    F .text	00000002 VADC0_G2_0_IRQHandler
08007130 g     F .text	000000a0 XMC_ETH_MAC_SetManagmentClockDivider
08000674 g     F .text	00000024 XMC_ERU_Disable
0c00efe8 g       *ABS*	00000000 __data2_load
080016c4 g     F .text	00000024 XMC_SCU_PARITY_EnableTrapGeneration
0800d870 g     F .text	00000040 XMC_VADC_GROUP_ScanSelectTrigger
080002b0  w    F .text	00000002 USIC0_5_IRQHandler
08006394 g     F .text	00000016 XMC_DSD_Disable
08006adc g     F .text	0000002a XMC_ERU_OGU_DisablePeripheralTrigger
080008d4 g     F .text	00000030 XMC_FLASH_EnableEvent
080026d8 g     F .text	0000001c XMC_SCU_CLOCK_StopSystemPll
08006b08 g     F .text	00000036 XMC_ERU_OGU_SetServiceRequestMode
080002b0  w    F .text	00000002 POSIF0_0_IRQHandler
080002b0  w    F .text	00000002 POSIF1_0_IRQHandler
080002b0  w    F .text	00000002 HardFault_Handler
08003738 g     F .text	00000034 XMC_CCU4_SLICE_LoadConfig
08002190 g     F .text	0000004c XMC_SCU_HIB_SetWakeupTriggerInput
0800d784 g     F .text	0000004e XMC_VADC_GROUP_TriggerServiceRequest
08003920 g     F .text	00000072 XMC_CCU4_SLICE_TrapConfig
0800d664 g     F .text	0000003e XMC_VADC_GROUP_DisableChannelSyncRequest
08009734 g     F .text	0000004c XMC_UART_CH_Transmit
0800178c g     F .text	00000038 XMC_SCU_RESET_DeassertPeripheralReset
08008cd0 g     F .text	00000080 XMC_RTC_GetTimeStdFormat
08007db0 g     F .text	0000003e XMC_I2C_CH_SetSlaveAddress
08002440 g     F .text	00000050 XMC_SCU_CLOCK_EnableHighPerformanceOscillator
08008ed4 g     F .text	00000028 XMC_SDMMC_GetPowerStatus
0800e1ec g     F .text	0000005c XMC_VADC_GROUP_ChannelIsResultOutOfBounds
0c00ef68 g       *ABS*	00000000 __data_load
08006960 g     F .text	00000026 XMC_ERU_ETL_GetEdgeDetection
08003c10 g     F .text	0000008a XMC_CCU4_SLICE_GetLastCapturedTimerValue
08001c60 g     F .text	00000028 XMC_SCU_CLOCK_SetPeripheralClockDivider
08000934 g     F .text	00000068 XMC_FLASH_ProgramPage
080002b0  w    F .text	00000002 VADC0_G1_1_IRQHandler
0800ecc8 g     F .text	00000136 .hidden __divsf3
0800e368 g     F .text	0000004a XMC_VADC_GROUP_ChannelSetEventInterruptNode
0800e8b8 g     F .text	0000003c SysTick_Handler
08006c2c g     F .text	000000ac XMC_ETH_MAC_Init
0800e248 g     F .text	00000042 XMC_VADC_GROUP_ChannelSetInputReference
0800de70 g     F .text	00000040 XMC_VADC_GROUP_QueueSelectGating
08008f8c g     F .text	00000042 XMC_SDMMC_EnableEventStatus
08000c88 g     F .text	00000084 XMC_FLASH_VerifyWriteProtection
2000ffc0 g       .no_init	00000000 Heap_Bank1_End
080002b0  w    F .text	00000002 PendSV_Handler
08007344 g     F .text	0000004e XMC_ETH_MAC_FlushRx
08003bec g     F .text	00000022 XMC_CCU4_SLICE_GetCaptureRegisterValue
0800637c g     F .text	00000016 XMC_DSD_Enable
080002b0  w    F .text	00000002 NMI_Handler
0800ef68 g       .text	00000000 __exidx_end
080002b0  w    F .text	00000002 USIC1_3_IRQHandler
080002b0  w    F .text	00000002 CCU40_2_IRQHandler
10000800 g       PSRAM_DATA	00000000 __data3_start
08007580 g     F .text	00000074 XMC_ETH_MAC_ReturnTxDescriptor
08002014 g     F .text	00000030 XMC_SCU_HIB_EnableInternalSlowClock
0800a4f8 g     F .text	00000150 XMC_USBD_IRQHandler
0800cbf8 g     F .text	00000050 XMC_USIC_CH_ConfigExternalInputSignalToBRG
0800ee40 g     F .text	0000000c __errno
080002b0  w    F .text	00000002 SCU_0_IRQHandler
080002b0  w    F .text	00000002 ERU0_0_IRQHandler
08001ea4 g     F .text	0000001c XMC_SCU_CLOCK_StopUsbPll
08006028 g     F .text	0000003a XMC_DMA_CH_DisableDestinationAddressReload
08004fd8 g     F .text	00000048 XMC_DAC_CH_Init
08008b38 g     F .text	00000028 XMC_RTC_Start
08001e30 g     F .text	00000074 XMC_SCU_CLOCK_StartUsbPll
08003820 g     F .text	00000034 XMC_CCU4_SLICE_GateConfig
0800ca58 g     F .text	0000009c XMC_USIC_CH_Enable
0800d580 g     F .text	00000068 XMC_VADC_GROUP_IgnoreSlaveReadiness
0800a794 g     F .text	00000030 XMC_USBD_ClearEventOUTEP
0800d350 g     F .text	00000068 XMC_VADC_GROUP_Init
0800d6a4 g     F .text	0000002c XMC_VADC_GROUP_IsConverterBusy
080002b0  w    F .text	00000002 CCU41_0_IRQHandler
08002b40 g     F .text	000000d6 XMC_CAN_Init
0800748c g     F .text	0000005a XMC_ETH_MAC_ClearEventStatus
0800d7d4 g     F .text	0000009c XMC_VADC_GROUP_ScanInit
0800cb18 g     F .text	000000e0 XMC_USIC_CH_SetBaudrate
0800e950 g     F .text	00000160 .hidden __aeabi_fadd
08005684 g     F .text	0000005c XMC_DMA_GetOverrunStatus
08008b88 g     F .text	00000038 XMC_RTC_SetPrescaler
0800e94c g     F .text	00000164 .hidden __subsf3
080002b0  w    F .text	00000002 USIC1_5_IRQHandler
08000300  w    F .text	00000060 SystemCoreSetup
08001ab8 g     F .text	00000028 XMC_SCU_CLOCK_SetUsbClockSource
0800cde8 g     F .text	0000003a XMC_USIC_CH_RXFIFO_SetInterruptNodePointer
08001f60 g     F .text	00000058 XMC_SCU_HIB_EnableHibernateDomain
080002b0  w    F .text	00000002 DSD0_4_IRQHandler
080037ec g     F .text	00000034 XMC_CCU4_SLICE_CountConfig
08001a70 g     F .text	00000020 XMC_SCU_CLOCK_GetPeripheralClockFrequency
080084a4 g     F .text	00000038 XMC_I2S_CH_EnableEvent
08005b98 g     F .text	0000003a XMC_DMA_CH_Suspend
080085a8 g     F .text	00000054 XMC_LEDTS_InitTSBasic
00000508 g       *ABS*	00000000 __bss_size
08009014 g     F .text	00000048 XMC_SDMMC_EnableEvent
08005488 g     F .text	00000094 XMC_DMA_IsEnabled
08007fc4 g     F .text	0000004c XMC_I2C_CH_MasterTransmit
0800230c g     F .text	00000024 XMC_SCU_CLOCK_IsLowPowerOscillatorStable
08005ce4 g     F .text	0000004c XMC_DMA_CH_ClearEventStatus
0800a824 g     F .text	00000066 XMC_USBD_GetCapabilities
0800da08 g     F .text	00000038 XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
08001228 g     F .text	00000024 XMC_SCU_ReadGPR
0800ee98 g     F .text	00000016 memcpy
080023f4 g     F .text	00000034 XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput
080002b0  w    F .text	00000002 CCU80_1_IRQHandler
080041ac g     F .text	00000034 XMC_CCU8_SLICE_LoadConfig
08007a34 g     F .text	0000005e XMC_FCE_CalculateCRC32
08001d30 g     F .text	00000020 XMC_SCU_CLOCK_EnableClock
0800deb0 g     F .text	0000004e XMC_VADC_GROUP_QueueGetLength
08003f38 g     F .text	00000016 XMC_CCU8_DisableModule
08003d30 g     F .text	0000003a XMC_CCU4_SLICE_SetPrescaler
08008dbc g     F .text	00000090 XMC_RTC_SetAlarmStdFormat
0800d044 g     F .text	0000000e XMC_VADC_GLOBAL_EnableModule
08001374 g     F .text	00000024 XMC_SCU_IsTemperatureSensorReady
0800914c g     F .text	00000026 XMC_SDMMC_SendCommand
08001398 g     F .text	0000004c XMC_SCU_StartTemperatureMeasurement
0800ad74 g     F .text	0000004c XMC_USBD_DeviceSetAddress
08009354 g     F .text	0000006c XMC_SPI_CH_Transmit
2000017c g     O .bss	00000020 dma0_event_handlers
08009780 g     F .text	00000032 XMC_UART_CH_GetReceivedData
2000ffc0 g     O .no_init	00000004 SystemCoreClock
08002074 g     F .text	00000030 XMC_SCU_HIB_ClearEventStatus
08008664 g     F .text	00000024 XMC_LEDTS_StartCounter
30000000 g       DSRAM2_DATA	00000000 __data2_start
0000f800 g       *ABS*	00000000 Heap_Bank3_Size
080089bc g     F .text	0000003a XMC_POSIF_HSC_Init
080002b0  w    F .text	00000002 CCU81_0_IRQHandler
08000d2c g     F .text	00000140 XMC_GPIO_Init
08009118 g     F .text	00000034 XMC_SDMMC_GetR2Response
0800640c g     F .text	0000001c XMC_DSD_Init
0800376c g     F .text	0000007e XMC_CCU4_SLICE_ModulationConfig
080013e4 g     F .text	00000038 XMC_SCU_GetTemperatureMeasurement
080036e0 g     F .text	00000056 XMC_CCU4_SLICE_StopConfig
08008c04 g     F .text	00000028 XMC_RTC_GetTime
0800c960 g     F .text	00000018 XMC_USBH_GetInterruptStatus
0800eab8 g     F .text	0000001c .hidden __aeabi_i2f
0800430c g     F .text	00000034 XMC_CCU8_SLICE_Capture0Config
080002b0  w    F .text	00000002 UsageFault_Handler
0800d264 g     F .text	00000056 XMC_VADC_GLOBAL_BindGroupToEMux
08008efc g     F .text	0000001c XMC_SDMMC_Enable
08001ec0 g     F .text	0000004c XMC_SCU_CLOCK_SetBackupClockCalibrationMode
0800a648 g     F .text	00000018 XMC_USBD_Enable
00000000 g       *ABS*	00000000 __ram_code_size
080015f8 g     F .text	00000014 XMC_SCU_TRAP_GetStatus
0c00ef68 g       *ABS*	00000000 __data3_load
08003f50 g     F .text	0000003e XMC_CCU8_Init
0800e334 g     F .text	00000032 XMC_VADC_GROUP_ChannelTriggerEvent
080065b0 g     F .text	00000030 XMC_DSD_CH_AuxFilter_Init
08000a28 g     F .text	00000058 XMC_FLASH_lRepairPhysicalSectorCommand
080002b0  w    F .text	00000002 USIC0_0_IRQHandler
080065e0 g     F .text	0000005e XMC_DSD_CH_Integrator_Init
200000f0  w    O .bss	00000004 __dso_handle
08002428 g     F .text	00000018 XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus
080007c8 g     F .text	00000064 XMC_FLASH_lDisableSectorWriteProtectionCommand
0800d100 g     F .text	00000060 XMC_VADC_GLOBAL_StartupCalibration
08002c80 g     F .text	0000003e XMC_CAN_MO_GetIdentifier
08008064 g     F .text	0000004c XMC_I2C_CH_MasterReceiveAck
080002b0  w    F .text	00000002 POSIF1_1_IRQHandler
080073cc g     F .text	00000072 XMC_ETH_MAC_EnableEvent
08004fa8 g     F .text	00000030 XMC_DAC_IsEnabled
080024d0 g     F .text	0000001c XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput
0800495c g     F .text	00000040 XMC_CCU8_SLICE_SetPassiveLevel
0800328c g     F .text	0000004e XMC_CAN_TXFIFO_ConfigMOBaseObject
0800958c g     F .text	00000038 XMC_SPI_CH_DisableEvent
0800a7c4 g     F .text	00000030 XMC_USBD_EnableEventOUTEP
0800d9b4 g     F .text	00000052 XMC_VADC_GROUP_ScanGetNumChannelsPending
08002ab0 g     F .text	0000003c XMC_CAN_AllocateMOtoNodeList
080060a0 g     F .text	00000044 XMC_DMA_CH_SetEventHandler
0800e66c g     F .text	0000005e XMC_VADC_GROUP_GetResultFifoHead
080092c8 g     F .text	0000003a XMC_SPI_CH_SetBaudrate
080016e8 g     F .text	00000024 XMC_SCU_PARITY_DisableTrapGeneration
080063dc g     F .text	0000002e XMC_DSD_DisableClock
0800ef68 g       .text	00000000 __exidx_start
0800b424 g     F .text	00000038 XMC_USBD_IsEnumDone
080002b0  w    F .text	00000002 ERU0_2_IRQHandler
080002b0  w    F .text	00000002 CCU81_1_IRQHandler
30000000 g       DSRAM2_DATA	00000000 __data2_end
0800ef64 g     O .text	00000004 _global_impure_ptr
10000800 g       PSRAM_DATA	00000000 __data3_end
080002b0  w    F .text	00000002 ERU1_1_IRQHandler
080002b0  w    F .text	00000002 VADC0_G2_3_IRQHandler
0800ee4c g     F .text	0000004c __libc_init_array
20000588 g       .bss	00000000 __bss_end
080002b0  w    F .text	00000002 VADC0_G2_2_IRQHandler
0800af90 g     F .text	000002f8 XMC_USBD_EndpointConfigure
0800e0c8 g     F .text	000000ca XMC_VADC_GROUP_ChannelInit
0800855c g     F .text	0000004c XMC_LEDTS_InitLED
08002044 g     F .text	00000030 XMC_SCU_HIB_DisableInternalSlowClock
08008a84 g     F .text	00000052 XMC_POSIF_SelectInputSource
0800e004 g     F .text	00000052 XMC_VADC_GROUP_QueueGetNextChannel
0800e788 g     F .text	00000068 _sbrk
00000000 g       *ABS*	00000000 __data3_size
0800e45c g     F .text	0000003c XMC_VADC_GROUP_AddResultToFifo
0800d0b8 g     F .text	00000048 XMC_VADC_GLOBAL_InputClassInit
0800ab38 g     F .text	00000034 XMC_USBD_DeviceDisconnect
080086f4 g     F .text	0000001c XMC_LEDTS_ClearInterruptFlag
080049c8 g     F .text	0000002e XMC_CCU8_SLICE_ConfigureDeadTime
0800551c g     F .text	0000009c XMC_DMA_EnableRequestLine
0800785c g     F .text	0000001a XMC_ETH_MAC_GetPTPStatus
080067a4 g     F .text	0000002c XMC_EBU_ConfigureSdram
080002b0  w    F .text	00000002 CCU42_3_IRQHandler
0800e7f0 g     F .text	0000000c _init
0800d6d0 g     F .text	00000050 XMC_VADC_GROUP_SetBoundaries
0800e2cc g     F .text	00000040 XMC_VADC_GROUP_ChannelSetIclass
08007ae0 g     F .text	000000a0 XMC_FCE_LittleEndian16bit
08001628 g     F .text	0000001c XMC_SCU_TRAP_ClearStatus
08007ea8 g     F .text	00000068 XMC_I2C_CH_MasterStart
08001f0c g     F .text	00000018 XMC_SCU_POWER_EnableUsb
200003b8 g     O .bss	000001c0 pipe
0800cdac g     F .text	0000003a XMC_USIC_CH_TXFIFO_SetInterruptNodePointer
08004a6c g     F .text	00000030 XMC_CCU8_SLICE_ConfigureStatusBitOutput
08002174 g     F .text	0000001c XMC_SCU_HIB_EnterHibernateStateEx
08001d70 g     F .text	0000002c XMC_SCU_CLOCK_IsClockEnabled
0800170c g     F .text	00000024 XMC_SCU_INTERRUPT_EnableNmiRequest
080002b0  w    F .text	00000002 ERU0_3_IRQHandler
080002b0  w    F .text	00000002 DSD0_5_IRQHandler
08007210 g     F .text	00000070 XMC_ETH_MAC_ReadPhy
080008b8 g     F .text	0000001c XMC_FLASH_GetStatus
08002ea8 g     F .text	00000070 XMC_CAN_MO_UpdateData
08000e6c g     F .text	00000084 XMC_GPIO_SetOutputStrength
0800e94c g     F .text	00000164 .hidden __aeabi_fsub
08008844 g     F .text	00000030 XMC_LEDTS_SetNumOfLEDColumns
08009330 g     F .text	00000024 XMC_SPI_CH_DisableSlaveSelect
08008010 g     F .text	00000054 XMC_I2C_CH_SlaveTransmit
08005f18 g     F .text	0000005a XMC_DMA_CH_TriggerDestinationRequest
08005c94 g     F .text	0000004e XMC_DMA_CH_DisableEvent
0800167c g     F .text	00000024 XMC_SCU_PARITY_Enable
08000c40 g     F .text	00000046 XMC_FLASH_VerifyReadProtection
2000019c g     O .bss	00000010 dma1_event_handlers
08000200 g     F .text	000000b0 Reset_Handler
08006aa4 g     F .text	00000036 XMC_ERU_OGU_EnablePeripheralTrigger
0800063c  w    F .text	00000014 OSCHP_GetFrequency
080002b0  w    F .text	00000002 CAN0_6_IRQHandler
10000000 g       Stack	00000000 __stack_start
080022d0 g     F .text	0000003c XMC_SCU_HIB_SetSR0Input
080002b0  w    F .text	00000002 CCU43_0_IRQHandler
080082e0 g     F .text	0000004a XMC_I2S_CH_SetBaudrate
0800eae4 g     F .text	0000007c .hidden __floatdisf
0800210c g     F .text	00000038 XMC_SCU_HIB_DisableEvent
0800df00 g     F .text	00000068 XMC_VADC_GROUP_QueueAbortSequence
08004634 g     F .text	0000003a XMC_CCU8_SLICE_SetTimerRepeatMode
08009524 g     F .text	00000032 XMC_SPI_CH_Stop
0800332c g     F .text	00000050 XMC_CAN_TXFIFO_ConfigMOSlaveObject
10000800 g       PSRAM_BSS	00000000 __bss3_start
0800843c g     F .text	00000032 XMC_I2S_CH_GetReceivedData
080002b0  w    F .text	00000002 VADC0_G0_1_IRQHandler
08006680 g     F .text	00000044 XMC_DSD_CH_GetResult_TS
080031a4 g     F .text	00000036 XMC_CAN_NODE_EnableEvent
0800444c g     F .text	000000c2 XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent
08001c38 g     F .text	00000028 XMC_SCU_CLOCK_SetCpuClockDivider
080076f0 g     F .text	0000004c XMC_ETH_MAC_GetPTPTime
200000fc g     O .bss	00000080 event_handler_list
080002b0  w    F .text	00000002 CCU81_2_IRQHandler
08003b7c g     F .text	00000036 XMC_CCU4_SLICE_SetTimerRepeatMode
0800795c g     F .text	00000024 XMC_FCE_Enable
0800d194 g     F .text	00000062 XMC_VADC_GLOBAL_SetIndividualBoundary
08008bc0 g     F .text	00000044 XMC_RTC_SetTime
08004038 g     F .text	00000050 XMC_CCU8_SLICE_CaptureInit
0800c9e8  w    F .text	0000000a XMC_USBH_osDelay
080002b0  w    F .text	00000002 USIC2_4_IRQHandler
0800da78 g     F .text	000000fc XMC_VADC_GLOBAL_BackgroundInit
08006488 g     F .text	00000082 XMC_DSD_CH_Init
0800082c g     F .text	00000060 XMC_FLASH_lDisableReadProtectionCommand
08001cb0 g     F .text	00000028 XMC_SCU_CLOCK_SetEbuClockDivider
08003008 g     F .text	0000019c XMC_CAN_MO_Receive
080002b0  w    F .text	00000002 CCU81_3_IRQHandler
08002508 g     F .text	00000018 XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus
08007d60 g     F .text	00000050 XMC_I2C_CH_Init
08004340 g     F .text	00000034 XMC_CCU8_SLICE_Capture1Config
08007e30 g     F .text	00000078 XMC_I2C_CH_SetBaudrate
0800e28c g     F .text	00000040 XMC_VADC_GROUP_ChannelSetResultRegister
00000000  w      *UND*	00000000 __sf_fake_stderr
080053f8 g     F .text	00000016 XMC_DMA_Init
08001908 g     F .text	0000002c XMC_SCU_CLOCK_GetCcuClockFrequency
30000000 g       DSRAM2_BSS	00000000 __bss2_start
08008994 g     F .text	00000026 XMC_POSIF_Init
0800d308 g     F .text	00000048 XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
08008958 g     F .text	0000003c XMC_POSIF_Disable
08003594 g     F .text	00000036 XMC_CCU4_SetMultiChannelShadowTransferMode
080002b0  w    F .text	00000002 CCU42_1_IRQHandler
08004a3c g     F .text	00000030 XMC_CCU8_SLICE_SetDeadTimePrescaler
0800ac58 g     F .text	00000078 XMC_USBD_EndpointRead
080087e8 g     F .text	00000036 XMC_LEDTS_SetCommonOscillationWindow
08007028 g     F .text	0000009e XMC_ETH_MAC_ReadFrame
08004214 g     F .text	00000090 XMC_CCU8_SLICE_ModulationConfig
08003684 g     F .text	0000005a XMC_CCU4_SLICE_StartConfig
20000578 g     O .bss	0000000e is_nack
080002b0  w    F .text	00000002 USIC1_1_IRQHandler
0800480c g     F .text	0000003a XMC_CCU8_SLICE_SetPrescaler
080071d0 g     F .text	00000020 XMC_ETH_MAC_Enable
08005d8c g     F .text	0000005a XMC_DMA_CH_EnableSourceGather
0800e090 g     F .text	00000036 XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
0800db74 g     F .text	0000003e XMC_VADC_GLOBAL_BackgroundSelectTrigger
00000000 g       *ABS*	00000000 __bss3_size
0800d1f8 g     F .text	00000038 XMC_VADC_GLOBAL_SetCompareValue
080002b0  w    F .text	00000002 USIC2_5_IRQHandler
08008fd0 g     F .text	00000042 XMC_SDMMC_DisableEventStatus
080002b0  w    F .text	00000002 CCU40_0_IRQHandler
0800337c g     F .text	00000064 XMC_CAN_GATEWAY_InitSourceObject
0800dd54 g     F .text	0000009c XMC_VADC_GROUP_QueueInit
08007280 g     F .text	00000074 XMC_ETH_MAC_WritePhy
08000000 g       .text	00000000 sText
08005154 g     F .text	00000082 XMC_DAC_CH_StartRampMode
08001b70 g     F .text	0000003c XMC_SCU_HIB_SetRtcClockSource
08001b30 g     F .text	00000040 XMC_SCU_CLOCK_SetSystemPllClockSource
0800e3f8 g     F .text	00000064 XMC_VADC_GROUP_ChannelSetBoundarySelection
08004088 g     F .text	00000036 XMC_CCU8_SLICE_SetOutPath
08007394 g     F .text	00000038 XMC_ETH_MAC_SetWakeUpFrameFilter
08004b14 g     F .text	00000018 XMC_LIST_Init
08005c10 g     F .text	00000034 XMC_DMA_CH_IsSuspended
08004374 g     F .text	00000034 XMC_CCU8_SLICE_DirectionConfig
10000800 g       Stack	00000000 __initial_sp
08009304 g     F .text	0000002c XMC_SPI_CH_EnableSlaveSelect
080002b0  w    F .text	00000002 CAN0_0_IRQHandler
0800c9b0 g     F .text	00000038 XMC_USBH_TurnOffResumeBit
10000800 g       .ram_code	00000000 __ram_code_end
080002b0  w    F .text	00000002 ERU1_0_IRQHandler
08007910 g     F .text	00000028 XMC_FCE_Init
08006d88 g     F .text	000000a0 XMC_ETH_MAC_InitTxDescriptors
08007520 g     F .text	0000005e XMC_ETH_MAC_ReturnRxDescriptor
080071f0 g     F .text	00000020 XMC_ETH_MAC_Disable
08003c9c g     F .text	00000036 XMC_CCU4_GetCapturedValueFromFifo
08008c2c g     F .text	000000a4 XMC_RTC_SetTimeStdFormat
0800982c g     F .text	00000038 XMC_UART_CH_DisableEvent
0800a88c g     F .text	0000023c XMC_USBD_Init
080002b0  w    F .text	00000002 CCU42_2_IRQHandler
08006ea0 g     F .text	00000188 XMC_ETH_MAC_SendFrame
080002b0  w    F .text	00000002 Default_Handler
080002b0  w    F .text	00000002 USIC1_4_IRQHandler
080017c4 g     F .text	00000044 XMC_SCU_RESET_IsPeripheralResetAsserted
0800e758 g     F .text	00000030 XMC_WDT_Init
0800cd30 g     F .text	00000044 XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit
080080b0 g     F .text	0000004c XMC_I2C_CH_MasterReceiveNack
0800544c g     F .text	0000003c XMC_DMA_Disable
0800d518 g     F .text	00000068 XMC_VADC_GROUP_CheckSlaveReadiness
0800e6cc g     F .text	0000005c XMC_VADC_GROUP_IsResultRegisterFifoHead
0800124c g     F .text	00000028 XMC_SCU_WriteGPR
080002b0  w    F .text	00000002 ERU1_3_IRQHandler
080050f4 g     F .text	00000060 XMC_DAC_CH_StartDataMode
08000ff8 g     F .text	00000030 XMC_RTC_EnableEvent
08004778 g     F .text	00000036 XMC_CCU8_GetCapturedValueFromFifo
080038f0 g     F .text	0000002e XMC_CCU4_SLICE_StatusBitOverrideConfig
08006770 g     F .text	00000032 XMC_EBU_Init
0800905c g     F .text	00000042 XMC_SDMMC_DisableEvent
08006458 g     F .text	0000002e XMC_DSD_Generator_Init
08005268 g     F .text	00000060 XMC_DAC_CH_StartNoiseMode
080031dc g     F .text	0000003a XMC_CAN_NODE_DisableEvent
080002b0  w    F .text	00000002 USIC1_0_IRQHandler
080002b0  w    F .text	00000002 POSIF0_1_IRQHandler
08008710 g     F .text	0000006a XMC_LEDTS_SetLEDLinePattern
080019a4 g     F .text	00000058 XMC_SCU_CLOCK_GetWdtClockFrequency
0800d064 g     F .text	00000054 XMC_VADC_GLOBAL_Init
08001e10 g     F .text	00000020 XMC_SCU_CLOCK_DisableUsbPll
0800eab8 g     F .text	0000001c .hidden __floatsisf
0800dce8 g     F .text	0000006c XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
08004510 g     F .text	000000d2 XMC_CCU8_SLICE_ConfigureEvent
080002b0  w    F .text	00000002 VADC0_G0_0_IRQHandler
080002b0  w    F .text	00000002 DSD0_2_IRQHandler
0800197c g     F .text	00000028 XMC_SCU_CLOCK_GetEbuClockFrequency
080002b0  w    F .text	00000002 CCU80_3_IRQHandler
080002b0  w    F .text	00000002 CCU41_3_IRQHandler
08000360  w    F .text	00000208 SystemCoreClockSetup
20000080 g       .data	00000000 __data_end
080078c4 g     F .text	0000004a XMC_ETH_MAC_GetTxTimeStamp
20000588 g       .bss	00000000 Heap_Bank1_Start
0800499c g     F .text	0000002c XMC_CCU8_SLICE_DeadTimeInit
08007c34 g     F .text	00000080 XMC_GPIO_SetMode
080008ac g     F .text	0000000c XMC_FLASH_ClearStatus
0800560c g     F .text	00000078 XMC_DMA_ClearRequestLine
0800b3f8 g     F .text	0000002c XMC_USBD_GetFrameNumber
08004f8c g     F .text	0000001c XMC_DAC_Disable
080050d0 g     F .text	00000024 XMC_DAC_CH_StartSingleValueMode
0800cd74 g     F .text	00000036 XMC_USIC_CH_SetInterruptNodePointer
08005020 g     F .text	00000060 XMC_DAC_CH_SetFrequency
080077b4 g     F .text	00000048 XMC_ETH_MAC_SetPTPAlarm
080077fc g     F .text	00000060 XMC_ETH_MAC_AdjustPTPClock
0800819c g     F .text	0000003c XMC_I2C_CH_DisableEvent
08001644 g     F .text	00000024 XMC_SCU_PARITY_ClearStatus
080026f4 g     F .text	00000030 XMC_SCU_CLOCK_StepSystemPllFrequency
08002cc0 g     F .text	0000004c XMC_CAN_MO_GetAcceptanceMask
0800e30c g     F .text	00000028 XMC_VADC_GROUP_ChannelGetResultRegister
080002b0  w    F .text	00000002 CCU80_2_IRQHandler
080002b0  w    F .text	00000002 VADC0_G1_3_IRQHandler
0800ecc8 g     F .text	00000136 .hidden __aeabi_fdiv
08006578 g     F .text	00000036 XMC_DSD_CH_Timestamp_Init
080085fc g     F .text	00000068 XMC_LEDTS_InitTSAdvanced
08002724 g     F .text	00000024 XMC_SCU_CLOCK_IsSystemPllLocked
08005f74 g     F .text	0000003a XMC_DMA_CH_EnableSourceAddressReload
08006154 g     F .text	00000228 XMC_DMA_IRQHandler
080042a4 g     F .text	00000034 XMC_CCU8_SLICE_CountConfig
08000650 g     F .text	00000024 XMC_ERU_Enable
080068ac g     F .text	0000004c XMC_ERU_ETL_SetInput
00000800 g       *ABS*	00000000 stack_size
080002b0  w    F .text	00000002 VADC0_G0_3_IRQHandler
08002748 g     F .text	00000058 XMC_SCU_INTERRUPT_SetEventHandler
08003218 g     F .text	00000074 XMC_CAN_TXFIFO_Transmit
08007440 g     F .text	0000004c XMC_ETH_MAC_DisableEvent
0800ef08 g     O .text	00000048 Driver_USBH0
0800abd0 g     F .text	00000088 XMC_USBD_EndpointReadStart
08002490 g     F .text	00000024 XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable
0800ead4 g     F .text	0000008c .hidden __floatundisf
080086c0 g     F .text	00000032 XMC_LEDTS_SetActivePADNo
08008914 g     F .text	00000044 XMC_POSIF_Enable
080046c8 g     F .text	00000022 XMC_CCU8_SLICE_GetCaptureRegisterValue
08004154 g     F .text	00000056 XMC_CCU8_SLICE_StopConfig
10000800 g       Stack	00000000 __stack_end
080063ac g     F .text	0000002e XMC_DSD_EnableClock
080097b4 g     F .text	00000042 XMC_UART_CH_Stop
08004b2c g     F .text	00000016 XMC_LIST_GetHead
080074e8 g     F .text	00000038 XMC_ETH_MAC_GetEventStatus
0800d470 g     F .text	00000036 XMC_VADC_GROUP_SetPowerMode
080009d0 g     F .text	00000058 XMC_FLASH_lErasePhysicalSectorCommand
08002394 g     F .text	00000030 XMC_SCU_CLOCK_DisableLowPowerOscillator
08008f18 g     F .text	0000001c XMC_SDMMC_Disable
0800eab0 g     F .text	00000024 .hidden __aeabi_ui2f
080002b0  w    F .text	00000002 GPDMA0_0_IRQHandler
08002d7c g     F .text	0000012c XMC_CAN_MO_Config
0800148c g     F .text	00000048 XMC_SCU_ReadFromRetentionMemory
0800925c g     F .text	0000006c XMC_SPI_CH_Init
080020d4 g     F .text	00000038 XMC_SCU_HIB_EnableEvent
080006b8 g     F .text	00000030 XMC_FLASH_lLoadPageCommand
0800e728 g     F .text	00000018 XMC_WDT_Enable
080002b0  w    F .text	00000002 PMU0_0_IRQHandler
0800d930 g     F .text	00000084 XMC_VADC_GROUP_ScanSequenceAbort
08005790 g     F .text	00000408 XMC_DMA_CH_Init
080002b0  w    F .text	00000002 CAN0_7_IRQHandler
080090c8 g     F .text	00000050 XMC_SDMMC_GetEvent
10000800 g       PSRAM_BSS	00000000 Heap_Bank3_Start
080002b0  w    F .text	00000002 DSD0_1_IRQHandler
080002b0  w    F .text	00000002 CCU41_2_IRQHandler
080069bc g     F .text	00000046 XMC_ERU_ETL_EnableOutputTrigger
080002b0  w    F .text	00000002 VADC0_C0_1_IRQHandler
08003bb4 g     F .text	00000036 XMC_CCU4_SLICE_SetTimerCountingMode
08001884 g     F .text	00000030 XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency
08006830 g     F .text	0000004e XMC_ERU_ETL_Init
08007f10 g     F .text	00000068 XMC_I2C_CH_MasterRepeatedStart
080060e4 g     F .text	00000038 XMC_DMA_CH_ClearSourcePeripheralRequest
0800da40 g     F .text	00000036 XMC_VADC_GROUP_ScanRemoveChannel
08003508 g     F .text	00000016 XMC_CCU4_DisableModule
080020a4 g     F .text	00000030 XMC_SCU_HIB_TriggerEvent
00000000  w      *UND*	00000000 __sf_fake_stdin
0800ab04 g     F .text	00000034 XMC_USBD_DeviceConnect
08008688 g     F .text	0000001c XMC_LEDTS_StopCounter
080002b0  w    F .text	00000002 CCU43_2_IRQHandler
080002b0  w    F .text	00000002 USIC2_2_IRQHandler
08004bb0 g     F .text	00000062 XMC_LIST_Remove
20000080 g       .bss	00000000 __bss_start
080090a0 g     F .text	00000026 XMC_SDMMC_ClearEvent
0800eeae g     F .text	00000010 memset
08002b0c g     F .text	00000034 XMC_CAN_Enable
080002b0  w    F .text	00000002 MemManage_Handler
080002b0  w    F .text	00000002 VADC0_G3_1_IRQHandler
0800e8f4 g     F .text	00000050 main
200001ac g     O .bss	00000004 usbd_init
080002b0  w    F .text	00000002 DAC0_0_IRQHandler
08006428 g     F .text	0000002e XMC_DSD_IsEnabled
080083e0 g     F .text	0000005c XMC_I2S_CH_Transmit
08008e4c g     F .text	00000074 XMC_RTC_GetAlarmStdFormat
080046ac g     F .text	0000001c XMC_CCU8_SLICE_SetTimerPeriodMatch
0800eae4 g     F .text	0000007c .hidden __aeabi_l2f
20000080 g     O .bss	0000001c XMC_USBD_EP_OUT_BUFFERSIZE
080015d4 g     F .text	00000024 XMC_SCU_TRAP_Disable
0800c978 g     F .text	00000038 XMC_USBH_Select_VBUS
08001178 g     F .text	00000024 XMC_SCU_INTERRUPT_DisableEvent
080048a4 g     F .text	000000b8 XMC_CCU8_SLICE_SetInterruptNode
080024b4 g     F .text	0000001c XMC_SCU_CLOCK_DisableHighPerformanceOscillator
0800d8b0 g     F .text	00000040 XMC_VADC_GROUP_ScanSelectTriggerEdge
08000a80 g     F .text	00000034 XMC_FLASH_ErasePhysicalSector
0800d160 g     F .text	00000034 XMC_VADC_GLOBAL_SetBoundaries
08005410 g     F .text	0000003c XMC_DMA_Enable
0800832c g     F .text	000000b2 XMC_I2S_CH_SetSystemWordLength
080002b0  w    F .text	00000002 SVC_Handler
080002b0  w    F .text	00000002 VADC0_G3_3_IRQHandler
0800105c g     F .text	0000002c XMC_RTC_ClearEvent
08003e1c g     F .text	00000032 XMC_CCU4_SLICE_SetPassiveLevel
0800d720 g     F .text	00000062 XMC_VADC_GROUP_SetIndividualBoundary
08001dc4 g     F .text	0000002c XMC_SCU_POWER_GetEVR33Voltage
0800119c g     F .text	00000024 XMC_SCU_INTERRUPT_TriggerEvent
080056e0 g     F .text	00000044 XMC_DMA_ClearOverrunStatus
08003638 g     F .text	0000004c XMC_CCU4_SLICE_CaptureInit
08002230 g     F .text	00000054 XMC_SCU_HIB_SetPinOutputLevel
080002b0  w    F .text	00000002 ERU1_2_IRQHandler
0800e518 g     F .text	00000036 XMC_VADC_GROUP_SetResultSubtractionValue
080002b0  w    F .text	00000002 CCU41_1_IRQHandler
0800ead4 g     F .text	0000008c .hidden __aeabi_ul2f
08000904 g     F .text	00000030 XMC_FLASH_DisableEvent
08000b34 g     F .text	00000020 XMC_FLASH_Reset
08009558 g     F .text	00000034 XMC_SPI_CH_EnableEvent
080002b0  w    F .text	00000002 DSD0_6_IRQHandler
08005fb0 g     F .text	0000003a XMC_DMA_CH_DisableSourceAddressReload
080002b0  w    F .text	00000002 CCU43_1_IRQHandler
20000000 g     O .data	00000004 VBUS_port
0800eb60 g     F .text	00000168 .hidden __mulsf3
080040f8 g     F .text	0000005a XMC_CCU8_SLICE_StartConfig
08002c18 g     F .text	00000066 XMC_CAN_MO_SetIdentifier
080086a4 g     F .text	0000001a XMC_LEDTS_ReadInterruptFlag
080002b0  w    F .text	00000002 VADC0_G1_2_IRQHandler
080035cc g     F .text	0000006c XMC_CCU4_SLICE_CompareInit
080002b0  w    F .text	00000002 USIC2_3_IRQHandler
0800a7f4 g     F .text	00000030 XMC_USBD_EnableEventINEP
08001bac g     F .text	0000003c XMC_SCU_HIB_SetStandbyClockSource
08001350 g     F .text	00000024 XMC_SCU_IsTemperatureSensorEnabled
08001f3c g     F .text	00000024 XMC_SCU_CLOCK_IsUsbPllLocked
0800a678 g     F .text	000000c8 XMC_USBD_ClearEvent
08001ae0 g     F .text	00000028 XMC_SCU_CLOCK_SetWdtClockSource
080002b0  w    F .text	00000002 CAN0_2_IRQHandler
080002dc  w    F .text	00000024 SystemInit
0800adc0 g     F .text	0000014c XMC_USBD_EndpointStall
00000040 g       *ABS*	00000000 no_init_size
08002aec g     F .text	00000020 XMC_CAN_Disable
0800eec0 g     O .text	00000040 Driver_USBD0
0800a660 g     F .text	00000018 XMC_USBD_Disable
08001274 g     F .text	00000038 XMC_SCU_EnableOutOfRangeComparator
08001be8 g     F .text	00000028 XMC_SCU_CLOCK_SetSystemClockDivider
080002b0  w    F .text	00000002 USIC2_0_IRQHandler
08003f90 g     F .text	00000034 XMC_CCU8_SetModuleClock
0800ab6c g     F .text	00000064 XMC_USBD_DeviceGetState
08007614 g     F .text	000000dc XMC_ETH_MAC_InitPTP
0800cc98 g     F .text	00000054 XMC_USIC_CH_RXFIFO_Configure
080075f4 g     F .text	0000001e XMC_ETH_MAC_SetVLANTag
0800692c g     F .text	00000034 XMC_ERU_ETL_SetEdgeDetection
08002f74 g     F .text	00000094 XMC_CAN_MO_ReceiveData
08001fb8 g     F .text	00000024 XMC_SCU_HIB_DisableHibernateDomain
0800160c g     F .text	0000001c XMC_SCU_TRAP_Trigger
08006cd8 g     F .text	000000ae XMC_ETH_MAC_InitRxDescriptors
0800caf4 g     F .text	00000022 XMC_USIC_CH_Disable
08008ec0 g     F .text	00000014 XMC_RTC_GetEventStatus
080019fc g     F .text	00000074 XMC_SCU_CLOCK_GetExternalOutputClockFrequency
0800e3b4 g     F .text	00000042 XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
08008874 g     F .text	0000001a XMC_LEDTS_ReadTSVAL
08004848 g     F .text	0000002e XMC_CCU8_SLICE_SetTimerCompareMatch
08001028 g     F .text	00000034 XMC_RTC_DisableEvent
0800d624 g     F .text	0000003e XMC_VADC_GROUP_EnableChannelSyncRequest
080002b0  w    F .text	00000002 VADC0_G0_2_IRQHandler
080080fc g     F .text	00000032 XMC_I2C_CH_GetReceivedData
08003d6c g     F .text	000000ae XMC_CCU4_SLICE_SetInterruptNode
080018b4 g     F .text	00000054 XMC_SCU_CLOCK_GetUsbPllClockFrequency
0800099c g     F .text	00000034 XMC_FLASH_EraseSector
080043d8 g     F .text	00000072 XMC_CCU8_SLICE_TrapConfig
0800b288 g     F .text	00000170 XMC_USBD_EndpointUnconfigure
08002560 g     F .text	00000178 XMC_SCU_CLOCK_StartSystemPll
0800e944 g     F .text	0000016c .hidden __aeabi_frsub
08005d30 g     F .text	0000005a XMC_DMA_CH_GetEventStatus
2000007c g     O .data	00000004 _impure_ptr
080028e4 g     F .text	000001cc XMC_CAN_NODE_NominalBitTimeConfigure
080068f8 g     F .text	00000034 XMC_ERU_ETL_SetSource
08001310 g     F .text	00000020 XMC_SCU_EnableTemperatureSensor
0800eb60 g     F .text	00000168 .hidden __aeabi_fmul
08006a2c g     F .text	0000004a XMC_ERU_OGU_EnablePatternDetection
08004670 g     F .text	0000003a XMC_CCU8_SLICE_SetTimerCountingMode
0800d8f0 g     F .text	00000040 XMC_VADC_GROUP_ScanSelectGating
0800d4a8 g     F .text	00000044 XMC_VADC_GROUP_SetSyncSlave
080055b8 g     F .text	00000054 XMC_DMA_DisableRequestLine
080002b0  w    F .text	00000002 VADC0_G2_1_IRQHandler
080079d4 g     F .text	00000060 XMC_FCE_CalculateCRC16
0800088c g     F .text	00000020 XMC_FLASH_lClearStatusCommand
08001440 g     F .text	0000004c XMC_SCU_WriteToRetentionMemory
0800e058 g     F .text	00000036 XMC_VADC_GROUP_QueueGetInterruptedChannel
080070c8 g     F .text	00000068 XMC_ETH_MAC_GetRxFrameSize
08000698 g     F .text	00000020 XMC_FLASH_lEnterPageModeCommand
0800d2bc g     F .text	0000004a XMC_VADC_GLOBAL_SetResultEventInterruptNode
080002b0  w    F .text	00000002 CAN0_3_IRQHandler
080032dc g     F .text	0000004e XMC_CAN_RXFIFO_ConfigMOBaseObject
08008518 g     F .text	00000044 XMC_LEDTS_InitGlobal
080002b0  w    F .text	00000002 ETH0_0_IRQHandler
0800e550 g     F .text	00000090 XMC_VADC_GROUP_SetResultInterruptNode
080047b0 g     F .text	0000005c XMC_CCU8_SLICE_EnableDithering
080093f4 g     F .text	00000130 XMC_SPI_CH_SetInterwordDelay
0800d4ec g     F .text	0000002a XMC_VADC_GROUP_SetSyncMaster
08002144 g     F .text	00000030 XMC_SCU_HIB_EnterHibernateState
08002284 g     F .text	0000004c XMC_SCU_HIB_SetInput0
08007938 g     F .text	00000024 XMC_FCE_Disable
08008130 g     F .text	00000032 XMC_I2C_CH_Stop
080002b0  w    F .text	00000002 USIC0_3_IRQHandler
080002b0  w    F .text	00000002 DSD0_0_IRQHandler
08007980 g     F .text	00000052 XMC_FCE_CalculateCRC8
08002520 g     F .text	00000020 XMC_SCU_CLOCK_EnableSystemPll
0800cc48 g     F .text	00000050 XMC_USIC_CH_TXFIFO_Configure
08004c50 g     F .text	000000aa XMC_PRIOARRAY_Init
080015b0 g     F .text	00000024 XMC_SCU_TRAP_Enable
08007cb4 g     F .text	00000044 XMC_GPIO_SetHardwareControl
08001d00 g     F .text	00000030 XMC_SCU_CLOCK_SetExternalOutputClockDivider
08001934 g     F .text	00000048 XMC_SCU_CLOCK_GetUsbClockFrequency
08005de8 g     F .text	0000003a XMC_DMA_CH_DisableSourceGather
0800ddf0 g     F .text	00000040 XMC_VADC_GROUP_QueueSelectTrigger
08009174 g     F .text	0000007e XMC_SDMMC_SetDataTransferMode
08001cd8 g     F .text	00000028 XMC_SCU_CLOCK_SetWdtClockDivider
0800acd0 g     F .text	000000a4 XMC_USBD_EndpointWrite
0800650c g     F .text	0000006c XMC_DSD_CH_MainFilter_Init
0800ccec g     F .text	00000044 XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit
080093c0 g     F .text	00000032 XMC_SPI_CH_GetReceivedData
08003b2c g     F .text	00000050 XMC_CCU4_SLICE_SetInput
080011f0 g     F .text	00000018 XMC_SCU_GetBootMode
08001b08 g     F .text	00000028 XMC_SCU_CLOCK_SetExternalOutputClockSource
080002b0  w    F .text	00000002 VADC0_C0_2_IRQHandler
08003888 g     F .text	00000034 XMC_CCU4_SLICE_Capture1Config
30000000 g     O DSRAM2_BSS	00000700 XMC_USBD_EP_OUT_BUFFER
2000ffc4 g     O .no_init	00000010 g_chipid
08007df0 g     F .text	0000003e XMC_I2C_CH_GetSlaveAddress
08003520 g     F .text	0000003e XMC_CCU4_Init
080002b0  w    F .text	00000002 CCU42_0_IRQHandler
08004f70 g     F .text	0000001c XMC_DAC_Enable
0800d230 g     F .text	00000034 XMC_VADC_GLOBAL_GetCompareResult
080027a0 g     F .text	00000060 XMC_SCU_IRQHandler
08002d0c g     F .text	00000070 XMC_CAN_MO_SetAcceptanceMask
0800611c g     F .text	00000038 XMC_DMA_CH_ClearDestinationPeripheralRequest
080002b0  w    F .text	00000002 FCE0_0_IRQHandler
0800d054 g     F .text	0000000e XMC_VADC_GLOBAL_DisableModule
30000e00 g       DSRAM2_BSS	00000000 __bss2_end
080038bc g     F .text	00000034 XMC_CCU4_SLICE_DirectionConfig
0800df68 g     F .text	0000009c XMC_VADC_GROUP_QueueRemoveChannel
08003fc4 g     F .text	00000074 XMC_CCU8_SLICE_CompareInit
08000f44 g     F .text	0000000e XMC_RTC_IsEnabled
080096f0 g     F .text	00000042 XMC_UART_CH_SetBaudrate
08008820 g     F .text	00000024 XMC_LEDTS_ReadFNCOL
08008164 g     F .text	00000038 XMC_I2C_CH_EnableEvent
080049f8 g     F .text	00000044 XMC_CCU8_SLICE_SetDeadTimeValue
080002b0  w    F .text	00000002 VADC0_G1_0_IRQHandler
0800ee00 g     F .text	0000003e .hidden __aeabi_f2uiz
0800de30 g     F .text	00000040 XMC_VADC_GROUP_QueueSelectTriggerEdge
08009864 g     F .text	00000068 XMC_USBD_lDeviceActive
080024ec g     F .text	0000001c XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput
0800ce24 g     F .text	00000054 XMC_USIC_Enable
080002b0  w    F .text	00000002 USB0_0_IRQHandler
080089f8 g     F .text	00000050 XMC_POSIF_QD_Init
08005724 g     F .text	0000003a XMC_DMA_CH_Disable
08008d50 g     F .text	00000044 XMC_RTC_SetAlarm
08006a78 g     F .text	0000002a XMC_ERU_OGU_DisablePatternDetection
08000f2c g     F .text	0000000c XMC_RTC_Enable
08000568  w    F .text	000000d4 SystemCoreClockUpdate
080002b0  w    F .text	00000002 CAN0_5_IRQHandler
0800eab0 g     F .text	00000024 .hidden __floatunsisf
08001df0 g     F .text	00000020 XMC_SCU_CLOCK_EnableUsbPll
0800e498 g     F .text	00000042 XMC_VADC_GROUP_SetResultFastCompareValue
08001668 g     F .text	00000014 XMC_SCU_PARITY_GetStatus
0800af0c g     F .text	00000084 XMC_USBD_EndpointAbort
08001808 g     F .text	0000007c XMC_SCU_CLOCK_GetSystemPllClockFrequency
08003854 g     F .text	00000034 XMC_CCU4_SLICE_Capture0Config
08008d94 g     F .text	00000028 XMC_RTC_GetAlarm
08006064 g     F .text	0000003a XMC_DMA_CH_RequestLastMultiblockTransfer
080002b0  w    F .text	00000002 CCU80_0_IRQHandler
08005080 g     F .text	00000050 XMC_DAC_CH_SetRampFrequency
080002b0  w    F .text	00000002 CCU40_1_IRQHandler
080002b0  w    F .text	00000002 USIC2_1_IRQHandler
08005c44 g     F .text	0000004e XMC_DMA_CH_EnableEvent
00000000  w      *UND*	00000000 __sf_fake_stdout
08003f1c g     F .text	0000001c XMC_CCU8_EnableModule
08007878 g     F .text	0000004a XMC_ETH_MAC_GetRxTimeStamp
08000bd0 g     F .text	00000070 XMC_FLASH_ConfirmProtection
08000770 g     F .text	00000058 XMC_FLASH_lEraseSectorCommand
080021dc g     F .text	00000054 XMC_SCU_HIB_SetPinMode
2000009c g     O .bss	0000001c XMC_USBD_EP_IN_BUFFERSIZE
0000fa38 g       *ABS*	00000000 Heap_Bank1_Size
08001a90 g     F .text	00000028 XMC_SCU_CLOCK_SetSystemClockSource
08004b7c g     F .text	00000034 XMC_LIST_Add
080012e4 g     F .text	0000002c XMC_SCU_CalibrateTemperatureSensor
080002b0  w    F .text	00000002 USIC0_1_IRQHandler
08006a04 g     F .text	00000028 XMC_ERU_ETL_DisableOutputTrigger
0800ee00 g     F .text	0000003e .hidden __fixunssfsi
30000700 g     O DSRAM2_BSS	00000700 XMC_USBD_EP_IN_BUFFER
200001b0 g     O .bss	00000208 xmc_device
080014d4 g     F .text	000000da XMC_SCU_CLOCK_Init
080002b0  w    F .text	00000002 VADC0_G3_2_IRQHandler
00007200 g       *ABS*	00000000 Heap_Bank2_Size
080002b0  w    F .text	00000002 CCU40_3_IRQHandler
080045e4 g     F .text	00000050 XMC_CCU8_SLICE_SetInput
0800ce78 g     F .text	00000054 XMC_USIC_Disable
08001d9c g     F .text	00000028 XMC_SCU_POWER_GetEVR13Voltage
080002b0  w    F .text	00000002 BusFault_Handler
08006640 g     F .text	0000003e XMC_DSD_CH_Rectify_Init
08004b44 g     F .text	00000038 XMC_LIST_GetTail
080067d0 g     F .text	0000005e XMC_EBU_ConfigureRegion
08008240 g     F .text	000000a0 XMC_I2S_CH_Init
080002b0  w    F .text	00000002 LEDTS0_0_IRQHandler
0800d5e8 g     F .text	0000003c XMC_VADC_GROUP_SetSyncSlaveReadySignal
080002b0  w    F .text	00000002 USIC0_4_IRQHandler
080002b0  w    F .text	00000002 CCU43_3_IRQHandler
080043a8 g     F .text	0000002e XMC_CCU8_SLICE_StatusBitOverrideConfig
0800d3b8 g     F .text	000000b8 XMC_VADC_GROUP_InputClassInit
080012ac g     F .text	00000038 XMC_SCU_DisableOutOfRangeComparator
08006e70 g     F .text	0000002e XMC_ETH_MAC_SetAddressHashFilter
08008f34 g     F .text	00000056 XMC_SDMMC_Init
0800773c g     F .text	00000078 XMC_ETH_MAC_UpdatePTPTime
0800e4dc g     F .text	0000003a XMC_VADC_GROUP_GetFastCompareResult
080002b0  w    F .text	00000002 ERU0_1_IRQHandler
0800e740 g     F .text	00000018 XMC_WDT_Disable
08001f24 g     F .text	00000018 XMC_SCU_POWER_DisableUsb
080002b0  w    F .text	00000002 VADC0_G3_0_IRQHandler
080084dc g     F .text	0000003c XMC_I2S_CH_DisableEvent
08001d50 g     F .text	00000020 XMC_SCU_CLOCK_DisableClock
20000000 g       .data	00000000 __data_start
08001154 g     F .text	00000024 XMC_SCU_INTERRUPT_EnableEvent
080011c0 g     F .text	00000014 XMC_SCU_INTERUPT_GetEventStatus
08004c14 g     F .text	0000003a XMC_LIST_Insert
10000800 g       PSRAM_BSS	00000000 __bss3_end
08005760 g     F .text	00000030 XMC_DMA_CH_IsEnabled
08000ab4 g     F .text	00000010 XMC_FLASH_RepairPhysicalSector
0800aac8 g     F .text	0000003c XMC_USBD_Uninitialize
08000b54 g     F .text	0000007c XMC_FLASH_InstallProtection
08004dac g     F .text	00000064 XMC_PRIOARRAY_Remove
08001208 g     F .text	00000020 XMC_SCU_SetBootMode
0800dbb4 g     F .text	00000040 XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
08006e28 g     F .text	00000048 XMC_ETH_MAC_SetAddressPerfectFilter
0c00ef68 g       *ABS*	00000000 __ram_code_load
080002b0  w    F .text	00000002 USIC1_2_IRQHandler
08007b80 g     F .text	000000b4 XMC_FCE_LittleEndian32bit
080041e0 g     F .text	00000034 XMC_CCU8_SLICE_LoadSelector
08003cd4 g     F .text	0000005c XMC_CCU4_SLICE_EnableDithering
08000f54 g     F .text	000000a4 XMC_RTC_Init
0800e194 g     F .text	00000058 XMC_VADC_GROUP_SetChannelAlias
080051d8 g     F .text	0000008e XMC_DAC_CH_StartPatternMode
080097f8 g     F .text	00000034 XMC_UART_CH_EnableEvent
080002b0  w    F .text	00000002 DSD0_3_IRQHandler
08005bd4 g     F .text	0000003a XMC_DMA_CH_Resume
080002b0  w    F .text	00000002 SDMMC0_0_IRQHandler
08005fec g     F .text	0000003a XMC_DMA_CH_EnableDestinationAddressReload
08008470 g     F .text	00000032 XMC_I2S_CH_Stop
080002b0  w    F .text	00000002 CAN0_1_IRQHandler
08005ebc g     F .text	0000005a XMC_DMA_CH_TriggerSourceRequest
08001754 g     F .text	00000038 XMC_SCU_RESET_AssertPeripheralReset
08005e24 g     F .text	0000005a XMC_DMA_CH_EnableDestinationScatter
08000f38 g     F .text	0000000c XMC_RTC_Disable
00000e00 g       *ABS*	00000000 __bss2_size
080002b0  w    F .text	00000002 USIC0_2_IRQHandler
080046ec g     F .text	0000008a XMC_CCU8_SLICE_GetLastCapturedTimerValue
080066c4 g     F .text	00000084 XMC_DSD_CH_GetResult_TS_Time
08005e80 g     F .text	0000003a XMC_DMA_CH_DisableDestinationScatter
08008a48 g     F .text	0000003a XMC_POSIF_MCM_Init
08001c88 g     F .text	00000028 XMC_SCU_CLOCK_SetUsbClockDivider
0800e950 g     F .text	00000160 .hidden __addsf3
10000800 g       .ram_code	00000000 __ram_code_start
08008ad8 g     F .text	00000048 XMC_POSIF_SetInterruptNode
20000004 g     O .data	00000004 VBUS_pin
08007a94 g     F .text	0000004a XMC_FCE_TriggerMismatch
080002b0  w    F .text	00000002 DAC0_1_IRQHandler
080042d8 g     F .text	00000034 XMC_CCU8_SLICE_GateConfig
08001fdc g     F .text	00000038 XMC_SCU_HIB_IsHibernateDomainEnabled
08003a58 g     F .text	000000d2 XMC_CCU4_SLICE_ConfigureEvent
0800e5e0 g     F .text	0000008c XMC_VADC_GROUP_GetResultFifoTail
0800a768 g     F .text	0000002c XMC_USBD_ClearEventINEP
08000d0c g     F .text	00000020 XMC_FLASH_ResumeProtection
08004cfc g     F .text	000000b0 XMC_PRIOARRAY_Add
080002b0  w    F .text	00000002 GPDMA1_0_IRQHandler
08002f18 g     F .text	0000005a XMC_CAN_MO_Transmit
0800072c g     F .text	00000044 XMC_FLASH_lWriteUCBPageCommand
08002540 g     F .text	00000020 XMC_SCU_CLOCK_DisableSystemPll
08009640 g     F .text	000000ae XMC_UART_CH_Init
0800877c g     F .text	0000006a XMC_LEDTS_SetColumnBrightness
08008890 g     F .text	0000006a XMC_LEDTS_SetOscillationWindow



Disassembly of section .text:

08000000 <__Vectors>:
sText():
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b9 e8 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
Reset_Handler():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:250
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:253

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:254
    blx  r0
 8000206:	4780      	blx	r0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:267
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:268
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:271

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:272
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:273
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:274
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:275
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:278

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:279
	ittt	ge
 8000218:	bfa2      	ittt	ge
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:280
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:281
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:282
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:284

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:285
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:298
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:299
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:302

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:303
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:304
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:305
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:306
	movs	r0, 0
 8000230:	2000      	movs	r0, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:309

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:310
	itt	ge
 8000234:	bfa4      	itt	ge
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:311
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:312
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:314

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:315
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:320
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:321
    blx  r0
 8000240:	4780      	blx	r0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:324
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:325
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
__copy_table_start__():
 8000248:	0c00ef68 	.word	0x0c00ef68
 800024c:	20000000 	.word	0x20000000
 8000250:	00000080 	.word	0x00000080
 8000254:	0c00efe8 	.word	0x0c00efe8
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c00ef68 	.word	0x0c00ef68
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c00ef68 	.word	0x0c00ef68
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
__zero_table_start__():
 8000278:	20000080 	.word	0x20000080
 800027c:	00000508 	.word	0x00000508
 8000280:	30000000 	.word	0x30000000
 8000284:	00000e00 	.word	0x00000e00
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
__zero_table_end__():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:250
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:253

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000294:	080002dd 	.word	0x080002dd
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:267
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:268
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:298
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:299
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:320
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	0800ee4d 	.word	0x0800ee4d
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:324
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	0800e8f5 	.word	0x0800e8f5

080002b0 <BusFault_Handler>:
GPDMA1_0_IRQHandler():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/startup_XMC4500.S:355
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <delay>:
delay():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:314

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:317
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	e003      	b.n	80002ca <delay+0x16>
__NOP():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/cmsis_gcc.h:375 (discriminator 3)
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80002c2:	bf00      	nop
delay():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:317 (discriminator 3)
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	3301      	adds	r3, #1
 80002c8:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:317 (discriminator 1)
 80002ca:	68fa      	ldr	r2, [r7, #12]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	429a      	cmp	r2, r3
 80002d0:	d3f7      	bcc.n	80002c2 <delay+0xe>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:321
  {
    __NOP();
  }
}
 80002d2:	bf00      	nop
 80002d4:	3714      	adds	r7, #20
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr

080002dc <SystemInit>:
SystemInit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:328
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002dc:	b598      	push	{r3, r4, r7, lr}
 80002de:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:329
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002e0:	4a06      	ldr	r2, [pc, #24]	; (80002fc <SystemInit+0x20>)
 80002e2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002e6:	4614      	mov	r4, r2
 80002e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:331

  SystemCoreSetup();
 80002ee:	f000 f807 	bl	8000300 <SystemCoreSetup>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:332
  SystemCoreClockSetup(); 
 80002f2:	f000 f835 	bl	8000360 <SystemCoreClockSetup>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:333
}
 80002f6:	bf00      	nop
 80002f8:	bd98      	pop	{r3, r4, r7, pc}
 80002fa:	bf00      	nop
 80002fc:	2000ffc4 	.word	0x2000ffc4

08000300 <SystemCoreSetup>:
SystemCoreSetup():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:336

__WEAK void SystemCoreSetup(void)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
__disable_irq():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/cmsis_gcc.h:71
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000306:	b672      	cpsid	i
SystemCoreSetup():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:341
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <SystemCoreSetup+0x54>)
 800030a:	4a13      	ldr	r2, [pc, #76]	; (8000358 <SystemCoreSetup+0x58>)
 800030c:	609a      	str	r2, [r3, #8]
__DSB():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/cmsis_gcc.h:429
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800030e:	f3bf 8f4f 	dsb	sy
__enable_irq():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/cmsis_gcc.h:60
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000312:	b662      	cpsie	i
SystemCoreSetup():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:351
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8000314:	4a0f      	ldr	r2, [pc, #60]	; (8000354 <SystemCoreSetup+0x54>)
 8000316:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <SystemCoreSetup+0x54>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	f023 0308 	bic.w	r3, r3, #8
 800031e:	6153      	str	r3, [r2, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:353

  temp = FLASH0->FCON;
 8000320:	4b0e      	ldr	r3, [pc, #56]	; (800035c <SystemCoreSetup+0x5c>)
 8000322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000326:	3314      	adds	r3, #20
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:354
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	f023 030f 	bic.w	r3, r3, #15
 8000332:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:355
  temp |= PMU_FLASH_WS;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f043 0303 	orr.w	r3, r3, #3
 800033a:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:356
  FLASH0->FCON = temp;
 800033c:	4b07      	ldr	r3, [pc, #28]	; (800035c <SystemCoreSetup+0x5c>)
 800033e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000342:	3314      	adds	r3, #20
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:357
}
 8000348:	bf00      	nop
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	e000ed00 	.word	0xe000ed00
 8000358:	08000000 	.word	0x08000000
 800035c:	58001000 	.word	0x58001000

08000360 <SystemCoreClockSetup>:
SystemCoreClockSetup():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:360

__WEAK void SystemCoreClockSetup(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:369
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000364:	4b75      	ldr	r3, [pc, #468]	; (800053c <SystemCoreClockSetup+0x1dc>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f003 0301 	and.w	r3, r3, #1
 800036c:	2b00      	cmp	r3, #0
 800036e:	d10c      	bne.n	800038a <SystemCoreClockSetup+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:371
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8000370:	4a72      	ldr	r2, [pc, #456]	; (800053c <SystemCoreClockSetup+0x1dc>)
 8000372:	4b72      	ldr	r3, [pc, #456]	; (800053c <SystemCoreClockSetup+0x1dc>)
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:373

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 800037c:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:373 (discriminator 1)
 800037e:	4b6f      	ldr	r3, [pc, #444]	; (800053c <SystemCoreClockSetup+0x1dc>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	2b00      	cmp	r3, #0
 8000388:	d0f9      	beq.n	800037e <SystemCoreClockSetup+0x1e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:380
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800038a:	4b6d      	ldr	r3, [pc, #436]	; (8000540 <SystemCoreClockSetup+0x1e0>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000392:	2b00      	cmp	r3, #0
 8000394:	d009      	beq.n	80003aa <SystemCoreClockSetup+0x4a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:382
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8000396:	4a6a      	ldr	r2, [pc, #424]	; (8000540 <SystemCoreClockSetup+0x1e0>)
 8000398:	4b69      	ldr	r3, [pc, #420]	; (8000540 <SystemCoreClockSetup+0x1e0>)
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003a0:	6093      	str	r3, [r2, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:383
    delay(DELAY_CNT_150US_50MHZ);
 80003a2:	f641 504c 	movw	r0, #7500	; 0x1d4c
 80003a6:	f7ff ff85 	bl	80002b4 <delay>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:430
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 80003aa:	4a66      	ldr	r2, [pc, #408]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 80003ac:	4b65      	ldr	r3, [pc, #404]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 80003ae:	685b      	ldr	r3, [r3, #4]
 80003b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003b4:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:433
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80003b6:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80003ba:	f7ff ff7b 	bl	80002b4 <delay>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:438

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80003be:	4a61      	ldr	r2, [pc, #388]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 80003c0:	4b60      	ldr	r3, [pc, #384]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003c8:	f023 0302 	bic.w	r3, r3, #2
 80003cc:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:442

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 80003ce:	4b5e      	ldr	r3, [pc, #376]	; (8000548 <SystemCoreClockSetup+0x1e8>)
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d029      	beq.n	800042e <SystemCoreClockSetup+0xce>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:444
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 80003da:	4a5b      	ldr	r2, [pc, #364]	; (8000548 <SystemCoreClockSetup+0x1e8>)
 80003dc:	4b5a      	ldr	r3, [pc, #360]	; (8000548 <SystemCoreClockSetup+0x1e8>)
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80003e4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80003e8:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:445
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 80003ea:	f000 f927 	bl	800063c <OSCHP_GetFrequency>
 80003ee:	4602      	mov	r2, r0
 80003f0:	4b56      	ldr	r3, [pc, #344]	; (800054c <SystemCoreClockSetup+0x1ec>)
 80003f2:	fba3 2302 	umull	r2, r3, r3, r2
 80003f6:	0d1b      	lsrs	r3, r3, #20
 80003f8:	3b01      	subs	r3, #1
 80003fa:	041b      	lsls	r3, r3, #16
 80003fc:	4952      	ldr	r1, [pc, #328]	; (8000548 <SystemCoreClockSetup+0x1e8>)
 80003fe:	4a52      	ldr	r2, [pc, #328]	; (8000548 <SystemCoreClockSetup+0x1e8>)
 8000400:	6852      	ldr	r2, [r2, #4]
 8000402:	4313      	orrs	r3, r2
 8000404:	604b      	str	r3, [r1, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:448

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8000406:	4a4f      	ldr	r2, [pc, #316]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 8000408:	4b4e      	ldr	r3, [pc, #312]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	f023 0301 	bic.w	r3, r3, #1
 8000410:	60d3      	str	r3, [r2, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:451

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000412:	4a4c      	ldr	r2, [pc, #304]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 8000414:	4b4b      	ldr	r3, [pc, #300]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800041c:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:453

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 800041e:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:453 (discriminator 1)
 8000420:	4b48      	ldr	r3, [pc, #288]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000428:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 800042c:	d1f8      	bne.n	8000420 <SystemCoreClockSetup+0xc0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:465
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 800042e:	4a45      	ldr	r2, [pc, #276]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 8000430:	4b44      	ldr	r3, [pc, #272]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:468

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 800043a:	4a42      	ldr	r2, [pc, #264]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 800043c:	4b41      	ldr	r3, [pc, #260]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	f043 0310 	orr.w	r3, r3, #16
 8000444:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:471

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000446:	4b3f      	ldr	r3, [pc, #252]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 8000448:	4a41      	ldr	r2, [pc, #260]	; (8000550 <SystemCoreClockSetup+0x1f0>)
 800044a:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:476
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 800044c:	4a3d      	ldr	r2, [pc, #244]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 800044e:	4b3d      	ldr	r3, [pc, #244]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000456:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:479

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000458:	4a3a      	ldr	r2, [pc, #232]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 800045a:	4b3a      	ldr	r3, [pc, #232]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	f023 0310 	bic.w	r3, r3, #16
 8000462:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:482

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8000464:	4a37      	ldr	r2, [pc, #220]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 8000466:	4b37      	ldr	r3, [pc, #220]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800046e:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:484

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000470:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:484 (discriminator 1)
 8000472:	4b34      	ldr	r3, [pc, #208]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f003 0304 	and.w	r3, r3, #4
 800047a:	2b00      	cmp	r3, #0
 800047c:	d0f9      	beq.n	8000472 <SystemCoreClockSetup+0x112>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:490
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 800047e:	4a31      	ldr	r2, [pc, #196]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 8000480:	4b30      	ldr	r3, [pc, #192]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	f023 0301 	bic.w	r3, r3, #1
 8000488:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:491
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 800048a:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:491 (discriminator 1)
 800048c:	4b2d      	ldr	r3, [pc, #180]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f003 0301 	and.w	r3, r3, #1
 8000494:	2b00      	cmp	r3, #0
 8000496:	d1f9      	bne.n	800048c <SystemCoreClockSetup+0x12c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:499
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8000498:	4a2e      	ldr	r2, [pc, #184]	; (8000554 <SystemCoreClockSetup+0x1f4>)
 800049a:	4b2e      	ldr	r3, [pc, #184]	; (8000554 <SystemCoreClockSetup+0x1f4>)
 800049c:	68db      	ldr	r3, [r3, #12]
 800049e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004a2:	60d3      	str	r3, [r2, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:506
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 80004a4:	4b2b      	ldr	r3, [pc, #172]	; (8000554 <SystemCoreClockSetup+0x1f4>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:507
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 80004aa:	4b2a      	ldr	r3, [pc, #168]	; (8000554 <SystemCoreClockSetup+0x1f4>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:508
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 80004b0:	4b28      	ldr	r3, [pc, #160]	; (8000554 <SystemCoreClockSetup+0x1f4>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	621a      	str	r2, [r3, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:509
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 80004b6:	4b27      	ldr	r3, [pc, #156]	; (8000554 <SystemCoreClockSetup+0x1f4>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	625a      	str	r2, [r3, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:510
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 80004bc:	4b25      	ldr	r3, [pc, #148]	; (8000554 <SystemCoreClockSetup+0x1f4>)
 80004be:	2200      	movs	r2, #0
 80004c0:	61da      	str	r2, [r3, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:511
  SCU_CLK->USBCLKCR = USBCLKDIV;
 80004c2:	4b24      	ldr	r3, [pc, #144]	; (8000554 <SystemCoreClockSetup+0x1f4>)
 80004c4:	2203      	movs	r2, #3
 80004c6:	619a      	str	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:516

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80004c8:	4a1e      	ldr	r2, [pc, #120]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 80004ca:	4b1e      	ldr	r3, [pc, #120]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004d2:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:518

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004d4:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 80004d6:	4a20      	ldr	r2, [pc, #128]	; (8000558 <SystemCoreClockSetup+0x1f8>)
 80004d8:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:523
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 80004da:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80004de:	f7ff fee9 	bl	80002b4 <delay>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:524
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80004e2:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:524 (discriminator 1)
 80004e4:	4b17      	ldr	r3, [pc, #92]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f003 0304 	and.w	r3, r3, #4
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d0f9      	beq.n	80004e4 <SystemCoreClockSetup+0x184>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:529
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004f0:	4b14      	ldr	r3, [pc, #80]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 80004f2:	4a1a      	ldr	r2, [pc, #104]	; (800055c <SystemCoreClockSetup+0x1fc>)
 80004f4:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:534
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 80004f6:	f241 1094 	movw	r0, #4500	; 0x1194
 80004fa:	f7ff fedb 	bl	80002b4 <delay>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:535
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80004fe:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:535 (discriminator 1)
 8000500:	4b10      	ldr	r3, [pc, #64]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f003 0304 	and.w	r3, r3, #4
 8000508:	2b00      	cmp	r3, #0
 800050a:	d0f9      	beq.n	8000500 <SystemCoreClockSetup+0x1a0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:540
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800050c:	4b0d      	ldr	r3, [pc, #52]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 800050e:	4a14      	ldr	r2, [pc, #80]	; (8000560 <SystemCoreClockSetup+0x200>)
 8000510:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:545
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 8000512:	f241 7070 	movw	r0, #6000	; 0x1770
 8000516:	f7ff fecd 	bl	80002b4 <delay>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:546
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800051a:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:546 (discriminator 1)
 800051c:	4b09      	ldr	r3, [pc, #36]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f003 0304 	and.w	r3, r3, #4
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0f9      	beq.n	800051c <SystemCoreClockSetup+0x1bc>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:551
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000528:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <SystemCoreClockSetup+0x204>)
 800052a:	2205      	movs	r2, #5
 800052c:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:608
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <SystemCoreClockSetup+0x1f4>)
 8000530:	2200      	movs	r2, #0
 8000532:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:627
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8000534:	f000 f818 	bl	8000568 <SystemCoreClockUpdate>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:628
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	50004200 	.word	0x50004200
 8000540:	50004400 	.word	0x50004400
 8000544:	50004710 	.word	0x50004710
 8000548:	50004700 	.word	0x50004700
 800054c:	6b5fca6b 	.word	0x6b5fca6b
 8000550:	01134f00 	.word	0x01134f00
 8000554:	50004600 	.word	0x50004600
 8000558:	01074f00 	.word	0x01074f00
 800055c:	01044f00 	.word	0x01044f00
 8000560:	01034f00 	.word	0x01034f00
 8000564:	50004160 	.word	0x50004160

08000568 <SystemCoreClockUpdate>:
SystemCoreClockUpdate():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:631

__WEAK void SystemCoreClockUpdate(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:637
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 800056e:	4b2f      	ldr	r3, [pc, #188]	; (800062c <SystemCoreClockUpdate+0xc4>)
 8000570:	68db      	ldr	r3, [r3, #12]
 8000572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000576:	2b00      	cmp	r3, #0
 8000578:	d03e      	beq.n	80005f8 <SystemCoreClockUpdate+0x90>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:640
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800057a:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <SystemCoreClockUpdate+0xc8>)
 800057c:	68db      	ldr	r3, [r3, #12]
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	2b00      	cmp	r3, #0
 8000584:	d002      	beq.n	800058c <SystemCoreClockUpdate+0x24>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:643
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8000586:	4b2b      	ldr	r3, [pc, #172]	; (8000634 <SystemCoreClockUpdate+0xcc>)
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	e002      	b.n	8000592 <SystemCoreClockUpdate+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:648
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 800058c:	f000 f856 	bl	800063c <OSCHP_GetFrequency>
 8000590:	60f8      	str	r0, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:652
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8000592:	4b27      	ldr	r3, [pc, #156]	; (8000630 <SystemCoreClockUpdate+0xc8>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	2b00      	cmp	r3, #0
 800059c:	d020      	beq.n	80005e0 <SystemCoreClockUpdate+0x78>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:656
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800059e:	4b24      	ldr	r3, [pc, #144]	; (8000630 <SystemCoreClockUpdate+0xc8>)
 80005a0:	689b      	ldr	r3, [r3, #8]
 80005a2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80005a6:	0e1b      	lsrs	r3, r3, #24
 80005a8:	3301      	adds	r3, #1
 80005aa:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:657
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80005ac:	4b20      	ldr	r3, [pc, #128]	; (8000630 <SystemCoreClockUpdate+0xc8>)
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	3301      	adds	r3, #1
 80005b8:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:658
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80005ba:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <SystemCoreClockUpdate+0xc8>)
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80005c2:	0c1b      	lsrs	r3, r3, #16
 80005c4:	3301      	adds	r3, #1
 80005c6:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:660

      temp = (temp / (pdiv * kdiv)) * ndiv;
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	683a      	ldr	r2, [r7, #0]
 80005cc:	fb02 f303 	mul.w	r3, r2, r3
 80005d0:	68fa      	ldr	r2, [r7, #12]
 80005d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	fb02 f303 	mul.w	r3, r2, r3
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	e00d      	b.n	80005fc <SystemCoreClockUpdate+0x94>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:666
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80005e0:	4b13      	ldr	r3, [pc, #76]	; (8000630 <SystemCoreClockUpdate+0xc8>)
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005e8:	3301      	adds	r3, #1
 80005ea:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:668
      
      temp = (temp / kdiv);
 80005ec:	68fa      	ldr	r2, [r7, #12]
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	e001      	b.n	80005fc <SystemCoreClockUpdate+0x94>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:674
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <SystemCoreClockUpdate+0xcc>)
 80005fa:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:677
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <SystemCoreClockUpdate+0xc4>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	3301      	adds	r3, #1
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	fbb2 f3f3 	udiv	r3, r2, r3
 800060a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:678
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <SystemCoreClockUpdate+0xc4>)
 800060e:	691b      	ldr	r3, [r3, #16]
 8000610:	f003 0301 	and.w	r3, r3, #1
 8000614:	3301      	adds	r3, #1
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	fbb2 f3f3 	udiv	r3, r2, r3
 800061c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:680

  SystemCoreClock = temp;
 800061e:	4a06      	ldr	r2, [pc, #24]	; (8000638 <SystemCoreClockUpdate+0xd0>)
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	6013      	str	r3, [r2, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:681
}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	50004600 	.word	0x50004600
 8000630:	50004710 	.word	0x50004710
 8000634:	016e3600 	.word	0x016e3600
 8000638:	2000ffc0 	.word	0x2000ffc0

0800063c <OSCHP_GetFrequency>:
OSCHP_GetFrequency():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:684

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:685
  return OSCHP_FREQUENCY;
 8000640:	4b02      	ldr	r3, [pc, #8]	; (800064c <OSCHP_GetFrequency+0x10>)
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Startup/system_XMC4500.c:686
}
 8000642:	4618      	mov	r0, r3
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	00b71b00 	.word	0x00b71b00

08000650 <XMC_ERU_Enable>:
XMC_ERU_Enable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_eru.c:54
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_eru.c:56
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a05      	ldr	r2, [pc, #20]	; (8000670 <XMC_ERU_Enable+0x20>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d103      	bne.n	8000668 <XMC_ERU_Enable+0x18>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_eru.c:61
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 8000660:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000664:	f001 f892 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_eru.c:66
  }
#else
  XMC_UNUSED_ARG(eru);
  #endif
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40044000 	.word	0x40044000

08000674 <XMC_ERU_Disable>:
XMC_ERU_Disable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_eru.c:70

/* Disable the clock and Reset the ERU module. */
void XMC_ERU_Disable(XMC_ERU_t *const eru)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_eru.c:72
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a05      	ldr	r2, [pc, #20]	; (8000694 <XMC_ERU_Disable+0x20>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d103      	bne.n	800068c <XMC_ERU_Disable+0x18>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_eru.c:74
  {
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 8000684:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000688:	f001 f864 	bl	8001754 <XMC_SCU_RESET_AssertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_eru.c:82
    #endif
  }
#else
  XMC_UNUSED_ARG(eru);
#endif
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40044000 	.word	0x40044000

08000698 <XMC_FLASH_lEnterPageModeCommand>:
XMC_FLASH_lEnterPageModeCommand():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:99

/*
 * Command to program the PFLASH in to page mode, so that assembly buffer is used 
 */
void XMC_FLASH_lEnterPageModeCommand(void)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:102
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <XMC_FLASH_lEnterPageModeCommand+0x1c>)
 80006a0:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:103
  *address = (uint32_t)0x50U;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2250      	movs	r2, #80	; 0x50
 80006a6:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:104
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	0c005554 	.word	0x0c005554

080006b8 <XMC_FLASH_lLoadPageCommand>:
XMC_FLASH_lLoadPageCommand():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:110

/*
 * Command to load the data into the page assembly buffer 
 */
void XMC_FLASH_lLoadPageCommand(uint32_t low_word, uint32_t high_word)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:113
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f0U);
 80006c2:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <XMC_FLASH_lLoadPageCommand+0x28>)
 80006c4:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:114
  *address = low_word;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:115
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <XMC_FLASH_lLoadPageCommand+0x2c>)
 80006ce:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:116
  *address = high_word;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:117
}
 80006d6:	bf00      	nop
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr
 80006e0:	0c0055f0 	.word	0x0c0055f0
 80006e4:	0c0055f4 	.word	0x0c0055f4

080006e8 <XMC_FLASH_lWritePageCommand>:
XMC_FLASH_lWritePageCommand():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:123

/*
 * Command to start the programming of one page with data from the assembly buffer
 */
void XMC_FLASH_lWritePageCommand(uint32_t *page_start_address)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:126
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <XMC_FLASH_lWritePageCommand+0x3c>)
 80006f2:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:127
  *address = 0xaaU;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	22aa      	movs	r2, #170	; 0xaa
 80006f8:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:128
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <XMC_FLASH_lWritePageCommand+0x40>)
 80006fc:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:129
  *address = 0x55U;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	2255      	movs	r2, #85	; 0x55
 8000702:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:130
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <XMC_FLASH_lWritePageCommand+0x3c>)
 8000706:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:131
  *address = 0xa0U;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	22a0      	movs	r2, #160	; 0xa0
 800070c:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:132
  address = page_start_address;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:133
  *address = 0xaaU;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	22aa      	movs	r2, #170	; 0xaa
 8000716:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:134
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	0c005554 	.word	0x0c005554
 8000728:	0c00aaa8 	.word	0x0c00aaa8

0800072c <XMC_FLASH_lWriteUCBPageCommand>:
XMC_FLASH_lWriteUCBPageCommand():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:140

/*
 * Command to start the programming of UCB page with data from the assembly buffer
 */
void XMC_FLASH_lWriteUCBPageCommand(uint32_t *page_start_address)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:143
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <XMC_FLASH_lWriteUCBPageCommand+0x3c>)
 8000736:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:144
  *address = 0xaaU;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	22aa      	movs	r2, #170	; 0xaa
 800073c:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:145
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <XMC_FLASH_lWriteUCBPageCommand+0x40>)
 8000740:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:146
  *address = 0x55U;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	2255      	movs	r2, #85	; 0x55
 8000746:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:147
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <XMC_FLASH_lWriteUCBPageCommand+0x3c>)
 800074a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:148
  *address = 0xc0U;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	22c0      	movs	r2, #192	; 0xc0
 8000750:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:149
  address = page_start_address;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:150
  *address = 0xaaU;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	22aa      	movs	r2, #170	; 0xaa
 800075a:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:151
}
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	0c005554 	.word	0x0c005554
 800076c:	0c00aaa8 	.word	0x0c00aaa8

08000770 <XMC_FLASH_lEraseSectorCommand>:
XMC_FLASH_lEraseSectorCommand():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:157

/*
 * Command to erase sector which is starting with the specified address
 */
void XMC_FLASH_lEraseSectorCommand(uint32_t *sector_start_address)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:160
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <XMC_FLASH_lEraseSectorCommand+0x50>)
 800077a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:161
  *address = 0xaaU;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	22aa      	movs	r2, #170	; 0xaa
 8000780:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:162
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <XMC_FLASH_lEraseSectorCommand+0x54>)
 8000784:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:163
  *address = 0x55U;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	2255      	movs	r2, #85	; 0x55
 800078a:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:164
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <XMC_FLASH_lEraseSectorCommand+0x50>)
 800078e:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:165
  *address = 0x80U;
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2280      	movs	r2, #128	; 0x80
 8000794:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:166
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <XMC_FLASH_lEraseSectorCommand+0x50>)
 8000798:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:167
  *address = 0xaaU;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	22aa      	movs	r2, #170	; 0xaa
 800079e:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:168
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <XMC_FLASH_lEraseSectorCommand+0x54>)
 80007a2:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:169
  *address = 0x55U;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	2255      	movs	r2, #85	; 0x55
 80007a8:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:170
  address = sector_start_address;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:171
  *address = 0x30U;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	2230      	movs	r2, #48	; 0x30
 80007b2:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:172
}
 80007b4:	bf00      	nop
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	0c005554 	.word	0x0c005554
 80007c4:	0c00aaa8 	.word	0x0c00aaa8

080007c8 <XMC_FLASH_lDisableSectorWriteProtectionCommand>:
XMC_FLASH_lDisableSectorWriteProtectionCommand():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:180
/*
 * Command to temporarily disables the write protection belonging to the the USER specified, when passwords match with their
 * configured values
 */
void XMC_FLASH_lDisableSectorWriteProtectionCommand(uint32_t user, uint32_t password_0, uint32_t password_1)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b087      	sub	sp, #28
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:183
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <XMC_FLASH_lDisableSectorWriteProtectionCommand+0x54>)
 80007d6:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:184
  *address = 0xaaU;
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	22aa      	movs	r2, #170	; 0xaa
 80007dc:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:185
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <XMC_FLASH_lDisableSectorWriteProtectionCommand+0x58>)
 80007e0:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:186
  *address = 0x55U;
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	2255      	movs	r2, #85	; 0x55
 80007e6:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:187
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x553cU);
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <XMC_FLASH_lDisableSectorWriteProtectionCommand+0x5c>)
 80007ea:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:188
  *address = user;
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:189
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <XMC_FLASH_lDisableSectorWriteProtectionCommand+0x58>)
 80007f4:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:190
  *address = password_0;
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	68ba      	ldr	r2, [r7, #8]
 80007fa:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:191
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <XMC_FLASH_lDisableSectorWriteProtectionCommand+0x58>)
 80007fe:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:192
  *address = password_1;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:193
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5558U);
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <XMC_FLASH_lDisableSectorWriteProtectionCommand+0x60>)
 8000808:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:194
  *address = 0x05U;
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	2205      	movs	r2, #5
 800080e:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:195
}
 8000810:	bf00      	nop
 8000812:	371c      	adds	r7, #28
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	0c005554 	.word	0x0c005554
 8000820:	0c00aaa8 	.word	0x0c00aaa8
 8000824:	0c00553c 	.word	0x0c00553c
 8000828:	0c005558 	.word	0x0c005558

0800082c <XMC_FLASH_lDisableReadProtectionCommand>:
XMC_FLASH_lDisableReadProtectionCommand():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:202
/*
 * Command to temporarily disables the read protection along with write protection, when passwords match with their
 * configured values
 */
void XMC_FLASH_lDisableReadProtectionCommand(uint32_t password_0, uint32_t password_1)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:205
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <XMC_FLASH_lDisableReadProtectionCommand+0x50>)
 8000838:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:206
  *address = 0xaaU;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	22aa      	movs	r2, #170	; 0xaa
 800083e:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:207
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <XMC_FLASH_lDisableReadProtectionCommand+0x54>)
 8000842:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:208
  *address = 0x55U;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	2255      	movs	r2, #85	; 0x55
 8000848:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:209
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x553cU);
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <XMC_FLASH_lDisableReadProtectionCommand+0x58>)
 800084c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:210
  *address = 0x00U;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:211
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <XMC_FLASH_lDisableReadProtectionCommand+0x54>)
 8000856:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:212
  *address = password_0;
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:213
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <XMC_FLASH_lDisableReadProtectionCommand+0x54>)
 8000860:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:214
  *address = password_1;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	683a      	ldr	r2, [r7, #0]
 8000866:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:215
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5558U);
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <XMC_FLASH_lDisableReadProtectionCommand+0x5c>)
 800086a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:216
  *address = 0x08U;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2208      	movs	r2, #8
 8000870:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:217
}
 8000872:	bf00      	nop
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	0c005554 	.word	0x0c005554
 8000880:	0c00aaa8 	.word	0x0c00aaa8
 8000884:	0c00553c 	.word	0x0c00553c
 8000888:	0c005558 	.word	0x0c005558

0800088c <XMC_FLASH_lClearStatusCommand>:
XMC_FLASH_lClearStatusCommand():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:223

/*
 * Command to clear FSR.PROG and FSR.ERASE and the error flags in FSR such as PFOPER, SQER, PROER, PFDBER, ORIER, VER
 */
void XMC_FLASH_lClearStatusCommand(void)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:226
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <XMC_FLASH_lClearStatusCommand+0x1c>)
 8000894:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:227
  *address = 0xf5U;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	22f5      	movs	r2, #245	; 0xf5
 800089a:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:228
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	0c005554 	.word	0x0c005554

080008ac <XMC_FLASH_ClearStatus>:
XMC_FLASH_ClearStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:238

 /*
 * This API shall clear Program, erase and error flags(PFOPER, SQER, PROER, PFDBER, ORIER, VER) of FSR register.
 */
void XMC_FLASH_ClearStatus(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:239
  XMC_FLASH_lClearStatusCommand();
 80008b0:	f7ff ffec 	bl	800088c <XMC_FLASH_lClearStatusCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:240
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <XMC_FLASH_GetStatus>:
XMC_FLASH_GetStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:246

/*
 * This API returns the FSR register value
 */
uint32_t XMC_FLASH_GetStatus(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:247
  return FLASH0->FSR;
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <XMC_FLASH_GetStatus+0x18>)
 80008be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008c2:	3310      	adds	r3, #16
 80008c4:	681b      	ldr	r3, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:248
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	58001000 	.word	0x58001000

080008d4 <XMC_FLASH_EnableEvent>:
XMC_FLASH_EnableEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:254

/*
 * This API enables the events which required to trigger the ISR 
 */
void XMC_FLASH_EnableEvent(const uint32_t event_msk)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:255
  FLASH0->FCON |= event_msk;
 80008dc:	4908      	ldr	r1, [pc, #32]	; (8000900 <XMC_FLASH_EnableEvent+0x2c>)
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <XMC_FLASH_EnableEvent+0x2c>)
 80008e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008e4:	3314      	adds	r3, #20
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	431a      	orrs	r2, r3
 80008ec:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80008f0:	3314      	adds	r3, #20
 80008f2:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:256
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	58001000 	.word	0x58001000

08000904 <XMC_FLASH_DisableEvent>:
XMC_FLASH_DisableEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:262

/*
 * This API disables the event generation 
 */
void XMC_FLASH_DisableEvent(const uint32_t event_msk)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:263
  FLASH0->FCON &= ~event_msk;
 800090c:	4908      	ldr	r1, [pc, #32]	; (8000930 <XMC_FLASH_DisableEvent+0x2c>)
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <XMC_FLASH_DisableEvent+0x2c>)
 8000910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000914:	3314      	adds	r3, #20
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	43db      	mvns	r3, r3
 800091c:	401a      	ands	r2, r3
 800091e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8000922:	3314      	adds	r3, #20
 8000924:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:264
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	58001000 	.word	0x58001000

08000934 <XMC_FLASH_ProgramPage>:
XMC_FLASH_ProgramPage():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:270

/*
 * This API write the PFLASH page
 */
void XMC_FLASH_ProgramPage(uint32_t *address, const uint32_t *data)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:273
  uint32_t idx;

  XMC_FLASH_lClearStatusCommand();  
 800093e:	f7ff ffa5 	bl	800088c <XMC_FLASH_lClearStatusCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:274
  XMC_FLASH_lEnterPageModeCommand();
 8000942:	f7ff fea9 	bl	8000698 <XMC_FLASH_lEnterPageModeCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:276

  for (idx = 0U; idx < XMC_FLASH_WORDS_PER_PAGE; idx += 2U)
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	e010      	b.n	800096e <XMC_FLASH_ProgramPage+0x3a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:278 (discriminator 3)
  {
    XMC_FLASH_lLoadPageCommand(data[idx], data[idx + 1U]);
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	683a      	ldr	r2, [r7, #0]
 8000952:	4413      	add	r3, r2
 8000954:	6818      	ldr	r0, [r3, #0]
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	3301      	adds	r3, #1
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	683a      	ldr	r2, [r7, #0]
 800095e:	4413      	add	r3, r2
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4619      	mov	r1, r3
 8000964:	f7ff fea8 	bl	80006b8 <XMC_FLASH_lLoadPageCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:276 (discriminator 3)
  uint32_t idx;

  XMC_FLASH_lClearStatusCommand();  
  XMC_FLASH_lEnterPageModeCommand();

  for (idx = 0U; idx < XMC_FLASH_WORDS_PER_PAGE; idx += 2U)
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	3302      	adds	r3, #2
 800096c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:276 (discriminator 1)
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	2b3f      	cmp	r3, #63	; 0x3f
 8000972:	d9eb      	bls.n	800094c <XMC_FLASH_ProgramPage+0x18>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:281
  {
    XMC_FLASH_lLoadPageCommand(data[idx], data[idx + 1U]);
  }

  XMC_FLASH_lWritePageCommand(address);    
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff feb7 	bl	80006e8 <XMC_FLASH_lWritePageCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:284

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 800097a:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:284 (discriminator 1)
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <XMC_FLASH_ProgramPage+0x64>)
 800097e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000982:	3310      	adds	r3, #16
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1f6      	bne.n	800097c <XMC_FLASH_ProgramPage+0x48>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:285
}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	58001000 	.word	0x58001000

0800099c <XMC_FLASH_EraseSector>:
XMC_FLASH_EraseSector():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:291

/*
 * This API erase the logical sector
 */
void XMC_FLASH_EraseSector(uint32_t *address)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:292
  XMC_FLASH_lClearStatusCommand();
 80009a4:	f7ff ff72 	bl	800088c <XMC_FLASH_lClearStatusCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:293
  XMC_FLASH_lEraseSectorCommand(address);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff fee1 	bl	8000770 <XMC_FLASH_lEraseSectorCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:296

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 80009ae:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:296 (discriminator 1)
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <XMC_FLASH_EraseSector+0x30>)
 80009b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009b6:	3310      	adds	r3, #16
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d1f6      	bne.n	80009b0 <XMC_FLASH_EraseSector+0x14>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:297
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	58001000 	.word	0x58001000

080009d0 <XMC_FLASH_lErasePhysicalSectorCommand>:
XMC_FLASH_lErasePhysicalSectorCommand():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:303

/*
 * Command to erase physical sector which is starting with the specified address
 */
void XMC_FLASH_lErasePhysicalSectorCommand(uint32_t *sector_start_address)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:306
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <XMC_FLASH_lErasePhysicalSectorCommand+0x50>)
 80009da:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:307
  *address = 0xaaU;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	22aa      	movs	r2, #170	; 0xaa
 80009e0:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:308
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <XMC_FLASH_lErasePhysicalSectorCommand+0x54>)
 80009e4:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:309
  *address = 0x55U;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2255      	movs	r2, #85	; 0x55
 80009ea:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:310
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <XMC_FLASH_lErasePhysicalSectorCommand+0x50>)
 80009ee:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:311
  *address = 0x80U;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:312
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80009f6:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <XMC_FLASH_lErasePhysicalSectorCommand+0x50>)
 80009f8:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:313
  *address = 0xaaU;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	22aa      	movs	r2, #170	; 0xaa
 80009fe:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:314
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <XMC_FLASH_lErasePhysicalSectorCommand+0x54>)
 8000a02:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:315
  *address = 0x55U;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	2255      	movs	r2, #85	; 0x55
 8000a08:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:316
  address = sector_start_address;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:317
  *address = 0x40U;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	2240      	movs	r2, #64	; 0x40
 8000a12:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:318
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	0c005554 	.word	0x0c005554
 8000a24:	0c00aaa8 	.word	0x0c00aaa8

08000a28 <XMC_FLASH_lRepairPhysicalSectorCommand>:
XMC_FLASH_lRepairPhysicalSectorCommand():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:325
/*
 * Command to erase physical sector-4 which is starting with the specified address
 * This command is only available if PROCON1.PRS = 1.
 */
void XMC_FLASH_lRepairPhysicalSectorCommand(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:328
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <XMC_FLASH_lRepairPhysicalSectorCommand+0x4c>)
 8000a30:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:329
  *address = 0xaaU;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	22aa      	movs	r2, #170	; 0xaa
 8000a36:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:330
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <XMC_FLASH_lRepairPhysicalSectorCommand+0x50>)
 8000a3a:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:331
  *address = 0x55U;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2255      	movs	r2, #85	; 0x55
 8000a40:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:332
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <XMC_FLASH_lRepairPhysicalSectorCommand+0x4c>)
 8000a44:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:333
  *address = 0x80U;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2280      	movs	r2, #128	; 0x80
 8000a4a:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:334
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <XMC_FLASH_lRepairPhysicalSectorCommand+0x4c>)
 8000a4e:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:335
  *address = 0xaaU;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	22aa      	movs	r2, #170	; 0xaa
 8000a54:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:336
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <XMC_FLASH_lRepairPhysicalSectorCommand+0x50>)
 8000a58:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:337
  *address = 0x55U;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2255      	movs	r2, #85	; 0x55
 8000a5e:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:338
  address = XMC_FLASH_PHY_SECTOR_4;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <XMC_FLASH_lRepairPhysicalSectorCommand+0x54>)
 8000a62:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:339
  *address = 0x40U;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2240      	movs	r2, #64	; 0x40
 8000a68:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:340
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	0c005554 	.word	0x0c005554
 8000a78:	0c00aaa8 	.word	0x0c00aaa8
 8000a7c:	0c010000 	.word	0x0c010000

08000a80 <XMC_FLASH_ErasePhysicalSector>:
XMC_FLASH_ErasePhysicalSector():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:346

 /* 
  * This API erase the physical sector
  */
void XMC_FLASH_ErasePhysicalSector(uint32_t *address)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:347
  XMC_FLASH_lClearStatusCommand();
 8000a88:	f7ff ff00 	bl	800088c <XMC_FLASH_lClearStatusCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:348
  XMC_FLASH_lErasePhysicalSectorCommand(address);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff ff9f 	bl	80009d0 <XMC_FLASH_lErasePhysicalSectorCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:351

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 8000a92:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:351 (discriminator 1)
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <XMC_FLASH_ErasePhysicalSector+0x30>)
 8000a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a9a:	3310      	adds	r3, #16
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d1f6      	bne.n	8000a94 <XMC_FLASH_ErasePhysicalSector+0x14>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:352
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	58001000 	.word	0x58001000

08000ab4 <XMC_FLASH_RepairPhysicalSector>:
XMC_FLASH_RepairPhysicalSector():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:358

/*
 * This API repair the physical sector
 */
void XMC_FLASH_RepairPhysicalSector(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:359
  XMC_FLASH_lClearStatusCommand();
 8000ab8:	f7ff fee8 	bl	800088c <XMC_FLASH_lClearStatusCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:360
  XMC_FLASH_lRepairPhysicalSectorCommand();
 8000abc:	f7ff ffb4 	bl	8000a28 <XMC_FLASH_lRepairPhysicalSectorCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:361
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <XMC_FLASH_EraseUCB>:
XMC_FLASH_EraseUCB():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:367

/*
 * Command to erase UCB sector which is starting with the specified address
 */
void XMC_FLASH_EraseUCB(uint32_t *ucb_sector_start_address)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:370
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <XMC_FLASH_EraseUCB+0x64>)
 8000ace:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:371
  *address = 0xaaU;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	22aa      	movs	r2, #170	; 0xaa
 8000ad4:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:372
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <XMC_FLASH_EraseUCB+0x68>)
 8000ad8:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:373
  *address = 0x55U;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	2255      	movs	r2, #85	; 0x55
 8000ade:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:374
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <XMC_FLASH_EraseUCB+0x64>)
 8000ae2:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:375
  *address = 0x80U;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2280      	movs	r2, #128	; 0x80
 8000ae8:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:376
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <XMC_FLASH_EraseUCB+0x64>)
 8000aec:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:377
  *address = 0xaaU;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	22aa      	movs	r2, #170	; 0xaa
 8000af2:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:378
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 8000af4:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <XMC_FLASH_EraseUCB+0x68>)
 8000af6:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:379
  *address = 0x55U;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2255      	movs	r2, #85	; 0x55
 8000afc:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:380
  address = ucb_sector_start_address;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:381
  *address = 0xc0U;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	22c0      	movs	r2, #192	; 0xc0
 8000b06:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:384

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 8000b08:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:384 (discriminator 1)
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <XMC_FLASH_EraseUCB+0x6c>)
 8000b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b10:	3310      	adds	r3, #16
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1f6      	bne.n	8000b0a <XMC_FLASH_EraseUCB+0x46>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:385
}
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	0c005554 	.word	0x0c005554
 8000b2c:	0c00aaa8 	.word	0x0c00aaa8
 8000b30:	58001000 	.word	0x58001000

08000b34 <XMC_FLASH_Reset>:
XMC_FLASH_Reset():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:391

/*
 * Command to reset the status of the PFLASH
 */
void XMC_FLASH_Reset(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:394
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8000b3a:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <XMC_FLASH_Reset+0x1c>)
 8000b3c:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:395
  *address = 0xf0U;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	22f0      	movs	r2, #240	; 0xf0
 8000b42:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:396
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	0c005554 	.word	0x0c005554

08000b54 <XMC_FLASH_InstallProtection>:
XMC_FLASH_InstallProtection():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:405
 */
void XMC_FLASH_InstallProtection(uint8_t user,
                                 uint32_t protection_mask,
	                             uint32_t password_0,
                                 uint32_t password_1)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	4603      	mov	r3, r0
 8000b62:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:410
  uint32_t idx;
  
  XMC_ASSERT(" XMC_FLASH_ConfigureProtection: User level out of range", (user < 3U))

  XMC_FLASH_lEnterPageModeCommand();
 8000b64:	f7ff fd98 	bl	8000698 <XMC_FLASH_lEnterPageModeCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:412

  XMC_FLASH_lLoadPageCommand(protection_mask, 0UL);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	68b8      	ldr	r0, [r7, #8]
 8000b6c:	f7ff fda4 	bl	80006b8 <XMC_FLASH_lLoadPageCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:413
  XMC_FLASH_lLoadPageCommand(protection_mask, 0UL);
 8000b70:	2100      	movs	r1, #0
 8000b72:	68b8      	ldr	r0, [r7, #8]
 8000b74:	f7ff fda0 	bl	80006b8 <XMC_FLASH_lLoadPageCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:414
  XMC_FLASH_lLoadPageCommand(password_0, password_1);
 8000b78:	6839      	ldr	r1, [r7, #0]
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff fd9c 	bl	80006b8 <XMC_FLASH_lLoadPageCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:415
  XMC_FLASH_lLoadPageCommand(password_0, password_1);
 8000b80:	6839      	ldr	r1, [r7, #0]
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff fd98 	bl	80006b8 <XMC_FLASH_lLoadPageCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:417
  
  for (idx = 0U; idx < (XMC_FLASH_WORDS_PER_PAGE - XMC_FLASH_PROTECTION_CONFIGURATION_WORDS); idx += 2U)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	e006      	b.n	8000b9c <XMC_FLASH_InstallProtection+0x48>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:419 (discriminator 3)
  {
    XMC_FLASH_lLoadPageCommand(0UL, 0UL);
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2000      	movs	r0, #0
 8000b92:	f7ff fd91 	bl	80006b8 <XMC_FLASH_lLoadPageCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:417 (discriminator 3)
  XMC_FLASH_lLoadPageCommand(protection_mask, 0UL);
  XMC_FLASH_lLoadPageCommand(protection_mask, 0UL);
  XMC_FLASH_lLoadPageCommand(password_0, password_1);
  XMC_FLASH_lLoadPageCommand(password_0, password_1);
  
  for (idx = 0U; idx < (XMC_FLASH_WORDS_PER_PAGE - XMC_FLASH_PROTECTION_CONFIGURATION_WORDS); idx += 2U)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3302      	adds	r3, #2
 8000b9a:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:417 (discriminator 1)
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	2b37      	cmp	r3, #55	; 0x37
 8000ba0:	d9f5      	bls.n	8000b8e <XMC_FLASH_InstallProtection+0x3a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:422
  {
    XMC_FLASH_lLoadPageCommand(0UL, 0UL);
  }

  XMC_FLASH_lWriteUCBPageCommand((uint32_t *)((uint32_t)XMC_FLASH_UCB0 + (user * XMC_FLASH_BYTES_PER_UCB)));
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000ba8:	029b      	lsls	r3, r3, #10
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fdbe 	bl	800072c <XMC_FLASH_lWriteUCBPageCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:425

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 8000bb0:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:425 (discriminator 1)
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <XMC_FLASH_InstallProtection+0x78>)
 8000bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000bb8:	3310      	adds	r3, #16
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d1f6      	bne.n	8000bb2 <XMC_FLASH_InstallProtection+0x5e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:426
}
 8000bc4:	bf00      	nop
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	58001000 	.word	0x58001000

08000bd0 <XMC_FLASH_ConfirmProtection>:
XMC_FLASH_ConfirmProtection():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:432

/*
 * This API confirm the protection. So that This sectors are locked with the specified protection.
 */
void XMC_FLASH_ConfirmProtection(uint8_t user)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:437
  uint32_t idx;

  XMC_ASSERT(" XMC_FLASH_ConfirmProtection: User level out of range", (user < 3U))

  XMC_FLASH_lEnterPageModeCommand();
 8000bda:	f7ff fd5d 	bl	8000698 <XMC_FLASH_lEnterPageModeCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:439

  XMC_FLASH_lLoadPageCommand(XMC_FLASH_PROT_CONFIRM_CODE, 0U);
 8000bde:	2100      	movs	r1, #0
 8000be0:	4815      	ldr	r0, [pc, #84]	; (8000c38 <XMC_FLASH_ConfirmProtection+0x68>)
 8000be2:	f7ff fd69 	bl	80006b8 <XMC_FLASH_lLoadPageCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:440
  XMC_FLASH_lLoadPageCommand(XMC_FLASH_PROT_CONFIRM_CODE, 0U);
 8000be6:	2100      	movs	r1, #0
 8000be8:	4813      	ldr	r0, [pc, #76]	; (8000c38 <XMC_FLASH_ConfirmProtection+0x68>)
 8000bea:	f7ff fd65 	bl	80006b8 <XMC_FLASH_lLoadPageCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:443

  /* Fill the rest of page buffer with zeros*/
  for (idx = 0UL; idx < (XMC_FLASH_WORDS_PER_PAGE - XMC_FLASH_PROT_CONFIRM_WORDS); idx += 2U)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	e006      	b.n	8000c02 <XMC_FLASH_ConfirmProtection+0x32>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:445 (discriminator 3)
  {
    XMC_FLASH_lLoadPageCommand(0UL, 0UL);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f7ff fd5e 	bl	80006b8 <XMC_FLASH_lLoadPageCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:443 (discriminator 3)

  XMC_FLASH_lLoadPageCommand(XMC_FLASH_PROT_CONFIRM_CODE, 0U);
  XMC_FLASH_lLoadPageCommand(XMC_FLASH_PROT_CONFIRM_CODE, 0U);

  /* Fill the rest of page buffer with zeros*/
  for (idx = 0UL; idx < (XMC_FLASH_WORDS_PER_PAGE - XMC_FLASH_PROT_CONFIRM_WORDS); idx += 2U)
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	3302      	adds	r3, #2
 8000c00:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:443 (discriminator 1)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	2b3b      	cmp	r3, #59	; 0x3b
 8000c06:	d9f5      	bls.n	8000bf4 <XMC_FLASH_ConfirmProtection+0x24>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:448
  {
    XMC_FLASH_lLoadPageCommand(0UL, 0UL);
  }

  XMC_FLASH_lWriteUCBPageCommand((uint32_t *)((uint32_t)XMC_FLASH_UCB0 + 
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000c0e:	029b      	lsls	r3, r3, #10
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:449
                                 (user * XMC_FLASH_BYTES_PER_UCB) + XMC_FLASH_PROT_CONFIRM_OFFSET));
 8000c10:	f503 7300 	add.w	r3, r3, #512	; 0x200
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:448
  for (idx = 0UL; idx < (XMC_FLASH_WORDS_PER_PAGE - XMC_FLASH_PROT_CONFIRM_WORDS); idx += 2U)
  {
    XMC_FLASH_lLoadPageCommand(0UL, 0UL);
  }

  XMC_FLASH_lWriteUCBPageCommand((uint32_t *)((uint32_t)XMC_FLASH_UCB0 + 
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fd89 	bl	800072c <XMC_FLASH_lWriteUCBPageCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:452
                                 (user * XMC_FLASH_BYTES_PER_UCB) + XMC_FLASH_PROT_CONFIRM_OFFSET));

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 8000c1a:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:452 (discriminator 1)
 8000c1c:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <XMC_FLASH_ConfirmProtection+0x6c>)
 8000c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c22:	3310      	adds	r3, #16
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1f6      	bne.n	8000c1c <XMC_FLASH_ConfirmProtection+0x4c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:453
}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	8afe15c3 	.word	0x8afe15c3
 8000c3c:	58001000 	.word	0x58001000

08000c40 <XMC_FLASH_VerifyReadProtection>:
XMC_FLASH_VerifyReadProtection():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:459

/*
 * This API verify read protection configuration. And returns true if passwords are matching.
 */
bool XMC_FLASH_VerifyReadProtection(uint32_t password_0, uint32_t password_1)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:460
  bool status = false;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:463
  
  /* Check if read protection is installed */
  if ((XMC_FLASH_GetStatus() & (uint32_t)XMC_FLASH_STATUS_READ_PROTECTION_INSTALLED) != 0U)
 8000c4e:	f7ff fe33 	bl	80008b8 <XMC_FLASH_GetStatus>
 8000c52:	4603      	mov	r3, r0
 8000c54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d00f      	beq.n	8000c7c <XMC_FLASH_VerifyReadProtection+0x3c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:465
  {  
    XMC_FLASH_lClearStatusCommand();
 8000c5c:	f7ff fe16 	bl	800088c <XMC_FLASH_lClearStatusCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:466
    XMC_FLASH_lDisableReadProtectionCommand(password_0, password_1);
 8000c60:	6839      	ldr	r1, [r7, #0]
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff fde2 	bl	800082c <XMC_FLASH_lDisableReadProtectionCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:468

    status = (bool)(XMC_FLASH_GetStatus() & (uint32_t)XMC_FLASH_STATUS_READ_PROTECTION_DISABLED_STATE);
 8000c68:	f7ff fe26 	bl	80008b8 <XMC_FLASH_GetStatus>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	bf14      	ite	ne
 8000c76:	2301      	movne	r3, #1
 8000c78:	2300      	moveq	r3, #0
 8000c7a:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:471
  }

  return status;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:472
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop

08000c88 <XMC_FLASH_VerifyWriteProtection>:
XMC_FLASH_VerifyWriteProtection():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:482
 */
bool XMC_FLASH_VerifyWriteProtection(uint32_t user,
                                     uint32_t protection_mask, 
                                     uint32_t password_0, 
                                     uint32_t password_1)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:483
  bool status = false;
 8000c96:	2300      	movs	r3, #0
 8000c98:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:484
  uint32_t *flash_procon_ptr = (uint32_t *)(void*)(&(FLASH0->PROCON0) + user);
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	009a      	lsls	r2, r3, #2
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <XMC_FLASH_VerifyWriteProtection+0x80>)
 8000ca0:	4413      	add	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:489

  XMC_ASSERT(" XMC_FLASH_VerifyWriteProtection: User level out of range", (user < 2U))

  /* Check if write protection for selected user is installed */
  if ((XMC_FLASH_GetStatus() & (uint32_t)((uint32_t)1U << (uint32_t)((uint32_t)FLASH_FSR_WPROIN0_Pos + user))) != 0U)
 8000ca4:	f7ff fe08 	bl	80008b8 <XMC_FLASH_GetStatus>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	3315      	adds	r3, #21
 8000cae:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d020      	beq.n	8000cfc <XMC_FLASH_VerifyWriteProtection+0x74>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:491
  {  
    XMC_FLASH_lClearStatusCommand();
 8000cba:	f7ff fde7 	bl	800088c <XMC_FLASH_lClearStatusCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:492
    XMC_FLASH_lDisableSectorWriteProtectionCommand(user, password_0, password_1);
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	68f8      	ldr	r0, [r7, #12]
 8000cc4:	f7ff fd80 	bl	80007c8 <XMC_FLASH_lDisableSectorWriteProtectionCommand>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:494
    
    status = (bool)((XMC_FLASH_GetStatus() & (uint32_t)((uint32_t)1U << (uint32_t)((uint32_t)FLASH_FSR_WPRODIS0_Pos + user)))) &&
 8000cc8:	f7ff fdf6 	bl	80008b8 <XMC_FLASH_GetStatus>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	3319      	adds	r3, #25
 8000cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d008      	beq.n	8000cf0 <XMC_FLASH_VerifyWriteProtection+0x68>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:495 (discriminator 1)
             (*flash_procon_ptr == (protection_mask & (uint32_t)(~(uint32_t)XMC_FLASH_PROTECTION_READ_GLOBAL)));
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:494 (discriminator 1)
  if ((XMC_FLASH_GetStatus() & (uint32_t)((uint32_t)1U << (uint32_t)((uint32_t)FLASH_FSR_WPROIN0_Pos + user))) != 0U)
  {  
    XMC_FLASH_lClearStatusCommand();
    XMC_FLASH_lDisableSectorWriteProtectionCommand(user, password_0, password_1);
    
    status = (bool)((XMC_FLASH_GetStatus() & (uint32_t)((uint32_t)1U << (uint32_t)((uint32_t)FLASH_FSR_WPRODIS0_Pos + user)))) &&
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d101      	bne.n	8000cf0 <XMC_FLASH_VerifyWriteProtection+0x68>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:494 (discriminator 3)
 8000cec:	2301      	movs	r3, #1
 8000cee:	e000      	b.n	8000cf2 <XMC_FLASH_VerifyWriteProtection+0x6a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:494 (discriminator 4)
 8000cf0:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:494 (discriminator 6)
 8000cf2:	75fb      	strb	r3, [r7, #23]
 8000cf4:	7dfb      	ldrb	r3, [r7, #23]
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:498
             (*flash_procon_ptr == (protection_mask & (uint32_t)(~(uint32_t)XMC_FLASH_PROTECTION_READ_GLOBAL)));
  }

  return status;
 8000cfc:	7dfb      	ldrb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:499
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	58002020 	.word	0x58002020

08000d0c <XMC_FLASH_ResumeProtection>:
XMC_FLASH_ResumeProtection():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:505

/*
 * Command to enables the protection as it was configured
 */
void XMC_FLASH_ResumeProtection(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:508
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8000d12:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <XMC_FLASH_ResumeProtection+0x1c>)
 8000d14:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:509
  *address = 0x5eU;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	225e      	movs	r2, #94	; 0x5e
 8000d1a:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_flash.c:510
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	0c005554 	.word	0x0c005554

08000d2c <XMC_GPIO_Init>:
XMC_GPIO_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_gpio.c:66
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	460b      	mov	r3, r1
 8000d36:	607a      	str	r2, [r7, #4]
 8000d38:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_gpio.c:71
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8000d3a:	7afb      	ldrb	r3, [r7, #11]
 8000d3c:	089b      	lsrs	r3, r3, #2
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	4618      	mov	r0, r3
 8000d42:	7afb      	ldrb	r3, [r7, #11]
 8000d44:	089b      	lsrs	r3, r3, #2
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	461a      	mov	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	3204      	adds	r2, #4
 8000d4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d52:	7afb      	ldrb	r3, [r7, #11]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	21f8      	movs	r1, #248	; 0xf8
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	ea02 0103 	and.w	r1, r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	1d02      	adds	r2, r0, #4
 8000d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_gpio.c:74

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000d72:	7afb      	ldrb	r3, [r7, #11]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2103      	movs	r1, #3
 8000d78:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	401a      	ands	r2, r3
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	675a      	str	r2, [r3, #116]	; 0x74
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_gpio.c:78


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4a37      	ldr	r2, [pc, #220]	; (8000e64 <XMC_GPIO_Init+0x138>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d003      	beq.n	8000d94 <XMC_GPIO_Init+0x68>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_gpio.c:78 (discriminator 1)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4a36      	ldr	r2, [pc, #216]	; (8000e68 <XMC_GPIO_Init+0x13c>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d10a      	bne.n	8000daa <XMC_GPIO_Init+0x7e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_gpio.c:80
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d98:	7afb      	ldrb	r3, [r7, #11]
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	401a      	ands	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	661a      	str	r2, [r3, #96]	; 0x60
 8000da8:	e03c      	b.n	8000e24 <XMC_GPIO_Init+0xf8>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_gpio.c:85
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	7afb      	ldrb	r3, [r7, #11]
 8000db0:	409a      	lsls	r2, r3
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_gpio.c:88

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000db6:	7afb      	ldrb	r3, [r7, #11]
 8000db8:	08db      	lsrs	r3, r3, #3
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	7afb      	ldrb	r3, [r7, #11]
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	3210      	adds	r2, #16
 8000dca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000dce:	7afb      	ldrb	r3, [r7, #11]
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	2107      	movs	r1, #7
 8000dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	ea02 0103 	and.w	r1, r2, r3
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f100 0210 	add.w	r2, r0, #16
 8000de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_gpio.c:89
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000dec:	7afb      	ldrb	r3, [r7, #11]
 8000dee:	08db      	lsrs	r3, r3, #3
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	7afb      	ldrb	r3, [r7, #11]
 8000df6:	08db      	lsrs	r3, r3, #3
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	3210      	adds	r2, #16
 8000e00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	7a1b      	ldrb	r3, [r3, #8]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	7afb      	ldrb	r3, [r7, #11]
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	ea42 0103 	orr.w	r1, r2, r3
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f100 0210 	add.w	r2, r0, #16
 8000e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_gpio.c:93
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000e24:	7afb      	ldrb	r3, [r7, #11]
 8000e26:	089b      	lsrs	r3, r3, #2
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	7afb      	ldrb	r3, [r7, #11]
 8000e2e:	089b      	lsrs	r3, r3, #2
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	461a      	mov	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	3204      	adds	r2, #4
 8000e38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	7afb      	ldrb	r3, [r7, #11]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	ea42 0103 	orr.w	r1, r2, r3
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	1d02      	adds	r2, r0, #4
 8000e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_gpio.c:94
}
 8000e5a:	bf00      	nop
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	48028e00 	.word	0x48028e00
 8000e68:	48028f00 	.word	0x48028f00

08000e6c <XMC_GPIO_SetOutputStrength>:
XMC_GPIO_SetOutputStrength():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_gpio.c:97

void XMC_GPIO_SetOutputStrength(XMC_GPIO_PORT_t *const port, const uint8_t pin, XMC_GPIO_OUTPUT_STRENGTH_t strength)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	70fb      	strb	r3, [r7, #3]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_gpio.c:101
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid output strength", XMC_GPIO_CHECK_OUTPUT_STRENGTH(strength));

  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	08db      	lsrs	r3, r3, #3
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	78fb      	ldrb	r3, [r7, #3]
 8000e86:	08db      	lsrs	r3, r3, #3
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3210      	adds	r2, #16
 8000e90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e94:	78fb      	ldrb	r3, [r7, #3]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	2107      	movs	r1, #7
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	ea02 0103 	and.w	r1, r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f100 0210 	add.w	r2, r0, #16
 8000eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_gpio.c:102
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000eb2:	78fb      	ldrb	r3, [r7, #3]
 8000eb4:	08db      	lsrs	r3, r3, #3
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	4618      	mov	r0, r3
 8000eba:	78fb      	ldrb	r3, [r7, #3]
 8000ebc:	08db      	lsrs	r3, r3, #3
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3210      	adds	r2, #16
 8000ec6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000eca:	78b9      	ldrb	r1, [r7, #2]
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed8:	ea42 0103 	orr.w	r1, r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f100 0210 	add.w	r2, r0, #16
 8000ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_gpio.c:103
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <XMC_RTC_IsRunning>:
XMC_RTC_IsRunning():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_rtc.h:667
 *
 * \par<b>Related APIs:</b><br>
 * XMC_RTC_Start(), XMC_RTC_Stop()
 */ 
__STATIC_INLINE bool XMC_RTC_IsRunning(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_rtc.h:668
  return (bool)(RTC->CTR & RTC_CTR_ENB_Msk);
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <XMC_RTC_IsRunning+0x20>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	bf14      	ite	ne
 8000f00:	2301      	movne	r3, #1
 8000f02:	2300      	moveq	r3, #0
 8000f04:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_rtc.h:669
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	50004a00 	.word	0x50004a00

08000f14 <XMC_SCU_GetMirrorStatus>:
XMC_SCU_GetMirrorStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_scu.h:544
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_scu.h:545
  return(SCU_GENERAL->MIRRSTS);
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <XMC_SCU_GetMirrorStatus+0x14>)
 8000f1a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_scu.h:546
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	50004000 	.word	0x50004000

08000f2c <XMC_RTC_Enable>:
XMC_RTC_Enable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:70

/*
 * Enables RTC peripheral for programming its registers
 */
void XMC_RTC_Enable(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:71
  XMC_SCU_HIB_EnableHibernateDomain();
 8000f30:	f001 f816 	bl	8001f60 <XMC_SCU_HIB_EnableHibernateDomain>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:72
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <XMC_RTC_Disable>:
XMC_RTC_Disable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:78

/*
 * Disables RTC peripheral for programming its registers
 */
void XMC_RTC_Disable(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:83
  /*
   * Empty because disabling the hibernate
   * domain is not done intentionally.
   */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <XMC_RTC_IsEnabled>:
XMC_RTC_IsEnabled():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:89

/*
 * Checks RTC peripheral is enabled for programming to its registers
 */
bool XMC_RTC_IsEnabled(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:90
  return XMC_SCU_HIB_IsHibernateDomainEnabled();
 8000f48:	f001 f848 	bl	8001fdc <XMC_SCU_HIB_IsHibernateDomainEnabled>
 8000f4c:	4603      	mov	r3, r0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:91
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop

08000f54 <XMC_RTC_Init>:
XMC_RTC_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:97

/*
 * Initialize the RTC peripheral
 */
XMC_RTC_STATUS_t XMC_RTC_Init(const XMC_RTC_CONFIG_t *const config)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:98
  if (XMC_RTC_IsRunning() == false)
 8000f5c:	f7ff ffc8 	bl	8000ef0 <XMC_RTC_IsRunning>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f083 0301 	eor.w	r3, r3, #1
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d03e      	beq.n	8000fea <XMC_RTC_Init+0x96>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:100
  {
    if (XMC_SCU_HIB_IsHibernateDomainEnabled() == false)
 8000f6c:	f001 f836 	bl	8001fdc <XMC_SCU_HIB_IsHibernateDomainEnabled>
 8000f70:	4603      	mov	r3, r0
 8000f72:	f083 0301 	eor.w	r3, r3, #1
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <XMC_RTC_Init+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:102
    {
      XMC_SCU_HIB_EnableHibernateDomain();
 8000f7c:	f000 fff0 	bl	8001f60 <XMC_SCU_HIB_EnableHibernateDomain>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:105
    }
    
    XMC_RTC_SetPrescaler(config->prescaler);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	8a1b      	ldrh	r3, [r3, #16]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f007 fdff 	bl	8008b88 <XMC_RTC_SetPrescaler>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:107
		
	  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM0_Msk) != 0U)
 8000f8a:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:107 (discriminator 1)
 8000f8c:	f7ff ffc2 	bl	8000f14 <XMC_SCU_GetMirrorStatus>
 8000f90:	4603      	mov	r3, r0
 8000f92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f8      	bne.n	8000f8c <XMC_RTC_Init+0x38>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:111
	  {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
	  RTC->TIM0 = config->time.raw0;
 8000f9a:	4a16      	ldr	r2, [pc, #88]	; (8000ff4 <XMC_RTC_Init+0xa0>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	6213      	str	r3, [r2, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:113
    
    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM1_Msk) != 0U)
 8000fa2:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:113 (discriminator 1)
 8000fa4:	f7ff ffb6 	bl	8000f14 <XMC_SCU_GetMirrorStatus>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f8      	bne.n	8000fa4 <XMC_RTC_Init+0x50>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:117
	  {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
	  RTC->TIM1 = config->time.raw1;
 8000fb2:	4a10      	ldr	r2, [pc, #64]	; (8000ff4 <XMC_RTC_Init+0xa0>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	6253      	str	r3, [r2, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:119
    
    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM0_Msk) != 0U)
 8000fba:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:119 (discriminator 1)
 8000fbc:	f7ff ffaa 	bl	8000f14 <XMC_SCU_GetMirrorStatus>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f8      	bne.n	8000fbc <XMC_RTC_Init+0x68>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:123
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->ATIM0 = config->alarm.raw0;
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <XMC_RTC_Init+0xa0>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	6193      	str	r3, [r2, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:125
    
    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM1_Msk) != 0U)
 8000fd2:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:125 (discriminator 1)
 8000fd4:	f7ff ff9e 	bl	8000f14 <XMC_SCU_GetMirrorStatus>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1f8      	bne.n	8000fd4 <XMC_RTC_Init+0x80>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:129
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->ATIM1 = config->alarm.raw1;    
 8000fe2:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <XMC_RTC_Init+0xa0>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	61d3      	str	r3, [r2, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:131
  }  
  return XMC_RTC_STATUS_OK;
 8000fea:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:132
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	50004a00 	.word	0x50004a00

08000ff8 <XMC_RTC_EnableEvent>:
XMC_RTC_EnableEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:138

/*
 * Enable RTC periodic and alarm event(s)
 */ 
void XMC_RTC_EnableEvent(const uint32_t event)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:139
  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_MSKSR_Msk) != 0U)
 8001000:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:139 (discriminator 1)
 8001002:	f7ff ff87 	bl	8000f14 <XMC_SCU_GetMirrorStatus>
 8001006:	4603      	mov	r3, r0
 8001008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1f8      	bne.n	8001002 <XMC_RTC_EnableEvent+0xa>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:143
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->MSKSR |= event;
 8001010:	4904      	ldr	r1, [pc, #16]	; (8001024 <XMC_RTC_EnableEvent+0x2c>)
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <XMC_RTC_EnableEvent+0x2c>)
 8001014:	691a      	ldr	r2, [r3, #16]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4313      	orrs	r3, r2
 800101a:	610b      	str	r3, [r1, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:144
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	50004a00 	.word	0x50004a00

08001028 <XMC_RTC_DisableEvent>:
XMC_RTC_DisableEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:150

/*
 * Disable RTC periodic and alarm event(s)
 */ 
void XMC_RTC_DisableEvent(const uint32_t event)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:151
  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_MSKSR_Msk) != 0U)
 8001030:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:151 (discriminator 1)
 8001032:	f7ff ff6f 	bl	8000f14 <XMC_SCU_GetMirrorStatus>
 8001036:	4603      	mov	r3, r0
 8001038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1f8      	bne.n	8001032 <XMC_RTC_DisableEvent+0xa>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:155
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->MSKSR &= ~event;
 8001040:	4905      	ldr	r1, [pc, #20]	; (8001058 <XMC_RTC_DisableEvent+0x30>)
 8001042:	4b05      	ldr	r3, [pc, #20]	; (8001058 <XMC_RTC_DisableEvent+0x30>)
 8001044:	691a      	ldr	r2, [r3, #16]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	43db      	mvns	r3, r3
 800104a:	4013      	ands	r3, r2
 800104c:	610b      	str	r3, [r1, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:156
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	50004a00 	.word	0x50004a00

0800105c <XMC_RTC_ClearEvent>:
XMC_RTC_ClearEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:162

/*
 * Clear RTC periodic and alarm event(s)
 */ 
void XMC_RTC_ClearEvent(const uint32_t event)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:163
  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CLRSR_Msk) != 0U)
 8001064:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:163 (discriminator 1)
 8001066:	f7ff ff55 	bl	8000f14 <XMC_SCU_GetMirrorStatus>
 800106a:	4603      	mov	r3, r0
 800106c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1f8      	bne.n	8001066 <XMC_RTC_ClearEvent+0xa>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:167
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CLRSR = event;
 8001074:	4a03      	ldr	r2, [pc, #12]	; (8001084 <XMC_RTC_ClearEvent+0x28>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6153      	str	r3, [r2, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_rtc.c:168
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	50004a00 	.word	0x50004a00

08001088 <XMC_SCU_CLOCK_GetUsbClockSource>:
XMC_SCU_CLOCK_GetUsbClockSource():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc4_scu.h:1708
 * The clock source is read from from the \a USBSEL bits of \a USBCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_USBCLKSRC_t XMC_SCU_CLOCK_GetUsbClockSource(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc4_scu.h:1709
  return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <XMC_SCU_CLOCK_GetUsbClockSource+0x14>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc4_scu.h:1710
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	50004600 	.word	0x50004600

080010a0 <XMC_SCU_CLOCK_GetWdtClockSource>:
XMC_SCU_CLOCK_GetWdtClockSource():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc4_scu.h:1749
 * the clock source selected.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_SetWdtClockSource() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_WDTCLKSRC_t XMC_SCU_CLOCK_GetWdtClockSource(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc4_scu.h:1750
  return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
 80010a4:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <XMC_SCU_CLOCK_GetWdtClockSource+0x14>)
 80010a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc4_scu.h:1751
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	50004600 	.word	0x50004600

080010b8 <XMC_SCU_CLOCK_GetExternalOutputClockSource>:
XMC_SCU_CLOCK_GetExternalOutputClockSource():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc4_scu.h:1870
 * The value is obtained by reading \a ECKSEL bits of \a EXTCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_EXTOUTCLKSRC_t XMC_SCU_CLOCK_GetExternalOutputClockSource(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc4_scu.h:1871
  return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <XMC_SCU_CLOCK_GetExternalOutputClockSource+0x18>)
 80010be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc4_scu.h:1872
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	50004600 	.word	0x50004600

080010d4 <XMC_SCU_CLOCK_GetSystemClockFrequency>:
XMC_SCU_CLOCK_GetSystemClockFrequency():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc4_scu.h:2470
 * fSYS = fCPU << CPUDIV.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc4_scu.h:2471
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x1c>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x20>)
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc4_scu.h:2472
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	2000ffc0 	.word	0x2000ffc0
 80010f4:	50004600 	.word	0x50004600

080010f8 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
XMC_SCU_CLOCK_GetCpuClockFrequency():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_scu.h:426
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_scu.h:427
  return SystemCoreClock;
 80010fc:	4b02      	ldr	r3, [pc, #8]	; (8001108 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x10>)
 80010fe:	681b      	ldr	r3, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_scu.h:428
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	2000ffc0 	.word	0x2000ffc0

0800110c <XMC_SCU_lDelay>:
XMC_SCU_lDelay():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:209
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:212
  uint32_t i;

  SystemCoreClockUpdate();
 8001114:	f7ff fa28 	bl	8000568 <SystemCoreClockUpdate>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:213
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <XMC_SCU_lDelay+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0c      	ldr	r2, [pc, #48]	; (8001150 <XMC_SCU_lDelay+0x44>)
 800111e:	fba2 2303 	umull	r2, r3, r2, r3
 8001122:	0c9a      	lsrs	r2, r3, #18
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	fb02 f303 	mul.w	r3, r2, r3
 800112a:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:215

  for (i = 0U; i < delay; ++i)
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	e003      	b.n	800113a <XMC_SCU_lDelay+0x2e>
__NOP():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/cmsis_gcc.h:375 (discriminator 3)
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001132:	bf00      	nop
XMC_SCU_lDelay():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:215 (discriminator 3)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	3301      	adds	r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:215 (discriminator 1)
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	429a      	cmp	r2, r3
 8001140:	d3f7      	bcc.n	8001132 <XMC_SCU_lDelay+0x26>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:219
  {
    __NOP();
  }
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2000ffc0 	.word	0x2000ffc0
 8001150:	431bde83 	.word	0x431bde83

08001154 <XMC_SCU_INTERRUPT_EnableEvent>:
XMC_SCU_INTERRUPT_EnableEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:223

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:224
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 800115c:	4905      	ldr	r1, [pc, #20]	; (8001174 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 800115e:	4b05      	ldr	r3, [pc, #20]	; (8001174 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4313      	orrs	r3, r2
 8001166:	608b      	str	r3, [r1, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:225
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	50004074 	.word	0x50004074

08001178 <XMC_SCU_INTERRUPT_DisableEvent>:
XMC_SCU_INTERRUPT_DisableEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:229

/* API to disable the SCU event */
void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:230
  SCU_INTERRUPT->SRMSK &= (uint32_t)~event;
 8001180:	4905      	ldr	r1, [pc, #20]	; (8001198 <XMC_SCU_INTERRUPT_DisableEvent+0x20>)
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <XMC_SCU_INTERRUPT_DisableEvent+0x20>)
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	43db      	mvns	r3, r3
 800118a:	4013      	ands	r3, r2
 800118c:	608b      	str	r3, [r1, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:231
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	50004074 	.word	0x50004074

0800119c <XMC_SCU_INTERRUPT_TriggerEvent>:
XMC_SCU_INTERRUPT_TriggerEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:235

/* API to trigger the SCU event */
void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:236
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
 80011a4:	4905      	ldr	r1, [pc, #20]	; (80011bc <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 80011a8:	691a      	ldr	r2, [r3, #16]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	610b      	str	r3, [r1, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:237
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	50004074 	.word	0x50004074

080011c0 <XMC_SCU_INTERUPT_GetEventStatus>:
XMC_SCU_INTERUPT_GetEventStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:241

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:242
  return (SCU_INTERRUPT->SRRAW);
 80011c4:	4b02      	ldr	r3, [pc, #8]	; (80011d0 <XMC_SCU_INTERUPT_GetEventStatus+0x10>)
 80011c6:	685b      	ldr	r3, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:243
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	50004074 	.word	0x50004074

080011d4 <XMC_SCU_INTERRUPT_ClearEventStatus>:
XMC_SCU_INTERRUPT_ClearEventStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:247

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:248
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 80011dc:	4a03      	ldr	r2, [pc, #12]	; (80011ec <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60d3      	str	r3, [r2, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:249
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	50004074 	.word	0x50004074

080011f0 <XMC_SCU_GetBootMode>:
XMC_SCU_GetBootMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:254


/* API to retrieve the currently deployed device bootmode */
uint32_t XMC_SCU_GetBootMode(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:255
  return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <XMC_SCU_GetBootMode+0x14>)
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:256
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	50004000 	.word	0x50004000

08001208 <XMC_SCU_SetBootMode>:
XMC_SCU_SetBootMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:260

/* API to program a new device bootmode */
void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:261
  SCU_GENERAL->STCON = (uint32_t)bootmode;
 8001212:	4a04      	ldr	r2, [pc, #16]	; (8001224 <XMC_SCU_SetBootMode+0x1c>)
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	6113      	str	r3, [r2, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:262
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	50004000 	.word	0x50004000

08001228 <XMC_SCU_ReadGPR>:
XMC_SCU_ReadGPR():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:266

/* API to read from General purpose register */
uint32_t XMC_SCU_ReadGPR(const uint32_t index)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:267
  return (SCU_GENERAL->GPR[index]);
 8001230:	4a05      	ldr	r2, [pc, #20]	; (8001248 <XMC_SCU_ReadGPR+0x20>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	330a      	adds	r3, #10
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	685b      	ldr	r3, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:268
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	50004000 	.word	0x50004000

0800124c <XMC_SCU_WriteGPR>:
XMC_SCU_WriteGPR():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:272

/* API to write to GPR */
void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:273
  SCU_GENERAL->GPR[index] = data;
 8001256:	4a06      	ldr	r2, [pc, #24]	; (8001270 <XMC_SCU_WriteGPR+0x24>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	330a      	adds	r3, #10
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:274
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	50004000 	.word	0x50004000

08001274 <XMC_SCU_EnableOutOfRangeComparator>:
XMC_SCU_EnableOutOfRangeComparator():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:278

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:282
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] |= (uint32_t)(1UL << channel);
 800127e:	490a      	ldr	r1, [pc, #40]	; (80012a8 <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 8001280:	4a09      	ldr	r2, [pc, #36]	; (80012a8 <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3328      	adds	r3, #40	; 0x28
 8001286:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800128a:	2001      	movs	r0, #1
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	fa00 f303 	lsl.w	r3, r0, r3
 8001292:	431a      	orrs	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3328      	adds	r3, #40	; 0x28
 8001298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:283
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	50004000 	.word	0x50004000

080012ac <XMC_SCU_DisableOutOfRangeComparator>:
XMC_SCU_DisableOutOfRangeComparator():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:287

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:291
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] &= (uint32_t)~(1UL << channel);
 80012b6:	490a      	ldr	r1, [pc, #40]	; (80012e0 <XMC_SCU_DisableOutOfRangeComparator+0x34>)
 80012b8:	4a09      	ldr	r2, [pc, #36]	; (80012e0 <XMC_SCU_DisableOutOfRangeComparator+0x34>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3328      	adds	r3, #40	; 0x28
 80012be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012c2:	2001      	movs	r0, #1
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	fa00 f303 	lsl.w	r3, r0, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	401a      	ands	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3328      	adds	r3, #40	; 0x28
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:292
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	50004000 	.word	0x50004000

080012e4 <XMC_SCU_CalibrateTemperatureSensor>:
XMC_SCU_CalibrateTemperatureSensor():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:296

/* API to calibrate temperature sensor */
void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:297
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 80012ee:	4907      	ldr	r1, [pc, #28]	; (800130c <XMC_SCU_CalibrateTemperatureSensor+0x28>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	011a      	lsls	r2, r3, #4
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:298
                        (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	02db      	lsls	r3, r3, #11
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:297
}

/* API to calibrate temperature sensor */
void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
{
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 80012f8:	4313      	orrs	r3, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:299
                        (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
                        (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 80012fa:	f443 0308 	orr.w	r3, r3, #8912896	; 0x880000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:297
}

/* API to calibrate temperature sensor */
void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
{
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 80012fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:301
                        (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
                        (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
                        (uint32_t)(0x8UL << SCU_GENERAL_DTSCON_BGTRIM_Pos));
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	50004000 	.word	0x50004000

08001310 <XMC_SCU_EnableTemperatureSensor>:
XMC_SCU_EnableTemperatureSensor():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:304
/* API to enable die temperature measurement by powering the DTS module. */
void XMC_SCU_EnableTemperatureSensor(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:305
  SCU_GENERAL->DTSCON &= (uint32_t)~(SCU_GENERAL_DTSCON_PWD_Msk);
 8001314:	4a05      	ldr	r2, [pc, #20]	; (800132c <XMC_SCU_EnableTemperatureSensor+0x1c>)
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <XMC_SCU_EnableTemperatureSensor+0x1c>)
 8001318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800131c:	f023 0301 	bic.w	r3, r3, #1
 8001320:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:306
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	50004000 	.word	0x50004000

08001330 <XMC_SCU_DisableTemperatureSensor>:
XMC_SCU_DisableTemperatureSensor():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:310

/* API to disable die temperature measurement by powering the DTS module off. */
void XMC_SCU_DisableTemperatureSensor(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:311
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_PWD_Msk;
 8001334:	4a05      	ldr	r2, [pc, #20]	; (800134c <XMC_SCU_DisableTemperatureSensor+0x1c>)
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <XMC_SCU_DisableTemperatureSensor+0x1c>)
 8001338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:312
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	50004000 	.word	0x50004000

08001350 <XMC_SCU_IsTemperatureSensorEnabled>:
XMC_SCU_IsTemperatureSensorEnabled():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:316

/* API to provide the die temperature sensor power status. */
bool XMC_SCU_IsTemperatureSensorEnabled(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:317
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <XMC_SCU_IsTemperatureSensorEnabled+0x20>)
 8001356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	bf0c      	ite	eq
 8001362:	2301      	moveq	r3, #1
 8001364:	2300      	movne	r3, #0
 8001366:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:318
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	50004000 	.word	0x50004000

08001374 <XMC_SCU_IsTemperatureSensorReady>:
XMC_SCU_IsTemperatureSensorReady():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:322

/* API to check if the die temperature sensor is ready to start a measurement. */
bool XMC_SCU_IsTemperatureSensorReady(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:323
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RDY_Msk) != 0U);
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <XMC_SCU_IsTemperatureSensorReady+0x20>)
 800137a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800137e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001382:	2b00      	cmp	r3, #0
 8001384:	bf14      	ite	ne
 8001386:	2301      	movne	r3, #1
 8001388:	2300      	moveq	r3, #0
 800138a:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:324
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	50004000 	.word	0x50004000

08001398 <XMC_SCU_StartTemperatureMeasurement>:
XMC_SCU_StartTemperatureMeasurement():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:327
/* API to start device temperature measurements */
XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:328
  XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:330

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 80013a2:	f7ff ffd5 	bl	8001350 <XMC_SCU_IsTemperatureSensorEnabled>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f083 0301 	eor.w	r3, r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <XMC_SCU_StartTemperatureMeasurement+0x1e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:332
  {
    status = XMC_SCU_STATUS_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:335
  }
   
  if (XMC_SCU_IsTemperatureSensorBusy() == true)
 80013b6:	f000 f831 	bl	800141c <XMC_SCU_IsTemperatureSensorBusy>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <XMC_SCU_StartTemperatureMeasurement+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:337
  {
    status = XMC_SCU_STATUS_BUSY;
 80013c0:	2302      	movs	r3, #2
 80013c2:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:341
  }

  /* And start the measurement */
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <XMC_SCU_StartTemperatureMeasurement+0x48>)
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <XMC_SCU_StartTemperatureMeasurement+0x48>)
 80013c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:343
  
  return (status);
 80013d4:	79fb      	ldrb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:344
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	50004000 	.word	0x50004000

080013e4 <XMC_SCU_GetTemperatureMeasurement>:
XMC_SCU_GetTemperatureMeasurement():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:348

/* API to retrieve the temperature measured */
uint32_t XMC_SCU_GetTemperatureMeasurement(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:351
  uint32_t temperature;

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 80013ea:	f7ff ffb1 	bl	8001350 <XMC_SCU_IsTemperatureSensorEnabled>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f083 0301 	eor.w	r3, r3, #1
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <XMC_SCU_GetTemperatureMeasurement+0x1e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:353
  {
    temperature = 0x7FFFFFFFUL;
 80013fa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	e005      	b.n	800140e <XMC_SCU_GetTemperatureMeasurement+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:357
  }
  else
  {
    temperature = (uint32_t)((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RESULT_Msk) >> SCU_GENERAL_DTSSTAT_RESULT_Pos);
 8001402:	4b05      	ldr	r3, [pc, #20]	; (8001418 <XMC_SCU_GetTemperatureMeasurement+0x34>)
 8001404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001408:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800140c:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:360
  }
  
  return ((uint32_t)temperature);
 800140e:	687b      	ldr	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:361
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	50004000 	.word	0x50004000

0800141c <XMC_SCU_IsTemperatureSensorBusy>:
XMC_SCU_IsTemperatureSensorBusy():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:365

/* API to know whether Die temperature sensor is busy */
bool XMC_SCU_IsTemperatureSensorBusy(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:366
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <XMC_SCU_IsTemperatureSensorBusy+0x20>)
 8001422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800142a:	2b00      	cmp	r3, #0
 800142c:	bf14      	ite	ne
 800142e:	2301      	movne	r3, #1
 8001430:	2300      	moveq	r3, #0
 8001432:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:367
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	50004000 	.word	0x50004000

08001440 <XMC_SCU_WriteToRetentionMemory>:
XMC_SCU_WriteToRetentionMemory():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:455
}
#endif  

/* API to write into Retention memory in hibernate domain */
void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:459
  uint32_t rmacr;
  
  /* Get the address right */  
  rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	041b      	lsls	r3, r3, #16
 800144e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001452:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:462
  
  /* Transfer from RMDATA to Retention memory */
  rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:465
  
  /* Write desired data into RMDATA register */  
  SCU_GENERAL->RMDATA = data;
 800145c:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <XMC_SCU_WriteToRetentionMemory+0x48>)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:468
  
  /* Write address & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 8001464:	4a08      	ldr	r2, [pc, #32]	; (8001488 <XMC_SCU_WriteToRetentionMemory+0x48>)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:471
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 800146c:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:471 (discriminator 1)
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <XMC_SCU_WriteToRetentionMemory+0x48>)
 8001470:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f8      	bne.n	800146e <XMC_SCU_WriteToRetentionMemory+0x2e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:474
  {
  }
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	50004000 	.word	0x50004000

0800148c <XMC_SCU_ReadFromRetentionMemory>:
XMC_SCU_ReadFromRetentionMemory():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:478

/* API to read from Retention memory in hibernate domain */
uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:482
  uint32_t rmacr;

  /* Get the address right */  
  rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	041b      	lsls	r3, r3, #16
 8001498:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800149c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:485
  
  /* Transfer from RMDATA to Retention memory */
  rmacr &= ~((uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk));
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f023 0301 	bic.w	r3, r3, #1
 80014a4:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:488
  
  /* Writing an adress & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:491
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 80014ae:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:491 (discriminator 1)
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 80014b2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80014b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f8      	bne.n	80014b0 <XMC_SCU_ReadFromRetentionMemory+0x24>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:495
  {
  }

  return (SCU_GENERAL->RMDATA);
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 80014c0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:496
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	50004000 	.word	0x50004000

080014d4 <XMC_SCU_CLOCK_Init>:
XMC_SCU_CLOCK_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:500

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af02      	add	r7, sp, #8
 80014da:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:523
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80014dc:	2000      	movs	r0, #0
 80014de:	f000 fad7 	bl	8001a90 <XMC_SCU_CLOCK_SetSystemClockSource>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:525

  XMC_SCU_HIB_EnableHibernateDomain();
 80014e2:	f000 fd3d 	bl	8001f60 <XMC_SCU_HIB_EnableHibernateDomain>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:526
  if (config->enable_osculp == true)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	79db      	ldrb	r3, [r3, #7]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00a      	beq.n	8001504 <XMC_SCU_CLOCK_Init+0x30>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:528
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80014ee:	f000 ff1f 	bl	8002330 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:529
    while(XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80014f2:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:529 (discriminator 1)
 80014f4:	f000 ff0a 	bl	800230c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80014f8:	4603      	mov	r3, r0
 80014fa:	f083 0301 	eor.w	r3, r3, #1
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f7      	bne.n	80014f4 <XMC_SCU_CLOCK_Init+0x20>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:531
  }
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	7a5b      	ldrb	r3, [r3, #9]
 8001508:	4618      	mov	r0, r3
 800150a:	f000 fb4f 	bl	8001bac <XMC_SCU_HIB_SetStandbyClockSource>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:533

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	7a1b      	ldrb	r3, [r3, #8]
 8001512:	4618      	mov	r0, r3
 8001514:	f000 fcd4 	bl	8001ec0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:535

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7c1b      	ldrb	r3, [r3, #16]
 800151c:	4618      	mov	r0, r3
 800151e:	f000 fb63 	bl	8001be8 <XMC_SCU_CLOCK_SetSystemClockDivider>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:536
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7c5b      	ldrb	r3, [r3, #17]
 8001526:	4618      	mov	r0, r3
 8001528:	f000 fb86 	bl	8001c38 <XMC_SCU_CLOCK_SetCpuClockDivider>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:537
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7c9b      	ldrb	r3, [r3, #18]
 8001530:	4618      	mov	r0, r3
 8001532:	f000 fb6d 	bl	8001c10 <XMC_SCU_CLOCK_SetCcuClockDivider>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:538
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	7cdb      	ldrb	r3, [r3, #19]
 800153a:	4618      	mov	r0, r3
 800153c:	f000 fb90 	bl	8001c60 <XMC_SCU_CLOCK_SetPeripheralClockDivider>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:540

  if (config->enable_oschp == true)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	799b      	ldrb	r3, [r3, #6]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00a      	beq.n	800155e <XMC_SCU_CLOCK_Init+0x8a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:542
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8001548:	f000 ff7a 	bl	8002440 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:543
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 800154c:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:543 (discriminator 1)
 800154e:	f000 ff9f 	bl	8002490 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8001552:	4603      	mov	r3, r0
 8001554:	f083 0301 	eor.w	r3, r3, #1
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f7      	bne.n	800154e <XMC_SCU_CLOCK_Init+0x7a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:546
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	78db      	ldrb	r3, [r3, #3]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <XMC_SCU_CLOCK_Init+0x98>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:548
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8001566:	f000 ffeb 	bl	8002540 <XMC_SCU_CLOCK_DisableSystemPll>
 800156a:	e011      	b.n	8001590 <XMC_SCU_CLOCK_Init+0xbc>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:553
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 800156c:	f000 ffd8 	bl	8002520 <XMC_SCU_CLOCK_EnableSystemPll>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:554
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	8898      	ldrh	r0, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	78d9      	ldrb	r1, [r3, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:556
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	785b      	ldrb	r3, [r3, #1]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:554
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800157c:	461a      	mov	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:557
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	781b      	ldrb	r3, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:554
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001582:	461c      	mov	r4, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:558
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	789b      	ldrb	r3, [r3, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:554
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	4623      	mov	r3, r4
 800158c:	f000 ffe8 	bl	8002560 <XMC_SCU_CLOCK_StartSystemPll>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:562
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001598:	d103      	bne.n	80015a2 <XMC_SCU_CLOCK_Init+0xce>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:564
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 800159a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800159e:	f000 fa77 	bl	8001a90 <XMC_SCU_CLOCK_SetSystemClockSource>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:566
  }
  SystemCoreClockUpdate();
 80015a2:	f7fe ffe1 	bl	8000568 <SystemCoreClockUpdate>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:567
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd90      	pop	{r4, r7, pc}
 80015ae:	bf00      	nop

080015b0 <XMC_SCU_TRAP_Enable>:
XMC_SCU_TRAP_Enable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:571

/* API to enable a trap source */
void XMC_SCU_TRAP_Enable(const uint32_t trap)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:572
  SCU_TRAP->TRAPDIS &= (uint32_t)~trap;
 80015b8:	4905      	ldr	r1, [pc, #20]	; (80015d0 <XMC_SCU_TRAP_Enable+0x20>)
 80015ba:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <XMC_SCU_TRAP_Enable+0x20>)
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	4013      	ands	r3, r2
 80015c4:	608b      	str	r3, [r1, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:573
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	50004160 	.word	0x50004160

080015d4 <XMC_SCU_TRAP_Disable>:
XMC_SCU_TRAP_Disable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:577

/* API to disable a trap source */
void XMC_SCU_TRAP_Disable(const uint32_t trap)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:578
  SCU_TRAP->TRAPDIS |= (uint32_t)trap;
 80015dc:	4905      	ldr	r1, [pc, #20]	; (80015f4 <XMC_SCU_TRAP_Disable+0x20>)
 80015de:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <XMC_SCU_TRAP_Disable+0x20>)
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:579
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	50004160 	.word	0x50004160

080015f8 <XMC_SCU_TRAP_GetStatus>:
XMC_SCU_TRAP_GetStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:583

/* API to determine if a trap source has generated event */
uint32_t XMC_SCU_TRAP_GetStatus(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:584
  return (SCU_TRAP->TRAPRAW);
 80015fc:	4b02      	ldr	r3, [pc, #8]	; (8001608 <XMC_SCU_TRAP_GetStatus+0x10>)
 80015fe:	685b      	ldr	r3, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:585
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	50004160 	.word	0x50004160

0800160c <XMC_SCU_TRAP_Trigger>:
XMC_SCU_TRAP_Trigger():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:589

/* API to manually trigger a trap event */
void XMC_SCU_TRAP_Trigger(const uint32_t trap)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:590
  SCU_TRAP->TRAPSET = (uint32_t)trap;
 8001614:	4a03      	ldr	r2, [pc, #12]	; (8001624 <XMC_SCU_TRAP_Trigger+0x18>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6113      	str	r3, [r2, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:591
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	50004160 	.word	0x50004160

08001628 <XMC_SCU_TRAP_ClearStatus>:
XMC_SCU_TRAP_ClearStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:595

/* API to clear a trap event */
void XMC_SCU_TRAP_ClearStatus(const uint32_t trap)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:596
  SCU_TRAP->TRAPCLR = (uint32_t)trap;
 8001630:	4a03      	ldr	r2, [pc, #12]	; (8001640 <XMC_SCU_TRAP_ClearStatus+0x18>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	60d3      	str	r3, [r2, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:597
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	50004160 	.word	0x50004160

08001644 <XMC_SCU_PARITY_ClearStatus>:
XMC_SCU_PARITY_ClearStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:601

/* API to clear parity error event */
void XMC_SCU_PARITY_ClearStatus(const uint32_t memory)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:602
  SCU_PARITY->PEFLAG |= (uint32_t)memory; 
 800164c:	4905      	ldr	r1, [pc, #20]	; (8001664 <XMC_SCU_PARITY_ClearStatus+0x20>)
 800164e:	4b05      	ldr	r3, [pc, #20]	; (8001664 <XMC_SCU_PARITY_ClearStatus+0x20>)
 8001650:	695a      	ldr	r2, [r3, #20]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4313      	orrs	r3, r2
 8001656:	614b      	str	r3, [r1, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:603
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	5000413c 	.word	0x5000413c

08001668 <XMC_SCU_PARITY_GetStatus>:
XMC_SCU_PARITY_GetStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:607

/* API to determine if the specified parity error has occured or not */
uint32_t XMC_SCU_PARITY_GetStatus(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:608
  return (SCU_PARITY->PEFLAG);
 800166c:	4b02      	ldr	r3, [pc, #8]	; (8001678 <XMC_SCU_PARITY_GetStatus+0x10>)
 800166e:	695b      	ldr	r3, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:609
} 
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	5000413c 	.word	0x5000413c

0800167c <XMC_SCU_PARITY_Enable>:
XMC_SCU_PARITY_Enable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:613

/* API to enable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Enable(const uint32_t memory)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:614
  SCU_PARITY->PEEN |= (uint32_t)memory; 
 8001684:	4905      	ldr	r1, [pc, #20]	; (800169c <XMC_SCU_PARITY_Enable+0x20>)
 8001686:	4b05      	ldr	r3, [pc, #20]	; (800169c <XMC_SCU_PARITY_Enable+0x20>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4313      	orrs	r3, r2
 800168e:	600b      	str	r3, [r1, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:615
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	5000413c 	.word	0x5000413c

080016a0 <XMC_SCU_PARITY_Disable>:
XMC_SCU_PARITY_Disable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:619

/* API to disable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Disable(const uint32_t memory)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:620
  SCU_PARITY->PEEN &= (uint32_t)~memory; 
 80016a8:	4905      	ldr	r1, [pc, #20]	; (80016c0 <XMC_SCU_PARITY_Disable+0x20>)
 80016aa:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <XMC_SCU_PARITY_Disable+0x20>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	4013      	ands	r3, r2
 80016b4:	600b      	str	r3, [r1, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:621
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	5000413c 	.word	0x5000413c

080016c4 <XMC_SCU_PARITY_EnableTrapGeneration>:
XMC_SCU_PARITY_EnableTrapGeneration():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:625

/* API to enable trap assertion for the parity error source */
void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:626
  SCU_PARITY->PETE |= (uint32_t)memory; 
 80016cc:	4905      	ldr	r1, [pc, #20]	; (80016e4 <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	608b      	str	r3, [r1, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:627
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	5000413c 	.word	0x5000413c

080016e8 <XMC_SCU_PARITY_DisableTrapGeneration>:
XMC_SCU_PARITY_DisableTrapGeneration():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:631

/* API to disable the assertion of trap for the parity error source */
void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:632
  SCU_PARITY->PETE &= (uint32_t)~memory; 
 80016f0:	4905      	ldr	r1, [pc, #20]	; (8001708 <XMC_SCU_PARITY_DisableTrapGeneration+0x20>)
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <XMC_SCU_PARITY_DisableTrapGeneration+0x20>)
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	4013      	ands	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:633
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	5000413c 	.word	0x5000413c

0800170c <XMC_SCU_INTERRUPT_EnableNmiRequest>:
XMC_SCU_INTERRUPT_EnableNmiRequest():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:637

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:638
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 8001714:	4905      	ldr	r1, [pc, #20]	; (800172c <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8001718:	695a      	ldr	r2, [r3, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4313      	orrs	r3, r2
 800171e:	614b      	str	r3, [r1, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:639
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	50004074 	.word	0x50004074

08001730 <XMC_SCU_INTERRUPT_DisableNmiRequest>:
XMC_SCU_INTERRUPT_DisableNmiRequest():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:643

/* Disables a NMI source */
void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:644
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
 8001738:	4905      	ldr	r1, [pc, #20]	; (8001750 <XMC_SCU_INTERRUPT_DisableNmiRequest+0x20>)
 800173a:	4b05      	ldr	r3, [pc, #20]	; (8001750 <XMC_SCU_INTERRUPT_DisableNmiRequest+0x20>)
 800173c:	695a      	ldr	r2, [r3, #20]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	43db      	mvns	r3, r3
 8001742:	4013      	ands	r3, r2
 8001744:	614b      	str	r3, [r1, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:645
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr
 8001750:	50004074 	.word	0x50004074

08001754 <XMC_SCU_RESET_AssertPeripheralReset>:
XMC_SCU_RESET_AssertPeripheralReset():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:649

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:650
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	0f1b      	lsrs	r3, r3, #28
 8001760:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:651
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001768:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:653

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	4613      	mov	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	461a      	mov	r2, r3
 8001776:	4b04      	ldr	r3, [pc, #16]	; (8001788 <XMC_SCU_RESET_AssertPeripheralReset+0x34>)
 8001778:	4413      	add	r3, r2
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:654
}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	50004410 	.word	0x50004410

0800178c <XMC_SCU_RESET_DeassertPeripheralReset>:
XMC_SCU_RESET_DeassertPeripheralReset():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:658

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:659
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	0f1b      	lsrs	r3, r3, #28
 8001798:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:660
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80017a0:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:662

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	4613      	mov	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4413      	add	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80017b0:	4413      	add	r3, r2
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:663
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	50004414 	.word	0x50004414

080017c4 <XMC_SCU_RESET_IsPeripheralResetAsserted>:
XMC_SCU_RESET_IsPeripheralResetAsserted():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:667

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:668
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	0f1b      	lsrs	r3, r3, #28
 80017d0:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:669
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80017d8:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:671

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4613      	mov	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x40>)
 80017e8:	4413      	add	r3, r2
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	bf14      	ite	ne
 80017f4:	2301      	movne	r3, #1
 80017f6:	2300      	moveq	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:672
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	5000440c 	.word	0x5000440c

08001808 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>:
XMC_SCU_CLOCK_GetSystemPllClockFrequency():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:678

/*
 * API to retrieve frequency of System PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:684
  uint32_t clock_frequency;
  uint32_t p_div;
  uint32_t n_div;
  uint32_t k2_div;

  clock_frequency = XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency();
 800180e:	f000 f839 	bl	8001884 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>
 8001812:	60f8      	str	r0, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:685
  if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 8001814:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b00      	cmp	r3, #0
 800181e:	d009      	beq.n	8001834 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:689
  {
    /* Prescalar mode - fOSC is the parent*/
    clock_frequency = (uint32_t)(clock_frequency / 
                      ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1UL));
 8001820:	4b17      	ldr	r3, [pc, #92]	; (8001880 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001828:	3301      	adds	r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:688

  clock_frequency = XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency();
  if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
  {
    /* Prescalar mode - fOSC is the parent*/
    clock_frequency = (uint32_t)(clock_frequency / 
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	e01f      	b.n	8001874 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x6c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:693
                      ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1UL));
  }
  else
  {
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800183c:	0e1b      	lsrs	r3, r3, #24
 800183e:	3301      	adds	r3, #1
 8001840:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:694
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	3301      	adds	r3, #1
 800184e:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:695
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001858:	0c1b      	lsrs	r3, r3, #16
 800185a:	3301      	adds	r3, #1
 800185c:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:697
       
    clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	fb02 f203 	mul.w	r2, r2, r3
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	6839      	ldr	r1, [r7, #0]
 800186a:	fb01 f303 	mul.w	r3, r1, r3
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:700
  }

  return (clock_frequency);
 8001874:	68fb      	ldr	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:701
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	50004710 	.word	0x50004710

08001884 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>:
XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:707

/**
 * API to retrieve frequency of System PLL VCO input clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:711
  uint32_t clock_frequency;

  /* Prescalar mode - fOSC is the parent*/
  if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x28>)
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d103      	bne.n	800189e <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:713
  {
    clock_frequency = OSCHP_GetFrequency();
 8001896:	f7fe fed1 	bl	800063c <OSCHP_GetFrequency>
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	e001      	b.n	80018a2 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:717
  }
  else
  {
    clock_frequency = OFI_FREQUENCY;
 800189e:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x2c>)
 80018a0:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:720
  }
  
  return (clock_frequency);
 80018a2:	687b      	ldr	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:721
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	50004710 	.word	0x50004710
 80018b0:	016e3600 	.word	0x016e3600

080018b4 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>:
XMC_SCU_CLOCK_GetUsbPllClockFrequency():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:727

/*
 * API to retrieve frequency of USB PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:732
  uint32_t clock_frequency;
  uint32_t n_div;
  uint32_t p_div;
  
  clock_frequency = OSCHP_GetFrequency();
 80018ba:	f7fe febf 	bl	800063c <OSCHP_GetFrequency>
 80018be:	60f8      	str	r0, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:733
  if((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 80018c0:	4b10      	ldr	r3, [pc, #64]	; (8001904 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d116      	bne.n	80018fa <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x46>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:736
  {
    /* Normal mode - fVCO is the parent*/
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 80018cc:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	3301      	adds	r3, #1
 80018d8:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:737
    p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PDIV_Pos) + 1UL);
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80018e2:	0e1b      	lsrs	r3, r3, #24
 80018e4:	3301      	adds	r3, #1
 80018e6:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:738
    clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	fb02 f203 	mul.w	r2, r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f8:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:740
  }
  return (clock_frequency);
 80018fa:	68fb      	ldr	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:741
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	50004710 	.word	0x50004710

08001908 <XMC_SCU_CLOCK_GetCcuClockFrequency>:
XMC_SCU_CLOCK_GetCcuClockFrequency():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:747

/*
 * API to retrieve frequency of CCU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:748
  uint32_t frequency = 0UL;
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:749
  frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 8001912:	f7ff fbdf 	bl	80010d4 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8001916:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:751
  
  return (uint32_t)(frequency >> ((uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >>
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <XMC_SCU_CLOCK_GetCcuClockFrequency+0x28>)
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	fa22 f303 	lsr.w	r3, r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:753
                                              SCU_CLK_CCUCLKCR_CCUDIV_Pos)));
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	50004600 	.word	0x50004600

08001934 <XMC_SCU_CLOCK_GetUsbClockFrequency>:
XMC_SCU_CLOCK_GetUsbClockFrequency():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:759

/*
 * API to retrieve USB and SDMMC clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:760
  uint32_t frequency = 0UL;
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:763
  XMC_SCU_CLOCK_USBCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetUsbClockSource();
 800193e:	f7ff fba3 	bl	8001088 <XMC_SCU_CLOCK_GetUsbClockSource>
 8001942:	6038      	str	r0, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:765

  if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_SYSPLL)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800194a:	d103      	bne.n	8001954 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x20>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:767
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 800194c:	f7ff ff5c 	bl	8001808 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	e005      	b.n	8001960 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:769
  }
  else if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_USBPLL)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d102      	bne.n	8001960 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:771
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 800195a:	f7ff ffab 	bl	80018b4 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 800195e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:777
  }
  else
  {
  }

  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x44>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f003 0307 	and.w	r3, r3, #7
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:778
                                   SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 8001968:	3301      	adds	r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:777
  }
  else
  {
  }

  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	fbb2 f3f3 	udiv	r3, r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:779
                                   SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
}
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	50004600 	.word	0x50004600

0800197c <XMC_SCU_CLOCK_GetEbuClockFrequency>:
XMC_SCU_CLOCK_GetEbuClockFrequency():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:786
#if defined(EBU)
/*
 * API to retrieve EBU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:787
  uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001982:	f7ff ff41 	bl	8001808 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001986:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:789
  
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <XMC_SCU_CLOCK_GetEbuClockFrequency+0x24>)
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:790
                                   SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 8001990:	3301      	adds	r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:789
 */
uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
{
  uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
  
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	fbb2 f3f3 	udiv	r3, r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:791
                                   SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	50004600 	.word	0x50004600

080019a4 <XMC_SCU_CLOCK_GetWdtClockFrequency>:
XMC_SCU_CLOCK_GetWdtClockFrequency():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:819

/*
 * API to retrieve WDT clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:820
  uint32_t frequency = 0UL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:823
  XMC_SCU_CLOCK_WDTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetWdtClockSource();
 80019ae:	f7ff fb77 	bl	80010a0 <XMC_SCU_CLOCK_GetWdtClockSource>
 80019b2:	6038      	str	r0, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:825

  if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_PLL)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019ba:	d103      	bne.n	80019c4 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x20>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:827
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 80019bc:	f7ff ff24 	bl	8001808 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	e00c      	b.n	80019de <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:829
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_OFI)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d102      	bne.n	80019d0 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:831
  {
    frequency = OFI_FREQUENCY;
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x50>)
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	e006      	b.n	80019de <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:833
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_STDBY)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d6:	d102      	bne.n	80019de <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:835
  {
    frequency = OSI_FREQUENCY;
 80019d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019dc:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:842
  else
  {

  }

  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x54>)
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:843
                                    SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 80019e4:	3301      	adds	r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:842
  else
  {

  }

  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	fbb2 f3f3 	udiv	r3, r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:844
                                    SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	016e3600 	.word	0x016e3600
 80019f8:	50004600 	.word	0x50004600

080019fc <XMC_SCU_CLOCK_GetExternalOutputClockFrequency>:
XMC_SCU_CLOCK_GetExternalOutputClockFrequency():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:851
/**
 * @brief API to retrieve EXTERNAL-OUT clock frequency
 * @retval Clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:852
  uint32_t frequency = 0UL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:855
  XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetExternalOutputClockSource();
 8001a06:	f7ff fb57 	bl	80010b8 <XMC_SCU_CLOCK_GetExternalOutputClockSource>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:857

  if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d10d      	bne.n	8001a30 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x34>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:859
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001a14:	f7ff fef8 	bl	8001808 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001a18:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:861
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 8001a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x70>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	0c1b      	lsrs	r3, r3, #16
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:862
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8001a24:	3301      	adds	r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:861

  if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	e016      	b.n	8001a5e <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:864
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS)
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d103      	bne.n	8001a3e <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x42>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:866
  {
    frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 8001a36:	f7ff fb4d 	bl	80010d4 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	e00f      	b.n	8001a5e <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:868
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
 8001a3e:	78fb      	ldrb	r3, [r7, #3]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d10c      	bne.n	8001a5e <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:870
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 8001a44:	f7ff ff36 	bl	80018b4 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 8001a48:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:872
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 8001a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x70>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	0c1b      	lsrs	r3, r3, #16
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:873
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8001a54:	3301      	adds	r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:872
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5c:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:880
  else
  {

  }

  return (frequency);
 8001a5e:	687b      	ldr	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:881
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	50004600 	.word	0x50004600
 8001a6c:	01ff0000 	.word	0x01ff0000

08001a70 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:
XMC_SCU_CLOCK_GetPeripheralClockFrequency():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:887

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:888
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8001a74:	f7ff fb40 	bl	80010f8 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8001a78:	4602      	mov	r2, r0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:889
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8001a7a:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:888
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8001a82:	fa22 f303 	lsr.w	r3, r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:890
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	50004600 	.word	0x50004600

08001a90 <XMC_SCU_CLOCK_SetSystemClockSource>:
XMC_SCU_CLOCK_SetSystemClockSource():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:894

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:895
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8001a98:	4906      	ldr	r1, [pc, #24]	; (8001ab4 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	60cb      	str	r3, [r1, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:897
                      ((uint32_t)source);
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	50004600 	.word	0x50004600

08001ab8 <XMC_SCU_CLOCK_SetUsbClockSource>:
XMC_SCU_CLOCK_SetUsbClockSource():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:901

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:902
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8001ac0:	4906      	ldr	r1, [pc, #24]	; (8001adc <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	618b      	str	r3, [r1, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:904
                      ((uint32_t)source);
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	50004600 	.word	0x50004600

08001ae0 <XMC_SCU_CLOCK_SetWdtClockSource>:
XMC_SCU_CLOCK_SetWdtClockSource():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:908

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:909
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8001ae8:	4906      	ldr	r1, [pc, #24]	; (8001b04 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	624b      	str	r3, [r1, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:911
                      ((uint32_t)source);
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	50004600 	.word	0x50004600

08001b08 <XMC_SCU_CLOCK_SetExternalOutputClockSource>:
XMC_SCU_CLOCK_SetExternalOutputClockSource():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:915

/* API to select fEXT */
void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:916
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 8001b12:	4906      	ldr	r1, [pc, #24]	; (8001b2c <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x24>)
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x24>)
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	f023 0203 	bic.w	r2, r3, #3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:917
                      ((uint32_t)source);
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:916
}

/* API to select fEXT */
void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
{
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	628b      	str	r3, [r1, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:918
                      ((uint32_t)source);
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr
 8001b2c:	50004600 	.word	0x50004600

08001b30 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
XMC_SCU_CLOCK_SetSystemPllClockSource():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:922

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	80fb      	strh	r3, [r7, #6]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:924
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d108      	bne.n	8001b52 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:926
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8001b40:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b4a:	f023 0301 	bic.w	r3, r3, #1
 8001b4e:	60d3      	str	r3, [r2, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:932
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
}
 8001b50:	e007      	b.n	8001b62 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:930
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8001b52:	4a06      	ldr	r2, [pc, #24]	; (8001b6c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	60d3      	str	r3, [r2, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:932
  }
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	50004710 	.word	0x50004710

08001b70 <XMC_SCU_HIB_SetRtcClockSource>:
XMC_SCU_HIB_SetRtcClockSource():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:936

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:938
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001b7a:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:938 (discriminator 1)
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8001b7e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f8      	bne.n	8001b7c <XMC_SCU_HIB_SetRtcClockSource+0xc>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:942
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8001b8a:	4907      	ldr	r1, [pc, #28]	; (8001ba8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f023 0240 	bic.w	r2, r3, #64	; 0x40
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:943
                        ((uint32_t)source);
 8001b94:	79fb      	ldrb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:942
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8001b96:	4313      	orrs	r3, r2
 8001b98:	60cb      	str	r3, [r1, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:944
                        ((uint32_t)source);
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr
 8001ba4:	50004000 	.word	0x50004000
 8001ba8:	50004300 	.word	0x50004300

08001bac <XMC_SCU_HIB_SetStandbyClockSource>:
XMC_SCU_HIB_SetStandbyClockSource():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:948

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:949
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001bb6:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:949 (discriminator 1)
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 8001bba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f8      	bne.n	8001bb8 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:953
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8001bc6:	4907      	ldr	r1, [pc, #28]	; (8001be4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:954
                        ((uint32_t)source);
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:953
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	60cb      	str	r3, [r1, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:955
                        ((uint32_t)source);
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	50004000 	.word	0x50004000
 8001be4:	50004300 	.word	0x50004300

08001be8 <XMC_SCU_CLOCK_SetSystemClockDivider>:
XMC_SCU_CLOCK_SetSystemClockDivider():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:959

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:963
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8001bf0:	4906      	ldr	r1, [pc, #24]	; (8001c0c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:964
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3b01      	subs	r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:963
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	60cb      	str	r3, [r1, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:965
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	50004600 	.word	0x50004600

08001c10 <XMC_SCU_CLOCK_SetCcuClockDivider>:
XMC_SCU_CLOCK_SetCcuClockDivider():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:969

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:972
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8001c18:	4906      	ldr	r1, [pc, #24]	; (8001c34 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	f023 0201 	bic.w	r2, r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:973
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3b01      	subs	r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:972
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8001c26:	4313      	orrs	r3, r2
 8001c28:	620b      	str	r3, [r1, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:974
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	50004600 	.word	0x50004600

08001c38 <XMC_SCU_CLOCK_SetCpuClockDivider>:
XMC_SCU_CLOCK_SetCpuClockDivider():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:978

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:981
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8001c40:	4906      	ldr	r1, [pc, #24]	; (8001c5c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	f023 0201 	bic.w	r2, r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:982
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3b01      	subs	r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:981
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	610b      	str	r3, [r1, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:983
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr
 8001c5c:	50004600 	.word	0x50004600

08001c60 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:
XMC_SCU_CLOCK_SetPeripheralClockDivider():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:987

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:990
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8001c68:	4906      	ldr	r1, [pc, #24]	; (8001c84 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	f023 0201 	bic.w	r2, r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:991
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3b01      	subs	r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:990
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8001c76:	4313      	orrs	r3, r2
 8001c78:	614b      	str	r3, [r1, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:992
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	50004600 	.word	0x50004600

08001c88 <XMC_SCU_CLOCK_SetUsbClockDivider>:
XMC_SCU_CLOCK_SetUsbClockDivider():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:996

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1000
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8001c90:	4906      	ldr	r1, [pc, #24]	; (8001cac <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f023 0207 	bic.w	r2, r3, #7
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1001
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3b01      	subs	r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1000
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	618b      	str	r3, [r1, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1002
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	50004600 	.word	0x50004600

08001cb0 <XMC_SCU_CLOCK_SetEbuClockDivider>:
XMC_SCU_CLOCK_SetEbuClockDivider():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1007

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1011
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8001cb8:	4906      	ldr	r1, [pc, #24]	; (8001cd4 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1012
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3b01      	subs	r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1011
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61cb      	str	r3, [r1, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1013
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	50004600 	.word	0x50004600

08001cd8 <XMC_SCU_CLOCK_SetWdtClockDivider>:
XMC_SCU_CLOCK_SetWdtClockDivider():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1018
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1022
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8001ce0:	4906      	ldr	r1, [pc, #24]	; (8001cfc <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1023
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3b01      	subs	r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1022
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	624b      	str	r3, [r1, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1024
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr
 8001cfc:	50004600 	.word	0x50004600

08001d00 <XMC_SCU_CLOCK_SetExternalOutputClockDivider>:
XMC_SCU_CLOCK_SetExternalOutputClockDivider():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1028

/* API to program the divider placed between fext and its parent */
void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1032
  XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );

  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 8001d08:	4908      	ldr	r1, [pc, #32]	; (8001d2c <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1033
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	3a01      	subs	r2, #1
 8001d1a:	0412      	lsls	r2, r2, #16
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1032
void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );

  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	628b      	str	r3, [r1, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1034
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	50004600 	.word	0x50004600

08001d30 <XMC_SCU_CLOCK_EnableClock>:
XMC_SCU_CLOCK_EnableClock():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1047
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1048
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8001d3a:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1049
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	50004600 	.word	0x50004600

08001d50 <XMC_SCU_CLOCK_DisableClock>:
XMC_SCU_CLOCK_DisableClock():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1053

/* API to disable a given module clock */
void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1054
  SCU_CLK->CLKCLR = ((uint32_t)clock);
 8001d5a:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <XMC_SCU_CLOCK_DisableClock+0x1c>)
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	6093      	str	r3, [r2, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1055
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	50004600 	.word	0x50004600

08001d70 <XMC_SCU_CLOCK_IsClockEnabled>:
XMC_SCU_CLOCK_IsClockEnabled():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1059

/* API to determine if module clock of the given peripheral is enabled */
bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1060
  return (bool)(SCU_CLK->CLKSTAT & ((uint32_t)clock));
 8001d7a:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <XMC_SCU_CLOCK_IsClockEnabled+0x28>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	bf14      	ite	ne
 8001d86:	2301      	movne	r3, #1
 8001d88:	2300      	moveq	r3, #0
 8001d8a:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1061
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	50004600 	.word	0x50004600

08001d9c <XMC_SCU_POWER_GetEVR13Voltage>:
XMC_SCU_POWER_GetEVR13Voltage():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1093
  return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
}
#endif

float XMC_SCU_POWER_GetEVR13Voltage(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1094
  return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <XMC_SCU_POWER_GetEVR13Voltage+0x20>)
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	4618      	mov	r0, r3
 8001da8:	f00c fe82 	bl	800eab0 <__aeabi_ui2f>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4904      	ldr	r1, [pc, #16]	; (8001dc0 <XMC_SCU_POWER_GetEVR13Voltage+0x24>)
 8001db0:	4618      	mov	r0, r3
 8001db2:	f00c fed5 	bl	800eb60 <__aeabi_fmul>
 8001db6:	4603      	mov	r3, r0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1095
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	50004200 	.word	0x50004200
 8001dc0:	3bbe0ded 	.word	0x3bbe0ded

08001dc4 <XMC_SCU_POWER_GetEVR33Voltage>:
XMC_SCU_POWER_GetEVR33Voltage():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1098

float XMC_SCU_POWER_GetEVR33Voltage(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1099
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <XMC_SCU_POWER_GetEVR33Voltage+0x24>)
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f00c fe6c 	bl	800eab0 <__aeabi_ui2f>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4904      	ldr	r1, [pc, #16]	; (8001dec <XMC_SCU_POWER_GetEVR33Voltage+0x28>)
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f00c febf 	bl	800eb60 <__aeabi_fmul>
 8001de2:	4603      	mov	r3, r0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1100
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	50004200 	.word	0x50004200
 8001dec:	3cb851ec 	.word	0x3cb851ec

08001df0 <XMC_SCU_CLOCK_EnableUsbPll>:
XMC_SCU_CLOCK_EnableUsbPll():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1104

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1105
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8001df4:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfe:	f023 0302 	bic.w	r3, r3, #2
 8001e02:	6153      	str	r3, [r2, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1106
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr
 8001e0c:	50004710 	.word	0x50004710

08001e10 <XMC_SCU_CLOCK_DisableUsbPll>:
XMC_SCU_CLOCK_DisableUsbPll():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1110

/* API to disable USB PLL for USB clock */
void XMC_SCU_CLOCK_DisableUsbPll(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1111
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8001e14:	4a05      	ldr	r2, [pc, #20]	; (8001e2c <XMC_SCU_CLOCK_DisableUsbPll+0x1c>)
 8001e16:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <XMC_SCU_CLOCK_DisableUsbPll+0x1c>)
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1e:	f043 0302 	orr.w	r3, r3, #2
 8001e22:	6153      	str	r3, [r2, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1112
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	50004710 	.word	0x50004710

08001e30 <XMC_SCU_CLOCK_StartUsbPll>:
XMC_SCU_CLOCK_StartUsbPll():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1116

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1118
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8001e3a:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8001e3c:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6153      	str	r3, [r2, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1121

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8001e46:	4a16      	ldr	r2, [pc, #88]	; (8001ea0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	f043 0310 	orr.w	r3, r3, #16
 8001e50:	6153      	str	r3, [r2, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1124

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8001e52:	4913      	ldr	r1, [pc, #76]	; (8001ea0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	021a      	lsls	r2, r3, #8
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1125
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	061b      	lsls	r3, r3, #24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1124

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8001e60:	4313      	orrs	r3, r2
 8001e62:	614b      	str	r3, [r1, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1128
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8001e64:	4a0e      	ldr	r2, [pc, #56]	; (8001ea0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e6e:	6153      	str	r3, [r2, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1131

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8001e70:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8001e72:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	f023 0310 	bic.w	r3, r3, #16
 8001e7a:	6153      	str	r3, [r2, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1134

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8001e7c:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e86:	6153      	str	r3, [r2, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1136

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8001e88:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1136 (discriminator 1)
 8001e8a:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f9      	beq.n	8001e8a <XMC_SCU_CLOCK_StartUsbPll+0x5a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1141
  {
    /* wait for PLL Lock */
  }

}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	50004710 	.word	0x50004710

08001ea4 <XMC_SCU_CLOCK_StopUsbPll>:
XMC_SCU_CLOCK_StopUsbPll():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1145

/* API to disable USB PLL operation */
void XMC_SCU_CLOCK_StopUsbPll(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1146
  SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
 8001ea8:	4b03      	ldr	r3, [pc, #12]	; (8001eb8 <XMC_SCU_CLOCK_StopUsbPll+0x14>)
 8001eaa:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <XMC_SCU_CLOCK_StopUsbPll+0x18>)
 8001eac:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1148
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	50004710 	.word	0x50004710
 8001ebc:	00010003 	.word	0x00010003

08001ec0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
XMC_SCU_CLOCK_SetBackupClockCalibrationMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1152

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1154
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8001eca:	4a0f      	ldr	r2, [pc, #60]	; (8001f08 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ed4:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1156

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d10e      	bne.n	8001efa <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1159
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8001edc:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001ee6:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1160
    XMC_SCU_lDelay(100UL);
 8001ee8:	2064      	movs	r0, #100	; 0x64
 8001eea:	f7ff f90f 	bl	800110c <XMC_SCU_lDelay>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1163

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8001eee:	4a06      	ldr	r2, [pc, #24]	; (8001f08 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ef8:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1166
  }

  XMC_SCU_lDelay(100UL);
 8001efa:	2064      	movs	r0, #100	; 0x64
 8001efc:	f7ff f906 	bl	800110c <XMC_SCU_lDelay>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1167
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	50004710 	.word	0x50004710

08001f0c <XMC_SCU_POWER_EnableUsb>:
XMC_SCU_POWER_EnableUsb():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1173



/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1175
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <XMC_SCU_POWER_EnableUsb+0x14>)
 8001f12:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f16:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1179
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	50004200 	.word	0x50004200

08001f24 <XMC_SCU_POWER_DisableUsb>:
XMC_SCU_POWER_DisableUsb():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1183

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1185
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <XMC_SCU_POWER_DisableUsb+0x14>)
 8001f2a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f2e:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1189
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif    
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	50004200 	.word	0x50004200

08001f3c <XMC_SCU_CLOCK_IsUsbPllLocked>:
XMC_SCU_CLOCK_IsUsbPllLocked():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1193

/* API to check USB PLL is locked or not */
bool XMC_SCU_CLOCK_IsUsbPllLocked(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1194
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <XMC_SCU_CLOCK_IsUsbPllLocked+0x20>)
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bf14      	ite	ne
 8001f4c:	2301      	movne	r3, #1
 8001f4e:	2300      	moveq	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1195
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	50004710 	.word	0x50004710

08001f60 <XMC_SCU_HIB_EnableHibernateDomain>:
XMC_SCU_HIB_EnableHibernateDomain():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1199

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1201
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d109      	bne.n	8001f84 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1203
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1205
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8001f76:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1205 (discriminator 1)
 8001f78:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f9      	beq.n	8001f78 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1212
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00a      	beq.n	8001fa6 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1214
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f96:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1215
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8001f98:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1215 (discriminator 1)
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f9      	bne.n	8001f9a <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1220
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	50004200 	.word	0x50004200
 8001fb4:	50004400 	.word	0x50004400

08001fb8 <XMC_SCU_HIB_DisableHibernateDomain>:
XMC_SCU_HIB_DisableHibernateDomain():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1224

/* API to power down the hibernation domain */
void XMC_SCU_HIB_DisableHibernateDomain(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1226
  /* Disable hibernate domain */   
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <XMC_SCU_HIB_DisableHibernateDomain+0x1c>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1228
  /* Reset of hibernate domain reset */  
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 8001fc2:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <XMC_SCU_HIB_DisableHibernateDomain+0x20>)
 8001fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc8:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1229
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	50004200 	.word	0x50004200
 8001fd8:	50004400 	.word	0x50004400

08001fdc <XMC_SCU_HIB_IsHibernateDomainEnabled>:
XMC_SCU_HIB_IsHibernateDomainEnabled():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1233

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1234
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	; (800200c <XMC_SCU_HIB_IsHibernateDomainEnabled+0x30>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d007      	beq.n	8001ffc <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1235 (discriminator 1)
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x34>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1234 (discriminator 1)
}

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1234 (discriminator 3)
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <XMC_SCU_HIB_IsHibernateDomainEnabled+0x22>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1234 (discriminator 4)
 8001ffc:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1234 (discriminator 6)
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1236 (discriminator 6)
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	50004200 	.word	0x50004200
 8002010:	50004400 	.word	0x50004400

08002014 <XMC_SCU_HIB_EnableInternalSlowClock>:
XMC_SCU_HIB_EnableInternalSlowClock():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1240

/* API to enable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_EnableInternalSlowClock(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1241
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8002018:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1241 (discriminator 1)
 800201a:	4b08      	ldr	r3, [pc, #32]	; (800203c <XMC_SCU_HIB_EnableInternalSlowClock+0x28>)
 800201c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002020:	f003 0320 	and.w	r3, r3, #32
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1f8      	bne.n	800201a <XMC_SCU_HIB_EnableInternalSlowClock+0x6>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1245
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL &= (uint32_t)~(SCU_HIBERNATE_OSCSICTRL_PWD_Msk);
 8002028:	4a05      	ldr	r2, [pc, #20]	; (8002040 <XMC_SCU_HIB_EnableInternalSlowClock+0x2c>)
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <XMC_SCU_HIB_EnableInternalSlowClock+0x2c>)
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f023 0301 	bic.w	r3, r3, #1
 8002032:	6153      	str	r3, [r2, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1246
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	50004000 	.word	0x50004000
 8002040:	50004300 	.word	0x50004300

08002044 <XMC_SCU_HIB_DisableInternalSlowClock>:
XMC_SCU_HIB_DisableInternalSlowClock():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1250

/* API to disable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_DisableInternalSlowClock(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1251
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8002048:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1251 (discriminator 1)
 800204a:	4b08      	ldr	r3, [pc, #32]	; (800206c <XMC_SCU_HIB_DisableInternalSlowClock+0x28>)
 800204c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002050:	f003 0320 	and.w	r3, r3, #32
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1f8      	bne.n	800204a <XMC_SCU_HIB_DisableInternalSlowClock+0x6>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1255
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL |= (uint32_t)SCU_HIBERNATE_OSCSICTRL_PWD_Msk;
 8002058:	4a05      	ldr	r2, [pc, #20]	; (8002070 <XMC_SCU_HIB_DisableInternalSlowClock+0x2c>)
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <XMC_SCU_HIB_DisableInternalSlowClock+0x2c>)
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	6153      	str	r3, [r2, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1256
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	50004000 	.word	0x50004000
 8002070:	50004300 	.word	0x50004300

08002074 <XMC_SCU_HIB_ClearEventStatus>:
XMC_SCU_HIB_ClearEventStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1259

void XMC_SCU_HIB_ClearEventStatus(int32_t event)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1260
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 800207c:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1260 (discriminator 1)
 800207e:	4b07      	ldr	r3, [pc, #28]	; (800209c <XMC_SCU_HIB_ClearEventStatus+0x28>)
 8002080:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1f8      	bne.n	800207e <XMC_SCU_HIB_ClearEventStatus+0xa>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1264
  {
    /* Wait until HDCLR register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->HDCLR = event;
 800208c:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <XMC_SCU_HIB_ClearEventStatus+0x2c>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1265
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr
 800209c:	50004000 	.word	0x50004000
 80020a0:	50004300 	.word	0x50004300

080020a4 <XMC_SCU_HIB_TriggerEvent>:
XMC_SCU_HIB_TriggerEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1268

void XMC_SCU_HIB_TriggerEvent(int32_t event)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1269
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 80020ac:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1269 (discriminator 1)
 80020ae:	4b07      	ldr	r3, [pc, #28]	; (80020cc <XMC_SCU_HIB_TriggerEvent+0x28>)
 80020b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f8      	bne.n	80020ae <XMC_SCU_HIB_TriggerEvent+0xa>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1273
  {
    /* Wait until HDSET register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDSET = event;
 80020bc:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <XMC_SCU_HIB_TriggerEvent+0x2c>)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6093      	str	r3, [r2, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1274
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	50004000 	.word	0x50004000
 80020d0:	50004300 	.word	0x50004300

080020d4 <XMC_SCU_HIB_EnableEvent>:
XMC_SCU_HIB_EnableEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1277

void XMC_SCU_HIB_EnableEvent(int32_t event)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1289
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80020dc:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1289 (discriminator 1)
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <XMC_SCU_HIB_EnableEvent+0x30>)
 80020e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f8      	bne.n	80020de <XMC_SCU_HIB_EnableEvent+0xa>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1293
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= event;
 80020ec:	4906      	ldr	r1, [pc, #24]	; (8002108 <XMC_SCU_HIB_EnableEvent+0x34>)
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <XMC_SCU_HIB_EnableEvent+0x34>)
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	60cb      	str	r3, [r1, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1294
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	50004000 	.word	0x50004000
 8002108:	50004300 	.word	0x50004300

0800210c <XMC_SCU_HIB_DisableEvent>:
XMC_SCU_HIB_DisableEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1297

void XMC_SCU_HIB_DisableEvent(int32_t event)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1309
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002114:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1309 (discriminator 1)
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <XMC_SCU_HIB_DisableEvent+0x30>)
 8002118:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f8      	bne.n	8002116 <XMC_SCU_HIB_DisableEvent+0xa>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1313
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR &= ~event;
 8002124:	4906      	ldr	r1, [pc, #24]	; (8002140 <XMC_SCU_HIB_DisableEvent+0x34>)
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <XMC_SCU_HIB_DisableEvent+0x34>)
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	43d2      	mvns	r2, r2
 800212e:	4013      	ands	r3, r2
 8002130:	60cb      	str	r3, [r1, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1314
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	50004000 	.word	0x50004000
 8002140:	50004300 	.word	0x50004300

08002144 <XMC_SCU_HIB_EnterHibernateState>:
XMC_SCU_HIB_EnterHibernateState():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1317

void XMC_SCU_HIB_EnterHibernateState(void) 
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1318
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002148:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1318 (discriminator 1)
 800214a:	4b08      	ldr	r3, [pc, #32]	; (800216c <XMC_SCU_HIB_EnterHibernateState+0x28>)
 800214c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1f8      	bne.n	800214a <XMC_SCU_HIB_EnterHibernateState+0x6>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1322
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 8002158:	4a05      	ldr	r2, [pc, #20]	; (8002170 <XMC_SCU_HIB_EnterHibernateState+0x2c>)
 800215a:	4b05      	ldr	r3, [pc, #20]	; (8002170 <XMC_SCU_HIB_EnterHibernateState+0x2c>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f043 0310 	orr.w	r3, r3, #16
 8002162:	60d3      	str	r3, [r2, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1323
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr
 800216c:	50004000 	.word	0x50004000
 8002170:	50004300 	.word	0x50004300

08002174 <XMC_SCU_HIB_EnterHibernateStateEx>:
XMC_SCU_HIB_EnterHibernateStateEx():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1326

void XMC_SCU_HIB_EnterHibernateStateEx(XMC_SCU_HIB_HIBERNATE_MODE_t mode)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1327
  if (mode == XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL)
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <XMC_SCU_HIB_EnterHibernateStateEx+0x14>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1329
  {
    XMC_SCU_HIB_EnterHibernateState();
 8002184:	f7ff ffde 	bl	8002144 <XMC_SCU_HIB_EnterHibernateState>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1341
      /* Wait until HDCR register in hibernate domain is ready to accept a write */
    }
    SCU_HIBERNATE->HINTSET = SCU_HIBERNATE_HINTSET_HIBNINT_Msk;
  }
#endif
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <XMC_SCU_HIB_SetWakeupTriggerInput>:
XMC_SCU_HIB_SetWakeupTriggerInput():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1344

void XMC_SCU_HIB_SetWakeupTriggerInput(XMC_SCU_HIB_IO_t pin)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1345
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800219a:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1345 (discriminator 1)
 800219c:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <XMC_SCU_HIB_SetWakeupTriggerInput+0x44>)
 800219e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f8      	bne.n	800219c <XMC_SCU_HIB_SetWakeupTriggerInput+0xc>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1350
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d106      	bne.n	80021be <XMC_SCU_HIB_SetWakeupTriggerInput+0x2e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1352
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 80021b0:	4a09      	ldr	r2, [pc, #36]	; (80021d8 <XMC_SCU_HIB_SetWakeupTriggerInput+0x48>)
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <XMC_SCU_HIB_SetWakeupTriggerInput+0x48>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ba:	60d3      	str	r3, [r2, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1358
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
  }
}
 80021bc:	e005      	b.n	80021ca <XMC_SCU_HIB_SetWakeupTriggerInput+0x3a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1356
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
 80021be:	4a06      	ldr	r2, [pc, #24]	; (80021d8 <XMC_SCU_HIB_SetWakeupTriggerInput+0x48>)
 80021c0:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <XMC_SCU_HIB_SetWakeupTriggerInput+0x48>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021c8:	60d3      	str	r3, [r2, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1358
  }
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	50004000 	.word	0x50004000
 80021d8:	50004300 	.word	0x50004300

080021dc <XMC_SCU_HIB_SetPinMode>:
XMC_SCU_HIB_SetPinMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1361

void XMC_SCU_HIB_SetPinMode(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	6039      	str	r1, [r7, #0]
 80021e6:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1362
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80021e8:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1362 (discriminator 1)
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <XMC_SCU_HIB_SetPinMode+0x4c>)
 80021ec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f8      	bne.n	80021ea <XMC_SCU_HIB_SetPinMode+0xe>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1366
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 80021f8:	480c      	ldr	r0, [pc, #48]	; (800222c <XMC_SCU_HIB_SetPinMode+0x50>)
 80021fa:	4b0c      	ldr	r3, [pc, #48]	; (800222c <XMC_SCU_HIB_SetPinMode+0x50>)
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	401a      	ands	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1367
                        (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	6839      	ldr	r1, [r7, #0]
 8002214:	fa01 f303 	lsl.w	r3, r1, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1366
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8002218:	4313      	orrs	r3, r2
 800221a:	60c3      	str	r3, [r0, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1368
                        (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	50004000 	.word	0x50004000
 800222c:	50004300 	.word	0x50004300

08002230 <XMC_SCU_HIB_SetPinOutputLevel>:
XMC_SCU_HIB_SetPinOutputLevel():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1371

void XMC_SCU_HIB_SetPinOutputLevel(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	460a      	mov	r2, r1
 800223a:	71fb      	strb	r3, [r7, #7]
 800223c:	4613      	mov	r3, r2
 800223e:	80bb      	strh	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1372
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002240:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1372 (discriminator 1)
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <XMC_SCU_HIB_SetPinOutputLevel+0x4c>)
 8002244:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f8      	bne.n	8002242 <XMC_SCU_HIB_SetPinOutputLevel+0x12>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1376
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8002250:	480b      	ldr	r0, [pc, #44]	; (8002280 <XMC_SCU_HIB_SetPinOutputLevel+0x50>)
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <XMC_SCU_HIB_SetPinOutputLevel+0x50>)
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800225c:	fa01 f303 	lsl.w	r3, r1, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	4013      	ands	r3, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1377
                        (level << pin);
 8002264:	88b9      	ldrh	r1, [r7, #4]
 8002266:	79fa      	ldrb	r2, [r7, #7]
 8002268:	fa01 f202 	lsl.w	r2, r1, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1376
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 800226c:	4313      	orrs	r3, r2
 800226e:	60c3      	str	r3, [r0, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1378
                        (level << pin);
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	50004000 	.word	0x50004000
 8002280:	50004300 	.word	0x50004300

08002284 <XMC_SCU_HIB_SetInput0>:
XMC_SCU_HIB_SetInput0():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1381

void XMC_SCU_HIB_SetInput0(XMC_SCU_HIB_IO_t pin)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1382
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800228e:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1382 (discriminator 1)
 8002290:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <XMC_SCU_HIB_SetInput0+0x44>)
 8002292:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f8      	bne.n	8002290 <XMC_SCU_HIB_SetInput0+0xc>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1387
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d106      	bne.n	80022b2 <XMC_SCU_HIB_SetInput0+0x2e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1389
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 80022a4:	4a09      	ldr	r2, [pc, #36]	; (80022cc <XMC_SCU_HIB_SetInput0+0x48>)
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <XMC_SCU_HIB_SetInput0+0x48>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ae:	60d3      	str	r3, [r2, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1395
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
  }
}
 80022b0:	e005      	b.n	80022be <XMC_SCU_HIB_SetInput0+0x3a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1393
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
 80022b2:	4a06      	ldr	r2, [pc, #24]	; (80022cc <XMC_SCU_HIB_SetInput0+0x48>)
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <XMC_SCU_HIB_SetInput0+0x48>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022bc:	60d3      	str	r3, [r2, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1395
  }
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	50004000 	.word	0x50004000
 80022cc:	50004300 	.word	0x50004300

080022d0 <XMC_SCU_HIB_SetSR0Input>:
XMC_SCU_HIB_SetSR0Input():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1398

void XMC_SCU_HIB_SetSR0Input(XMC_SCU_HIB_SR0_INPUT_t input)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	80fb      	strh	r3, [r7, #6]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1399
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80022da:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1399 (discriminator 1)
 80022dc:	4b09      	ldr	r3, [pc, #36]	; (8002304 <XMC_SCU_HIB_SetSR0Input+0x34>)
 80022de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f8      	bne.n	80022dc <XMC_SCU_HIB_SetSR0Input+0xc>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1406
    /* Wait until HDCR register in hibernate domain is ready to accept a write */
  }
#if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk | SCU_HIBERNATE_HDCR_ADIG0SEL_Msk)) | 
#else
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk)) | 
 80022ea:	4907      	ldr	r1, [pc, #28]	; (8002308 <XMC_SCU_HIB_SetSR0Input+0x38>)
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <XMC_SCU_HIB_SetSR0Input+0x38>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60cb      	str	r3, [r1, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1409
#endif  
                        input;
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	50004000 	.word	0x50004000
 8002308:	50004300 	.word	0x50004300

0800230c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
XMC_SCU_CLOCK_IsLowPowerOscillatorStable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1538
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1539
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf0c      	ite	eq
 800231c:	2301      	moveq	r3, #1
 800231e:	2300      	movne	r3, #0
 8002320:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1540
}
 8002322:	4618      	mov	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	50004300 	.word	0x50004300

08002330 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:
XMC_SCU_CLOCK_EnableLowPowerOscillator():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1544

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1546
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002334:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1546 (discriminator 1)
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>)
 8002338:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800233c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1f8      	bne.n	8002336 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1550
  {
    /* Wait until the update of OSCULCTRL register in hibernate domain is completed */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002344:	4a12      	ldr	r2, [pc, #72]	; (8002390 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8002346:	4b12      	ldr	r3, [pc, #72]	; (8002390 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800234e:	61d3      	str	r3, [r2, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1553

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002350:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1553 (discriminator 1)
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>)
 8002354:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f8      	bne.n	8002352 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1557
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8002360:	4a0b      	ldr	r2, [pc, #44]	; (8002390 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8002362:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f043 0308 	orr.w	r3, r3, #8
 800236a:	60d3      	str	r3, [r2, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1560

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 800236c:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1560 (discriminator 1)
 800236e:	4b07      	ldr	r3, [pc, #28]	; (800238c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>)
 8002370:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f8      	bne.n	800236e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1564
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 800237c:	4b04      	ldr	r3, [pc, #16]	; (8002390 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 800237e:	2208      	movs	r2, #8
 8002380:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1565
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	50004000 	.word	0x50004000
 8002390:	50004300 	.word	0x50004300

08002394 <XMC_SCU_CLOCK_DisableLowPowerOscillator>:
XMC_SCU_CLOCK_DisableLowPowerOscillator():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1569

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_DisableLowPowerOscillator(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1570
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002398:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1570 (discriminator 1)
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x28>)
 800239c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80023a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f8      	bne.n	800239a <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x6>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1574
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80023a8:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x2c>)
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x2c>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80023b2:	61d3      	str	r3, [r2, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1575
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	50004000 	.word	0x50004000
 80023c0:	50004300 	.word	0x50004300

080023c4 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput>:
XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1578

void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1579
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 80023c8:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1579 (discriminator 1)
 80023ca:	4b08      	ldr	r3, [pc, #32]	; (80023ec <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x28>)
 80023cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80023d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f8      	bne.n	80023ca <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x6>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1583
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80023d8:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x2c>)
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x2c>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 80023e2:	61d3      	str	r3, [r2, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1584
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	50004000 	.word	0x50004000
 80023f0:	50004300 	.word	0x50004300

080023f4 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput>:
XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1587

void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1588
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 80023f8:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1588 (discriminator 1)
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x2c>)
 80023fc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f8      	bne.n	80023fa <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x6>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1592
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL = (SCU_HIBERNATE->OSCULCTRL & ~(uint32_t)(SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk)) |
 8002408:	4a06      	ldr	r2, [pc, #24]	; (8002424 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x30>)
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x30>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	f023 0331 	bic.w	r3, r3, #49	; 0x31
 8002412:	f043 0320 	orr.w	r3, r3, #32
 8002416:	61d3      	str	r3, [r2, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1594
                             (SCU_HIBERNATE_OSCULCTRL_MODE_OSC_POWER_DOWN << SCU_HIBERNATE_OSCULCTRL_MODE_Pos);                       
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr
 8002420:	50004000 	.word	0x50004000
 8002424:	50004300 	.word	0x50004300

08002428 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus>:
XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1597

uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1598
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus+0x14>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f003 0301 	and.w	r3, r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1599
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr
 800243c:	50004300 	.word	0x50004300

08002440 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
XMC_SCU_CLOCK_EnableHighPerformanceOscillator():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1603

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8002440:	b5b0      	push	{r4, r5, r7, lr}
 8002442:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1604
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8002444:	4a0f      	ldr	r2, [pc, #60]	; (8002484 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244e:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1606

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002450:	4d0d      	ldr	r5, [pc, #52]	; (8002488 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 800245a:	f024 0430 	bic.w	r4, r4, #48	; 0x30
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1607
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 800245e:	f7fe f8ed 	bl	800063c <OSCHP_GetFrequency>
 8002462:	4602      	mov	r2, r0
 8002464:	4b09      	ldr	r3, [pc, #36]	; (800248c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8002466:	fba3 2302 	umull	r2, r3, r3, r2
 800246a:	0d1b      	lsrs	r3, r3, #20
 800246c:	3b01      	subs	r3, #1
 800246e:	041b      	lsls	r3, r3, #16
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1606
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002470:	4323      	orrs	r3, r4
 8002472:	606b      	str	r3, [r5, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1610
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8002474:	4a03      	ldr	r2, [pc, #12]	; (8002484 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8002476:	4b03      	ldr	r3, [pc, #12]	; (8002484 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800247e:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1611
}
 8002480:	bf00      	nop
 8002482:	bdb0      	pop	{r4, r5, r7, pc}
 8002484:	50004710 	.word	0x50004710
 8002488:	50004700 	.word	0x50004700
 800248c:	6b5fca6b 	.word	0x6b5fca6b

08002490 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:
XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1614

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1615
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x20>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800249c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80024a0:	bf0c      	ite	eq
 80024a2:	2301      	moveq	r3, #1
 80024a4:	2300      	movne	r3, #0
 80024a6:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1616
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	50004710 	.word	0x50004710

080024b4 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator>:
XMC_SCU_CLOCK_DisableHighPerformanceOscillator():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1620

/* API to disable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1621
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
 80024b8:	4a04      	ldr	r2, [pc, #16]	; (80024cc <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x18>)
 80024ba:	4b04      	ldr	r3, [pc, #16]	; (80024cc <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x18>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80024c2:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1622
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	50004700 	.word	0x50004700

080024d0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput>:
XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1625

void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1626
  SCU_OSC->OSCHPCTRL |= SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 80024d4:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x18>)
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x18>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1627
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr
 80024e8:	50004700 	.word	0x50004700

080024ec <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput>:
XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1630

void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1631
  SCU_OSC->OSCHPCTRL &= ~SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 80024f0:	4a04      	ldr	r2, [pc, #16]	; (8002504 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x18>)
 80024f2:	4b04      	ldr	r3, [pc, #16]	; (8002504 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x18>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f023 0301 	bic.w	r3, r3, #1
 80024fa:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1632
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	50004700 	.word	0x50004700

08002508 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus>:
XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1635

uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1636
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
 800250c:	4b03      	ldr	r3, [pc, #12]	; (800251c <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus+0x14>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0301 	and.w	r3, r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1637
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	50004700 	.word	0x50004700

08002520 <XMC_SCU_CLOCK_EnableSystemPll>:
XMC_SCU_CLOCK_EnableSystemPll():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1641

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1642
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8002524:	4a05      	ldr	r2, [pc, #20]	; (800253c <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8002526:	4b05      	ldr	r3, [pc, #20]	; (800253c <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800252e:	f023 0302 	bic.w	r3, r3, #2
 8002532:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1643
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	50004710 	.word	0x50004710

08002540 <XMC_SCU_CLOCK_DisableSystemPll>:
XMC_SCU_CLOCK_DisableSystemPll():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1647

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1648
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8002544:	4a05      	ldr	r2, [pc, #20]	; (800255c <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8002546:	4b05      	ldr	r3, [pc, #20]	; (800255c <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254e:	f043 0302 	orr.w	r3, r3, #2
 8002552:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1649
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr
 800255c:	50004710 	.word	0x50004710

08002560 <XMC_SCU_CLOCK_StartSystemPll>:
XMC_SCU_CLOCK_StartSystemPll():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1657
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60ba      	str	r2, [r7, #8]
 8002568:	607b      	str	r3, [r7, #4]
 800256a:	4603      	mov	r3, r0
 800256c:	81fb      	strh	r3, [r7, #14]
 800256e:	460b      	mov	r3, r1
 8002570:	737b      	strb	r3, [r7, #13]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1662

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8002572:	89fb      	ldrh	r3, [r7, #14]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fadb 	bl	8001b30 <XMC_SCU_CLOCK_SetSystemPllClockSource>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1664

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 800257a:	7b7b      	ldrb	r3, [r7, #13]
 800257c:	2b01      	cmp	r3, #1
 800257e:	f040 8084 	bne.w	800268a <XMC_SCU_CLOCK_StartSystemPll+0x12a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1667
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8002582:	89fb      	ldrh	r3, [r7, #14]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d109      	bne.n	800259c <XMC_SCU_CLOCK_StartSystemPll+0x3c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1669
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8002588:	f7fe f858 	bl	800063c <OSCHP_GetFrequency>
 800258c:	4602      	mov	r2, r0
 800258e:	4b4c      	ldr	r3, [pc, #304]	; (80026c0 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8002590:	fba3 2302 	umull	r2, r3, r3, r2
 8002594:	0c9b      	lsrs	r3, r3, #18
 8002596:	059b      	lsls	r3, r3, #22
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	e002      	b.n	80025a2 <XMC_SCU_CLOCK_StartSystemPll+0x42>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1673
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 800259c:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80025a0:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1675
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	fb02 f203 	mul.w	r2, r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b0:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1676
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	4a43      	ldr	r2, [pc, #268]	; (80026c4 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80025b6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	0d9b      	lsrs	r3, r3, #22
 80025be:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1679

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 80025c0:	4a41      	ldr	r2, [pc, #260]	; (80026c8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80025c2:	4b41      	ldr	r3, [pc, #260]	; (80026c8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1682

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 80025cc:	4a3e      	ldr	r2, [pc, #248]	; (80026c8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80025ce:	4b3e      	ldr	r3, [pc, #248]	; (80026c8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f043 0310 	orr.w	r3, r3, #16
 80025d6:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1685

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80025d8:	493b      	ldr	r1, [pc, #236]	; (80026c8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80025da:	4b3b      	ldr	r3, [pc, #236]	; (80026c8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	4b3b      	ldr	r3, [pc, #236]	; (80026cc <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 80025e0:	4013      	ands	r3, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1686
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	3a01      	subs	r2, #1
 80025e6:	0212      	lsls	r2, r2, #8
 80025e8:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1687
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	041b      	lsls	r3, r3, #16
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1686
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 80025f0:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1688
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	061b      	lsls	r3, r3, #24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1685

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80025f8:	4313      	orrs	r3, r2
 80025fa:	608b      	str	r3, [r1, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1691
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80025fc:	4a32      	ldr	r2, [pc, #200]	; (80026c8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80025fe:	4b32      	ldr	r3, [pc, #200]	; (80026c8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002606:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1694

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8002608:	4a2f      	ldr	r2, [pc, #188]	; (80026c8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800260a:	4b2f      	ldr	r3, [pc, #188]	; (80026c8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f023 0310 	bic.w	r3, r3, #16
 8002612:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1697

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8002614:	4a2c      	ldr	r2, [pc, #176]	; (80026c8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002616:	4b2c      	ldr	r3, [pc, #176]	; (80026c8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800261e:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1698
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002620:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1698 (discriminator 1)
 8002622:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f9      	beq.n	8002622 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1704
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 800262e:	4a26      	ldr	r2, [pc, #152]	; (80026c8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002630:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f023 0301 	bic.w	r3, r3, #1
 8002638:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1705
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 800263a:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1705 (discriminator 1)
 800263c:	4b22      	ldr	r3, [pc, #136]	; (80026c8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1f9      	bne.n	800263c <XMC_SCU_CLOCK_StartSystemPll+0xdc>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1711
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	4a21      	ldr	r2, [pc, #132]	; (80026d0 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 800264c:	fba2 2303 	umull	r2, r3, r2, r3
 8002650:	095b      	lsrs	r3, r3, #5
 8002652:	0d9b      	lsrs	r3, r3, #22
 8002654:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1712
    if (kdiv < kdiv_temp)
 8002656:	6a3a      	ldr	r2, [r7, #32]
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	429a      	cmp	r2, r3
 800265c:	d202      	bcs.n	8002664 <XMC_SCU_CLOCK_StartSystemPll+0x104>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1714
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 800265e:	6938      	ldr	r0, [r7, #16]
 8002660:	f000 f848 	bl	80026f4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1717
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	085b      	lsrs	r3, r3, #1
 8002668:	4a1a      	ldr	r2, [pc, #104]	; (80026d4 <XMC_SCU_CLOCK_StartSystemPll+0x174>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	0d9b      	lsrs	r3, r3, #22
 8002672:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1718
    if (kdiv < kdiv_temp)
 8002674:	6a3a      	ldr	r2, [r7, #32]
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	429a      	cmp	r2, r3
 800267a:	d202      	bcs.n	8002682 <XMC_SCU_CLOCK_StartSystemPll+0x122>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1720
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 800267c:	6938      	ldr	r0, [r7, #16]
 800267e:	f000 f839 	bl	80026f4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1723
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8002682:	6a38      	ldr	r0, [r7, #32]
 8002684:	f000 f836 	bl	80026f4 <XMC_SCU_CLOCK_StepSystemPllFrequency>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1738
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
    {
      /* wait for prescaler mode */
    }
  }
}
 8002688:	e015      	b.n	80026b6 <XMC_SCU_CLOCK_StartSystemPll+0x156>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1727

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 800268a:	490f      	ldr	r1, [pc, #60]	; (80026c8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800268c:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1728
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	3b01      	subs	r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1727

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8002698:	4313      	orrs	r3, r2
 800269a:	608b      	str	r3, [r1, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1731
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 800269c:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1733

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 80026a8:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1733 (discriminator 1)
 80026aa:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f9      	beq.n	80026aa <XMC_SCU_CLOCK_StartSystemPll+0x14a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1738
    {
      /* wait for prescaler mode */
    }
  }
}
 80026b6:	bf00      	nop
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	431bde83 	.word	0x431bde83
 80026c4:	aaaaaaab 	.word	0xaaaaaaab
 80026c8:	50004710 	.word	0x50004710
 80026cc:	f08080ff 	.word	0xf08080ff
 80026d0:	88888889 	.word	0x88888889
 80026d4:	b60b60b7 	.word	0xb60b60b7

080026d8 <XMC_SCU_CLOCK_StopSystemPll>:
XMC_SCU_CLOCK_StopSystemPll():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1742

/* API to stop main PLL operation */
void XMC_SCU_CLOCK_StopSystemPll(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1743
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
 80026dc:	4a04      	ldr	r2, [pc, #16]	; (80026f0 <XMC_SCU_CLOCK_StopSystemPll+0x18>)
 80026de:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <XMC_SCU_CLOCK_StopSystemPll+0x18>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e6:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1744
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	50004710 	.word	0x50004710

080026f4 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
XMC_SCU_CLOCK_StepSystemPllFrequency():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1748

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1749
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80026fc:	4908      	ldr	r1, [pc, #32]	; (8002720 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1750
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3b01      	subs	r3, #1
 800270a:	041b      	lsls	r3, r3, #16
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1749
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 800270c:	4313      	orrs	r3, r2
 800270e:	608b      	str	r3, [r1, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1752
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8002710:	2032      	movs	r0, #50	; 0x32
 8002712:	f7fe fcfb 	bl	800110c <XMC_SCU_lDelay>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1753
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	50004710 	.word	0x50004710

08002724 <XMC_SCU_CLOCK_IsSystemPllLocked>:
XMC_SCU_CLOCK_IsSystemPllLocked():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1757

/* API to check main PLL is locked or not */
bool XMC_SCU_CLOCK_IsSystemPllLocked(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1758
  return (bool)((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) != 0UL);
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <XMC_SCU_CLOCK_IsSystemPllLocked+0x20>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	bf14      	ite	ne
 8002734:	2301      	movne	r3, #1
 8002736:	2300      	moveq	r3, #0
 8002738:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1759
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	50004710 	.word	0x50004710

08002748 <XMC_SCU_INTERRUPT_SetEventHandler>:
XMC_SCU_INTERRUPT_SetEventHandler():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1766
/*
 * API to assign the event handler function to be executed on occurrence of the selected event.
 */
XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(const XMC_SCU_INTERRUPT_EVENT_t event,
                                                   const XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1770
  uint32_t index;
  XMC_SCU_STATUS_t status;
  
  index = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1771
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8002756:	e002      	b.n	800275e <XMC_SCU_INTERRUPT_SetEventHandler+0x16>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1773
  {
    index++;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	3301      	adds	r3, #1
 800275c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1771
{
  uint32_t index;
  XMC_SCU_STATUS_t status;
  
  index = 0U;
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	fa22 f303 	lsr.w	r3, r2, r3
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d102      	bne.n	8002774 <XMC_SCU_INTERRUPT_SetEventHandler+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1771 (discriminator 1)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b1f      	cmp	r3, #31
 8002772:	d9f1      	bls.n	8002758 <XMC_SCU_INTERRUPT_SetEventHandler+0x10>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1776
  {
    index++;
  }
  
  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b20      	cmp	r3, #32
 8002778:	d102      	bne.n	8002780 <XMC_SCU_INTERRUPT_SetEventHandler+0x38>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1778
  {
    status = XMC_SCU_STATUS_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	72fb      	strb	r3, [r7, #11]
 800277e:	e006      	b.n	800278e <XMC_SCU_INTERRUPT_SetEventHandler+0x46>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1782
  }
  else
  {
    event_handler_list[index] = handler;
 8002780:	4906      	ldr	r1, [pc, #24]	; (800279c <XMC_SCU_INTERRUPT_SetEventHandler+0x54>)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1783
    status = XMC_SCU_STATUS_OK;      
 800278a:	2300      	movs	r3, #0
 800278c:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1786
  }
  
  return (status);
 800278e:	7afb      	ldrb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1787
}
 8002790:	4618      	mov	r0, r3
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	200000fc 	.word	0x200000fc

080027a0 <XMC_SCU_IRQHandler>:
XMC_SCU_IRQHandler():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1793

/*
 * API to execute callback functions for multiple events.
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1800
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
  
  XMC_UNUSED_ARG(sr_num);
  
  index = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1801
  event = XMC_SCU_INTERUPT_GetEventStatus();
 80027ac:	f7fe fd08 	bl	80011c0 <XMC_SCU_INTERUPT_GetEventStatus>
 80027b0:	6138      	str	r0, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1802
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 80027b2:	e01c      	b.n	80027ee <XMC_SCU_IRQHandler+0x4e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1804
  {    
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d011      	beq.n	80027e8 <XMC_SCU_IRQHandler+0x48>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1806
    {
      event_handler = event_handler_list[index];
 80027c4:	4a0d      	ldr	r2, [pc, #52]	; (80027fc <XMC_SCU_IRQHandler+0x5c>)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027cc:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1807
      if (event_handler != NULL)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <XMC_SCU_IRQHandler+0x38>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1809
      {
          (event_handler)();
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4798      	blx	r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1812
      }
      
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 80027d8:	2201      	movs	r2, #1
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fe fcf7 	bl	80011d4 <XMC_SCU_INTERRUPT_ClearEventStatus>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1814
      
      break;
 80027e6:	e005      	b.n	80027f4 <XMC_SCU_IRQHandler+0x54>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1816
    }   
    index++;    
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	3301      	adds	r3, #1
 80027ec:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1802
  
  XMC_UNUSED_ARG(sr_num);
  
  index = 0U;
  event = XMC_SCU_INTERUPT_GetEventStatus();
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b1f      	cmp	r3, #31
 80027f2:	d9df      	bls.n	80027b4 <XMC_SCU_IRQHandler+0x14>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc4_scu.c:1818
      
      break;
    }   
    index++;    
  }
}
 80027f4:	bf00      	nop
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	200000fc 	.word	0x200000fc

08002800 <XMC_CAN_IsPanelControlReady>:
XMC_CAN_IsPanelControlReady():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_can.h:665
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_can.h:666
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800280e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002812:	2b00      	cmp	r3, #0
 8002814:	bf0c      	ite	eq
 8002816:	2301      	moveq	r3, #1
 8002818:	2300      	movne	r3, #0
 800281a:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_can.h:667
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop

08002828 <XMC_CAN_PanelControl>:
XMC_CAN_PanelControl():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_can.h:696

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
		                                  const uint8_t arg1,
		                                  const uint8_t arg2)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	4608      	mov	r0, r1
 8002832:	4611      	mov	r1, r2
 8002834:	461a      	mov	r2, r3
 8002836:	4603      	mov	r3, r0
 8002838:	70fb      	strb	r3, [r7, #3]
 800283a:	460b      	mov	r3, r1
 800283c:	70bb      	strb	r3, [r7, #2]
 800283e:	4613      	mov	r3, r2
 8002840:	707b      	strb	r3, [r7, #1]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_can.h:697
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8002842:	78fa      	ldrb	r2, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_can.h:698
		        (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8002844:	78bb      	ldrb	r3, [r7, #2]
 8002846:	041b      	lsls	r3, r3, #16
 8002848:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_can.h:697
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
		                                  const uint8_t arg1,
		                                  const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 800284c:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_can.h:699
		        (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
		        (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 800284e:	787b      	ldrb	r3, [r7, #1]
 8002850:	061b      	lsls	r3, r3, #24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_can.h:698
                                          const XMC_CAN_PANCMD_t pancmd,
		                                  const uint8_t arg1,
		                                  const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
		        (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8002852:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_can.h:697
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
		                                  const uint8_t arg1,
		                                  const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_can.h:700
		        (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
		        (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <XMC_CAN_NODE_EnableConfigurationChange>:
XMC_CAN_NODE_EnableConfigurationChange():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_can.h:1190
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_can.h:1191
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_can.h:1192
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop

08002884 <XMC_CAN_NODE_DisableConfigurationChange>:
XMC_CAN_NODE_DisableConfigurationChange():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_can.h:1210
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_can.h:1211
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_can.h:1212
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop

080028a4 <max>:
max():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:74

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:75
  return (a > b) ? a : b;
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4293      	cmp	r3, r2
 80028b4:	bf38      	it	cc
 80028b6:	4613      	movcc	r3, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:76
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop

080028c4 <min>:
min():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:79

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:80
  return (a < b) ? a : b;
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4293      	cmp	r3, r2
 80028d4:	bf28      	it	cs
 80028d6:	4613      	movcs	r3, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:81
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop

080028e4 <XMC_CAN_NODE_NominalBitTimeConfigure>:
XMC_CAN_NODE_NominalBitTimeConfigure():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:90
 *******************************************************************************/

/* Baudrate Configuration */
void XMC_CAN_NODE_NominalBitTimeConfigure (XMC_CAN_NODE_t *const can_node,
                                           const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_bit_time)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b090      	sub	sp, #64	; 0x40
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:91
  uint32_t temp_brp = 12U ;
 80028ee:	230c      	movs	r3, #12
 80028f0:	63fb      	str	r3, [r7, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:92
  uint32_t temp_tseg1 = 12U;
 80028f2:	230c      	movs	r3, #12
 80028f4:	63bb      	str	r3, [r7, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:93
  uint32_t best_brp = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	637b      	str	r3, [r7, #52]	; 0x34
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:94
  uint32_t best_tseg1 = 1U;
 80028fa:	2301      	movs	r3, #1
 80028fc:	633b      	str	r3, [r7, #48]	; 0x30
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:95
  uint32_t best_tseg2 = 0U;
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:96
  uint32_t best_tbaud = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:97
  uint32_t best_error = 10000U;
 8002906:	f242 7310 	movw	r3, #10000	; 0x2710
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:124
   * Tsjw = (SJW + 1)*Tq
   * TSeg1 >= Tsjw + Tprop
   * TSeg2 >= Tsjw
   */
  /* search for best baudrate */
  for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 800290c:	2301      	movs	r3, #1
 800290e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002910:	e066      	b.n	80029e0 <XMC_CAN_NODE_NominalBitTimeConfigure+0xfc>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:127
  {

    uint32_t f_quanta = (uint32_t)((can_bit_time->can_frequency * 10U) / temp_brp);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	461a      	mov	r2, r3
 8002920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002922:	fbb2 f3f3 	udiv	r3, r2, r3
 8002926:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:128
    uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:132
    uint32_t temp_baudrate;
    uint32_t error;

  if((temp_tbaud % 10U) > 5U)
 8002934:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002936:	4b5d      	ldr	r3, [pc, #372]	; (8002aac <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c8>)
 8002938:	fba3 2301 	umull	r2, r3, r3, r1
 800293c:	08da      	lsrs	r2, r3, #3
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	1aca      	subs	r2, r1, r3
 8002948:	2a05      	cmp	r2, #5
 800294a:	d909      	bls.n	8002960 <XMC_CAN_NODE_NominalBitTimeConfigure+0x7c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:134
  {
	temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	4a57      	ldr	r2, [pc, #348]	; (8002aac <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c8>)
 8002950:	fba2 2303 	umull	r2, r3, r2, r3
 8002954:	08db      	lsrs	r3, r3, #3
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:135
	temp_tbaud++;
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	3301      	adds	r3, #1
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
 800295e:	e005      	b.n	800296c <XMC_CAN_NODE_NominalBitTimeConfigure+0x88>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:139
  }
  else
  {
	temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	4a52      	ldr	r2, [pc, #328]	; (8002aac <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c8>)
 8002964:	fba2 2303 	umull	r2, r3, r2, r3
 8002968:	08db      	lsrs	r3, r3, #3
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:142
  }

  if(temp_tbaud > 0U)
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <XMC_CAN_NODE_NominalBitTimeConfigure+0xa4>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:144
  {
    temp_baudrate = (uint32_t) (f_quanta / (temp_tbaud * 10U));
 8002972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	461a      	mov	r2, r3
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	fbb3 f3f2 	udiv	r3, r3, r2
 8002984:	623b      	str	r3, [r7, #32]
 8002986:	e007      	b.n	8002998 <XMC_CAN_NODE_NominalBitTimeConfigure+0xb4>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:148
  }
  else
  {
    temp_baudrate = f_quanta / 10U;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4a48      	ldr	r2, [pc, #288]	; (8002aac <XMC_CAN_NODE_NominalBitTimeConfigure+0x1c8>)
 800298c:	fba2 2303 	umull	r2, r3, r2, r3
 8002990:	08db      	lsrs	r3, r3, #3
 8002992:	623b      	str	r3, [r7, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:149
	temp_tbaud = 1;
 8002994:	2301      	movs	r3, #1
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:152
  }

  if(temp_baudrate >= can_bit_time->baudrate)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d805      	bhi.n	80029ae <XMC_CAN_NODE_NominalBitTimeConfigure+0xca>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:154
  {
	error = temp_baudrate - can_bit_time->baudrate;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	6a3a      	ldr	r2, [r7, #32]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	61fb      	str	r3, [r7, #28]
 80029ac:	e004      	b.n	80029b8 <XMC_CAN_NODE_NominalBitTimeConfigure+0xd4>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:158
  }
  else
  {
	error = can_bit_time->baudrate - temp_baudrate;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:161
  }

  if ((temp_tbaud <= 20U) && (best_error > error))
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	2b14      	cmp	r3, #20
 80029bc:	d80d      	bhi.n	80029da <XMC_CAN_NODE_NominalBitTimeConfigure+0xf6>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:161 (discriminator 1)
 80029be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d909      	bls.n	80029da <XMC_CAN_NODE_NominalBitTimeConfigure+0xf6>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:163
  {
    best_brp = temp_brp;
 80029c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c8:	637b      	str	r3, [r7, #52]	; 0x34
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:164
    best_tbaud = temp_tbaud;
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:165
    best_error = (error);
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	62bb      	str	r3, [r7, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:167

    if (error < 1000U)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029d8:	d306      	bcc.n	80029e8 <XMC_CAN_NODE_NominalBitTimeConfigure+0x104>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:124 (discriminator 2)
   * Tsjw = (SJW + 1)*Tq
   * TSeg1 >= Tsjw + Tprop
   * TSeg2 >= Tsjw
   */
  /* search for best baudrate */
  for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 80029da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029dc:	3301      	adds	r3, #1
 80029de:	63fb      	str	r3, [r7, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:124 (discriminator 1)
 80029e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e2:	2b40      	cmp	r3, #64	; 0x40
 80029e4:	d995      	bls.n	8002912 <XMC_CAN_NODE_NominalBitTimeConfigure+0x2e>
 80029e6:	e000      	b.n	80029ea <XMC_CAN_NODE_NominalBitTimeConfigure+0x106>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:169
    best_tbaud = temp_tbaud;
    best_error = (error);

    if (error < 1000U)
    {
      break;
 80029e8:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:174
    }
   }
  }
  /* search for best sample point */
  best_error = 10000U;
 80029ea:	f242 7310 	movw	r3, #10000	; 0x2710
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:176

  for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 80029f0:	2340      	movs	r3, #64	; 0x40
 80029f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80029f4:	e02d      	b.n	8002a52 <XMC_CAN_NODE_NominalBitTimeConfigure+0x16e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:178
  {
    uint32_t tempSamplePoint = ((temp_tseg1 + 1U) * 10000U) / best_tbaud;
 80029f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f8:	3301      	adds	r3, #1
 80029fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80029fe:	fb02 f203 	mul.w	r2, r2, r3
 8002a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a08:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:180
	uint32_t error;
	if (tempSamplePoint >= can_bit_time->sample_point)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	891b      	ldrh	r3, [r3, #8]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d806      	bhi.n	8002a24 <XMC_CAN_NODE_NominalBitTimeConfigure+0x140>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:182
	{
      error = tempSamplePoint  - can_bit_time->sample_point;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	891b      	ldrh	r3, [r3, #8]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
 8002a22:	e005      	b.n	8002a30 <XMC_CAN_NODE_NominalBitTimeConfigure+0x14c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:186
	}
	else
	{
	  error = can_bit_time->sample_point  - tempSamplePoint;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	891b      	ldrh	r3, [r3, #8]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:188
	}
    if (best_error > error)
 8002a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d903      	bls.n	8002a40 <XMC_CAN_NODE_NominalBitTimeConfigure+0x15c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:190
    {
      best_tseg1 = temp_tseg1;
 8002a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3a:	633b      	str	r3, [r7, #48]	; 0x30
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:191
      best_error = error;
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	62bb      	str	r3, [r7, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:193
    }
    if (tempSamplePoint < (can_bit_time->sample_point))
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	891b      	ldrh	r3, [r3, #8]
 8002a44:	461a      	mov	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d806      	bhi.n	8002a5a <XMC_CAN_NODE_NominalBitTimeConfigure+0x176>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:176 (discriminator 2)
   }
  }
  /* search for best sample point */
  best_error = 10000U;

  for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 8002a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	63bb      	str	r3, [r7, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:176 (discriminator 1)
 8002a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d8ce      	bhi.n	80029f6 <XMC_CAN_NODE_NominalBitTimeConfigure+0x112>
 8002a58:	e000      	b.n	8002a5c <XMC_CAN_NODE_NominalBitTimeConfigure+0x178>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:195
      best_tseg1 = temp_tseg1;
      best_error = error;
    }
    if (tempSamplePoint < (can_bit_time->sample_point))
    {
      break;
 8002a5a:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:199
    }
  }

  best_tseg2 = best_tbaud - best_tseg1 - 1U;
 8002a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	3b01      	subs	r3, #1
 8002a64:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:201

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff fefc 	bl	8002864 <XMC_CAN_NODE_EnableConfigurationChange>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:203
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	031b      	lsls	r3, r3, #12
 8002a72:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:204
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	895b      	ldrh	r3, [r3, #10]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	019b      	lsls	r3, r3, #6
 8002a7e:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:203

  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8002a80:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:205
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
 8002a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a84:	3b01      	subs	r3, #1
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:204
  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
 8002a8c:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:206
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
                   (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk)|
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a90:	3b01      	subs	r3, #1
 8002a92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a96:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:203

  best_tseg2 = best_tbaud - best_tseg1 - 1U;

  XMC_CAN_NODE_EnableConfigurationChange(can_node);
  /* Configure bit timing register */
  can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:208
                   ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (uint32_t)CAN_NODE_NBTR_SJW_Msk)|
                   (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk)|
                   (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk)|
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff fef1 	bl	8002884 <XMC_CAN_NODE_DisableConfigurationChange>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:209
}
 8002aa2:	bf00      	nop
 8002aa4:	3740      	adds	r7, #64	; 0x40
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	cccccccd 	.word	0xcccccccd

08002ab0 <XMC_CAN_AllocateMOtoNodeList>:
XMC_CAN_AllocateMOtoNodeList():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:212
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	70fb      	strb	r3, [r7, #3]
 8002abc:	4613      	mov	r3, r2
 8002abe:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:214
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
 8002ac0:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:214 (discriminator 1)
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff fe9c 	bl	8002800 <XMC_CAN_IsPanelControlReady>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f083 0301 	eor.w	r3, r3, #1
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1f6      	bne.n	8002ac2 <XMC_CAN_AllocateMOtoNodeList+0x12>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:220
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
 8002ad4:	78fb      	ldrb	r3, [r7, #3]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	78ba      	ldrb	r2, [r7, #2]
 8002adc:	2102      	movs	r1, #2
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7ff fea2 	bl	8002828 <XMC_CAN_PanelControl>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:221
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <XMC_CAN_Disable>:
XMC_CAN_Disable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:225

/* Disable XMC_CAN Peripheral */
void XMC_CAN_Disable(XMC_CAN_t *const obj)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:227
  /* Disable CAN Module */
  obj->CLC = CAN_CLC_DISR_Msk;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:229
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 8002afa:	4803      	ldr	r0, [pc, #12]	; (8002b08 <XMC_CAN_Disable+0x1c>)
 8002afc:	f7fe fe2a 	bl	8001754 <XMC_SCU_RESET_AssertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:234
#endif
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
#endif
}
 8002b00:	bf00      	nop
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	10000010 	.word	0x10000010

08002b0c <XMC_CAN_Enable>:
XMC_CAN_Enable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:238

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:243
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 8002b14:	4809      	ldr	r0, [pc, #36]	; (8002b3c <XMC_CAN_Enable+0x30>)
 8002b16:	f7fe fe39 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:246
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 0201 	bic.w	r2, r3, #1
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:247
  while (obj->CLC & CAN_CLC_DISS_Msk)
 8002b26:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:247 (discriminator 1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f9      	bne.n	8002b28 <XMC_CAN_Enable+0x1c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:251
  {
    /*Do nothing*/
  };
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	10000010 	.word	0x10000010

08002b40 <XMC_CAN_Init>:
XMC_CAN_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:335
}

#else
/* Initialization of XMC_CAN GLOBAL Object */
void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08c      	sub	sp, #48	; 0x30
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:344
  uint32_t step;
  uint32_t can_frequency_khz;
  uint32_t peripheral_frequency_khz;
  XMC_CAN_DM_t can_divider_mode;

  uint32_t peripheral_frequency = (XMC_SCU_CLOCK_GetPeripheralClockFrequency());
 8002b4a:	f7fe ff91 	bl	8001a70 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8002b4e:	62f8      	str	r0, [r7, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:349

  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff ffdb 	bl	8002b0c <XMC_CAN_Enable>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:352

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 8002b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002b62:	4619      	mov	r1, r3
 8002b64:	2000      	movs	r0, #0
 8002b66:	f7ff fe9d 	bl	80028a4 <max>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fea7 	bl	80028c4 <min>
 8002b76:	62b8      	str	r0, [r7, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:353
  freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 8002b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:356

  /* Fractional divider mode */
  can_frequency_khz = (uint32_t) (can_frequency >> 6);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	099b      	lsrs	r3, r3, #6
 8002b8a:	623b      	str	r3, [r7, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:357
  peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 8002b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8e:	099b      	lsrs	r3, r3, #6
 8002b90:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:359

  step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	029a      	lsls	r2, r3, #10
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fe8f 	bl	80028c4 <min>
 8002ba6:	61b8      	str	r0, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:360
  freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	fb02 f303 	mul.w	r3, r2, r3
 8002bb0:	0a9b      	lsrs	r3, r3, #10
 8002bb2:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:361
  freq_f = freq_f << 6;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	019b      	lsls	r3, r3, #6
 8002bb8:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:363

  normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	1ad2      	subs	r2, r2, r3
 8002bc0:	6839      	ldr	r1, [r7, #0]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	1acb      	subs	r3, r1, r3
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	bf94      	ite	ls
 8002bca:	2301      	movls	r3, #1
 8002bcc:	2300      	movhi	r3, #0
 8002bce:	74fb      	strb	r3, [r7, #19]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:365

  step   = (normal_divider != 0U) ? step_n : step_f;
 8002bd0:	7cfb      	ldrb	r3, [r7, #19]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <XMC_CAN_Init+0x9a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:365 (discriminator 1)
 8002bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd8:	e000      	b.n	8002bdc <XMC_CAN_Init+0x9c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:365 (discriminator 2)
 8002bda:	69bb      	ldr	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:365 (discriminator 4)
 8002bdc:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:366 (discriminator 4)
  can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 8002bde:	7cfb      	ldrb	r3, [r7, #19]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <XMC_CAN_Init+0xa8>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:366 (discriminator 1)
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <XMC_CAN_Init+0xaa>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:366 (discriminator 2)
 8002be8:	2302      	movs	r3, #2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:366 (discriminator 4)
 8002bea:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:368 (discriminator 4)

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8002bf4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	60d3      	str	r3, [r2, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:369 (discriminator 4)
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	7afb      	ldrb	r3, [r7, #11]
 8002c02:	0399      	lsls	r1, r3, #14
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	430b      	orrs	r3, r1
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:370 (discriminator 4)
}
 8002c0e:	bf00      	nop
 8002c10:	3730      	adds	r7, #48	; 0x30
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop

08002c18 <XMC_CAN_MO_SetIdentifier>:
XMC_CAN_MO_SetIdentifier():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:375
#endif

/* Sets the Identifier of the MO */
void XMC_CAN_MO_SetIdentifier(XMC_CAN_MO_t *const can_mo, const uint32_t can_identifier)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:376
  if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10d      	bne.n	8002c4c <XMC_CAN_MO_SetIdentifier+0x34>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:378
  {
    can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	6992      	ldr	r2, [r2, #24]
 8002c3a:	f002 4160 	and.w	r1, r2, #3758096384	; 0xe0000000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:379
	                           ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR_ID_Msk);
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	0492      	lsls	r2, r2, #18
 8002c42:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:378
/* Sets the Identifier of the MO */
void XMC_CAN_MO_SetIdentifier(XMC_CAN_MO_t *const can_mo, const uint32_t can_identifier)
{
  if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
  {
    can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 8002c46:	430a      	orrs	r2, r1
 8002c48:	619a      	str	r2, [r3, #24]
 8002c4a:	e00b      	b.n	8002c64 <XMC_CAN_MO_SetIdentifier+0x4c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:383
	                           ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR_ID_Msk);
  }
  else
  {
    can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	6992      	ldr	r2, [r2, #24]
 8002c56:	f002 4160 	and.w	r1, r2, #3758096384	; 0xe0000000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:384
    		                   (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:383
    can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
	                           ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR_ID_Msk);
  }
  else
  {
    can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 8002c60:	430a      	orrs	r2, r1
 8002c62:	619a      	str	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:386
    		                   (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
  }
  can_mo->can_identifier = can_identifier;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6853      	ldr	r3, [r2, #4]
 8002c6e:	f361 031c 	bfi	r3, r1, #0, #29
 8002c72:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:387
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop

08002c80 <XMC_CAN_MO_GetIdentifier>:
XMC_CAN_MO_GetIdentifier():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:392


/* Gets the Identifier of the MO */
uint32_t XMC_CAN_MO_GetIdentifier(const XMC_CAN_MO_t *const can_mo)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:394
  uint32_t identifier;
  if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d107      	bne.n	8002ca6 <XMC_CAN_MO_GetIdentifier+0x26>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:396
  {
	identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk)) >> XMC_CAN_MO_MOAR_STDID_Pos;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8002ca0:	0c9b      	lsrs	r3, r3, #18
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	e005      	b.n	8002cb2 <XMC_CAN_MO_GetIdentifier+0x32>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:400
  }
  else
  {
	identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8002cb0:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:402
  }
  return identifier;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:403
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop

08002cc0 <XMC_CAN_MO_GetAcceptanceMask>:
XMC_CAN_MO_GetAcceptanceMask():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:407

/* Gets the acceptance mask for the CAN MO. */
uint32_t XMC_CAN_MO_GetAcceptanceMask(const XMC_CAN_MO_t *const can_mo)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:409
  uint32_t identifier_mask;
  if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10e      	bne.n	8002cf4 <XMC_CAN_MO_GetAcceptanceMask+0x34>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:410
            && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d107      	bne.n	8002cf4 <XMC_CAN_MO_GetAcceptanceMask+0x34>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:412
  {
    identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk)) >> XMC_CAN_MO_MOAR_STDID_Pos;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8002cee:	0c9b      	lsrs	r3, r3, #18
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	e005      	b.n	8002d00 <XMC_CAN_MO_GetAcceptanceMask+0x40>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:416
  }
  else
  {
    identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8002cfe:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:418
  }
  return identifier_mask;
 8002d00:	68fb      	ldr	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:419
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <XMC_CAN_MO_SetAcceptanceMask>:
XMC_CAN_MO_SetAcceptanceMask():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:423

/* Gets the acceptance mask of the MO */
void XMC_CAN_MO_SetAcceptanceMask(XMC_CAN_MO_t *const can_mo,const uint32_t can_id_mask)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:424
  if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d112      	bne.n	8002d4a <XMC_CAN_MO_SetAcceptanceMask+0x3e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:425
          && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10b      	bne.n	8002d4a <XMC_CAN_MO_SetAcceptanceMask+0x3e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:427
  {
	can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	68d2      	ldr	r2, [r2, #12]
 8002d3c:	f002 4160 	and.w	r1, r2, #3758096384	; 0xe0000000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:428
							    (can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	0492      	lsls	r2, r2, #18
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:427
void XMC_CAN_MO_SetAcceptanceMask(XMC_CAN_MO_t *const can_mo,const uint32_t can_id_mask)
{
  if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
          && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
  {
	can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 8002d44:	430a      	orrs	r2, r1
 8002d46:	60da      	str	r2, [r3, #12]
 8002d48:	e00b      	b.n	8002d62 <XMC_CAN_MO_SetAcceptanceMask+0x56>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:432
							    (can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
  }
  else
  {
	can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6812      	ldr	r2, [r2, #0]
 8002d52:	68d2      	ldr	r2, [r2, #12]
 8002d54:	f002 4160 	and.w	r1, r2, #3758096384	; 0xe0000000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:433
							    (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:432
	can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
							    (can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
  }
  else
  {
	can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:435
							    (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
  }
  can_mo->can_id_mask = can_id_mask;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6893      	ldr	r3, [r2, #8]
 8002d6c:	f361 031c 	bfi	r3, r1, #0, #29
 8002d70:	6093      	str	r3, [r2, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:436
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <XMC_CAN_MO_Config>:
XMC_CAN_MO_Config():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:440

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:444
  uint32_t reg;
  
  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f103 4338 	add.w	r3, r3, #3087007744	; 0xb8000000
 8002d8c:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:445
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	035a      	lsls	r2, r3, #13
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	021b      	lsls	r3, r3, #8
 8002d9e:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8002da2:	4313      	orrs	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:446
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	6892      	ldr	r2, [r2, #8]
 8002db0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002db4:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:447
  can_mo->can_mo_ptr->MOIPR |= set;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	6891      	ldr	r1, [r2, #8]
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:449
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	79db      	ldrb	r3, [r3, #7]
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d006      	beq.n	8002de2 <XMC_CAN_MO_Config+0x66>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:450 (discriminator 1)
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	79db      	ldrb	r3, [r3, #7]
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:449 (discriminator 1)
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d05b      	beq.n	8002e9a <XMC_CAN_MO_Config+0x11e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:451
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	7e1b      	ldrb	r3, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:450
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <XMC_CAN_MO_Config+0x76>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:452
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	7e1b      	ldrb	r3, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:451
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d153      	bne.n	8002e9a <XMC_CAN_MO_Config+0x11e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:460
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2220      	movs	r2, #32
 8002df8:	61da      	str	r2, [r3, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:461
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	79db      	ldrb	r3, [r3, #7]
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d128      	bne.n	8002e5a <XMC_CAN_MO_Config+0xde>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:463
    {
      reg = can_mo->mo_ar;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:464
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8002e14:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:465
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8002e1e:	049b      	lsls	r3, r3, #18
 8002e20:	461a      	mov	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:466
      can_mo->can_mo_ptr->MOAR = reg;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	619a      	str	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:468

      reg = can_mo->mo_amr;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:469
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8002e3c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:470
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8002e46:	049b      	lsls	r3, r3, #18
 8002e48:	461a      	mov	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:471
      can_mo->can_mo_ptr->MOAMR = reg;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	60da      	str	r2, [r3, #12]
 8002e58:	e009      	b.n	8002e6e <XMC_CAN_MO_Config+0xf2>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:475
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6852      	ldr	r2, [r2, #4]
 8002e62:	619a      	str	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:476
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6892      	ldr	r2, [r2, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:479
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	7e1b      	ldrb	r3, [r3, #24]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d108      	bne.n	8002e88 <XMC_CAN_MO_Config+0x10c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:482
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f816 	bl	8002ea8 <XMC_CAN_MO_UpdateData>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:483
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e84:	61da      	str	r2, [r3, #28]
 8002e86:	e004      	b.n	8002e92 <XMC_CAN_MO_Config+0x116>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:488
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e90:	61da      	str	r2, [r3, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:492
    }

    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a03      	ldr	r2, [pc, #12]	; (8002ea4 <XMC_CAN_MO_Config+0x128>)
 8002e98:	61da      	str	r2, [r3, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:495
                                 CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
  }
}
 8002e9a:	bf00      	nop
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	06a00040 	.word	0x06a00040

08002ea8 <XMC_CAN_MO_UpdateData>:
XMC_CAN_MO_UpdateData():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:499

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:500
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:502
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	7e1b      	ldrb	r3, [r3, #24]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d122      	bne.n	8002f02 <XMC_CAN_MO_UpdateData+0x5a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:504
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	61da      	str	r2, [r3, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:506
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	6812      	ldr	r2, [r2, #0]
 8002ece:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:507
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	7b12      	ldrb	r2, [r2, #12]
 8002ed6:	0612      	lsls	r2, r2, #24
 8002ed8:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:506
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 8002edc:	430a      	orrs	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:509
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6912      	ldr	r2, [r2, #16]
 8002ee8:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:510
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6952      	ldr	r2, [r2, #20]
 8002ef2:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:512
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOCTR_RESRTSEL_Msk);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a06      	ldr	r2, [pc, #24]	; (8002f14 <XMC_CAN_MO_UpdateData+0x6c>)
 8002efa:	61da      	str	r2, [r3, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:513
    error = XMC_CAN_STATUS_SUCCESS;
 8002efc:	2300      	movs	r3, #0
 8002efe:	73fb      	strb	r3, [r7, #15]
 8002f00:	e001      	b.n	8002f06 <XMC_CAN_MO_UpdateData+0x5e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:517
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8002f02:	2303      	movs	r3, #3
 8002f04:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:519
  }
  return error;
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:520
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	00280040 	.word	0x00280040

08002f18 <XMC_CAN_MO_Transmit>:
XMC_CAN_MO_Transmit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:524

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:525
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:526
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	f003 0320 	and.w	r3, r3, #32
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:527
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3c:	0a1b      	lsrs	r3, r3, #8
 8002f3e:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:529
  /* check if message is disabled */
  if (mo_type == 0U)
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d102      	bne.n	8002f4c <XMC_CAN_MO_Transmit+0x34>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:531
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
 8002f46:	2304      	movs	r3, #4
 8002f48:	75fb      	strb	r3, [r7, #23]
 8002f4a:	e00c      	b.n	8002f66 <XMC_CAN_MO_Transmit+0x4e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:534
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d102      	bne.n	8002f58 <XMC_CAN_MO_Transmit+0x40>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:536
  {
    error = XMC_CAN_STATUS_BUSY;
 8002f52:	2302      	movs	r3, #2
 8002f54:	75fb      	strb	r3, [r7, #23]
 8002f56:	e006      	b.n	8002f66 <XMC_CAN_MO_Transmit+0x4e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:541
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002f60:	61da      	str	r2, [r3, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:542
    error = XMC_CAN_STATUS_SUCCESS;
 8002f62:	2300      	movs	r3, #0
 8002f64:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:544
  }
  return error;
 8002f66:	7dfb      	ldrb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:545
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop

08002f74 <XMC_CAN_MO_ReceiveData>:
XMC_CAN_MO_ReceiveData():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:549

/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_ReceiveData (XMC_CAN_MO_t *can_mo)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:550
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:551
  uint8_t rx_pnd = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	75bb      	strb	r3, [r7, #22]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:552
  uint8_t new_data = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	757b      	strb	r3, [r7, #21]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:553
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f92:	0adb      	lsrs	r3, r3, #11
 8002f94:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:554
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	089b      	lsrs	r3, r3, #2
 8002fa2:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:556
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <XMC_CAN_MO_ReceiveData+0x3c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:558
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8002faa:	2303      	movs	r3, #3
 8002fac:	75fb      	strb	r3, [r7, #23]
 8002fae:	e025      	b.n	8002ffc <XMC_CAN_MO_ReceiveData+0x88>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:561
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d102      	bne.n	8002fbc <XMC_CAN_MO_ReceiveData+0x48>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:563
  {
    error = XMC_CAN_STATUS_BUSY;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	75fb      	strb	r3, [r7, #23]
 8002fba:	e01f      	b.n	8002ffc <XMC_CAN_MO_ReceiveData+0x88>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:570 (discriminator 2)
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691a      	ldr	r2, [r3, #16]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:571 (discriminator 2)
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695a      	ldr	r2, [r3, #20]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:573 (discriminator 2)

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	089b      	lsrs	r3, r3, #2
 8002fdc:	75bb      	strb	r3, [r7, #22]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:574 (discriminator 2)
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	08db      	lsrs	r3, r3, #3
 8002fea:	757b      	strb	r3, [r7, #21]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:575 (discriminator 2)
    } while ((rx_pnd != 0U) && (new_data != 0U));
 8002fec:	7dbb      	ldrb	r3, [r7, #22]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <XMC_CAN_MO_ReceiveData+0x84>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:575 (discriminator 1)
 8002ff2:	7d7b      	ldrb	r3, [r7, #21]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1e1      	bne.n	8002fbc <XMC_CAN_MO_ReceiveData+0x48>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:577

    error = XMC_CAN_STATUS_SUCCESS;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:579
  }
  return error;
 8002ffc:	7dfb      	ldrb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:580
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	371c      	adds	r7, #28
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <XMC_CAN_MO_Receive>:
XMC_CAN_MO_Receive():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:585


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:586
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:587
  uint8_t rx_pnd = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	75bb      	strb	r3, [r7, #22]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:588
  uint8_t new_data = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	757b      	strb	r3, [r7, #21]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:589
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003026:	0adb      	lsrs	r3, r3, #11
 8003028:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:590
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	089b      	lsrs	r3, r3, #2
 8003036:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:592
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <XMC_CAN_MO_Receive+0x3c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:594
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 800303e:	2303      	movs	r3, #3
 8003040:	75fb      	strb	r3, [r7, #23]
 8003042:	e0a7      	b.n	8003194 <XMC_CAN_MO_Receive+0x18c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:597
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d102      	bne.n	8003050 <XMC_CAN_MO_Receive+0x48>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:599
  {
    error = XMC_CAN_STATUS_BUSY;
 800304a:	2302      	movs	r3, #2
 800304c:	75fb      	strb	r3, [r7, #23]
 800304e:	e0a1      	b.n	8003194 <XMC_CAN_MO_Receive+0x18c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:606
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2208      	movs	r2, #8
 8003056:	61da      	str	r2, [r3, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:607
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003062:	0f5b      	lsrs	r3, r3, #29
 8003064:	2b00      	cmp	r3, #0
 8003066:	d140      	bne.n	80030ea <XMC_CAN_MO_Receive+0xe2>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:609
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	79d3      	ldrb	r3, [r2, #7]
 800306c:	f36f 1345 	bfc	r3, #5, #1
 8003070:	71d3      	strb	r3, [r2, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:610
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	699a      	ldr	r2, [r3, #24]
 8003078:	4b49      	ldr	r3, [pc, #292]	; (80031a0 <XMC_CAN_MO_Receive+0x198>)
 800307a:	4013      	ands	r3, r2
 800307c:	0c9b      	lsrs	r3, r3, #18
 800307e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6853      	ldr	r3, [r2, #4]
 8003086:	f361 031c 	bfi	r3, r1, #0, #29
 800308a:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:611
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003096:	0f5b      	lsrs	r3, r3, #29
 8003098:	b2db      	uxtb	r3, r3
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	b2d9      	uxtb	r1, r3
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	7ad3      	ldrb	r3, [r2, #11]
 80030a4:	f361 1345 	bfi	r3, r1, #5, #1
 80030a8:	72d3      	strb	r3, [r2, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:612
        if(can_mo->can_ide_mask == 1U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	7adb      	ldrb	r3, [r3, #11]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00d      	beq.n	80030d4 <XMC_CAN_MO_Receive+0xcc>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:614
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	4b38      	ldr	r3, [pc, #224]	; (80031a0 <XMC_CAN_MO_Receive+0x198>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	0c9b      	lsrs	r3, r3, #18
 80030c4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6893      	ldr	r3, [r2, #8]
 80030cc:	f361 031c 	bfi	r3, r1, #0, #29
 80030d0:	6093      	str	r3, [r2, #8]
 80030d2:	e032      	b.n	800313a <XMC_CAN_MO_Receive+0x132>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:618
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6893      	ldr	r3, [r2, #8]
 80030e2:	f361 031c 	bfi	r3, r1, #0, #29
 80030e6:	6093      	str	r3, [r2, #8]
 80030e8:	e027      	b.n	800313a <XMC_CAN_MO_Receive+0x132>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:623
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	79d3      	ldrb	r3, [r2, #7]
 80030ee:	f043 0320 	orr.w	r3, r3, #32
 80030f2:	71d3      	strb	r3, [r2, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:624
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6853      	ldr	r3, [r2, #4]
 8003102:	f361 031c 	bfi	r3, r1, #0, #29
 8003106:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:625
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6893      	ldr	r3, [r2, #8]
 8003116:	f361 031c 	bfi	r3, r1, #0, #29
 800311a:	6093      	str	r3, [r2, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:626
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003126:	0f5b      	lsrs	r3, r3, #29
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	b2d9      	uxtb	r1, r3
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	7ad3      	ldrb	r3, [r2, #11]
 8003134:	f361 1345 	bfi	r3, r1, #5, #1
 8003138:	72d3      	strb	r3, [r2, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:628
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003144:	0e1b      	lsrs	r3, r3, #24
 8003146:	b2da      	uxtb	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	731a      	strb	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:630

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:631
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:633

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	089b      	lsrs	r3, r3, #2
 800316c:	75bb      	strb	r3, [r7, #22]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:634
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	08db      	lsrs	r3, r3, #3
 800317a:	757b      	strb	r3, [r7, #21]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:635
    } while ((rx_pnd != 0U) && (new_data != 0U));
 800317c:	7dbb      	ldrb	r3, [r7, #22]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <XMC_CAN_MO_Receive+0x182>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:635 (discriminator 1)
 8003182:	7d7b      	ldrb	r3, [r7, #21]
 8003184:	2b00      	cmp	r3, #0
 8003186:	f47f af63 	bne.w	8003050 <XMC_CAN_MO_Receive+0x48>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:637

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	761a      	strb	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:638
    error = XMC_CAN_STATUS_SUCCESS;
 8003190:	2300      	movs	r3, #0
 8003192:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:640
  }
  return error;
 8003194:	7dfb      	ldrb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:641
}
 8003196:	4618      	mov	r0, r3
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr
 80031a0:	1ffc0000 	.word	0x1ffc0000

080031a4 <XMC_CAN_NODE_EnableEvent>:
XMC_CAN_NODE_EnableEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:645

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:646
  if(event != XMC_CAN_NODE_EVENT_CFCIE)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031b4:	d006      	beq.n	80031c4 <XMC_CAN_NODE_EnableEvent+0x20>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:648
  {
    can_node->NCR |= (uint32_t)event;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:654
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
  }
}
 80031c2:	e005      	b.n	80031d0 <XMC_CAN_NODE_EnableEvent+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:652
  {
    can_node->NCR |= (uint32_t)event;
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699a      	ldr	r2, [r3, #24]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	619a      	str	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:654
  }
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop

080031dc <XMC_CAN_NODE_DisableEvent>:
XMC_CAN_NODE_DisableEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:658

/* Function to disable node event */
void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:659
  if(event != XMC_CAN_NODE_EVENT_CFCIE)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ec:	d007      	beq.n	80031fe <XMC_CAN_NODE_DisableEvent+0x22>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:661
  {
    can_node->NCR &= ~(uint32_t)event;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	401a      	ands	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:667
  }
  else
  {
    can_node->NFCR &= ~(uint32_t)event;
  }
}
 80031fc:	e006      	b.n	800320c <XMC_CAN_NODE_DisableEvent+0x30>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:665
  {
    can_node->NCR &= ~(uint32_t)event;
  }
  else
  {
    can_node->NFCR &= ~(uint32_t)event;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	43db      	mvns	r3, r3
 8003206:	401a      	ands	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	619a      	str	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:667
  }
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop

08003218 <XMC_CAN_TXFIFO_Transmit>:
XMC_CAN_TXFIFO_Transmit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:670
/* Function to transmit MO from the FIFO */
XMC_CAN_STATUS_t XMC_CAN_TXFIFO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
 8003218:	b480      	push	{r7}
 800321a:	b089      	sub	sp, #36	; 0x24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:671
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	77fb      	strb	r3, [r7, #31]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:672
  uint32_t mo_type = ((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:673
  uint32_t mo_transmission_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323c:	0a1b      	lsrs	r3, r3, #8
 800323e:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:674
  uint32_t mo_cur =  (uint32_t)(can_mo->can_mo_ptr-> MOFGPR & CAN_MO_MOFGPR_CUR_Msk) >> CAN_MO_MOFGPR_CUR_Pos;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800324a:	0c1b      	lsrs	r3, r3, #16
 800324c:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:675
  CAN_MO_TypeDef*  mo = (CAN_MO_TypeDef *)(CAN_BASE + 0x1000UL + (mo_cur * 0x0020UL));
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f103 7310 	add.w	r3, r3, #37748736	; 0x2400000
 8003254:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 8003258:	015b      	lsls	r3, r3, #5
 800325a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:677
  /* check if message is disabled */
  if (mo_type == 0U)
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d102      	bne.n	8003268 <XMC_CAN_TXFIFO_Transmit+0x50>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:679
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
 8003262:	2304      	movs	r3, #4
 8003264:	77fb      	strb	r3, [r7, #31]
 8003266:	e00b      	b.n	8003280 <XMC_CAN_TXFIFO_Transmit+0x68>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:682
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d102      	bne.n	8003274 <XMC_CAN_TXFIFO_Transmit+0x5c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:684
  {
    error = XMC_CAN_STATUS_BUSY;
 800326e:	2302      	movs	r3, #2
 8003270:	77fb      	strb	r3, [r7, #31]
 8003272:	e005      	b.n	8003280 <XMC_CAN_TXFIFO_Transmit+0x68>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:688
  }
  else
  {
    mo->MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800327a:	61da      	str	r2, [r3, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:689
    error = XMC_CAN_STATUS_SUCCESS;
 800327c:	2300      	movs	r3, #0
 800327e:	77fb      	strb	r3, [r7, #31]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:691
  }
  return error;
 8003280:	7ffb      	ldrb	r3, [r7, #31]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:692
}
 8003282:	4618      	mov	r0, r3
 8003284:	3724      	adds	r7, #36	; 0x24
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <XMC_CAN_TXFIFO_ConfigMOBaseObject>:
XMC_CAN_TXFIFO_ConfigMOBaseObject():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:696

/* Function to initialize the transmit FIFO MO base object */
void XMC_CAN_TXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t can_fifo)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:697
  can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6812      	ldr	r2, [r2, #0]
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	f022 020f 	bic.w	r2, r2, #15
 80032a4:	f042 0202 	orr.w	r2, r2, #2
 80032a8:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:699
                              (((uint32_t)0x2U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MMC_Msk);
  can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_BOT_Msk |
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	6852      	ldr	r2, [r2, #4]
 80032b4:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:702
                                                                  CAN_MO_MOFGPR_TOP_Msk |
                                                                  CAN_MO_MOFGPR_CUR_Msk)) |
                               (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32_t)CAN_MO_MOFGPR_BOT_Msk) |
 80032b8:	7839      	ldrb	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:701
{
  can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
                              (((uint32_t)0x2U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MMC_Msk);
  can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_BOT_Msk |
                                                                  CAN_MO_MOFGPR_TOP_Msk |
                                                                  CAN_MO_MOFGPR_CUR_Msk)) |
 80032ba:	4311      	orrs	r1, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:703
                               (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32_t)CAN_MO_MOFGPR_BOT_Msk) |
                               (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t) CAN_MO_MOFGPR_CUR_Msk) |
 80032bc:	78ba      	ldrb	r2, [r7, #2]
 80032be:	0412      	lsls	r2, r2, #16
 80032c0:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:702
  can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
                              (((uint32_t)0x2U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MMC_Msk);
  can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_BOT_Msk |
                                                                  CAN_MO_MOFGPR_TOP_Msk |
                                                                  CAN_MO_MOFGPR_CUR_Msk)) |
                               (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32_t)CAN_MO_MOFGPR_BOT_Msk) |
 80032c4:	4311      	orrs	r1, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:704
                               (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t) CAN_MO_MOFGPR_CUR_Msk) |
                               (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t) CAN_MO_MOFGPR_TOP_Msk);
 80032c6:	787a      	ldrb	r2, [r7, #1]
 80032c8:	0212      	lsls	r2, r2, #8
 80032ca:	b292      	uxth	r2, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:703
                              (((uint32_t)0x2U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MMC_Msk);
  can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_BOT_Msk |
                                                                  CAN_MO_MOFGPR_TOP_Msk |
                                                                  CAN_MO_MOFGPR_CUR_Msk)) |
                               (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32_t)CAN_MO_MOFGPR_BOT_Msk) |
                               (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t) CAN_MO_MOFGPR_CUR_Msk) |
 80032cc:	430a      	orrs	r2, r1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:699
/* Function to initialize the transmit FIFO MO base object */
void XMC_CAN_TXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t can_fifo)
{
  can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
                              (((uint32_t)0x2U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MMC_Msk);
  can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_BOT_Msk |
 80032ce:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:705
                                                                  CAN_MO_MOFGPR_TOP_Msk |
                                                                  CAN_MO_MOFGPR_CUR_Msk)) |
                               (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32_t)CAN_MO_MOFGPR_BOT_Msk) |
                               (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t) CAN_MO_MOFGPR_CUR_Msk) |
                               (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t) CAN_MO_MOFGPR_TOP_Msk);
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop

080032dc <XMC_CAN_RXFIFO_ConfigMOBaseObject>:
XMC_CAN_RXFIFO_ConfigMOBaseObject():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:708
/* Function to Initialize the receive FIFO MO base object */
void XMC_CAN_RXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t can_fifo)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:709
  can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6812      	ldr	r2, [r2, #0]
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	f022 020f 	bic.w	r2, r2, #15
 80032f4:	f042 0201 	orr.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:711
                              (((uint32_t)0x1U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MMC_Msk);
  can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~( uint32_t)(CAN_MO_MOFGPR_BOT_Msk |
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	6852      	ldr	r2, [r2, #4]
 8003304:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:714
                                                                  CAN_MO_MOFGPR_TOP_Msk |
                                                                  CAN_MO_MOFGPR_CUR_Msk)) |
                               (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32_t)CAN_MO_MOFGPR_BOT_Msk) |
 8003308:	7839      	ldrb	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:713
{
  can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
                              (((uint32_t)0x1U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MMC_Msk);
  can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~( uint32_t)(CAN_MO_MOFGPR_BOT_Msk |
                                                                  CAN_MO_MOFGPR_TOP_Msk |
                                                                  CAN_MO_MOFGPR_CUR_Msk)) |
 800330a:	4311      	orrs	r1, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:715
                               (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32_t)CAN_MO_MOFGPR_BOT_Msk) |
                               (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t)CAN_MO_MOFGPR_CUR_Msk) |
 800330c:	78ba      	ldrb	r2, [r7, #2]
 800330e:	0412      	lsls	r2, r2, #16
 8003310:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:714
  can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
                              (((uint32_t)0x1U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MMC_Msk);
  can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~( uint32_t)(CAN_MO_MOFGPR_BOT_Msk |
                                                                  CAN_MO_MOFGPR_TOP_Msk |
                                                                  CAN_MO_MOFGPR_CUR_Msk)) |
                               (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32_t)CAN_MO_MOFGPR_BOT_Msk) |
 8003314:	4311      	orrs	r1, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:716
                               (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t)CAN_MO_MOFGPR_CUR_Msk) |
                               (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)CAN_MO_MOFGPR_TOP_Msk);
 8003316:	787a      	ldrb	r2, [r7, #1]
 8003318:	0212      	lsls	r2, r2, #8
 800331a:	b292      	uxth	r2, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:715
                              (((uint32_t)0x1U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MMC_Msk);
  can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~( uint32_t)(CAN_MO_MOFGPR_BOT_Msk |
                                                                  CAN_MO_MOFGPR_TOP_Msk |
                                                                  CAN_MO_MOFGPR_CUR_Msk)) |
                               (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32_t)CAN_MO_MOFGPR_BOT_Msk) |
                               (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t)CAN_MO_MOFGPR_CUR_Msk) |
 800331c:	430a      	orrs	r2, r1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:711
/* Function to Initialize the receive FIFO MO base object */
void XMC_CAN_RXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t can_fifo)
{
  can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
                              (((uint32_t)0x1U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MMC_Msk);
  can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~( uint32_t)(CAN_MO_MOFGPR_BOT_Msk |
 800331e:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:717
                                                                  CAN_MO_MOFGPR_TOP_Msk |
                                                                  CAN_MO_MOFGPR_CUR_Msk)) |
                               (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32_t)CAN_MO_MOFGPR_BOT_Msk) |
                               (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t)CAN_MO_MOFGPR_CUR_Msk) |
                               (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)CAN_MO_MOFGPR_TOP_Msk);
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop

0800332c <XMC_CAN_TXFIFO_ConfigMOSlaveObject>:
XMC_CAN_TXFIFO_ConfigMOSlaveObject():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:721

/* Function to Initialize the FIFO MO slave object */
void XMC_CAN_TXFIFO_ConfigMOSlaveObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t can_fifo)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:722
  can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6812      	ldr	r2, [r2, #0]
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	f022 020f 	bic.w	r2, r2, #15
 8003344:	f042 0203 	orr.w	r2, r2, #3
 8003348:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:724
                              (((uint32_t)0x3U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MMC_Msk);
  can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_CUR_Msk)) |
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6812      	ldr	r2, [r2, #0]
 8003352:	6852      	ldr	r2, [r2, #4]
 8003354:	f422 017f 	bic.w	r1, r2, #16711680	; 0xff0000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:725
                               (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t)CAN_MO_MOFGPR_CUR_Msk);
 8003358:	78ba      	ldrb	r2, [r7, #2]
 800335a:	0412      	lsls	r2, r2, #16
 800335c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:724
/* Function to Initialize the FIFO MO slave object */
void XMC_CAN_TXFIFO_ConfigMOSlaveObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t can_fifo)
{
  can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
                              (((uint32_t)0x3U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MMC_Msk);
  can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_CUR_Msk)) |
 8003360:	430a      	orrs	r2, r1
 8003362:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:727
                               (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t)CAN_MO_MOFGPR_CUR_Msk);

  can_mo->can_mo_ptr->MOCTR  = CAN_MO_MOCTR_SETTXEN0_Msk|
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a03      	ldr	r2, [pc, #12]	; (8003378 <XMC_CAN_TXFIFO_ConfigMOSlaveObject+0x4c>)
 800336a:	61da      	str	r2, [r3, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:729
                               CAN_MO_MOCTR_RESTXEN1_Msk;
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	02000400 	.word	0x02000400

0800337c <XMC_CAN_GATEWAY_InitSourceObject>:
XMC_CAN_GATEWAY_InitSourceObject():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:733

/* Function to Initialize the Gateway Source Object */
void XMC_CAN_GATEWAY_InitSourceObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_GATEWAY_CONFIG_t can_gateway)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	1d3b      	adds	r3, r7, #4
 8003386:	e883 0006 	stmia.w	r3, {r1, r2}
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:734
  can_mo->can_mo_ptr->MOFCR = (((uint32_t)0x4U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MMC_Msk) |
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:735
                              ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDFS_Pos) & (uint32_t)CAN_MO_MOFCR_GDFS_Msk) |
 800338e:	79fa      	ldrb	r2, [r7, #7]
 8003390:	0212      	lsls	r2, r2, #8
 8003392:	f402 7180 	and.w	r1, r2, #256	; 0x100
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:736
                              ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOFCR_DLCC_Pos) & (uint32_t)CAN_MO_MOFCR_DLCC_Msk) |
 8003396:	7a7a      	ldrb	r2, [r7, #9]
 8003398:	0292      	lsls	r2, r2, #10
 800339a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:735

/* Function to Initialize the Gateway Source Object */
void XMC_CAN_GATEWAY_InitSourceObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_GATEWAY_CONFIG_t can_gateway)
{
  can_mo->can_mo_ptr->MOFCR = (((uint32_t)0x4U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MMC_Msk) |
                              ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDFS_Pos) & (uint32_t)CAN_MO_MOFCR_GDFS_Msk) |
 800339e:	4311      	orrs	r1, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:737
                              ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOFCR_DLCC_Pos) & (uint32_t)CAN_MO_MOFCR_DLCC_Msk) |
                              ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC_Pos) & (uint32_t)CAN_MO_MOFCR_IDC_Msk) |
 80033a0:	7a3a      	ldrb	r2, [r7, #8]
 80033a2:	0252      	lsls	r2, r2, #9
 80033a4:	f402 7200 	and.w	r2, r2, #512	; 0x200
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:736
/* Function to Initialize the Gateway Source Object */
void XMC_CAN_GATEWAY_InitSourceObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_GATEWAY_CONFIG_t can_gateway)
{
  can_mo->can_mo_ptr->MOFCR = (((uint32_t)0x4U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MMC_Msk) |
                              ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDFS_Pos) & (uint32_t)CAN_MO_MOFCR_GDFS_Msk) |
                              ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOFCR_DLCC_Pos) & (uint32_t)CAN_MO_MOFCR_DLCC_Msk) |
 80033a8:	4311      	orrs	r1, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:738
                              ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC_Pos) & (uint32_t)CAN_MO_MOFCR_IDC_Msk) |
                              ((((uint32_t)can_gateway.gateway_data_copy) << CAN_MO_MOFCR_DATC_Pos) & (uint32_t)CAN_MO_MOFCR_DATC_Msk) ;
 80033aa:	7aba      	ldrb	r2, [r7, #10]
 80033ac:	02d2      	lsls	r2, r2, #11
 80033ae:	f402 6200 	and.w	r2, r2, #2048	; 0x800
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:737
void XMC_CAN_GATEWAY_InitSourceObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_GATEWAY_CONFIG_t can_gateway)
{
  can_mo->can_mo_ptr->MOFCR = (((uint32_t)0x4U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MMC_Msk) |
                              ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDFS_Pos) & (uint32_t)CAN_MO_MOFCR_GDFS_Msk) |
                              ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOFCR_DLCC_Pos) & (uint32_t)CAN_MO_MOFCR_DLCC_Msk) |
                              ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC_Pos) & (uint32_t)CAN_MO_MOFCR_IDC_Msk) |
 80033b2:	430a      	orrs	r2, r1
 80033b4:	f042 0204 	orr.w	r2, r2, #4
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:734
}

/* Function to Initialize the Gateway Source Object */
void XMC_CAN_GATEWAY_InitSourceObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_GATEWAY_CONFIG_t can_gateway)
{
  can_mo->can_mo_ptr->MOFCR = (((uint32_t)0x4U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MMC_Msk) |
 80033b8:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:739
                              ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDFS_Pos) & (uint32_t)CAN_MO_MOFCR_GDFS_Msk) |
                              ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOFCR_DLCC_Pos) & (uint32_t)CAN_MO_MOFCR_DLCC_Msk) |
                              ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC_Pos) & (uint32_t)CAN_MO_MOFCR_IDC_Msk) |
                              ((((uint32_t)can_gateway.gateway_data_copy) << CAN_MO_MOFCR_DATC_Pos) & (uint32_t)CAN_MO_MOFCR_DATC_Msk) ;
  can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32_t)CAN_MO_MOFGPR_BOT_Msk) |
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	793a      	ldrb	r2, [r7, #4]
 80033c0:	4611      	mov	r1, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:740
                               (((uint32_t)can_gateway.gateway_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t)CAN_MO_MOFGPR_CUR_Msk) |
 80033c2:	79ba      	ldrb	r2, [r7, #6]
 80033c4:	0412      	lsls	r2, r2, #16
 80033c6:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:739
  can_mo->can_mo_ptr->MOFCR = (((uint32_t)0x4U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MMC_Msk) |
                              ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDFS_Pos) & (uint32_t)CAN_MO_MOFCR_GDFS_Msk) |
                              ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOFCR_DLCC_Pos) & (uint32_t)CAN_MO_MOFCR_DLCC_Msk) |
                              ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC_Pos) & (uint32_t)CAN_MO_MOFCR_IDC_Msk) |
                              ((((uint32_t)can_gateway.gateway_data_copy) << CAN_MO_MOFCR_DATC_Pos) & (uint32_t)CAN_MO_MOFCR_DATC_Msk) ;
  can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32_t)CAN_MO_MOFGPR_BOT_Msk) |
 80033ca:	4311      	orrs	r1, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:741
                               (((uint32_t)can_gateway.gateway_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t)CAN_MO_MOFGPR_CUR_Msk) |
                               (((uint32_t)can_gateway.gateway_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)CAN_MO_MOFGPR_TOP_Msk));
 80033cc:	797a      	ldrb	r2, [r7, #5]
 80033ce:	0212      	lsls	r2, r2, #8
 80033d0:	b292      	uxth	r2, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:739
  can_mo->can_mo_ptr->MOFCR = (((uint32_t)0x4U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MMC_Msk) |
                              ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDFS_Pos) & (uint32_t)CAN_MO_MOFCR_GDFS_Msk) |
                              ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOFCR_DLCC_Pos) & (uint32_t)CAN_MO_MOFCR_DLCC_Msk) |
                              ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC_Pos) & (uint32_t)CAN_MO_MOFCR_IDC_Msk) |
                              ((((uint32_t)can_gateway.gateway_data_copy) << CAN_MO_MOFCR_DATC_Pos) & (uint32_t)CAN_MO_MOFCR_DATC_Msk) ;
  can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32_t)CAN_MO_MOFGPR_BOT_Msk) |
 80033d2:	430a      	orrs	r2, r1
 80033d4:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_can.c:742
                               (((uint32_t)can_gateway.gateway_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t)CAN_MO_MOFGPR_CUR_Msk) |
                               (((uint32_t)can_gateway.gateway_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)CAN_MO_MOFGPR_TOP_Msk));
}
 80033d6:	bf00      	nop
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr

080033e0 <XMC_CCU4_StartPrescaler>:
XMC_CCU4_StartPrescaler():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_ccu4.h:858
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_ccu4.h:860
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_ccu4.h:861
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop

08003400 <XMC_CCU4_SLICE_SetDitherCompareValue>:
XMC_CCU4_SLICE_SetDitherCompareValue():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_ccu4.h:1856
 *
  * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableDithering().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetDitherCompareValue(XMC_CCU4_SLICE_t *const slice, const uint8_t comp_val)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_ccu4.h:1858
  XMC_ASSERT("XMC_CCU4_SLICE_SetDitherCompareValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->DITS = comp_val;
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	621a      	str	r2, [r3, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_ccu4.h:1859
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr

0800341c <XMC_CCU4_lAssertReset>:
XMC_CCU4_lAssertReset():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:143
/*********************************************************************************************************************
 * LOCAL ROUTINES
 ********************************************************************************************************************/
#if defined(PERIPHERAL_RESET_SUPPORTED)
__STATIC_INLINE void XMC_CCU4_lAssertReset(const XMC_CCU4_MODULE_t *const module)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:144
  switch ((uint32_t)module)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a12      	ldr	r2, [pc, #72]	; (8003470 <XMC_CCU4_lAssertReset+0x54>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d011      	beq.n	8003450 <XMC_CCU4_lAssertReset+0x34>
 800342c:	4a10      	ldr	r2, [pc, #64]	; (8003470 <XMC_CCU4_lAssertReset+0x54>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d803      	bhi.n	800343a <XMC_CCU4_lAssertReset+0x1e>
 8003432:	4a10      	ldr	r2, [pc, #64]	; (8003474 <XMC_CCU4_lAssertReset+0x58>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d007      	beq.n	8003448 <XMC_CCU4_lAssertReset+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:170
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
      break;   
 8003438:	e016      	b.n	8003468 <XMC_CCU4_lAssertReset+0x4c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:144
 * LOCAL ROUTINES
 ********************************************************************************************************************/
#if defined(PERIPHERAL_RESET_SUPPORTED)
__STATIC_INLINE void XMC_CCU4_lAssertReset(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
 800343a:	4a0f      	ldr	r2, [pc, #60]	; (8003478 <XMC_CCU4_lAssertReset+0x5c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00b      	beq.n	8003458 <XMC_CCU4_lAssertReset+0x3c>
 8003440:	4a0e      	ldr	r2, [pc, #56]	; (800347c <XMC_CCU4_lAssertReset+0x60>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00c      	beq.n	8003460 <XMC_CCU4_lAssertReset+0x44>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:170
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
      break;   
 8003446:	e00f      	b.n	8003468 <XMC_CCU4_lAssertReset+0x4c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:147
__STATIC_INLINE void XMC_CCU4_lAssertReset(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
  {
    case (uint32_t)CCU40:
      XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8003448:	2004      	movs	r0, #4
 800344a:	f7fe f983 	bl	8001754 <XMC_SCU_RESET_AssertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:148
      break;
 800344e:	e00b      	b.n	8003468 <XMC_CCU4_lAssertReset+0x4c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:152
      
#if defined(CCU41)
    case (uint32_t)CCU41:
      XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8003450:	2008      	movs	r0, #8
 8003452:	f7fe f97f 	bl	8001754 <XMC_SCU_RESET_AssertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:153
      break;
 8003456:	e007      	b.n	8003468 <XMC_CCU4_lAssertReset+0x4c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:158
#endif

#if defined(CCU42)
    case (uint32_t)CCU42:
      XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8003458:	2010      	movs	r0, #16
 800345a:	f7fe f97b 	bl	8001754 <XMC_SCU_RESET_AssertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:159
      break;
 800345e:	e003      	b.n	8003468 <XMC_CCU4_lAssertReset+0x4c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:164
#endif

#if defined(CCU43)
    case (uint32_t)CCU43:
      XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8003460:	4807      	ldr	r0, [pc, #28]	; (8003480 <XMC_CCU4_lAssertReset+0x64>)
 8003462:	f7fe f977 	bl	8001754 <XMC_SCU_RESET_AssertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:165
      break;
 8003466:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:173
    default:
      XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
      break;   

  }
}
 8003468:	bf00      	nop
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40010000 	.word	0x40010000
 8003474:	4000c000 	.word	0x4000c000
 8003478:	40014000 	.word	0x40014000
 800347c:	48004000 	.word	0x48004000
 8003480:	10000001 	.word	0x10000001

08003484 <XMC_CCU4_lDeassertReset>:
XMC_CCU4_lDeassertReset():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:176

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:177
  switch ((uint32_t)module)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a12      	ldr	r2, [pc, #72]	; (80034d8 <XMC_CCU4_lDeassertReset+0x54>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d011      	beq.n	80034b8 <XMC_CCU4_lDeassertReset+0x34>
 8003494:	4a10      	ldr	r2, [pc, #64]	; (80034d8 <XMC_CCU4_lDeassertReset+0x54>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d803      	bhi.n	80034a2 <XMC_CCU4_lDeassertReset+0x1e>
 800349a:	4a10      	ldr	r2, [pc, #64]	; (80034dc <XMC_CCU4_lDeassertReset+0x58>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d007      	beq.n	80034b0 <XMC_CCU4_lDeassertReset+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:203
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   
 80034a0:	e016      	b.n	80034d0 <XMC_CCU4_lDeassertReset+0x4c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:177
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
 80034a2:	4a0f      	ldr	r2, [pc, #60]	; (80034e0 <XMC_CCU4_lDeassertReset+0x5c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d00b      	beq.n	80034c0 <XMC_CCU4_lDeassertReset+0x3c>
 80034a8:	4a0e      	ldr	r2, [pc, #56]	; (80034e4 <XMC_CCU4_lDeassertReset+0x60>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00c      	beq.n	80034c8 <XMC_CCU4_lDeassertReset+0x44>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:203
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   
 80034ae:	e00f      	b.n	80034d0 <XMC_CCU4_lDeassertReset+0x4c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:180
__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
  {
    case (uint32_t)CCU40:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 80034b0:	2004      	movs	r0, #4
 80034b2:	f7fe f96b 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:181
      break;
 80034b6:	e00b      	b.n	80034d0 <XMC_CCU4_lDeassertReset+0x4c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:185
      
#if defined(CCU41)
    case (uint32_t)CCU41:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 80034b8:	2008      	movs	r0, #8
 80034ba:	f7fe f967 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:186
      break;
 80034be:	e007      	b.n	80034d0 <XMC_CCU4_lDeassertReset+0x4c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:191
#endif

#if defined(CCU42)
    case (uint32_t)CCU42:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 80034c0:	2010      	movs	r0, #16
 80034c2:	f7fe f963 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:192
      break;
 80034c6:	e003      	b.n	80034d0 <XMC_CCU4_lDeassertReset+0x4c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:197
#endif

#if defined(CCU43)
    case (uint32_t)CCU43:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 80034c8:	4807      	ldr	r0, [pc, #28]	; (80034e8 <XMC_CCU4_lDeassertReset+0x64>)
 80034ca:	f7fe f95f 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:198
      break;
 80034ce:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:206
    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   

  }
}
 80034d0:	bf00      	nop
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40010000 	.word	0x40010000
 80034dc:	4000c000 	.word	0x4000c000
 80034e0:	40014000 	.word	0x40014000
 80034e4:	48004000 	.word	0x48004000
 80034e8:	10000001 	.word	0x10000001

080034ec <XMC_CCU4_EnableModule>:
XMC_CCU4_EnableModule():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:292
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:297
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 80034f4:	2010      	movs	r0, #16
 80034f6:	f7fe fc1b 	bl	8001d30 <XMC_SCU_CLOCK_EnableClock>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:305
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff ffc2 	bl	8003484 <XMC_CCU4_lDeassertReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:307
#endif
}
 8003500:	bf00      	nop
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <XMC_CCU4_DisableModule>:
XMC_CCU4_DisableModule():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:310

void XMC_CCU4_DisableModule(XMC_CCU4_MODULE_t *const module)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:314
  XMC_ASSERT("XMC_CCU4_DisableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lAssertReset(module);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff ff83 	bl	800341c <XMC_CCU4_lAssertReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:320
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lGateClock(module);
#endif
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop

08003520 <XMC_CCU4_Init>:
XMC_CCU4_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:324

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:331
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff ffdd 	bl	80034ec <XMC_CCU4_EnableModule>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:333
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff ff54 	bl	80033e0 <XMC_CCU4_StartPrescaler>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:335
  
  gctrl = module->GCTRL;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:336
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003544:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:337
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8003546:	78fb      	ldrb	r3, [r7, #3]
 8003548:	039b      	lsls	r3, r3, #14
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:339
  
  module->GCTRL = gctrl;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:340
}
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop

08003560 <XMC_CCU4_SetModuleClock>:
XMC_CCU4_SetModuleClock():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:344

/* API to select CCU4 module clock */
void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:350
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));

  gctrl = module->GCTRL;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:351
  gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003578:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:352
  gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
 800357a:	78fb      	ldrb	r3, [r7, #3]
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:354
  
  module->GCTRL = gctrl;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:355
}
 800358a:	bf00      	nop
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr

08003594 <XMC_CCU4_SetMultiChannelShadowTransferMode>:
XMC_CCU4_SetMultiChannelShadowTransferMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:359

/* API to configure the multichannel shadow transfer request via SW and via the CCU4x.MCSS input. */
void XMC_CCU4_SetMultiChannelShadowTransferMode(XMC_CCU4_MODULE_t *const module, const uint32_t slice_mode_msk)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:364
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU4_IsValidModule(module));
  
  gctrl = module->GCTRL;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:365
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	0c1b      	lsrs	r3, r3, #16
 80035a8:	43db      	mvns	r3, r3
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	4013      	ands	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:366
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:367
  module->GCTRL = gctrl;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:368
}
 80035c0:	bf00      	nop
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bc80      	pop	{r7}
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop

080035cc <XMC_CCU4_SLICE_CompareInit>:
XMC_CCU4_SLICE_CompareInit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:373

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
		                            const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:379
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:381
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	795b      	ldrb	r3, [r3, #5]
 80035e2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	051a      	lsls	r2, r3, #20
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:383
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	791b      	ldrb	r3, [r3, #4]
 80035f2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	461a      	mov	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	625a      	str	r2, [r3, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:385
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	795b      	ldrb	r3, [r3, #5]
 8003602:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003606:	b2db      	uxtb	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	621a      	str	r2, [r3, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:387
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	795b      	ldrb	r3, [r3, #5]
 8003612:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003616:	b2db      	uxtb	r3, r3
 8003618:	461a      	mov	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	619a      	str	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:389
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	791b      	ldrb	r3, [r3, #4]
 8003622:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003626:	b2db      	uxtb	r3, r3
 8003628:	461a      	mov	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	62da      	str	r2, [r3, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:390
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr

08003638 <XMC_CCU4_SLICE_CaptureInit>:
XMC_CCU4_SLICE_CaptureInit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:395

/* API to configure CC4 Slice for Capture */
void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
		                        const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:401
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Capture Init Pointer is NULL",
             (XMC_CCU4_SLICE_CAPTURE_CONFIG_t *) NULL != capture_init);

  /* Program the capture mode */
  slice->TC = capture_init->tc;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:403
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t)capture_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	795b      	ldrb	r3, [r3, #5]
 800364e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003652:	b2db      	uxtb	r3, r3
 8003654:	051a      	lsls	r2, r3, #20
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:405
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) capture_init->prescaler_initval;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	791b      	ldrb	r3, [r3, #4]
 800365e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003662:	b2db      	uxtb	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	625a      	str	r2, [r3, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:407
  /* Program initial floating prescaler compare value */
  slice->FPCS = (uint32_t) capture_init->float_limit;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	791b      	ldrb	r3, [r3, #4]
 800366e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003672:	b2db      	uxtb	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	62da      	str	r2, [r3, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:408
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <XMC_CCU4_SLICE_StartConfig>:
XMC_CCU4_SLICE_StartConfig():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:415

/* API to configure the Start trigger function of a slice */
void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
		                        const XMC_CCU4_SLICE_EVENT_t event,
                                const XMC_CCU4_SLICE_START_MODE_t start_mode)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	70fb      	strb	r3, [r7, #3]
 8003690:	4613      	mov	r3, r2
 8003692:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:425
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
		          (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:426
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	f023 0303 	bic.w	r3, r3, #3
 80036a0:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:427
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
 80036a2:	78fb      	ldrb	r3, [r7, #3]
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:429

  slice->CMC = cmc;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:431
  
  tc  = slice->TC;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:433
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
 80036b6:	78bb      	ldrb	r3, [r7, #2]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d104      	bne.n	80036c6 <XMC_CCU4_SLICE_StartConfig+0x42>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:435
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	e003      	b.n	80036ce <XMC_CCU4_SLICE_StartConfig+0x4a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:439
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036cc:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:442
  }
  
  slice->TC = tc;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:443
}
 80036d4:	bf00      	nop
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop

080036e0 <XMC_CCU4_SLICE_StopConfig>:
XMC_CCU4_SLICE_StopConfig():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:449

/* API to configure the Stop trigger function of a slice */
void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
		                       const XMC_CCU4_SLICE_EVENT_t event,
                               const XMC_CCU4_SLICE_END_MODE_t end_mode)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	70fb      	strb	r3, [r7, #3]
 80036ec:	4613      	mov	r3, r2
 80036ee:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:458
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));
  
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:459
  cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f023 030c 	bic.w	r3, r3, #12
 80036fc:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:460
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_ENDS_Pos;
 80036fe:	78fb      	ldrb	r3, [r7, #3]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:462

  slice->CMC = cmc;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:465
  
  /* Next, Configure the stop mode */
  tc = slice->TC;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:466
  tc &= ~((uint32_t) CCU4_CC4_TC_ENDM_Msk);
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800371a:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:467
  tc |= ((uint32_t) end_mode) << CCU4_CC4_TC_ENDM_Pos;
 800371c:	78bb      	ldrb	r3, [r7, #2]
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	4313      	orrs	r3, r2
 8003724:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:469

  slice->TC = tc;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:470
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop

08003738 <XMC_CCU4_SLICE_LoadConfig>:
XMC_CCU4_SLICE_LoadConfig():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:474

/* API to configure the Load trigger function of a slice */
void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:481
  
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the load function */
  cmc = slice->CMC;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:482
  cmc &= ~((uint32_t) CCU4_CC4_CMC_LDS_Msk);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003750:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:483
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_LDS_Pos;
 8003752:	78fb      	ldrb	r3, [r7, #3]
 8003754:	031b      	lsls	r3, r3, #12
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4313      	orrs	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:485

  slice->CMC = cmc;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:486
}
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <XMC_CCU4_SLICE_ModulationConfig>:
XMC_CCU4_SLICE_ModulationConfig():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:493
/* API to configure the slice modulation function */
void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_EVENT_t event,
                                     const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
                                     const bool synch_with_pwm)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	4608      	mov	r0, r1
 8003776:	4611      	mov	r1, r2
 8003778:	461a      	mov	r2, r3
 800377a:	4603      	mov	r3, r0
 800377c:	70fb      	strb	r3, [r7, #3]
 800377e:	460b      	mov	r3, r1
 8003780:	70bb      	strb	r3, [r7, #2]
 8003782:	4613      	mov	r3, r2
 8003784:	707b      	strb	r3, [r7, #1]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:503
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Modulation Mode",
             ((mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT) ||\
		          (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT)));
  
  tc  = slice->TC;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:504
  cmc = slice->CMC;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:507
  
  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003798:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:508
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
 800379a:	78fb      	ldrb	r3, [r7, #3]
 800379c:	049b      	lsls	r3, r3, #18
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:509
  slice->CMC = cmc;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:512
  
  /* Next, Modulation mode */
  if (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT)
 80037aa:	78bb      	ldrb	r3, [r7, #2]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d104      	bne.n	80037ba <XMC_CCU4_SLICE_ModulationConfig+0x4e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:514
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMT_Msk;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	e003      	b.n	80037c2 <XMC_CCU4_SLICE_ModulationConfig+0x56>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:518
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMT_Msk);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037c0:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:522
  }

  /* Synchronization of modulation effect with PWM cycle */
  if (synch_with_pwm == (bool) true)
 80037c2:	787b      	ldrb	r3, [r7, #1]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d004      	beq.n	80037d2 <XMC_CCU4_SLICE_ModulationConfig+0x66>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:524
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	e003      	b.n	80037da <XMC_CCU4_SLICE_ModulationConfig+0x6e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:528
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMS_Msk);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80037d8:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:531
  }
  
  slice->TC = tc;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:532
}
 80037e0:	bf00      	nop
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop

080037ec <XMC_CCU4_SLICE_CountConfig>:
XMC_CCU4_SLICE_CountConfig():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:536

/* API to configure the slice count function */
void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:543
  
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the count function */
  cmc = slice->CMC;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:544
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003804:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:545
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
 8003806:	78fb      	ldrb	r3, [r7, #3]
 8003808:	039b      	lsls	r3, r3, #14
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4313      	orrs	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:547

  slice->CMC = cmc;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:548
}
 8003816:	bf00      	nop
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr

08003820 <XMC_CCU4_SLICE_GateConfig>:
XMC_CCU4_SLICE_GateConfig():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:552

/* API to configure slice gate function */
void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:559
  
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:560
  cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003838:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:561
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
 800383a:	78fb      	ldrb	r3, [r7, #3]
 800383c:	021b      	lsls	r3, r3, #8
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4313      	orrs	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:563

  slice->CMC = cmc;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:564
}
 800384a:	bf00      	nop
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr

08003854 <XMC_CCU4_SLICE_Capture0Config>:
XMC_CCU4_SLICE_Capture0Config():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:568

/* API to configure Capture-0 function */
void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	460b      	mov	r3, r1
 800385e:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:575
  
  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:576
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP0S_Msk);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800386c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:577
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP0S_Pos;
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:579

  slice->CMC = cmc;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:580
}
 800387e:	bf00      	nop
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr

08003888 <XMC_CCU4_SLICE_Capture1Config>:
XMC_CCU4_SLICE_Capture1Config():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:584

/* API to configure Capture-1 function */
void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:591
  
  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:592
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP1S_Msk);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80038a0:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:593
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP1S_Pos;
 80038a2:	78fb      	ldrb	r3, [r7, #3]
 80038a4:	019b      	lsls	r3, r3, #6
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:595

  slice->CMC = cmc;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:596
}
 80038b2:	bf00      	nop
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr

080038bc <XMC_CCU4_SLICE_DirectionConfig>:
XMC_CCU4_SLICE_DirectionConfig():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:600

/* API to configure direction function */
void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:607
  
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the direction function */
  cmc = slice->CMC;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:608
  cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038d4:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:609
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
 80038d6:	78fb      	ldrb	r3, [r7, #3]
 80038d8:	029b      	lsls	r3, r3, #10
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	4313      	orrs	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:611
  
  slice->CMC = cmc;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:612
}
 80038e6:	bf00      	nop
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr

080038f0 <XMC_CCU4_SLICE_StatusBitOverrideConfig>:
XMC_CCU4_SLICE_StatusBitOverrideConfig():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:616

/* API to configure slice status bit override function */
void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:622
  uint32_t cmc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  
  /* Bind the event with the override function */
  cmc = slice->CMC;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:625
  /* Map status bit trigger override to Event 1 & 
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_OFS_Msk);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003904:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:626
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_OFS_Pos;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800390c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:628

  slice->CMC = cmc;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:629
}
 8003914:	bf00      	nop
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop

08003920 <XMC_CCU4_SLICE_TrapConfig>:
XMC_CCU4_SLICE_TrapConfig():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:635

/* API to configure trap function */
void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
		                           const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	70fb      	strb	r3, [r7, #3]
 800392c:	4613      	mov	r3, r2
 800392e:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:644
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
		                                                         (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)));
    
  /* First, Map trap function to Event 2 */
  cmc = slice->CMC;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:645
  cmc &= ~((uint32_t) CCU4_CC4_CMC_TS_Msk);
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800393c:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:646
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_TS_Pos;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003944:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:647
  slice->CMC = cmc;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:650
  
  /* Next, Configure synchronization option */
  tc = slice->TC;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:652

  if (synch_with_pwm == (bool) true)
 8003952:	78bb      	ldrb	r3, [r7, #2]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d004      	beq.n	8003962 <XMC_CCU4_SLICE_TrapConfig+0x42>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:654
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSE_Msk;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	e003      	b.n	800396a <XMC_CCU4_SLICE_TrapConfig+0x4a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:658
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003968:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:662
  }
  
  /* Configure exit mode */
  if (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)
 800396a:	78fb      	ldrb	r3, [r7, #3]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d104      	bne.n	800397a <XMC_CCU4_SLICE_TrapConfig+0x5a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:664
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSW_Msk;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	e003      	b.n	8003982 <XMC_CCU4_SLICE_TrapConfig+0x62>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:668
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSW_Msk);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003980:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:671
  }
  
  slice->TC = tc;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:672
}
 8003988:	bf00      	nop
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	bc80      	pop	{r7}
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop

08003994 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>:
XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:678

/* API to configure a slice Status Bit Override event */
void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_config,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_config)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:741
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS1_EV2IS_Pos;
  
  slice->INS1 = ins;
#else
  ins = slice->INS;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:744

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV1EM_Pos);
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80039ac:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:745
  ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS_EV1EM_Pos;
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	785b      	ldrb	r3, [r3, #1]
 80039b2:	049b      	lsls	r3, r3, #18
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:748
  
  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV2EM_Pos);
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80039c0:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:749
  ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS_EV2EM_Pos;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	785b      	ldrb	r3, [r3, #1]
 80039c6:	051b      	lsls	r3, r3, #20
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:752
  
  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV1LM_Pos);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80039d4:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:753
  ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS_EV1LM_Pos;
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	789b      	ldrb	r3, [r3, #2]
 80039da:	05db      	lsls	r3, r3, #23
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:756
  
  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV2LM_Pos);
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039e8:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:757
  ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS_EV2LM_Pos;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	789b      	ldrb	r3, [r3, #2]
 80039ee:	061b      	lsls	r3, r3, #24
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:760
  
  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 80039fc:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:761
  ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	78db      	ldrb	r3, [r3, #3]
 8003a02:	06db      	lsls	r3, r3, #27
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:764

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003a10:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:765
  ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	78db      	ldrb	r3, [r3, #3]
 8003a16:	075b      	lsls	r3, r3, #29
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:768
  
  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a24:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:769
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:772

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a38:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:773
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	021b      	lsls	r3, r3, #8
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:775
  
  slice->INS = ins;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:777
#endif
}
 8003a4c:	bf00      	nop
 8003a4e:	371c      	adds	r7, #28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop

08003a58 <XMC_CCU4_SLICE_ConfigureEvent>:
XMC_CCU4_SLICE_ConfigureEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:783

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
		                               const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b089      	sub	sp, #36	; 0x24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	460b      	mov	r3, r1
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:799
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 8003a66:	7afb      	ldrb	r3, [r7, #11]
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	77fb      	strb	r3, [r7, #31]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:831
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:834
  
  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 8003a72:	7ffb      	ldrb	r3, [r7, #31]
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	3310      	adds	r3, #16
 8003a7a:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:835
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
 8003a7e:	2203      	movs	r2, #3
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	43db      	mvns	r3, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:836
  ins |= ((uint32_t) config->edge) << pos;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	785b      	ldrb	r3, [r3, #1]
 8003a90:	461a      	mov	r2, r3
 8003a92:	7dfb      	ldrb	r3, [r7, #23]
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:839
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 8003a9e:	7ffb      	ldrb	r3, [r7, #31]
 8003aa0:	3316      	adds	r3, #22
 8003aa2:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:840
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8003aa4:	7dfb      	ldrb	r3, [r7, #23]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	43db      	mvns	r3, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:841
  ins |= ((uint32_t) config->level) << pos;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	789b      	ldrb	r3, [r3, #2]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	7dfb      	ldrb	r3, [r7, #23]
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:844
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 8003ac6:	7ffb      	ldrb	r3, [r7, #31]
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	3319      	adds	r3, #25
 8003ace:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:845
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 8003ad0:	7dfb      	ldrb	r3, [r7, #23]
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	4013      	ands	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:846
  ins |= ((uint32_t) config->duration) << pos;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	78db      	ldrb	r3, [r3, #3]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:849

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 8003af2:	7ffb      	ldrb	r3, [r7, #31]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:850
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8003af8:	7dfb      	ldrb	r3, [r7, #23]
 8003afa:	220f      	movs	r2, #15
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4013      	ands	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:851
  ins |= ((uint32_t) config->mapped_input) << pos;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	7dfb      	ldrb	r3, [r7, #23]
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:853

  slice->INS = ins;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:855
#endif
}
 8003b20:	bf00      	nop
 8003b22:	3724      	adds	r7, #36	; 0x24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop

08003b2c <XMC_CCU4_SLICE_SetInput>:
XMC_CCU4_SLICE_SetInput():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:861

/* API to bind an input to a slice trigger event */
void XMC_CCU4_SLICE_SetInput(XMC_CCU4_SLICE_t *const slice,
		                     const XMC_CCU4_SLICE_EVENT_t event,
                             const XMC_CCU4_SLICE_INPUT_t input)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	70fb      	strb	r3, [r7, #3]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:871
  XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Input", XMC_CCU4_SLICE_IsInputvalid(input));
  
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 8003b3c:	78fb      	ldrb	r3, [r7, #3]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:882
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
  ins |= ((uint32_t) input) << pos;

  slice->INS1 = ins;
#else
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t) (offset << 2U);
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	73bb      	strb	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:884

  ins = slice->INS;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:885
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8003b4e:	7bbb      	ldrb	r3, [r7, #14]
 8003b50:	220f      	movs	r2, #15
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43db      	mvns	r3, r3
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:886
  ins |= ((uint32_t) input) << pos;
 8003b5e:	78ba      	ldrb	r2, [r7, #2]
 8003b60:	7bbb      	ldrb	r3, [r7, #14]
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:888

  slice->INS = ins;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:890
#endif
}
 8003b72:	bf00      	nop
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc80      	pop	{r7}
 8003b7a:	4770      	bx	lr

08003b7c <XMC_CCU4_SLICE_SetTimerRepeatMode>:
XMC_CCU4_SLICE_SetTimerRepeatMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:894

/* API to program timer repeat mode - Single shot vs repeat */
void XMC_CCU4_SLICE_SetTimerRepeatMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t mode)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:900
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerRepeatMode:Invalid Timer Repeat Mode",
             ((mode == XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT) ||\
		      (mode == XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE)));
  
  if (XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT == mode)
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d106      	bne.n	8003b9c <XMC_CCU4_SLICE_SetTimerRepeatMode+0x20>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:902
  {
    slice->TC &= ~((uint32_t) CCU4_CC4_TC_TSSM_Msk);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f023 0202 	bic.w	r2, r3, #2
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:908
  }
  else
  {
    slice->TC |= (uint32_t) CCU4_CC4_TC_TSSM_Msk;
  }
}
 8003b9a:	e005      	b.n	8003ba8 <XMC_CCU4_SLICE_SetTimerRepeatMode+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:906
  {
    slice->TC &= ~((uint32_t) CCU4_CC4_TC_TSSM_Msk);
  }
  else
  {
    slice->TC |= (uint32_t) CCU4_CC4_TC_TSSM_Msk;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	f043 0202 	orr.w	r2, r3, #2
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:908
  }
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bc80      	pop	{r7}
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop

08003bb4 <XMC_CCU4_SLICE_SetTimerCountingMode>:
XMC_CCU4_SLICE_SetTimerCountingMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:912

/* Programs timer counting mode */
void XMC_CCU4_SLICE_SetTimerCountingMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_COUNT_MODE_t mode)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:917
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Timer Count Mode", ((mode == XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA) ||\
		                                                                          (mode == XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA)));
  
  if (XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA == mode)
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <XMC_CCU4_SLICE_SetTimerCountingMode+0x20>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:919
  {
    slice->TC &= ~((uint32_t) CCU4_CC4_TC_TCM_Msk);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f023 0201 	bic.w	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:925
  }
  else
  {
    slice->TC |= (uint32_t) CCU4_CC4_TC_TCM_Msk;
  }
}
 8003bd2:	e005      	b.n	8003be0 <XMC_CCU4_SLICE_SetTimerCountingMode+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:923
  {
    slice->TC &= ~((uint32_t) CCU4_CC4_TC_TCM_Msk);
  }
  else
  {
    slice->TC |= (uint32_t) CCU4_CC4_TC_TCM_Msk;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	f043 0201 	orr.w	r2, r3, #1
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:925
  }
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop

08003bec <XMC_CCU4_SLICE_GetCaptureRegisterValue>:
XMC_CCU4_SLICE_GetCaptureRegisterValue():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:929

/* Retrieves desired capture register value */
uint32_t XMC_CCU4_SLICE_GetCaptureRegisterValue(const XMC_CCU4_SLICE_t *const slice, const uint8_t reg_num)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:932
  XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid register number", (reg_num < 4U));
  return(slice->CV[reg_num]);
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	331c      	adds	r3, #28
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	685b      	ldr	r3, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:933
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop

08003c10 <XMC_CCU4_SLICE_GetLastCapturedTimerValue>:
XMC_CCU4_SLICE_GetLastCapturedTimerValue():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:939

/* @brief Retrieves the latest captured timer value */
XMC_CCU4_STATUS_t XMC_CCU4_SLICE_GetLastCapturedTimerValue(const XMC_CCU4_SLICE_t *const slice,
                                                           const XMC_CCU4_SLICE_CAP_REG_SET_t set,
                                                           uint32_t *val_ptr)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	607a      	str	r2, [r7, #4]
 8003c1c:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:949
  
  XMC_ASSERT("XMC_CCU4_SLICE_GetLastCapturedTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GetLastCapturedTimerValue:Invalid Register Set", ((set == XMC_CCU4_SLICE_CAP_REG_SET_LOW) ||\
		                                                                           (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)));
  
  retval = XMC_CCU4_STATUS_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:952

  /* First check if extended capture mode is enabled */
  if ((slice->TC) & CCU4_CC4_TC_ECM_Msk)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d004      	beq.n	8003c38 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x28>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:955
  {
    /* Extended capture mode has been enabled. So start with the lowest capture register and work your way up */
    start = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	757b      	strb	r3, [r7, #21]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:956
    end = XMC_CCU4_NUM_SLICES_PER_MODULE;
 8003c32:	2304      	movs	r3, #4
 8003c34:	753b      	strb	r3, [r7, #20]
 8003c36:	e00b      	b.n	8003c50 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x40>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:961
  }
  else
  {
    /* Extended capture mode is not enabled */
    if (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)
 8003c38:	7afb      	ldrb	r3, [r7, #11]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d104      	bne.n	8003c48 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x38>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:963
    {
      start = ((uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE) >> 1U;
 8003c3e:	2302      	movs	r3, #2
 8003c40:	757b      	strb	r3, [r7, #21]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:964
      end   = (uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE;
 8003c42:	2304      	movs	r3, #4
 8003c44:	753b      	strb	r3, [r7, #20]
 8003c46:	e003      	b.n	8003c50 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x40>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:968
    }
    else
    {
      start = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	757b      	strb	r3, [r7, #21]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:969
      end = ((uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE) >> 1U;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	753b      	strb	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:973
    }
  }

  for(i=start; i < end; i++)
 8003c50:	7d7b      	ldrb	r3, [r7, #21]
 8003c52:	75bb      	strb	r3, [r7, #22]
 8003c54:	e017      	b.n	8003c86 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x76>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:975
  {
    if ( (slice->CV[i]) & CCU4_CC4_CV_FFL_Msk )
 8003c56:	7dbb      	ldrb	r3, [r7, #22]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	331c      	adds	r3, #28
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x70>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:977
    {
      *val_ptr = slice->CV[i];
 8003c6a:	7dbb      	ldrb	r3, [r7, #22]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	331c      	adds	r3, #28
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:978
      retval = XMC_CCU4_STATUS_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:979
      break;
 8003c7e:	e006      	b.n	8003c8e <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x7e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:973 (discriminator 2)
      start = 0U;
      end = ((uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE) >> 1U;
    }
  }

  for(i=start; i < end; i++)
 8003c80:	7dbb      	ldrb	r3, [r7, #22]
 8003c82:	3301      	adds	r3, #1
 8003c84:	75bb      	strb	r3, [r7, #22]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:973 (discriminator 1)
 8003c86:	7dba      	ldrb	r2, [r7, #22]
 8003c88:	7d3b      	ldrb	r3, [r7, #20]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d3e3      	bcc.n	8003c56 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x46>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:983
      retval = XMC_CCU4_STATUS_OK;
      break;
    }
  }

  return retval;
 8003c8e:	7dfb      	ldrb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:984
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	371c      	adds	r7, #28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop

08003c9c <XMC_CCU4_GetCapturedValueFromFifo>:
XMC_CCU4_GetCapturedValueFromFifo():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:989

/* Retrieves timer capture value from a FIFO made of capture registers */
#if defined(CCU4V1) /* Defined for XMC4500, XMC400, XMC4200, XMC4100 devices only */
int32_t XMC_CCU4_GetCapturedValueFromFifo(const XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:996
  uint32_t  extracted_slice;
  
  XMC_ASSERT("XMC_CCU4_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));

  /* First read the global fifo register */
  cap = (int32_t) module->ECRD;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cac:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:998

  extracted_slice = (((uint32_t) cap) & ((uint32_t) CCU4_ECRD_SPTR_Msk)) >> CCU4_ECRD_SPTR_Pos;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	0d1b      	lsrs	r3, r3, #20
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1001

  /* Return captured result only if it were applicable to this slice */
  if(extracted_slice != ((uint32_t)slice_number))
 8003cb8:	78fa      	ldrb	r2, [r7, #3]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d002      	beq.n	8003cc6 <XMC_CCU4_GetCapturedValueFromFifo+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1003
  {
    cap = -1;
 8003cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc4:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1006
  }

  return (cap);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1007
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop

08003cd4 <XMC_CCU4_SLICE_EnableDithering>:
XMC_CCU4_SLICE_EnableDithering():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1037
/* Enables PWM dithering feature */
void XMC_CCU4_SLICE_EnableDithering(XMC_CCU4_SLICE_t *const slice,
		                                const bool period_dither,
                                    const bool duty_dither,
                                    const uint8_t spread)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	4608      	mov	r0, r1
 8003cde:	4611      	mov	r1, r2
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	70fb      	strb	r3, [r7, #3]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	70bb      	strb	r3, [r7, #2]
 8003cea:	4613      	mov	r3, r2
 8003cec:	707b      	strb	r3, [r7, #1]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1042
  uint32_t tc;

  XMC_ASSERT("XMC_CCU4_SLICE_EnableDithering:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  tc = slice->TC;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1043
  tc &= ~((uint32_t) CCU4_CC4_TC_DITHE_Msk);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8003cfa:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1045

  if ((bool) true == period_dither)
 8003cfc:	78fb      	ldrb	r3, [r7, #3]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <XMC_CCU4_SLICE_EnableDithering+0x36>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1047
  {
    tc |= (((uint32_t) XMC_CCU4_SLICE_DITHER_PERIOD_MASK) << CCU4_CC4_TC_DITHE_Pos);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d08:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1049
  }
  if ((bool) true == duty_dither)
 8003d0a:	78bb      	ldrb	r3, [r7, #2]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <XMC_CCU4_SLICE_EnableDithering+0x44>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1051
  {
    tc |= (((uint32_t) XMC_CCU4_SLICE_DITHER_DUTYCYCLE_MASK) << CCU4_CC4_TC_DITHE_Pos);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d16:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1054
  }

  slice->TC = tc;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1056
  
  XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
 8003d1e:	787b      	ldrb	r3, [r7, #1]
 8003d20:	4619      	mov	r1, r3
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff fb6c 	bl	8003400 <XMC_CCU4_SLICE_SetDitherCompareValue>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1057
}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <XMC_CCU4_SLICE_SetPrescaler>:
XMC_CCU4_SLICE_SetPrescaler():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1061

/* Programs Pre-scalar divider  */
void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const uint8_t div_val)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1066
  uint32_t fpc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d40:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1067
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d48:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1068
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 8003d4a:	78fb      	ldrb	r3, [r7, #3]
 8003d4c:	021b      	lsls	r3, r3, #8
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1069
  slice->FPC = fpc;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	629a      	str	r2, [r3, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1074
  /* 
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the 
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 8003d5a:	78fa      	ldrb	r2, [r7, #3]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	625a      	str	r2, [r3, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1075
}
 8003d60:	bf00      	nop
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop

08003d6c <XMC_CCU4_SLICE_SetInterruptNode>:
XMC_CCU4_SLICE_SetInterruptNode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1081

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	70fb      	strb	r3, [r7, #3]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1090

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d82:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1092
  
  switch(event)
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	2b09      	cmp	r3, #9
 8003d88:	d82c      	bhi.n	8003de4 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8003d8a:	a201      	add	r2, pc, #4	; (adr r2, 8003d90 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8003d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d90:	08003db9 	.word	0x08003db9
 8003d94:	08003db9 	.word	0x08003db9
 8003d98:	08003dc3 	.word	0x08003dc3
 8003d9c:	08003dc3 	.word	0x08003dc3
 8003da0:	08003de5 	.word	0x08003de5
 8003da4:	08003de5 	.word	0x08003de5
 8003da8:	08003de5 	.word	0x08003de5
 8003dac:	08003de5 	.word	0x08003de5
 8003db0:	08003dcd 	.word	0x08003dcd
 8003db4:	08003dd9 	.word	0x08003dd9
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1096
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8003db8:	2303      	movs	r3, #3
 8003dba:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1097
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1098
      break;
 8003dc0:	e016      	b.n	8003df0 <XMC_CCU4_SLICE_SetInterruptNode+0x84>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1102

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8003dc2:	230c      	movs	r3, #12
 8003dc4:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1103
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1104
      break;
 8003dca:	e011      	b.n	8003df0 <XMC_CCU4_SLICE_SetInterruptNode+0x84>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1107

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8003dcc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003dd0:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1108
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8003dd2:	2308      	movs	r3, #8
 8003dd4:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1109
      break;
 8003dd6:	e00b      	b.n	8003df0 <XMC_CCU4_SLICE_SetInterruptNode+0x84>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1112

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8003dd8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003ddc:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1113
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8003dde:	230a      	movs	r3, #10
 8003de0:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1114
      break;
 8003de2:	e005      	b.n	8003df0 <XMC_CCU4_SLICE_SetInterruptNode+0x84>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1117

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8003de4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003de8:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1118
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8003dea:	230c      	movs	r3, #12
 8003dec:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1119
      break;
 8003dee:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1122
  }
  
  srs &= ~mask; 
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	43db      	mvns	r3, r3
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4013      	ands	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1123
  srs |= (uint32_t)sr << pos;
 8003dfa:	78ba      	ldrb	r2, [r7, #2]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1124
  slice->SRS = srs;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1125
}
 8003e10:	bf00      	nop
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop

08003e1c <XMC_CCU4_SLICE_SetPassiveLevel>:
XMC_CCU4_SLICE_SetPassiveLevel():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1130

/* Asserts passive level for the slice output */
void XMC_CCU4_SLICE_SetPassiveLevel(XMC_CCU4_SLICE_t *const slice,
                                    const XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t level)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1137
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPassiveLevel:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetPassiveLevel:Invalid Passive level", ((level == XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW) ||\
		                                                                  (level == XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH)));
  
  psl = slice->PSL;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1138
  psl &= ~((uint32_t) CCU4_CC4_PSL_PSL_Msk);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f023 0301 	bic.w	r3, r3, #1
 8003e34:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1139
  psl |= (uint32_t) level;
 8003e36:	78fb      	ldrb	r3, [r7, #3]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1142
  
  /* Program CC4 slice output passive level */
  slice->PSL = psl;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	619a      	str	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu4.c:1143
}
 8003e44:	bf00      	nop
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop

08003e50 <XMC_CCU8_StartPrescaler>:
XMC_CCU8_StartPrescaler():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_ccu8.h:1115
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_ccu8.h:1117
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_ccu8.h:1118
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop

08003e70 <XMC_CCU8_SLICE_StopTimer>:
XMC_CCU8_SLICE_StopTimer():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_ccu8.h:1788
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_ccu8.h:1790
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_ccu8.h:1791
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr

08003e88 <XMC_CCU8_SLICE_SetDitherCompareValue>:
XMC_CCU8_SLICE_SetDitherCompareValue():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_ccu8.h:2230
 *
  * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_EnableDithering().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetDitherCompareValue(XMC_CCU8_SLICE_t *const slice, const uint8_t comp_val)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	460b      	mov	r3, r1
 8003e92:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_ccu8.h:2234
  XMC_ASSERT("XMC_CCU8_SLICE_SetDitherCompareValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetDitherCompareValue:Invalid Dither compare value", (comp_val <= 15U));

  slice->DITS = comp_val;
 8003e94:	78fa      	ldrb	r2, [r7, #3]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	621a      	str	r2, [r3, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_ccu8.h:2235
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr

08003ea4 <XMC_CCU8_lAssertReset>:
XMC_CCU8_lAssertReset():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:177
/*********************************************************************************************************************
 * LOCAL ROUTINES
 ********************************************************************************************************************/
#if defined(PERIPHERAL_RESET_SUPPORTED)
__STATIC_INLINE void XMC_CCU8_lAssertReset(const XMC_CCU8_MODULE_t *const module)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:178
  switch ((uint32_t)module)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a0a      	ldr	r2, [pc, #40]	; (8003ed8 <XMC_CCU8_lAssertReset+0x34>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d003      	beq.n	8003ebc <XMC_CCU8_lAssertReset+0x18>
 8003eb4:	4a09      	ldr	r2, [pc, #36]	; (8003edc <XMC_CCU8_lAssertReset+0x38>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d004      	beq.n	8003ec4 <XMC_CCU8_lAssertReset+0x20>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:192
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
      break;   
 8003eba:	e008      	b.n	8003ece <XMC_CCU8_lAssertReset+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:181
__STATIC_INLINE void XMC_CCU8_lAssertReset(const XMC_CCU8_MODULE_t *const module)
{
  switch ((uint32_t)module)
  {
    case (uint32_t)CCU80:
      XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8003ebc:	2080      	movs	r0, #128	; 0x80
 8003ebe:	f7fd fc49 	bl	8001754 <XMC_SCU_RESET_AssertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:182
      break;
 8003ec2:	e004      	b.n	8003ece <XMC_CCU8_lAssertReset+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:186
      
#if defined(CCU81)
    case (uint32_t)CCU81:
      XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 8003ec4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003ec8:	f7fd fc44 	bl	8001754 <XMC_SCU_RESET_AssertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:187
      break;
 8003ecc:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:194

    default:
      XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
      break;   
  }
}
 8003ece:	bf00      	nop
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40020000 	.word	0x40020000
 8003edc:	40024000 	.word	0x40024000

08003ee0 <XMC_CCU8_lDeassertReset>:
XMC_CCU8_lDeassertReset():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:197

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:198
  switch ((uint32_t)module)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a0a      	ldr	r2, [pc, #40]	; (8003f14 <XMC_CCU8_lDeassertReset+0x34>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d003      	beq.n	8003ef8 <XMC_CCU8_lDeassertReset+0x18>
 8003ef0:	4a09      	ldr	r2, [pc, #36]	; (8003f18 <XMC_CCU8_lDeassertReset+0x38>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d004      	beq.n	8003f00 <XMC_CCU8_lDeassertReset+0x20>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:212
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
      break;   
 8003ef6:	e008      	b.n	8003f0a <XMC_CCU8_lDeassertReset+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:201
__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
  switch ((uint32_t)module)
  {
    case (uint32_t)CCU80:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8003ef8:	2080      	movs	r0, #128	; 0x80
 8003efa:	f7fd fc47 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:202
      break;
 8003efe:	e004      	b.n	8003f0a <XMC_CCU8_lDeassertReset+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:206
      
#if defined(CCU81)
    case (uint32_t)CCU81:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 8003f00:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003f04:	f7fd fc42 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:207
      break;
 8003f08:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:214

    default:
      XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
      break;   
  }
}
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	40020000 	.word	0x40020000
 8003f18:	40024000 	.word	0x40024000

08003f1c <XMC_CCU8_EnableModule>:
XMC_CCU8_EnableModule():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:275
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:280
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8003f24:	2010      	movs	r0, #16
 8003f26:	f7fd ff03 	bl	8001d30 <XMC_SCU_CLOCK_EnableClock>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:288
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff ffd8 	bl	8003ee0 <XMC_CCU8_lDeassertReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:290
#endif
}
 8003f30:	bf00      	nop
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <XMC_CCU8_DisableModule>:
XMC_CCU8_DisableModule():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:294

/* API to set the CCU8 module as idle and disable the clock  */
void XMC_CCU8_DisableModule(XMC_CCU8_MODULE_t *const module)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:298
  XMC_ASSERT("XMC_CCU8_DisableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lAssertReset(module);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7ff ffaf 	bl	8003ea4 <XMC_CCU8_lAssertReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:304
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lGateClock(module);
#endif
}
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop

08003f50 <XMC_CCU8_Init>:
XMC_CCU8_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:308

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:315

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff ffdd 	bl	8003f1c <XMC_CCU8_EnableModule>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:317
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff ff74 	bl	8003e50 <XMC_CCU8_StartPrescaler>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:319
  
  gctrl = module->GCTRL;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:320
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003f74:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:321
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 8003f76:	78fb      	ldrb	r3, [r7, #3]
 8003f78:	039b      	lsls	r3, r3, #14
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:323
  
  module->GCTRL = gctrl;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:324
}
 8003f86:	bf00      	nop
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop

08003f90 <XMC_CCU8_SetModuleClock>:
XMC_CCU8_SetModuleClock():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:328

/* API to select CCU8 module clock */
void XMC_CCU8_SetModuleClock(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_CLOCK_t clock)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:334
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU8_SetModuleClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_SetModuleClock:Invalid Module Clock", XMC_CCU8_SLICE_CHECK_CLOCK(clock));

  gctrl = module->GCTRL;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:335
  gctrl &= ~((uint32_t) CCU8_GCTRL_PCIS_Msk);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003fa8:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:336
  gctrl |= ((uint32_t) clock) << CCU8_GCTRL_PCIS_Pos;
 8003faa:	78fb      	ldrb	r3, [r7, #3]
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:338

  module->GCTRL = gctrl;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:339
}
 8003fba:	bf00      	nop
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr

08003fc4 <XMC_CCU8_SLICE_CompareInit>:
XMC_CCU8_SLICE_CompareInit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:344

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:349
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff ff4e 	bl	8003e70 <XMC_CCU8_SLICE_StopTimer>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:351
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:353
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	7b5b      	ldrb	r3, [r3, #13]
 8003fe0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	051a      	lsls	r2, r3, #20
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:355
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	7b1b      	ldrb	r3, [r3, #12]
 8003ff0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	625a      	str	r2, [r3, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:357
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	7b1b      	ldrb	r3, [r3, #12]
 8004000:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004004:	b2db      	uxtb	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	62da      	str	r2, [r3, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:359
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	7b5b      	ldrb	r3, [r3, #13]
 8004010:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004014:	b2db      	uxtb	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	621a      	str	r2, [r3, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:361
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	619a      	str	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:366
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f083 0214 	eor.w	r2, r3, #20
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	649a      	str	r2, [r3, #72]	; 0x48
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:368
#endif
}
 8004030:	bf00      	nop
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <XMC_CCU8_SLICE_CaptureInit>:
XMC_CCU8_SLICE_CaptureInit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:373

/* API to configure CC8 Slice in Capture mode */
void XMC_CCU8_SLICE_CaptureInit(XMC_CCU8_SLICE_t *const slice, 
                                const XMC_CCU8_SLICE_CAPTURE_CONFIG_t *const capture_init)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:378
  XMC_ASSERT("XMC_CCU8_SLICE_CaptureInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CaptureInit:Capture Init Pointer is NULL", 
             (XMC_CCU8_SLICE_CAPTURE_CONFIG_t *) NULL != capture_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff ff14 	bl	8003e70 <XMC_CCU8_SLICE_StopTimer>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:380
  /* Capture mode configuration */
  slice->TC = capture_init->tc;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:382
  /* Enable the timer concatenation */
  slice->CMC = (uint32_t)capture_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	795b      	ldrb	r3, [r3, #5]
 8004054:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004058:	b2db      	uxtb	r3, r3
 800405a:	051a      	lsls	r2, r3, #20
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:384
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) capture_init->float_limit;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	791b      	ldrb	r3, [r3, #4]
 8004064:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004068:	b2db      	uxtb	r3, r3
 800406a:	461a      	mov	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	62da      	str	r2, [r3, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:386
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) capture_init->prescaler_initval;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	791b      	ldrb	r3, [r3, #4]
 8004074:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004078:	b2db      	uxtb	r3, r3
 800407a:	461a      	mov	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	625a      	str	r2, [r3, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:387
}
 8004080:	bf00      	nop
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <XMC_CCU8_SLICE_SetOutPath>:
XMC_CCU8_SLICE_SetOutPath():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:391

/* API to configure the each output of the slice with either STx or inverted STx. */
void XMC_CCU8_SLICE_SetOutPath(XMC_CCU8_SLICE_t *const slice, const uint32_t out_path_msk)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:394
  uint32_t chc;
  XMC_ASSERT("XMC_CCU8_SLICE_SetOutPath:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  chc = slice->CHC;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004096:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:396
#if !defined(CCU8V3) /* Defined for all devices except XMC1400 */
  chc &= ~((uint32_t)out_path_msk >> 16U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	0c1b      	lsrs	r3, r3, #16
 800409c:	43db      	mvns	r3, r3
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	4013      	ands	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:397
  chc |= ((uint32_t)out_path_msk & 0xFFFFU);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:402
#else
  chc &= ~((uint32_t)((uint32_t)(out_path_msk & 0xCCCC0U) >> 2U));
  chc |= ((uint32_t)out_path_msk & 0x33330U);
#endif
  slice->CHC = chc;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	649a      	str	r2, [r3, #72]	; 0x48
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:403
}
 80040b4:	bf00      	nop
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bc80      	pop	{r7}
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop

080040c0 <XMC_CCU8_SetMultiChannelShadowTransferMode>:
XMC_CCU8_SetMultiChannelShadowTransferMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:407

/* API to configure the multichannel shadow transfer request via SW and via the CCU8x.MCSS input. */
void XMC_CCU8_SetMultiChannelShadowTransferMode(XMC_CCU8_MODULE_t *const module, const uint32_t slice_mode_msk)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:412
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU8_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  
  gctrl = module->GCTRL;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:413
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	0c1b      	lsrs	r3, r3, #16
 80040d4:	43db      	mvns	r3, r3
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4013      	ands	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:414
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	b29b      	uxth	r3, r3
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:415
  module->GCTRL = gctrl;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:416
}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop

080040f8 <XMC_CCU8_SLICE_StartConfig>:
XMC_CCU8_SLICE_StartConfig():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:423

/* API to configure the Start trigger function of a slice*/
void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_EVENT_t event,
                                const XMC_CCU8_SLICE_START_MODE_t start_mode)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	70fb      	strb	r3, [r7, #3]
 8004104:	4613      	mov	r3, r2
 8004106:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:432
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START) ||\
              (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)));
  cmc = slice->CMC;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:434

  cmc &= ~((uint32_t) CCU8_CC8_CMC_STRTS_Msk);
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f023 0303 	bic.w	r3, r3, #3
 8004114:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:435
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_STRTS_Pos;
 8004116:	78fb      	ldrb	r3, [r7, #3]
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	4313      	orrs	r3, r2
 800411c:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:437

  slice->CMC = cmc;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:439

  tc  = slice->TC;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:441

  if(start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)
 800412a:	78bb      	ldrb	r3, [r7, #2]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d104      	bne.n	800413a <XMC_CCU8_SLICE_StartConfig+0x42>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:443
  {
    tc |= (uint32_t) CCU8_CC8_TC_STRM_Msk;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	e003      	b.n	8004142 <XMC_CCU8_SLICE_StartConfig+0x4a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:447
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_STRM_Msk);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004140:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:450
  }

  slice->TC = tc;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:451
}
 8004148:	bf00      	nop
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop

08004154 <XMC_CCU8_SLICE_StopConfig>:
XMC_CCU8_SLICE_StopConfig():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:457

/* API to configure the Stop trigger function of a slice */
void XMC_CCU8_SLICE_StopConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_EVENT_t event,
                               const XMC_CCU8_SLICE_END_MODE_t end_mode)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	70fb      	strb	r3, [r7, #3]
 8004160:	4613      	mov	r3, r2
 8004162:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:465

  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid End Mode", XMC_CCU8_SLICE_CHECK_END_MODE(end_mode));

  cmc = slice->CMC;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:467
  /* First, Bind the event with the stop function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_ENDS_Msk);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f023 030c 	bic.w	r3, r3, #12
 8004170:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:468
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_ENDS_Pos;
 8004172:	78fb      	ldrb	r3, [r7, #3]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:470

  slice->CMC = cmc;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:473

  /* Configure the stop mode */
  tc = slice->TC;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:474
  tc &= ~((uint32_t) CCU8_CC8_TC_ENDM_Msk);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800418e:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:475
  tc |= ((uint32_t) end_mode) << CCU8_CC8_TC_ENDM_Pos;
 8004190:	78bb      	ldrb	r3, [r7, #2]
 8004192:	021b      	lsls	r3, r3, #8
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	4313      	orrs	r3, r2
 8004198:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:477

  slice->TC = tc;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:478
}
 80041a0:	bf00      	nop
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop

080041ac <XMC_CCU8_SLICE_LoadConfig>:
XMC_CCU8_SLICE_LoadConfig():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:482

/* API to configure the Load trigger function of a slice*/
void XMC_CCU8_SLICE_LoadConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:488
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:491

  /* First, Bind the event with the load function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_LDS_Msk);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80041c4:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:492
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_LDS_Pos;
 80041c6:	78fb      	ldrb	r3, [r7, #3]
 80041c8:	031b      	lsls	r3, r3, #12
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:494

  slice->CMC = cmc;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:495
}
 80041d6:	bf00      	nop
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr

080041e0 <XMC_CCU8_SLICE_LoadSelector>:
XMC_CCU8_SLICE_LoadSelector():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:499

/* API to configure, which compare register value has to be loaded during external load event */
void XMC_CCU8_SLICE_LoadSelector(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_COMPARE_CHANNEL_t ch_num)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:505
  uint32_t tc;

  XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Channel number", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(ch_num));

  tc = slice->TC;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:508

  /* First, Bind the event with the load function */
  tc &= ~((uint32_t) CCU8_CC8_TC_TLS_Msk);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f8:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:509
  tc |= (uint32_t)ch_num << CCU8_CC8_TC_TLS_Pos;
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	01db      	lsls	r3, r3, #7
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4313      	orrs	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:511

  slice->TC = tc;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:512
}
 800420a:	bf00      	nop
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr

08004214 <XMC_CCU8_SLICE_ModulationConfig>:
XMC_CCU8_SLICE_ModulationConfig():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:520
void XMC_CCU8_SLICE_ModulationConfig(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_EVENT_t event,
                                     const XMC_CCU8_SLICE_MODULATION_MODE_t mod_mode,
                                     const XMC_CCU8_SLICE_MODULATION_CHANNEL_t channel,
                                     const bool synch_with_pwm)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	4608      	mov	r0, r1
 800421e:	4611      	mov	r1, r2
 8004220:	461a      	mov	r2, r3
 8004222:	4603      	mov	r3, r0
 8004224:	70fb      	strb	r3, [r7, #3]
 8004226:	460b      	mov	r3, r1
 8004228:	70bb      	strb	r3, [r7, #2]
 800422a:	4613      	mov	r3, r2
 800422c:	707b      	strb	r3, [r7, #1]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:532
             XMC_CCU8_SLICE_CHECK_MODULATION_CHANNEL(channel));
  XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid Modulation Mode", 
             ((mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_ST_OUT) ||\
              (mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)));

  cmc = slice->CMC;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:535

  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_MOS_Msk);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800423a:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:536
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_MOS_Pos;
 800423c:	78fb      	ldrb	r3, [r7, #3]
 800423e:	049b      	lsls	r3, r3, #18
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	4313      	orrs	r3, r2
 8004244:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:538

  slice->CMC = cmc;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:540

  tc  = slice->TC;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:543

  /* Next, Modulation mode */
  if(mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)
 8004252:	78bb      	ldrb	r3, [r7, #2]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d104      	bne.n	8004262 <XMC_CCU8_SLICE_ModulationConfig+0x4e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:545
  {
    tc |= (uint32_t) CCU8_CC8_TC_EMT_Msk;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	e003      	b.n	800426a <XMC_CCU8_SLICE_ModulationConfig+0x56>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:549
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_EMT_Msk);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004268:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:553
  }

  /* Synchronization of modulation effect with PWM cycle */
  if(synch_with_pwm == true)
 800426a:	7e3b      	ldrb	r3, [r7, #24]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d004      	beq.n	800427a <XMC_CCU8_SLICE_ModulationConfig+0x66>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:555
  {
    tc |= (uint32_t) CCU8_CC8_TC_EMS_Msk;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	e003      	b.n	8004282 <XMC_CCU8_SLICE_ModulationConfig+0x6e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:559
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_EMS_Msk);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004280:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:563
  }
  
  /* Configure on which channel external modulation to be applied */
  tc &= ~((uint32_t) CCU8_CC8_TC_EME_Msk);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 8004288:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:564
  tc |= (uint32_t)channel << CCU8_CC8_TC_EME_Pos;
 800428a:	787b      	ldrb	r3, [r7, #1]
 800428c:	06db      	lsls	r3, r3, #27
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:566

  slice->TC = tc;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:567
}
 800429a:	bf00      	nop
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr

080042a4 <XMC_CCU8_SLICE_CountConfig>:
XMC_CCU8_SLICE_CountConfig():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:571

/* API to configure the slice count function */
void XMC_CCU8_SLICE_CountConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:577
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:580

  /* First, Bind the event with the count function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_CNTS_Msk);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80042bc:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:581
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CNTS_Pos;
 80042be:	78fb      	ldrb	r3, [r7, #3]
 80042c0:	039b      	lsls	r3, r3, #14
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:583

  slice->CMC = cmc;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:584
}
 80042ce:	bf00      	nop
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bc80      	pop	{r7}
 80042d6:	4770      	bx	lr

080042d8 <XMC_CCU8_SLICE_GateConfig>:
XMC_CCU8_SLICE_GateConfig():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:588

/* API to configure slice gate function */
void XMC_CCU8_SLICE_GateConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:594
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:597

  /* First, Bind the event with the gate function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_GATES_Msk);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f0:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:598
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_GATES_Pos;
 80042f2:	78fb      	ldrb	r3, [r7, #3]
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:600

  slice->CMC = cmc;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:601
}
 8004302:	bf00      	nop
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr

0800430c <XMC_CCU8_SLICE_Capture0Config>:
XMC_CCU8_SLICE_Capture0Config():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:605

/* API to configure Capture-0 function */
void XMC_CCU8_SLICE_Capture0Config(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	460b      	mov	r3, r1
 8004316:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:611
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_Capture0Config:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_Capture0Config:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:614

  /* First, Bind the event with the gate function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_CAP0S_Msk);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004324:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:615
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CAP0S_Pos;
 8004326:	78fb      	ldrb	r3, [r7, #3]
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4313      	orrs	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:617

  slice->CMC = cmc;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:618
}
 8004336:	bf00      	nop
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr

08004340 <XMC_CCU8_SLICE_Capture1Config>:
XMC_CCU8_SLICE_Capture1Config():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:622

/* API to configure Capture-1 function */
void XMC_CCU8_SLICE_Capture1Config(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:629

  XMC_ASSERT("XMC_CCU8_SLICE_Capture1Config:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_Capture1Config:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));


  cmc = slice->CMC;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:632

  /* First, Bind the event with the gate function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_CAP1S_Msk);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004358:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:633
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CAP1S_Pos;
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	019b      	lsls	r3, r3, #6
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4313      	orrs	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:635

  slice->CMC = cmc;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:636
}
 800436a:	bf00      	nop
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr

08004374 <XMC_CCU8_SLICE_DirectionConfig>:
XMC_CCU8_SLICE_DirectionConfig():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:640

/* API to configure direction function */
void XMC_CCU8_SLICE_DirectionConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:646
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:649

  /* First, Bind the event with the direction function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_UDS_Msk);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800438c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:650
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_UDS_Pos;
 800438e:	78fb      	ldrb	r3, [r7, #3]
 8004390:	029b      	lsls	r3, r3, #10
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4313      	orrs	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:652

  slice->CMC = cmc;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:653
}
 800439e:	bf00      	nop
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr

080043a8 <XMC_CCU8_SLICE_StatusBitOverrideConfig>:
XMC_CCU8_SLICE_StatusBitOverrideConfig():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:657

/* API to configure slice status bit override function */
void XMC_CCU8_SLICE_StatusBitOverrideConfig(XMC_CCU8_SLICE_t *const slice)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:662
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  cmc = slice->CMC;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:666

  /* Map status bit trigger override to Event 1 &
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_OFS_Msk);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043bc:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:667
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_OFS_Pos;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c4:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:669

  slice->CMC = cmc;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:670
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop

080043d8 <XMC_CCU8_SLICE_TrapConfig>:
XMC_CCU8_SLICE_TrapConfig():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:676

/* API to configure trap function*/
void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	70fb      	strb	r3, [r7, #3]
 80043e4:	4613      	mov	r3, r2
 80043e6:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:684

  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)));

  cmc = slice->CMC;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:687

  /* Map trap function to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_TS_Msk);
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80043f4:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:688
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_TS_Pos;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043fc:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:690

  slice->CMC = cmc;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:692

  tc = slice->TC;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:695

  /* Configure synchronization option */
  if(synch_with_pwm == true)
 800440a:	78bb      	ldrb	r3, [r7, #2]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d004      	beq.n	800441a <XMC_CCU8_SLICE_TrapConfig+0x42>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:697
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSE_Msk;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	e003      	b.n	8004422 <XMC_CCU8_SLICE_TrapConfig+0x4a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:701
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSE_Msk);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004420:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:705
  }

  /* Configure exit mode */
  if(exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)
 8004422:	78fb      	ldrb	r3, [r7, #3]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d104      	bne.n	8004432 <XMC_CCU8_SLICE_TrapConfig+0x5a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:707
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSW_Msk;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	e003      	b.n	800443a <XMC_CCU8_SLICE_TrapConfig+0x62>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:711
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSW_Msk);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004438:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:714
  }

  slice->TC = tc;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:715
}
 8004440:	bf00      	nop
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	bc80      	pop	{r7}
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop

0800444c <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent>:
XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:721

/* API to configure a slice Status Bit Override event */
void XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU8_SLICE_t *const slice,
                                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev1_config,
                                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev2_config)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:784
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS1_EV2IS_Pos;

  slice->INS1 = ins;  
#else
  ins = slice->INS;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:787

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV1EM_Pos);
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004464:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:788
  ins |= ((uint32_t) ev1_config->edge) << CCU8_CC8_INS_EV1EM_Pos;
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	785b      	ldrb	r3, [r3, #1]
 800446a:	049b      	lsls	r3, r3, #18
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:791

  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV2EM_Pos);
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004478:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:792
  ins |= ((uint32_t) ev2_config->edge) << CCU8_CC8_INS_EV2EM_Pos;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	785b      	ldrb	r3, [r3, #1]
 800447e:	051b      	lsls	r3, r3, #20
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	4313      	orrs	r3, r2
 8004484:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:795

  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV1LM_Pos);
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800448c:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:796
  ins |= ((uint32_t) ev1_config->level) << CCU8_CC8_INS_EV1LM_Pos;
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	789b      	ldrb	r3, [r3, #2]
 8004492:	05db      	lsls	r3, r3, #23
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:799

  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV2LM_Pos);
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044a0:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:800
  ins |= ((uint32_t) ev2_config->level) << CCU8_CC8_INS_EV2LM_Pos;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	789b      	ldrb	r3, [r3, #2]
 80044a6:	061b      	lsls	r3, r3, #24
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:803

  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF1M_Pos);
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 80044b4:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:804
  ins |= ((uint32_t) ev1_config->duration) << CCU8_CC8_INS_LPF1M_Pos;
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	78db      	ldrb	r3, [r3, #3]
 80044ba:	06db      	lsls	r3, r3, #27
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	4313      	orrs	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:807

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF2M_Pos);
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80044c8:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:808
  ins |= ((uint32_t) ev2_config->duration) << CCU8_CC8_INS_LPF2M_Pos;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	78db      	ldrb	r3, [r3, #3]
 80044ce:	075b      	lsls	r3, r3, #29
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:811

  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV1IS_Pos);
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044dc:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:812
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU8_CC8_INS_EV1IS_Pos;
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:815

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV2IS_Pos);
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80044f0:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:816
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS_EV2IS_Pos;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	021b      	lsls	r3, r3, #8
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:818

  slice->INS = ins;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:820
#endif
}
 8004504:	bf00      	nop
 8004506:	371c      	adds	r7, #28
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop

08004510 <XMC_CCU8_SLICE_ConfigureEvent>:
XMC_CCU8_SLICE_ConfigureEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:826

/* API to configure a slice trigger event */
void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
                                   const XMC_CCU8_SLICE_EVENT_t event,
                                   const XMC_CCU8_SLICE_EVENT_CONFIG_t *const config)
{
 8004510:	b480      	push	{r7}
 8004512:	b089      	sub	sp, #36	; 0x24
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	460b      	mov	r3, r1
 800451a:	607a      	str	r2, [r7, #4]
 800451c:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:843
              (config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU8_SLICE_CHECK_EVENT_FILTER(config->duration));

  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 800451e:	7afb      	ldrb	r3, [r7, #11]
 8004520:	3b01      	subs	r3, #1
 8004522:	77fb      	strb	r3, [r7, #31]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:875
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:878

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 800452a:	7ffb      	ldrb	r3, [r7, #31]
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	b2db      	uxtb	r3, r3
 8004530:	3310      	adds	r3, #16
 8004532:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:879
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8004534:	7dfb      	ldrb	r3, [r7, #23]
 8004536:	2203      	movs	r2, #3
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	43db      	mvns	r3, r3
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	4013      	ands	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:880
  ins |= ((uint32_t) config->edge) << pos;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	785b      	ldrb	r3, [r3, #1]
 8004548:	461a      	mov	r2, r3
 800454a:	7dfb      	ldrb	r3, [r7, #23]
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	4313      	orrs	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:883

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
 8004556:	7ffb      	ldrb	r3, [r7, #31]
 8004558:	3316      	adds	r3, #22
 800455a:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:884
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 800455c:	7dfb      	ldrb	r3, [r7, #23]
 800455e:	2201      	movs	r2, #1
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	43db      	mvns	r3, r3
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4013      	ands	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:885
  ins |= ((uint32_t) (config->level)) << pos;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	789b      	ldrb	r3, [r3, #2]
 8004570:	461a      	mov	r2, r3
 8004572:	7dfb      	ldrb	r3, [r7, #23]
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4313      	orrs	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:888

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 800457e:	7ffb      	ldrb	r3, [r7, #31]
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	b2db      	uxtb	r3, r3
 8004584:	3319      	adds	r3, #25
 8004586:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:889
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 8004588:	7dfb      	ldrb	r3, [r7, #23]
 800458a:	2203      	movs	r2, #3
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	43db      	mvns	r3, r3
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	4013      	ands	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:890
  ins |= ((uint32_t) config->duration) << pos;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	78db      	ldrb	r3, [r3, #3]
 800459c:	461a      	mov	r2, r3
 800459e:	7dfb      	ldrb	r3, [r7, #23]
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:893

  /* Finally the input */
  pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 80045aa:	7ffb      	ldrb	r3, [r7, #31]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:894
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	220f      	movs	r2, #15
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	43db      	mvns	r3, r3
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4013      	ands	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:895
  ins |= ((uint32_t) config->mapped_input) << pos;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	7dfb      	ldrb	r3, [r7, #23]
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:897

  slice->INS = ins;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:899
#endif
}
 80045d8:	bf00      	nop
 80045da:	3724      	adds	r7, #36	; 0x24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop

080045e4 <XMC_CCU8_SLICE_SetInput>:
XMC_CCU8_SLICE_SetInput():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:905

/* API to bind an input to a slice trigger event */
void XMC_CCU8_SLICE_SetInput(XMC_CCU8_SLICE_t *const slice,
                         const XMC_CCU8_SLICE_EVENT_t event,
                             const XMC_CCU8_SLICE_INPUT_t input)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	460b      	mov	r3, r1
 80045ee:	70fb      	strb	r3, [r7, #3]
 80045f0:	4613      	mov	r3, r2
 80045f2:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:915
  XMC_ASSERT("XMC_CCU8_SLICE_SetInput:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInput:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInput:Invalid Input", XMC_CCU8_SLICE_IsInputvalid(input));

  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 80045f4:	78fb      	ldrb	r3, [r7, #3]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:926
  ins |= ((uint32_t) input) << pos;

  slice->INS1 = ins;
#else

  pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t) (offset << 2U);
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	73bb      	strb	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:927
  ins = slice->INS;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:928
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8004606:	7bbb      	ldrb	r3, [r7, #14]
 8004608:	220f      	movs	r2, #15
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	43db      	mvns	r3, r3
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	4013      	ands	r3, r2
 8004614:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:929
  ins |= ((uint32_t) input) << pos;
 8004616:	78ba      	ldrb	r2, [r7, #2]
 8004618:	7bbb      	ldrb	r3, [r7, #14]
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	4313      	orrs	r3, r2
 8004622:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:931

  slice->INS = ins;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:933
#endif
}
 800462a:	bf00      	nop
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr

08004634 <XMC_CCU8_SLICE_SetTimerRepeatMode>:
XMC_CCU8_SLICE_SetTimerRepeatMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:938

/* API to program timer repeat mode - Single shot vs repeat  */
void XMC_CCU8_SLICE_SetTimerRepeatMode(XMC_CCU8_SLICE_t *const slice,
                                   const XMC_CCU8_SLICE_TIMER_REPEAT_MODE_t mode)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:946
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerRepeatMode:Invalid Timer Repeat Mode", 
             ((mode == XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT) ||\
              (mode == (mode == XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT))));

  tc = slice->TC;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:948

  if(XMC_CCU8_SLICE_TIMER_REPEAT_MODE_REPEAT == mode)
 8004646:	78fb      	ldrb	r3, [r7, #3]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d104      	bne.n	8004656 <XMC_CCU8_SLICE_SetTimerRepeatMode+0x22>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:950
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TSSM_Msk);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0302 	bic.w	r3, r3, #2
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	e003      	b.n	800465e <XMC_CCU8_SLICE_SetTimerRepeatMode+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:954
  }
  else
  {
    tc |= (uint32_t) CCU8_CC8_TC_TSSM_Msk;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f043 0302 	orr.w	r3, r3, #2
 800465c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:957
  }

  slice->TC = tc;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:958
}
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop

08004670 <XMC_CCU8_SLICE_SetTimerCountingMode>:
XMC_CCU8_SLICE_SetTimerCountingMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:962

/* Programs timer counting mode  */
void XMC_CCU8_SLICE_SetTimerCountingMode(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_TIMER_COUNT_MODE_t mode)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	460b      	mov	r3, r1
 800467a:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:970
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCountingMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCountingMode:Invalid Timer Count Mode",
             ((mode == XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA) ||\
              (mode == XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA)));

  tc = slice->TC;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:972

  if(XMC_CCU8_SLICE_TIMER_COUNT_MODE_EA == mode)
 8004682:	78fb      	ldrb	r3, [r7, #3]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d104      	bne.n	8004692 <XMC_CCU8_SLICE_SetTimerCountingMode+0x22>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:974
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TCM_Msk);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0301 	bic.w	r3, r3, #1
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	e003      	b.n	800469a <XMC_CCU8_SLICE_SetTimerCountingMode+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:978
  }
  else
  {
    tc |= (uint32_t) CCU8_CC8_TC_TCM_Msk;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:981
  }

  slice->TC = tc;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:982
}
 80046a0:	bf00      	nop
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop

080046ac <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
XMC_CCU8_SLICE_SetTimerPeriodMatch():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:986

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	460b      	mov	r3, r1
 80046b6:	807b      	strh	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:988
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80046b8:	887a      	ldrh	r2, [r7, #2]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	635a      	str	r2, [r3, #52]	; 0x34
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:989
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr

080046c8 <XMC_CCU8_SLICE_GetCaptureRegisterValue>:
XMC_CCU8_SLICE_GetCaptureRegisterValue():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:993

/* Retrieves desired capture register value */
uint32_t XMC_CCU8_SLICE_GetCaptureRegisterValue(const XMC_CCU8_SLICE_t *const slice, const uint8_t reg_num)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:996
  XMC_ASSERT("XMC_CCU8_SLICE_GetCaptureRegisterValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_GetCaptureRegisterValue:Invalid register number", (reg_num < 4U));
  return(slice->CV[reg_num]);
 80046d4:	78fb      	ldrb	r3, [r7, #3]
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	331c      	adds	r3, #28
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	685b      	ldr	r3, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:997
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bc80      	pop	{r7}
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop

080046ec <XMC_CCU8_SLICE_GetLastCapturedTimerValue>:
XMC_CCU8_SLICE_GetLastCapturedTimerValue():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1003

/* @brief Retrieves the latest captured timer value */
XMC_CCU8_STATUS_t XMC_CCU8_SLICE_GetLastCapturedTimerValue(const XMC_CCU8_SLICE_t *const slice,
                                                           const XMC_CCU8_SLICE_CAP_REG_SET_t set,
                                                           uint32_t *val_ptr)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	460b      	mov	r3, r1
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1015
  XMC_ASSERT("XMC_CCU8_SLICE_GetLastCapturedTimerValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_GetLastCapturedTimerValue:Invalid Register Set",
             ((set == XMC_CCU8_SLICE_CAP_REG_SET_LOW) ||\
              (set == XMC_CCU8_SLICE_CAP_REG_SET_HIGH)));

  retval = XMC_CCU8_STATUS_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1018

  /* First check if extended capture mode is enabled */
  if((slice->TC) & CCU8_CC8_TC_ECM_Msk)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f003 0310 	and.w	r3, r3, #16
 8004706:	2b00      	cmp	r3, #0
 8004708:	d004      	beq.n	8004714 <XMC_CCU8_SLICE_GetLastCapturedTimerValue+0x28>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1021
  {
    /* Extended capture mode has been enabled. So start with the lowest capture register and work your way up */
    start = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	757b      	strb	r3, [r7, #21]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1022
    end = XMC_CCU8_NUM_SLICES_PER_MODULE;
 800470e:	2304      	movs	r3, #4
 8004710:	753b      	strb	r3, [r7, #20]
 8004712:	e00b      	b.n	800472c <XMC_CCU8_SLICE_GetLastCapturedTimerValue+0x40>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1027
  }
  else
  {
    /* Extended capture mode is not enabled */
    if(set == XMC_CCU8_SLICE_CAP_REG_SET_HIGH)
 8004714:	7afb      	ldrb	r3, [r7, #11]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d104      	bne.n	8004724 <XMC_CCU8_SLICE_GetLastCapturedTimerValue+0x38>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1029
    {
      start = ((uint8_t) XMC_CCU8_NUM_SLICES_PER_MODULE) >> 1U;
 800471a:	2302      	movs	r3, #2
 800471c:	757b      	strb	r3, [r7, #21]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1030
      end   = (uint8_t) XMC_CCU8_NUM_SLICES_PER_MODULE;
 800471e:	2304      	movs	r3, #4
 8004720:	753b      	strb	r3, [r7, #20]
 8004722:	e003      	b.n	800472c <XMC_CCU8_SLICE_GetLastCapturedTimerValue+0x40>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1034
    }
    else
    {
      start = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	757b      	strb	r3, [r7, #21]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1035
      end = ((uint8_t) XMC_CCU8_NUM_SLICES_PER_MODULE) >> 1U;
 8004728:	2302      	movs	r3, #2
 800472a:	753b      	strb	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1039
    }
  }

  for(i=start; i<end; i++)
 800472c:	7d7b      	ldrb	r3, [r7, #21]
 800472e:	75bb      	strb	r3, [r7, #22]
 8004730:	e017      	b.n	8004762 <XMC_CCU8_SLICE_GetLastCapturedTimerValue+0x76>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1041
  {
    if( (slice->CV[i]) & CCU8_CC8_CV_FFL_Msk )
 8004732:	7dbb      	ldrb	r3, [r7, #22]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	331c      	adds	r3, #28
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <XMC_CCU8_SLICE_GetLastCapturedTimerValue+0x70>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1043
    {
      *val_ptr = slice->CV[i];
 8004746:	7dbb      	ldrb	r3, [r7, #22]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	331c      	adds	r3, #28
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1044
      retval = XMC_CCU8_STATUS_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1045
      break;
 800475a:	e006      	b.n	800476a <XMC_CCU8_SLICE_GetLastCapturedTimerValue+0x7e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1039 (discriminator 2)
      start = 0U;
      end = ((uint8_t) XMC_CCU8_NUM_SLICES_PER_MODULE) >> 1U;
    }
  }

  for(i=start; i<end; i++)
 800475c:	7dbb      	ldrb	r3, [r7, #22]
 800475e:	3301      	adds	r3, #1
 8004760:	75bb      	strb	r3, [r7, #22]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1039 (discriminator 1)
 8004762:	7dba      	ldrb	r2, [r7, #22]
 8004764:	7d3b      	ldrb	r3, [r7, #20]
 8004766:	429a      	cmp	r2, r3
 8004768:	d3e3      	bcc.n	8004732 <XMC_CCU8_SLICE_GetLastCapturedTimerValue+0x46>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1049
      retval = XMC_CCU8_STATUS_OK;
      break;
    }
  }

  return retval;
 800476a:	7dfb      	ldrb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1050
}
 800476c:	4618      	mov	r0, r3
 800476e:	371c      	adds	r7, #28
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop

08004778 <XMC_CCU8_GetCapturedValueFromFifo>:
XMC_CCU8_GetCapturedValueFromFifo():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1054
/* Retrieves timer capture value from a FIFO made of capture registers */
#if defined(CCU8V1) /* Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices only */
int32_t XMC_CCU8_GetCapturedValueFromFifo(const XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1061
  uint32_t extracted_slice;
  
  XMC_ASSERT("XMC_CCU8_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU8_IsValidModule(module));

  /* First read the global fifo register */
  cap = (int32_t) module->ECRD;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004788:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1063
    
  extracted_slice = (((uint32_t) cap) & ((uint32_t) CCU8_ECRD_SPTR_Msk)) >> CCU8_ECRD_SPTR_Pos;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	0d1b      	lsrs	r3, r3, #20
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1066

  /* Return captured result only if it were applicable to this slice */
  if(extracted_slice != ((uint32_t)slice_number))
 8004794:	78fa      	ldrb	r2, [r7, #3]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	429a      	cmp	r2, r3
 800479a:	d002      	beq.n	80047a2 <XMC_CCU8_GetCapturedValueFromFifo+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1068
  {
    cap = -1;
 800479c:	f04f 33ff 	mov.w	r3, #4294967295
 80047a0:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1071
  }

  return (cap);
 80047a2:	68fb      	ldr	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1072
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop

080047b0 <XMC_CCU8_SLICE_EnableDithering>:
XMC_CCU8_SLICE_EnableDithering():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1102
/* Enables PWM dithering feature */
void XMC_CCU8_SLICE_EnableDithering(XMC_CCU8_SLICE_t *const slice,
                                    const bool period_dither,
                                    const bool duty_dither,
                                    const uint8_t spread)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	4608      	mov	r0, r1
 80047ba:	4611      	mov	r1, r2
 80047bc:	461a      	mov	r2, r3
 80047be:	4603      	mov	r3, r0
 80047c0:	70fb      	strb	r3, [r7, #3]
 80047c2:	460b      	mov	r3, r1
 80047c4:	70bb      	strb	r3, [r7, #2]
 80047c6:	4613      	mov	r3, r2
 80047c8:	707b      	strb	r3, [r7, #1]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1107
  uint32_t tc;

  XMC_ASSERT("XMC_CCU8_SLICE_EnableDithering:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  tc = slice->TC;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1108
  tc &= ~((uint32_t) CCU8_CC8_TC_DITHE_Msk);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80047d6:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1110

  if(true == period_dither)
 80047d8:	78fb      	ldrb	r3, [r7, #3]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <XMC_CCU8_SLICE_EnableDithering+0x36>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1112
  {
    tc |= (((uint32_t) XMC_CCU8_SLICE_DITHER_PERIOD_MASK) << CCU8_CC8_TC_DITHE_Pos);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047e4:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1114
  }
  if(true == duty_dither)
 80047e6:	78bb      	ldrb	r3, [r7, #2]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <XMC_CCU8_SLICE_EnableDithering+0x44>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1116
  {
    tc |= (((uint32_t) XMC_CCU8_SLICE_DITHER_DUTYCYCLE_MASK) << CCU8_CC8_TC_DITHE_Pos);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047f2:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1119
  }

  slice->TC = tc;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1121

  XMC_CCU8_SLICE_SetDitherCompareValue((XMC_CCU8_SLICE_t *)slice, (uint8_t)spread);
 80047fa:	787b      	ldrb	r3, [r7, #1]
 80047fc:	4619      	mov	r1, r3
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7ff fb42 	bl	8003e88 <XMC_CCU8_SLICE_SetDitherCompareValue>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1122
}
 8004804:	bf00      	nop
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <XMC_CCU8_SLICE_SetPrescaler>:
XMC_CCU8_SLICE_SetPrescaler():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1126

/* Programs Pre-scaler divider  */
void XMC_CCU8_SLICE_SetPrescaler(XMC_CCU8_SLICE_t *const slice, const uint8_t div_val)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1132
  uint32_t fpc;

  XMC_ASSERT("XMC_CCU8_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* If the prescaler is not running, update directly the divider*/
  fpc = slice->FPC;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1133
  fpc &= ~((uint32_t) CCU8_CC8_FPC_PVAL_Msk);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004824:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1134
  fpc |= ((uint32_t) div_val) << CCU8_CC8_FPC_PVAL_Pos;
 8004826:	78fb      	ldrb	r3, [r7, #3]
 8004828:	021b      	lsls	r3, r3, #8
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1135
  slice->FPC = fpc;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	629a      	str	r2, [r3, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1141

  /*
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 8004836:	78fa      	ldrb	r2, [r7, #3]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	625a      	str	r2, [r3, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1142
}
 800483c:	bf00      	nop
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop

08004848 <XMC_CCU8_SLICE_SetTimerCompareMatch>:
XMC_CCU8_SLICE_SetTimerCompareMatch():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1148

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
                                         const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
                                         const uint16_t compare_val)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	460b      	mov	r3, r1
 8004852:	70fb      	strb	r3, [r7, #3]
 8004854:	4613      	mov	r3, r2
 8004856:	803b      	strh	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1152
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 8004858:	78fb      	ldrb	r3, [r7, #3]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d103      	bne.n	8004866 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1154
  {
    slice->CR1S = (uint32_t) compare_val;
 800485e:	883a      	ldrh	r2, [r7, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	63da      	str	r2, [r3, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1160
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
  }
}
 8004864:	e002      	b.n	800486c <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1158
  {
    slice->CR1S = (uint32_t) compare_val;
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 8004866:	883a      	ldrh	r2, [r7, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	645a      	str	r2, [r3, #68]	; 0x44
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1160
  }
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop

08004878 <XMC_CCU8_SLICE_GetTimerCompareMatch>:
XMC_CCU8_SLICE_GetTimerCompareMatch():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1165

/* Returns the timer compare match value for channel 1 or 2 */
uint16_t XMC_CCU8_SLICE_GetTimerCompareMatch(const XMC_CCU8_SLICE_t *const slice,
                                             const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	460b      	mov	r3, r1
 8004882:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1171
  uint16_t compare_value;

  XMC_ASSERT("XMC_CCU8_SLICE_GetCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_GetCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d103      	bne.n	8004892 <XMC_CCU8_SLICE_GetTimerCompareMatch+0x1a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1173
  {
    compare_value = (uint16_t) slice->CR1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488e:	81fb      	strh	r3, [r7, #14]
 8004890:	e002      	b.n	8004898 <XMC_CCU8_SLICE_GetTimerCompareMatch+0x20>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1177
  }
  else
  {
    compare_value = (uint16_t) slice->CR2;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	81fb      	strh	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1180
  }

  return(compare_value);
 8004898:	89fb      	ldrh	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1181
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr

080048a4 <XMC_CCU8_SLICE_SetInterruptNode>:
XMC_CCU8_SLICE_SetInterruptNode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1187

/* Binds a capcom event to an NVIC node  */
void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_IRQ_ID_t event,
                                     const XMC_CCU8_SLICE_SR_ID_t sr)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	70fb      	strb	r3, [r7, #3]
 80048b0:	4613      	mov	r3, r2
 80048b2:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1196

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  srs = slice->SRS;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048ba:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1198

  switch(event)
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	2b09      	cmp	r3, #9
 80048c0:	d831      	bhi.n	8004926 <XMC_CCU8_SLICE_SetInterruptNode+0x82>
 80048c2:	a201      	add	r2, pc, #4	; (adr r2, 80048c8 <XMC_CCU8_SLICE_SetInterruptNode+0x24>)
 80048c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c8:	080048f1 	.word	0x080048f1
 80048cc:	080048f1 	.word	0x080048f1
 80048d0:	080048fb 	.word	0x080048fb
 80048d4:	080048fb 	.word	0x080048fb
 80048d8:	08004905 	.word	0x08004905
 80048dc:	08004905 	.word	0x08004905
 80048e0:	08004927 	.word	0x08004927
 80048e4:	08004927 	.word	0x08004927
 80048e8:	0800490f 	.word	0x0800490f
 80048ec:	0800491b 	.word	0x0800491b
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1202
  {
    case XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU8_CC8_SRS_POSR_Msk);
 80048f0:	2303      	movs	r3, #3
 80048f2:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1203
      pos  = CCU8_CC8_SRS_POSR_Pos;
 80048f4:	2300      	movs	r3, #0
 80048f6:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1204
      break;
 80048f8:	e01b      	b.n	8004932 <XMC_CCU8_SLICE_SetInterruptNode+0x8e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1208

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1:
      mask = ((uint32_t) CCU8_CC8_SRS_CM1SR_Msk);
 80048fa:	230c      	movs	r3, #12
 80048fc:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1209
      pos  = CCU8_CC8_SRS_CM1SR_Pos;
 80048fe:	2302      	movs	r3, #2
 8004900:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1210
      break;
 8004902:	e016      	b.n	8004932 <XMC_CCU8_SLICE_SetInterruptNode+0x8e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1214

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2:
      mask = ((uint32_t) CCU8_CC8_SRS_CM2SR_Msk);
 8004904:	2330      	movs	r3, #48	; 0x30
 8004906:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1215
      pos  = CCU8_CC8_SRS_CM2SR_Pos;
 8004908:	2304      	movs	r3, #4
 800490a:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1216
      break;
 800490c:	e011      	b.n	8004932 <XMC_CCU8_SLICE_SetInterruptNode+0x8e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1219

    case XMC_CCU8_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU8_CC8_SRS_E0SR_Msk);
 800490e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004912:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1220
      pos  = CCU8_CC8_SRS_E0SR_Pos;
 8004914:	2308      	movs	r3, #8
 8004916:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1221
      break;
 8004918:	e00b      	b.n	8004932 <XMC_CCU8_SLICE_SetInterruptNode+0x8e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1224

    case XMC_CCU8_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU8_CC8_SRS_E1SR_Msk);
 800491a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800491e:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1225
      pos  = CCU8_CC8_SRS_E1SR_Pos;
 8004920:	230a      	movs	r3, #10
 8004922:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1226
      break;
 8004924:	e005      	b.n	8004932 <XMC_CCU8_SLICE_SetInterruptNode+0x8e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1229

    default:
      mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
 8004926:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800492a:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1230
      pos  = CCU8_CC8_SRS_E2SR_Pos;
 800492c:	230c      	movs	r3, #12
 800492e:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1231
      break;
 8004930:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1234
  }
  
  srs &= ~mask;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	43db      	mvns	r3, r3
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	4013      	ands	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1235
  srs |= (uint32_t)sr << pos;
 800493c:	78ba      	ldrb	r2, [r7, #2]
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1237
  
  slice->SRS = srs;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1238
}
 8004952:	bf00      	nop
 8004954:	371c      	adds	r7, #28
 8004956:	46bd      	mov	sp, r7
 8004958:	bc80      	pop	{r7}
 800495a:	4770      	bx	lr

0800495c <XMC_CCU8_SLICE_SetPassiveLevel>:
XMC_CCU8_SLICE_SetPassiveLevel():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1244

/* Asserts passive level for the slice output */
void XMC_CCU8_SLICE_SetPassiveLevel(XMC_CCU8_SLICE_t *const slice,
                                    const XMC_CCU8_SLICE_OUTPUT_t out,
                                    const XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_t level)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	70fb      	strb	r3, [r7, #3]
 8004968:	4613      	mov	r3, r2
 800496a:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1253
  XMC_ASSERT("XMC_CCU8_SLICE_SetPassiveLevel:Invalid Slice Output", XMC_CCU8_SLICE_CHECK_OUTPUT(out));
  XMC_ASSERT("XMC_CCU8_SLICE_SetPassiveLevel:Invalid Passive Level",
             ((level == XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_LOW) ||\
              (level == XMC_CCU8_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH)));

  psl = slice->PSL;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1255

  psl &= ~((uint32_t) out);
 8004972:	78fb      	ldrb	r3, [r7, #3]
 8004974:	43db      	mvns	r3, r3
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	4013      	ands	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1256
  psl |= (uint32_t) level << ((uint32_t)out >> 1U);
 800497c:	78bb      	ldrb	r3, [r7, #2]
 800497e:	78fa      	ldrb	r2, [r7, #3]
 8004980:	0852      	lsrs	r2, r2, #1
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	4093      	lsls	r3, r2
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	4313      	orrs	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1259

  /* Program CC8 slice output passive level */
  slice->PSL = psl;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	619a      	str	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1260
}
 8004992:	bf00      	nop
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr

0800499c <XMC_CCU8_SLICE_DeadTimeInit>:
XMC_CCU8_SLICE_DeadTimeInit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1265

/* Initializes Dead time configuration for the slice outputs */
void XMC_CCU8_SLICE_DeadTimeInit(XMC_CCU8_SLICE_t *const slice,
                                 const XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t *const config)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1269
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* Program dead time value for channel 1 */
  slice->DC1R = config->dc1r;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	651a      	str	r2, [r3, #80]	; 0x50
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1271
  /* Program dead time value for channel 2 */
  slice->DC2R = config->dc2r;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	655a      	str	r2, [r3, #84]	; 0x54
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1273
  /* Program dead time control configuration */
  slice->DTC = config->dtc;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	64da      	str	r2, [r3, #76]	; 0x4c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1274
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr

080049c8 <XMC_CCU8_SLICE_ConfigureDeadTime>:
XMC_CCU8_SLICE_ConfigureDeadTime():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1278

/* Activates or deactivates dead time for compare channel and ST path */
void XMC_CCU8_SLICE_ConfigureDeadTime(XMC_CCU8_SLICE_t *const slice, const uint8_t mask)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1282
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Channel", (mask <= XMC_CCU8_SLICE_DEAD_TIME_CONFIG_MASK));

  slice->DTC &= ~((uint32_t) XMC_CCU8_SLICE_DEAD_TIME_CONFIG_MASK);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d8:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	64da      	str	r2, [r3, #76]	; 0x4c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1283
  slice->DTC |= (uint32_t) mask;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	64da      	str	r2, [r3, #76]	; 0x4c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1284
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop

080049f8 <XMC_CCU8_SLICE_SetDeadTimeValue>:
XMC_CCU8_SLICE_SetDeadTimeValue():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1291
/* Configures rising edge delay and falling edge delay for dead time */
void XMC_CCU8_SLICE_SetDeadTimeValue(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
                                     const uint8_t rise_value,
                                     const uint8_t fall_value)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	4608      	mov	r0, r1
 8004a02:	4611      	mov	r1, r2
 8004a04:	461a      	mov	r2, r3
 8004a06:	4603      	mov	r3, r0
 8004a08:	70fb      	strb	r3, [r7, #3]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	70bb      	strb	r3, [r7, #2]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	707b      	strb	r3, [r7, #1]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1295
  XMC_ASSERT("XMC_CCU8_SLICE_SetDeadTimeValue:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetDeadTimeValue:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 8004a12:	78fb      	ldrb	r3, [r7, #3]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d106      	bne.n	8004a26 <XMC_CCU8_SLICE_SetDeadTimeValue+0x2e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1297
  {
    slice->DC1R = (((uint32_t) fall_value) << CCU8_CC8_DC1R_DT1F_Pos) | ((uint32_t) rise_value);
 8004a18:	787b      	ldrb	r3, [r7, #1]
 8004a1a:	021a      	lsls	r2, r3, #8
 8004a1c:	78bb      	ldrb	r3, [r7, #2]
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	651a      	str	r2, [r3, #80]	; 0x50
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1303
  }
  else
  {
  slice->DC2R = (((uint32_t) fall_value) << CCU8_CC8_DC2R_DT2F_Pos) | ((uint32_t) rise_value);
  }
}
 8004a24:	e005      	b.n	8004a32 <XMC_CCU8_SLICE_SetDeadTimeValue+0x3a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1301
  {
    slice->DC1R = (((uint32_t) fall_value) << CCU8_CC8_DC1R_DT1F_Pos) | ((uint32_t) rise_value);
  }
  else
  {
  slice->DC2R = (((uint32_t) fall_value) << CCU8_CC8_DC2R_DT2F_Pos) | ((uint32_t) rise_value);
 8004a26:	787b      	ldrb	r3, [r7, #1]
 8004a28:	021a      	lsls	r2, r3, #8
 8004a2a:	78bb      	ldrb	r3, [r7, #2]
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	655a      	str	r2, [r3, #84]	; 0x54
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1303
  }
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr

08004a3c <XMC_CCU8_SLICE_SetDeadTimePrescaler>:
XMC_CCU8_SLICE_SetDeadTimePrescaler():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1307

/* Configures clock division factor for dead time */
void XMC_CCU8_SLICE_SetDeadTimePrescaler(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_DTC_DIV_t div_val)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	460b      	mov	r3, r1
 8004a46:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1311
  XMC_ASSERT("XMC_CCU8_SLICE_SetDeadTimePrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetDeadTimePrescaler:Invalid divider value", XMC_CCU8_SLICE_CHECK_DTC_DIV(div_val));

  slice->DTC &= ~((uint32_t) CCU8_CC8_DTC_DTCC_Msk);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	64da      	str	r2, [r3, #76]	; 0x4c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1312
  slice->DTC |= ((uint32_t) div_val) << CCU8_CC8_DTC_DTCC_Pos;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	019b      	lsls	r3, r3, #6
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	64da      	str	r2, [r3, #76]	; 0x4c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1313
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bc80      	pop	{r7}
 8004a6a:	4770      	bx	lr

08004a6c <XMC_CCU8_SLICE_ConfigureStatusBitOutput>:
XMC_CCU8_SLICE_ConfigureStatusBitOutput():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1317

/* Configures status ST1, ST2 mapping to STy */
void XMC_CCU8_SLICE_ConfigureStatusBitOutput(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_STATUS_t channel)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1321
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOutput:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureStatusBitOutput:Invalid Channel", XMC_CCU8_SLICE_CHECK_SLICE_STATUS(channel));

  slice->TC &= ~((uint32_t) CCU8_CC8_TC_STOS_Msk);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1322
  slice->TC |= ((uint32_t) channel) << CCU8_CC8_TC_STOS_Pos;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	695a      	ldr	r2, [r3, #20]
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	075b      	lsls	r3, r3, #29
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ccu8.c:1323
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr

08004a9c <XMC_PRIOARRAY_GetHead>:
XMC_PRIOARRAY_GetHead():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_common.h:225

/*
 *
 */
__STATIC_INLINE int32_t XMC_PRIOARRAY_GetHead(XMC_PRIOARRAY_t *prioarray)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_common.h:227
  XMC_ASSERT("XMC_PRIOARRAY_Init: NULL pointer", prioarray != NULL);
  return prioarray->items[prioarray->size].next;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6859      	ldr	r1, [r3, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	4613      	mov	r3, r2
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	689b      	ldr	r3, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_common.h:228
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bc80      	pop	{r7}
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop

08004ac4 <XMC_PRIOARRAY_GetItemPriority>:
XMC_PRIOARRAY_GetItemPriority():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_common.h:243

/*
 *
 */
__STATIC_INLINE int32_t XMC_PRIOARRAY_GetItemPriority(XMC_PRIOARRAY_t *prioarray, int32_t item)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_common.h:245
  XMC_ASSERT("XMC_PRIOARRAY_GetItemPriority: item out of range", (item >= 0) && (item < prioarray->size));
  return prioarray->items[item].priority;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6859      	ldr	r1, [r3, #4]
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	4413      	add	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	681b      	ldr	r3, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_common.h:246
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bc80      	pop	{r7}
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop

08004aec <XMC_PRIOARRAY_GetItemNext>:
XMC_PRIOARRAY_GetItemNext():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_common.h:252

/*
 *
 */
__STATIC_INLINE int32_t XMC_PRIOARRAY_GetItemNext(XMC_PRIOARRAY_t *prioarray, int32_t item)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_common.h:254
  XMC_ASSERT("XMC_PRIOARRAY_GetItemNext: item out of range", (item >= 0) && (item < prioarray->size));
  return prioarray->items[item].next;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6859      	ldr	r1, [r3, #4]
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	4613      	mov	r3, r2
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	440b      	add	r3, r1
 8004b06:	689b      	ldr	r3, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_common.h:255
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop

08004b14 <XMC_LIST_Init>:
XMC_LIST_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:72
}

#endif

void XMC_LIST_Init(XMC_LIST_t *list)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:73
  *list = NULL;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:74
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bc80      	pop	{r7}
 8004b2a:	4770      	bx	lr

08004b2c <XMC_LIST_GetHead>:
XMC_LIST_GetHead():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:77

void *XMC_LIST_GetHead(XMC_LIST_t *list)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:78
  return *list;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:79
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bc80      	pop	{r7}
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop

08004b44 <XMC_LIST_GetTail>:
XMC_LIST_GetTail():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:82

void *XMC_LIST_GetTail(XMC_LIST_t *list)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:85
  struct list *tail;
  
  if (*list == NULL) 
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d102      	bne.n	8004b5a <XMC_LIST_GetTail+0x16>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:87
  {
    tail = NULL;
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	e00a      	b.n	8004b70 <XMC_LIST_GetTail+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:91
  }
  else
  {
    for (tail = (struct list *)*list; tail->next != NULL; tail = tail->next)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	e002      	b.n	8004b68 <XMC_LIST_GetTail+0x24>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:91 (discriminator 3)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:91 (discriminator 1)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1f8      	bne.n	8004b62 <XMC_LIST_GetTail+0x1e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:97
    {
      /* Loop through the list */
    }  
  }
  
  return tail;    
 8004b70:	68fb      	ldr	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:98
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr

08004b7c <XMC_LIST_Add>:
XMC_LIST_Add():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:101

void XMC_LIST_Add(XMC_LIST_t *list, void *item)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:104
  struct list *tail;
  
  ((struct list *)item)->next = NULL;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:105
  tail = (struct list *)XMC_LIST_GetTail(list);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7ff ffd9 	bl	8004b44 <XMC_LIST_GetTail>
 8004b92:	60f8      	str	r0, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:107
  
  if (tail == NULL) 
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d103      	bne.n	8004ba2 <XMC_LIST_Add+0x26>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:109
  {
    *list = item;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:115
  } 
  else 
  {
    tail->next = (struct list *)item;
  }
}
 8004ba0:	e002      	b.n	8004ba8 <XMC_LIST_Add+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:113
  {
    *list = item;
  } 
  else 
  {
    tail->next = (struct list *)item;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:115
  }
}
 8004ba8:	bf00      	nop
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <XMC_LIST_Remove>:
XMC_LIST_Remove():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:118

void XMC_LIST_Remove(XMC_LIST_t *list, void *item)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:121
  struct list *right, *left;
  
  if (*list != NULL) 
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d022      	beq.n	8004c08 <XMC_LIST_Remove+0x58>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:123
  {
    left = NULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:124
    for(right = (struct list *)*list; right != NULL; right = right->next)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	e019      	b.n	8004c02 <XMC_LIST_Remove+0x52>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:126
    {
      if(right == item) 
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d110      	bne.n	8004bf8 <XMC_LIST_Remove+0x48>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:128
      {
        if(left == NULL) 
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d104      	bne.n	8004be6 <XMC_LIST_Remove+0x36>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:131
        {
          /* First on list */
          *list = right->next;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	e003      	b.n	8004bee <XMC_LIST_Remove+0x3e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:136
        } 
        else 
        {
          /* Not first on list */
          left->next = right->next;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:138
        }
        right->next = NULL;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:139
        break;
 8004bf4:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:144
      }
      left = right;
    }
  }
}
 8004bf6:	e007      	b.n	8004c08 <XMC_LIST_Remove+0x58>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:141 (discriminator 2)
          left->next = right->next;
        }
        right->next = NULL;
        break;
      }
      left = right;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:124 (discriminator 2)
  struct list *right, *left;
  
  if (*list != NULL) 
  {
    left = NULL;
    for(right = (struct list *)*list; right != NULL; right = right->next)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:124 (discriminator 1)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1e2      	bne.n	8004bce <XMC_LIST_Remove+0x1e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:144
        break;
      }
      left = right;
    }
  }
}
 8004c08:	bf00      	nop
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bc80      	pop	{r7}
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop

08004c14 <XMC_LIST_Insert>:
XMC_LIST_Insert():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:147

void XMC_LIST_Insert(XMC_LIST_t *list, void *prev_item, void *new_item)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:148
  if (prev_item == NULL) 
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d107      	bne.n	8004c36 <XMC_LIST_Insert+0x22>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:150
  {
	((struct list *)new_item)->next = (struct list *)*list;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:151
	*list = new_item;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:158
  else 
  {
    ((struct list *)new_item)->next = ((struct list *)prev_item)->next;
    ((struct list *)prev_item)->next = (struct list *)new_item;
  }
}
 8004c34:	e006      	b.n	8004c44 <XMC_LIST_Insert+0x30>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:155
	((struct list *)new_item)->next = (struct list *)*list;
	*list = new_item;
  } 
  else 
  {
    ((struct list *)new_item)->next = ((struct list *)prev_item)->next;
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:156
    ((struct list *)prev_item)->next = (struct list *)new_item;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:158
  }
}
 8004c44:	bf00      	nop
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop

08004c50 <XMC_PRIOARRAY_Init>:
XMC_PRIOARRAY_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:161

void XMC_PRIOARRAY_Init(XMC_PRIOARRAY_t *prioarray)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:165
  XMC_ASSERT("XMC_PRIOARRAY_Init: NULL pointer", prioarray != NULL);

  /* Initialize head, next points to tail, previous to NULL and the priority is MININT */
  prioarray->items[prioarray->size].next = prioarray->size + 1;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6859      	ldr	r1, [r3, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4613      	mov	r3, r2
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	4413      	add	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	440b      	add	r3, r1
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	6812      	ldr	r2, [r2, #0]
 8004c6e:	3201      	adds	r2, #1
 8004c70:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:166
  prioarray->items[prioarray->size].previous = -1;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6859      	ldr	r1, [r3, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	4413      	add	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	440b      	add	r3, r1
 8004c84:	f04f 32ff 	mov.w	r2, #4294967295
 8004c88:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:167
  prioarray->items[prioarray->size].priority = INT32_MAX;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6859      	ldr	r1, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	4613      	mov	r3, r2
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	4413      	add	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	440b      	add	r3, r1
 8004c9c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004ca0:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:170

  /* Initialize tail, next points to NULL, previous is the head and the priority is MAXINT */
  prioarray->items[prioarray->size + 1].next = -1;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6859      	ldr	r1, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	4613      	mov	r3, r2
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8004cba:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:171
  prioarray->items[prioarray->size + 1].previous = prioarray->size;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6859      	ldr	r1, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	1c5a      	adds	r2, r3, #1
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	4413      	add	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	440b      	add	r3, r1
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6812      	ldr	r2, [r2, #0]
 8004cd4:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:172
  prioarray->items[prioarray->size + 1].priority = INT32_MIN;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6859      	ldr	r1, [r3, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	440b      	add	r3, r1
 8004cea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004cee:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:174

}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bc80      	pop	{r7}
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop

08004cfc <XMC_PRIOARRAY_Add>:
XMC_PRIOARRAY_Add():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:177

void XMC_PRIOARRAY_Add(XMC_PRIOARRAY_t *prioarray, int32_t item, int32_t priority)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:183
  int32_t next;
  int32_t previous;

  XMC_ASSERT("XMC_PRIOARRAY_Add: item out of range", (item >= 0) && (item < prioarray->size));
  
  next = XMC_PRIOARRAY_GetHead(prioarray);
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f7ff fec7 	bl	8004a9c <XMC_PRIOARRAY_GetHead>
 8004d0e:	6178      	str	r0, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:184
  while (XMC_PRIOARRAY_GetItemPriority(prioarray, next) > priority)
 8004d10:	e004      	b.n	8004d1c <XMC_PRIOARRAY_Add+0x20>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:186
  {
    next = XMC_PRIOARRAY_GetItemNext(prioarray, next);
 8004d12:	6979      	ldr	r1, [r7, #20]
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f7ff fee9 	bl	8004aec <XMC_PRIOARRAY_GetItemNext>
 8004d1a:	6178      	str	r0, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:184
  int32_t previous;

  XMC_ASSERT("XMC_PRIOARRAY_Add: item out of range", (item >= 0) && (item < prioarray->size));
  
  next = XMC_PRIOARRAY_GetHead(prioarray);
  while (XMC_PRIOARRAY_GetItemPriority(prioarray, next) > priority)
 8004d1c:	6979      	ldr	r1, [r7, #20]
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f7ff fed0 	bl	8004ac4 <XMC_PRIOARRAY_GetItemPriority>
 8004d24:	4602      	mov	r2, r0
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	dcf2      	bgt.n	8004d12 <XMC_PRIOARRAY_Add+0x16>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:189
  {
    next = XMC_PRIOARRAY_GetItemNext(prioarray, next);
  }

  previous = prioarray->items[next].previous;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6859      	ldr	r1, [r3, #4]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	4613      	mov	r3, r2
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	4413      	add	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	440b      	add	r3, r1
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:191

  prioarray->items[item].next = next;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6859      	ldr	r1, [r3, #4]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	4613      	mov	r3, r2
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	4413      	add	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:192
  prioarray->items[item].previous = previous;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6859      	ldr	r1, [r3, #4]
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	4413      	add	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	440b      	add	r3, r1
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:193
  prioarray->items[item].priority = priority;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6859      	ldr	r1, [r3, #4]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	4413      	add	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	440b      	add	r3, r1
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:195

  prioarray->items[previous].next = item;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6859      	ldr	r1, [r3, #4]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4613      	mov	r3, r2
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	440b      	add	r3, r1
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:196
  prioarray->items[next].previous = item;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6859      	ldr	r1, [r3, #4]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	4613      	mov	r3, r2
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	4413      	add	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	440b      	add	r3, r1
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:197
}
 8004da4:	bf00      	nop
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <XMC_PRIOARRAY_Remove>:
XMC_PRIOARRAY_Remove():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:200

void XMC_PRIOARRAY_Remove(XMC_PRIOARRAY_t *prioarray, int32_t item)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:206
  int32_t next;
  int32_t previous;

  XMC_ASSERT("XMC_PRIOARRAY_Add: item out of range", (item >= 0) && (item < prioarray->size));
  
  next = prioarray->items[item].next;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6859      	ldr	r1, [r3, #4]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	4413      	add	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:207
  previous = prioarray->items[item].previous;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6859      	ldr	r1, [r3, #4]
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	440b      	add	r3, r1
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:209

  prioarray->items[previous].next = next;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6859      	ldr	r1, [r3, #4]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	4613      	mov	r3, r2
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	4413      	add	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	440b      	add	r3, r1
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:210
  prioarray->items[next].previous = previous;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6859      	ldr	r1, [r3, #4]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	4413      	add	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_common.c:211
}
 8004e06:	bf00      	nop
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc80      	pop	{r7}
 8004e0e:	4770      	bx	lr

08004e10 <XMC_DAC_CH_EnableOutput>:
XMC_DAC_CH_EnableOutput():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dac.h:522
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_DisableOutput(), XMC_DAC_CH_IsOutputEnabled()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnableOutput(XMC_DAC_t *const dac, const uint8_t channel)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dac.h:526
  XMC_ASSERT("XMC_DAC_CH_EnableOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_EnableOutput: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  
  dac->DACCFG[channel].high |= DAC_DAC0CFG1_ANAEN_Msk;
 8004e1c:	78f8      	ldrb	r0, [r7, #3]
 8004e1e:	78fb      	ldrb	r3, [r7, #3]
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	4413      	add	r3, r2
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	00c3      	lsls	r3, r0, #3
 8004e30:	440b      	add	r3, r1
 8004e32:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dac.h:527
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bc80      	pop	{r7}
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop

08004e40 <XMC_DAC_CH_EnablePatternSignOutput>:
XMC_DAC_CH_EnablePatternSignOutput():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dac.h:768
 * XMC_DAC_CH_StartPatternMode(), XMC_DAC_CH_DisablePatternSignOutput()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnablePatternSignOutput(XMC_DAC_t *const dac,
                                                     const uint8_t channel)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dac.h:772
  XMC_ASSERT("XMC_DAC_CH_EnablePatternSignOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_EnablePatternSignOutput: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  
  dac->DACCFG[channel].low |= DAC_DAC0CFG0_SIGNEN_Msk;
 8004e4c:	78f8      	ldrb	r0, [r7, #3]
 8004e4e:	78fb      	ldrb	r3, [r7, #3]
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	4413      	add	r3, r2
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e5c:	6879      	ldr	r1, [r7, #4]
 8004e5e:	00c3      	lsls	r3, r0, #3
 8004e60:	440b      	add	r3, r1
 8004e62:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dac.h:773
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bc80      	pop	{r7}
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop

08004e70 <XMC_DAC_CH_DisablePatternSignOutput>:
XMC_DAC_CH_DisablePatternSignOutput():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dac.h:796
 * XMC_DAC_CH_StartPatternMode(), XMC_DAC_CH_EnablePatternSignOutput()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_DisablePatternSignOutput(XMC_DAC_t *const dac,
                                                     const uint8_t channel)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dac.h:800
  XMC_ASSERT("XMC_DAC_CH_DisablePatternSignOutput: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_DisablePatternSignOutput: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  
  dac->DACCFG[channel].low &= ~DAC_DAC0CFG0_SIGNEN_Msk;
 8004e7c:	78f8      	ldrb	r0, [r7, #3]
 8004e7e:	78fb      	ldrb	r3, [r7, #3]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	4413      	add	r3, r2
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	00c3      	lsls	r3, r0, #3
 8004e90:	440b      	add	r3, r1
 8004e92:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dac.h:801
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc80      	pop	{r7}
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop

08004ea0 <XMC_DAC_CH_SetRampStart>:
XMC_DAC_CH_SetRampStart():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dac.h:824
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_GetRampStart(), XMC_DAC_CH_GetRampStop(), XMC_DAC_CH_SetRampStop()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetRampStart(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t start)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	70fb      	strb	r3, [r7, #3]
 8004eac:	4613      	mov	r3, r2
 8004eae:	803b      	strh	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dac.h:828
  XMC_ASSERT("XMC_DAC_CH_SetRampStart: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetRampStart: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  
  dac->DACDATA[channel] = start;
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	883a      	ldrh	r2, [r7, #0]
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	440b      	add	r3, r1
 8004ebc:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dac.h:829
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bc80      	pop	{r7}
 8004ec6:	4770      	bx	lr

08004ec8 <XMC_DAC_CH_SetRampStop>:
XMC_DAC_CH_SetRampStop():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dac.h:877
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_GetRampStop(), XMC_DAC_CH_SetRampStart()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetRampStop(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t stop)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	70fb      	strb	r3, [r7, #3]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	803b      	strh	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dac.h:881
  XMC_ASSERT("XMC_DAC_CH_SetRampStop: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetRampStop: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
    
  dac->DAC01DATA = (dac->DAC01DATA & ~(DAC_DAC01DATA_DATA0_Msk << (channel * DAC_DAC01DATA_DATA1_Pos))) |
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	69da      	ldr	r2, [r3, #28]
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	011b      	lsls	r3, r3, #4
 8004ee0:	f640 71ff 	movw	r1, #4095	; 0xfff
 8004ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	4013      	ands	r3, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dac.h:882
               (stop << (channel * DAC_DAC01DATA_DATA1_Pos));
 8004eec:	8839      	ldrh	r1, [r7, #0]
 8004eee:	78fa      	ldrb	r2, [r7, #3]
 8004ef0:	0112      	lsls	r2, r2, #4
 8004ef2:	fa01 f202 	lsl.w	r2, r1, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dac.h:881
__STATIC_INLINE void XMC_DAC_CH_SetRampStop(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t stop)
{
  XMC_ASSERT("XMC_DAC_CH_SetRampStop: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetRampStop: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
    
  dac->DAC01DATA = (dac->DAC01DATA & ~(DAC_DAC01DATA_DATA0_Msk << (channel * DAC_DAC01DATA_DATA1_Pos))) |
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	61da      	str	r2, [r3, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dac.h:883
               (stop << (channel * DAC_DAC01DATA_DATA1_Pos));
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bc80      	pop	{r7}
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop

08004f08 <XMC_DAC_CH_SetTrigger>:
XMC_DAC_CH_SetTrigger():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dac.h:925
 * \par
 * Channel \a channel trigger source is selected by \a TRIGSEL bit-field of \a DAC0CFG1 register (for channel 0) / DAC1CFG1 register(for channel 1).
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetTrigger(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_TRIGGER_t trigger)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	460b      	mov	r3, r1
 8004f12:	607a      	str	r2, [r7, #4]
 8004f14:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dac.h:930
  XMC_ASSERT("XMC_DAC_CH_SetTrigger: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetTrigger: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetTrigger: trigger parameter not valid\n", XMC_DAC_IS_TRIGGER_VALID(trigger));

  dac->DACCFG[channel].high = (dac->DACCFG[channel].high & ~(DAC_DAC0CFG1_TRIGSEL_Msk | DAC_DAC0CFG1_TRIGMOD_Msk)) |
 8004f16:	7af8      	ldrb	r0, [r7, #11]
 8004f18:	7afb      	ldrb	r3, [r7, #11]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	4413      	add	r3, r2
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f423 22ce 	bic.w	r2, r3, #421888	; 0x67000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	68f9      	ldr	r1, [r7, #12]
 8004f2c:	00c3      	lsls	r3, r0, #3
 8004f2e:	440b      	add	r3, r1
 8004f30:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dac.h:932
                              trigger;
}
 8004f32:	bf00      	nop
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr

08004f3c <XMC_DAC_CH_SetMode>:
XMC_DAC_CH_SetMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dac.h:1026
 * Sets the operating \e mode for the \e channel by setting the \a MODE bit-field of \a DAC0CFG0 register (for channel 0) / \a DAC1CFG0 register (for channel 1).
 * Different modes of DAC operation are defined by enum XMC_DAC_CH_MODE_t.
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetMode(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_MODE_t mode)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	460b      	mov	r3, r1
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dac.h:1031
  XMC_ASSERT("XMC_DAC_CH_SetMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetMode: trigger parameter not valid\n", XMC_DAC_IS_MODE_VALID(mode));
    
  dac->DACCFG[channel].low = (dac->DACCFG[channel].low & ~DAC_DAC0CFG0_MODE_Msk) |
 8004f4a:	7af8      	ldrb	r0, [r7, #11]
 8004f4c:	7afb      	ldrb	r3, [r7, #11]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	4413      	add	r3, r2
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f423 02e0 	bic.w	r2, r3, #7340032	; 0x700000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	68f9      	ldr	r1, [r7, #12]
 8004f60:	00c3      	lsls	r3, r0, #3
 8004f62:	440b      	add	r3, r1
 8004f64:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dac.h:1033
                             mode;
}
 8004f66:	bf00      	nop
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr

08004f70 <XMC_DAC_Enable>:
XMC_DAC_Enable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:79
 * API IMPLEMENTATION
 *******************************************************************************/

/* API to enable the DAC module */
void XMC_DAC_Enable(XMC_DAC_t *const dac)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:85
  XMC_UNUSED_ARG(dac);
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_DAC);
#endif
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_DAC);
 8004f78:	4803      	ldr	r0, [pc, #12]	; (8004f88 <XMC_DAC_Enable+0x18>)
 8004f7a:	f7fc fc07 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:86
}
 8004f7e:	bf00      	nop
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	10000020 	.word	0x10000020

08004f8c <XMC_DAC_Disable>:
XMC_DAC_Disable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:90

/* API to disable the DAC module */
void XMC_DAC_Disable(XMC_DAC_t *const dac)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:93
  XMC_UNUSED_ARG(dac);

  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_DAC);
 8004f94:	4803      	ldr	r0, [pc, #12]	; (8004fa4 <XMC_DAC_Disable+0x18>)
 8004f96:	f7fc fbdd 	bl	8001754 <XMC_SCU_RESET_AssertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:97
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_DAC);
#endif
}
 8004f9a:	bf00      	nop
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	10000020 	.word	0x10000020

08004fa8 <XMC_DAC_IsEnabled>:
XMC_DAC_IsEnabled():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:101

/* API to check whether DAC is enabled */
bool XMC_DAC_IsEnabled(const XMC_DAC_t *const dac)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:106
  bool status;

  XMC_UNUSED_ARG(dac);

  status = XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_DAC);
 8004fb0:	4808      	ldr	r0, [pc, #32]	; (8004fd4 <XMC_DAC_IsEnabled+0x2c>)
 8004fb2:	f7fc fc07 	bl	80017c4 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:107
  if(status == true)
 8004fba:	7bfb      	ldrb	r3, [r7, #15]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <XMC_DAC_IsEnabled+0x1e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:109
  {
    status = false;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	73fb      	strb	r3, [r7, #15]
 8004fc4:	e001      	b.n	8004fca <XMC_DAC_IsEnabled+0x22>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:113
  }
  else
  {
    status = true;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:115
  }
  return (status);
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:116
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	10000020 	.word	0x10000020

08004fd8 <XMC_DAC_CH_Init>:
XMC_DAC_CH_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:120

/* API to initialize DAC channel configuration */
void XMC_DAC_CH_Init(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_CONFIG_t *const config)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:121
  XMC_DAC_Enable(dac);
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f7ff ffc2 	bl	8004f70 <XMC_DAC_Enable>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:123

  dac->DACCFG[channel].low = config->cfg0;
 8004fec:	7afb      	ldrb	r3, [r7, #11]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	6812      	ldr	r2, [r2, #0]
 8004ff2:	68f9      	ldr	r1, [r7, #12]
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	440b      	add	r3, r1
 8004ff8:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:124
  dac->DACCFG[channel].high = config->cfg1;
 8004ffa:	7afb      	ldrb	r3, [r7, #11]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6852      	ldr	r2, [r2, #4]
 8005000:	68f9      	ldr	r1, [r7, #12]
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	440b      	add	r3, r1
 8005006:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:125
  if (channel < XMC_DAC_NO_CHANNELS)
 8005008:	7afb      	ldrb	r3, [r7, #11]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d804      	bhi.n	8005018 <XMC_DAC_CH_Init+0x40>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:127
  {
    XMC_DAC_CH_EnableOutput(dac, channel);
 800500e:	7afb      	ldrb	r3, [r7, #11]
 8005010:	4619      	mov	r1, r3
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f7ff fefc 	bl	8004e10 <XMC_DAC_CH_EnableOutput>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:129
  }
}
 8005018:	bf00      	nop
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <XMC_DAC_CH_SetFrequency>:
XMC_DAC_CH_SetFrequency():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:135

/* API to set the waveform frequency except in Ramp and Pattern generation mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetFrequency(XMC_DAC_t *const dac,
                                            const uint8_t channel,
                                            const uint32_t frequency)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	460b      	mov	r3, r1
 800502a:	607a      	str	r2, [r7, #4]
 800502c:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:141
  uint32_t divider;
  XMC_DAC_CH_STATUS_t status;

  XMC_ASSERT("XMC_DAC_CH_SetFrequency: frequency must be greater than zero", frequency > 0U);

  divider = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / frequency;
 800502e:	f7fc fd1f 	bl	8001a70 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8005032:	4602      	mov	r2, r0
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	fbb2 f3f3 	udiv	r3, r2, r3
 800503a:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:143

  if (divider < XMC_DAC_MIN_FREQ_DIVIDER)
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	2b0f      	cmp	r3, #15
 8005040:	d802      	bhi.n	8005048 <XMC_DAC_CH_SetFrequency+0x28>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:145
  {
    status = XMC_DAC_CH_STATUS_ERROR_FREQ2HIGH;
 8005042:	2304      	movs	r3, #4
 8005044:	75fb      	strb	r3, [r7, #23]
 8005046:	e016      	b.n	8005076 <XMC_DAC_CH_SetFrequency+0x56>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:147
  }
  else if (divider >= XMC_DAC_MAX_FREQ_DIVIDER)
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800504e:	d302      	bcc.n	8005056 <XMC_DAC_CH_SetFrequency+0x36>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:149
  {
    status = XMC_DAC_CH_STATUS_ERROR_FREQ2LOW;
 8005050:	2303      	movs	r3, #3
 8005052:	75fb      	strb	r3, [r7, #23]
 8005054:	e00f      	b.n	8005076 <XMC_DAC_CH_SetFrequency+0x56>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:152
  }
  else {
    dac->DACCFG[channel].low = (dac->DACCFG[channel].low & (uint32_t)(~DAC_DAC0CFG0_FREQ_Msk)) |
 8005056:	7af8      	ldrb	r0, [r7, #11]
 8005058:	7afb      	ldrb	r3, [r7, #11]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	4413      	add	r3, r2
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	0d1b      	lsrs	r3, r3, #20
 8005064:	051b      	lsls	r3, r3, #20
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	431a      	orrs	r2, r3
 800506a:	68f9      	ldr	r1, [r7, #12]
 800506c:	00c3      	lsls	r3, r0, #3
 800506e:	440b      	add	r3, r1
 8005070:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:154
                               (divider << DAC_DAC0CFG0_FREQ_Pos);
    status = XMC_DAC_CH_STATUS_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:157
  }

  return status;
 8005076:	7dfb      	ldrb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:158
}
 8005078:	4618      	mov	r0, r3
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <XMC_DAC_CH_SetRampFrequency>:
XMC_DAC_CH_SetRampFrequency():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:164

/* API to set the waveform frequency in Ramp Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetRampFrequency(XMC_DAC_t *const dac,
                                                const uint8_t channel,
                                                const uint32_t frequency)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	460b      	mov	r3, r1
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:168
  uint32_t stop;
  uint32_t start;

  start = dac->DACDATA[channel];
 800508e:	7afb      	ldrb	r3, [r7, #11]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	3304      	adds	r3, #4
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:169
  stop = (dac->DAC01DATA >> (channel * DAC_DAC01DATA_DATA1_Pos)) & (uint32_t)DAC_DAC01DATA_DATA0_Msk;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	69da      	ldr	r2, [r3, #28]
 80050a0:	7afb      	ldrb	r3, [r7, #11]
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	fa22 f303 	lsr.w	r3, r2, r3
 80050a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ac:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:171

  return XMC_DAC_CH_SetFrequency(dac, channel, frequency * ((stop - start) + 1U));
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	3301      	adds	r3, #1
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	fb02 f203 	mul.w	r2, r2, r3
 80050bc:	7afb      	ldrb	r3, [r7, #11]
 80050be:	4619      	mov	r1, r3
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f7ff ffad 	bl	8005020 <XMC_DAC_CH_SetFrequency>
 80050c6:	4603      	mov	r3, r0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:172
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <XMC_DAC_CH_StartSingleValueMode>:
XMC_DAC_CH_StartSingleValueMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:176

/* API to start the operation in Single Value Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartSingleValueMode(XMC_DAC_t *const dac, const uint8_t channel)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	460b      	mov	r3, r1
 80050da:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:181
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_SINGLE);
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80050e2:	4619      	mov	r1, r3
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7ff ff29 	bl	8004f3c <XMC_DAC_CH_SetMode>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:183

  return XMC_DAC_CH_STATUS_OK;
 80050ea:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:184
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <XMC_DAC_CH_StartDataMode>:
XMC_DAC_CH_StartDataMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:191
/* API to start the operation in Data Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartDataMode(XMC_DAC_t *const dac,
                                             const uint8_t channel,
                                             const XMC_DAC_CH_TRIGGER_t trigger,
                                             const uint32_t frequency)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	607a      	str	r2, [r7, #4]
 80050fe:	603b      	str	r3, [r7, #0]
 8005100:	460b      	mov	r3, r1
 8005102:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:192
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:198

  XMC_ASSERT("XMC_DAC_CH_StartDataMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartDataMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartDataMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 8005108:	7afb      	ldrb	r3, [r7, #11]
 800510a:	2200      	movs	r2, #0
 800510c:	4619      	mov	r1, r3
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff ff14 	bl	8004f3c <XMC_DAC_CH_SetMode>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:200

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d107      	bne.n	800512a <XMC_DAC_CH_StartDataMode+0x36>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:202
  {
    status = XMC_DAC_CH_SetFrequency(dac, channel, frequency);
 800511a:	7afb      	ldrb	r3, [r7, #11]
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	4619      	mov	r1, r3
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f7ff ff7d 	bl	8005020 <XMC_DAC_CH_SetFrequency>
 8005126:	4603      	mov	r3, r0
 8005128:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:205
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 800512a:	7dfb      	ldrb	r3, [r7, #23]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10c      	bne.n	800514a <XMC_DAC_CH_StartDataMode+0x56>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:207
  {
    XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 8005130:	7afb      	ldrb	r3, [r7, #11]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	4619      	mov	r1, r3
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f7ff fee6 	bl	8004f08 <XMC_DAC_CH_SetTrigger>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:208
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_DATA);
 800513c:	7afb      	ldrb	r3, [r7, #11]
 800513e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005142:	4619      	mov	r1, r3
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f7ff fef9 	bl	8004f3c <XMC_DAC_CH_SetMode>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:211
  }

  return status;
 800514a:	7dfb      	ldrb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:212
}
 800514c:	4618      	mov	r0, r3
 800514e:	3718      	adds	r7, #24
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <XMC_DAC_CH_StartRampMode>:
XMC_DAC_CH_StartRampMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:221
                                             const uint8_t channel,
                                             const uint16_t start,
                                             const uint16_t stop,
                                             const XMC_DAC_CH_TRIGGER_t trigger,
                                             const uint32_t frequency)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	4608      	mov	r0, r1
 800515e:	4611      	mov	r1, r2
 8005160:	461a      	mov	r2, r3
 8005162:	4603      	mov	r3, r0
 8005164:	72fb      	strb	r3, [r7, #11]
 8005166:	460b      	mov	r3, r1
 8005168:	813b      	strh	r3, [r7, #8]
 800516a:	4613      	mov	r3, r2
 800516c:	80fb      	strh	r3, [r7, #6]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:222
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 800516e:	2300      	movs	r3, #0
 8005170:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:228

  XMC_ASSERT("XMC_DAC_CH_StartRampMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartRampMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartRampMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 8005172:	7afb      	ldrb	r3, [r7, #11]
 8005174:	2200      	movs	r2, #0
 8005176:	4619      	mov	r1, r3
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f7ff fedf 	bl	8004f3c <XMC_DAC_CH_SetMode>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:230

  XMC_DAC_CH_SetRampStart(dac, channel, start);
 800517e:	893a      	ldrh	r2, [r7, #8]
 8005180:	7afb      	ldrb	r3, [r7, #11]
 8005182:	4619      	mov	r1, r3
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f7ff fe8b 	bl	8004ea0 <XMC_DAC_CH_SetRampStart>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:231
  XMC_DAC_CH_SetRampStop(dac, channel, stop);
 800518a:	88fa      	ldrh	r2, [r7, #6]
 800518c:	7afb      	ldrb	r3, [r7, #11]
 800518e:	4619      	mov	r1, r3
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f7ff fe99 	bl	8004ec8 <XMC_DAC_CH_SetRampStop>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:232
  XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 8005196:	7afb      	ldrb	r3, [r7, #11]
 8005198:	6a3a      	ldr	r2, [r7, #32]
 800519a:	4619      	mov	r1, r3
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f7ff feb3 	bl	8004f08 <XMC_DAC_CH_SetTrigger>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:234

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d107      	bne.n	80051b8 <XMC_DAC_CH_StartRampMode+0x64>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:236
  {
    status = XMC_DAC_CH_SetRampFrequency(dac, channel, frequency);
 80051a8:	7afb      	ldrb	r3, [r7, #11]
 80051aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ac:	4619      	mov	r1, r3
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f7ff ff66 	bl	8005080 <XMC_DAC_CH_SetRampFrequency>
 80051b4:	4603      	mov	r3, r0
 80051b6:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:239
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 80051b8:	7dfb      	ldrb	r3, [r7, #23]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d106      	bne.n	80051cc <XMC_DAC_CH_StartRampMode+0x78>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:241
  {
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_RAMP);
 80051be:	7afb      	ldrb	r3, [r7, #11]
 80051c0:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 80051c4:	4619      	mov	r1, r3
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f7ff feb8 	bl	8004f3c <XMC_DAC_CH_SetMode>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:244
  }

  return status;
 80051cc:	7dfb      	ldrb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:245
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop

080051d8 <XMC_DAC_CH_StartPatternMode>:
XMC_DAC_CH_StartPatternMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:254
                                                const uint8_t channel,
                                                const uint8_t *const pattern,
                                                const XMC_DAC_CH_PATTERN_SIGN_OUTPUT_t sign_output,
                                                const XMC_DAC_CH_TRIGGER_t trigger,
                                                const uint32_t frequency)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	607a      	str	r2, [r7, #4]
 80051e2:	461a      	mov	r2, r3
 80051e4:	460b      	mov	r3, r1
 80051e6:	72fb      	strb	r3, [r7, #11]
 80051e8:	4613      	mov	r3, r2
 80051ea:	72bb      	strb	r3, [r7, #10]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:255
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:261

  XMC_ASSERT("XMC_DAC_CH_StartPatternMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartPatternMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartPatternMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 80051f0:	7afb      	ldrb	r3, [r7, #11]
 80051f2:	2200      	movs	r2, #0
 80051f4:	4619      	mov	r1, r3
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f7ff fea0 	bl	8004f3c <XMC_DAC_CH_SetMode>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:263

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d108      	bne.n	8005214 <XMC_DAC_CH_StartPatternMode+0x3c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:265
  {
    status = XMC_DAC_CH_SetFrequency(dac, channel, frequency * XMC_DAC_SAMPLES_PER_PERIOD);
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	7afb      	ldrb	r3, [r7, #11]
 8005208:	4619      	mov	r1, r3
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f7ff ff08 	bl	8005020 <XMC_DAC_CH_SetFrequency>
 8005210:	4603      	mov	r3, r0
 8005212:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:268
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 8005214:	7dfb      	ldrb	r3, [r7, #23]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d120      	bne.n	800525c <XMC_DAC_CH_StartPatternMode+0x84>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:270
  {
    XMC_DAC_CH_SetPattern(dac, channel, pattern);
 800521a:	7afb      	ldrb	r3, [r7, #11]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	4619      	mov	r1, r3
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 f851 	bl	80052c8 <XMC_DAC_CH_SetPattern>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:271
    if (XMC_DAC_CH_PATTERN_SIGN_OUTPUT_ENABLED == sign_output)
 8005226:	7abb      	ldrb	r3, [r7, #10]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d105      	bne.n	8005238 <XMC_DAC_CH_StartPatternMode+0x60>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:273
    {
      XMC_DAC_CH_EnablePatternSignOutput(dac, channel);
 800522c:	7afb      	ldrb	r3, [r7, #11]
 800522e:	4619      	mov	r1, r3
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f7ff fe05 	bl	8004e40 <XMC_DAC_CH_EnablePatternSignOutput>
 8005236:	e004      	b.n	8005242 <XMC_DAC_CH_StartPatternMode+0x6a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:277
    }
    else
    {
      XMC_DAC_CH_DisablePatternSignOutput(dac, channel);
 8005238:	7afb      	ldrb	r3, [r7, #11]
 800523a:	4619      	mov	r1, r3
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f7ff fe17 	bl	8004e70 <XMC_DAC_CH_DisablePatternSignOutput>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:279
    }
    XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 8005242:	7afb      	ldrb	r3, [r7, #11]
 8005244:	6a3a      	ldr	r2, [r7, #32]
 8005246:	4619      	mov	r1, r3
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f7ff fe5d 	bl	8004f08 <XMC_DAC_CH_SetTrigger>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:280
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_PATTERN);
 800524e:	7afb      	ldrb	r3, [r7, #11]
 8005250:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8005254:	4619      	mov	r1, r3
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f7ff fe70 	bl	8004f3c <XMC_DAC_CH_SetMode>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:283
  }

  return status;
 800525c:	7dfb      	ldrb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:284
}
 800525e:	4618      	mov	r0, r3
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop

08005268 <XMC_DAC_CH_StartNoiseMode>:
XMC_DAC_CH_StartNoiseMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:291
/* API to start the operation in Noise Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartNoiseMode(XMC_DAC_t *const dac,
                                              const uint8_t channel,
                                              const XMC_DAC_CH_TRIGGER_t trigger,
                                              const uint32_t frequency)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	607a      	str	r2, [r7, #4]
 8005272:	603b      	str	r3, [r7, #0]
 8005274:	460b      	mov	r3, r1
 8005276:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:292
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:298

  XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 800527c:	7afb      	ldrb	r3, [r7, #11]
 800527e:	2200      	movs	r2, #0
 8005280:	4619      	mov	r1, r3
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f7ff fe5a 	bl	8004f3c <XMC_DAC_CH_SetMode>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:300

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d107      	bne.n	800529e <XMC_DAC_CH_StartNoiseMode+0x36>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:302
  {
    status = XMC_DAC_CH_SetFrequency(dac, channel, frequency);
 800528e:	7afb      	ldrb	r3, [r7, #11]
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	4619      	mov	r1, r3
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f7ff fec3 	bl	8005020 <XMC_DAC_CH_SetFrequency>
 800529a:	4603      	mov	r3, r0
 800529c:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:305
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 800529e:	7dfb      	ldrb	r3, [r7, #23]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10c      	bne.n	80052be <XMC_DAC_CH_StartNoiseMode+0x56>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:307
  {
    XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 80052a4:	7afb      	ldrb	r3, [r7, #11]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	4619      	mov	r1, r3
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f7ff fe2c 	bl	8004f08 <XMC_DAC_CH_SetTrigger>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:308
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_NOISE);
 80052b0:	7afb      	ldrb	r3, [r7, #11]
 80052b2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80052b6:	4619      	mov	r1, r3
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f7ff fe3f 	bl	8004f3c <XMC_DAC_CH_SetMode>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:311
  }

  return status;
 80052be:	7dfb      	ldrb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:312
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <XMC_DAC_CH_SetPattern>:
XMC_DAC_CH_SetPattern():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:316

/* API to write the pattern data table. */
void XMC_DAC_CH_SetPattern(XMC_DAC_t *const dac, uint8_t channel, const uint8_t *const data)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	460b      	mov	r3, r1
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:324

  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  temp = data[0U];
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:325
  for(index = 1U; index < 6U; ++index)
 80052dc:	2301      	movs	r3, #1
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	e010      	b.n	8005304 <XMC_DAC_CH_SetPattern+0x3c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:327 (discriminator 3)
  {
    temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	4413      	add	r3, r2
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	4619      	mov	r1, r3
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	fa01 f303 	lsl.w	r3, r1, r3
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:325 (discriminator 3)
  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  temp = data[0U];
  for(index = 1U; index < 6U; ++index)
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	3301      	adds	r3, #1
 8005302:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:325 (discriminator 1)
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2b05      	cmp	r3, #5
 8005308:	d9eb      	bls.n	80052e2 <XMC_DAC_CH_SetPattern+0x1a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:329
  {
    temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
  }
  dac->DACPAT[channel].low = temp;
 800530a:	7afa      	ldrb	r2, [r7, #11]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	3204      	adds	r2, #4
 8005310:	6939      	ldr	r1, [r7, #16]
 8005312:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:331

  temp = data[6U];
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3306      	adds	r3, #6
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:332
  for(index = 1U; index < 6U; ++index)
 800531e:	2301      	movs	r3, #1
 8005320:	617b      	str	r3, [r7, #20]
 8005322:	e011      	b.n	8005348 <XMC_DAC_CH_SetPattern+0x80>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:334 (discriminator 3)
  {
    temp |= (uint32_t)data[index + 6U] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	3306      	adds	r3, #6
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	4413      	add	r3, r2
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	4619      	mov	r1, r3
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4613      	mov	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	fa01 f303 	lsl.w	r3, r1, r3
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:332 (discriminator 3)
    temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
  }
  dac->DACPAT[channel].low = temp;

  temp = data[6U];
  for(index = 1U; index < 6U; ++index)
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	3301      	adds	r3, #1
 8005346:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:332 (discriminator 1)
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	2b05      	cmp	r3, #5
 800534c:	d9ea      	bls.n	8005324 <XMC_DAC_CH_SetPattern+0x5c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:336
  {
    temp |= (uint32_t)data[index + 6U] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
  }
  dac->DACPAT[channel].high = temp;
 800534e:	7afb      	ldrb	r3, [r7, #11]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	3304      	adds	r3, #4
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	4413      	add	r3, r2
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dac.c:337
}
 800535c:	bf00      	nop
 800535e:	371c      	adds	r7, #28
 8005360:	46bd      	mov	sp, r7
 8005362:	bc80      	pop	{r7}
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop

08005368 <XMC_DMA_GetEventStatus>:
XMC_DMA_GetEventStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dma.h:526
 * Source transaction complete -> ::XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE      <br>
 * Destination transaction complete -> ::XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE <br>
 * DMA error event -> ::XMC_DMA_CH_EVENT_ERROR                                     <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetEventStatus(XMC_DMA_t *const dma)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dma.h:527
  return (dma->STATUSGLEV);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 3360 	ldr.w	r3, [r3, #864]	; 0x360
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dma.h:528
}
 8005376:	4618      	mov	r0, r3
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	bc80      	pop	{r7}
 800537e:	4770      	bx	lr

08005380 <XMC_DMA_GetChannelsTransferCompleteStatus>:
XMC_DMA_GetChannelsTransferCompleteStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dma.h:541
 *
 * \par
 * The function returns GPDMA transfer complete interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsTransferCompleteStatus(XMC_DMA_t *const dma)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dma.h:542
  return (dma->STATUSCHEV[0]);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dma.h:543
}
 800538e:	4618      	mov	r0, r3
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	bc80      	pop	{r7}
 8005396:	4770      	bx	lr

08005398 <XMC_DMA_GetChannelsBlockCompleteStatus>:
XMC_DMA_GetChannelsBlockCompleteStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dma.h:556
 *
 * \par
 * The function returns GPDMA block transfer complete interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsBlockCompleteStatus(XMC_DMA_t *const dma)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dma.h:557
  return (dma->STATUSCHEV[2]);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dma.h:558
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bc80      	pop	{r7}
 80053ae:	4770      	bx	lr

080053b0 <XMC_DMA_GetChannelsSourceTransactionCompleteStatus>:
XMC_DMA_GetChannelsSourceTransactionCompleteStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dma.h:575
 * \par<b>Note: </b><br>
 * If the source peripheral is memory, the source transaction complete interrupt is
 * ignored.
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsSourceTransactionCompleteStatus(XMC_DMA_t *const dma)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dma.h:576
  return (dma->STATUSCHEV[4]);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dma.h:577
}
 80053be:	4618      	mov	r0, r3
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bc80      	pop	{r7}
 80053c6:	4770      	bx	lr

080053c8 <XMC_DMA_GetChannelsDestinationTransactionCompleteStatus>:
XMC_DMA_GetChannelsDestinationTransactionCompleteStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dma.h:594
 * \par<b>Note: </b><br>
 * If the destination peripheral is memory, the destination transaction complete
 * interrupt is ignored.
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(XMC_DMA_t *const dma)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dma.h:595
  return (dma->STATUSCHEV[6]);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dma.h:596
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	bc80      	pop	{r7}
 80053de:	4770      	bx	lr

080053e0 <XMC_DMA_GetChannelsErrorStatus>:
XMC_DMA_GetChannelsErrorStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dma.h:609
 *
 * \par
 * The function returns error interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsErrorStatus(XMC_DMA_t *const dma)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dma.h:610
  return (dma->STATUSCHEV[8]);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_dma.h:611
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bc80      	pop	{r7}
 80053f6:	4770      	bx	lr

080053f8 <XMC_DMA_Init>:
XMC_DMA_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:111
 * API IMPLEMENTATION
 *******************************************************************************/

/* Initialize GPDMA */
void XMC_DMA_Init(XMC_DMA_t *const dma)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:112
  XMC_DMA_Enable(dma);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f805 	bl	8005410 <XMC_DMA_Enable>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:113
}
 8005406:	bf00      	nop
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop

08005410 <XMC_DMA_Enable>:
XMC_DMA_Enable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:117

/* Enable GPDMA module */
void XMC_DMA_Enable(XMC_DMA_t *const dma)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:119
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a09      	ldr	r2, [pc, #36]	; (8005440 <XMC_DMA_Enable+0x30>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d103      	bne.n	8005428 <XMC_DMA_Enable+0x18>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:125
  {
#endif
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 8005420:	4808      	ldr	r0, [pc, #32]	; (8005444 <XMC_DMA_Enable+0x34>)
 8005422:	f7fc f9b3 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
 8005426:	e002      	b.n	800542e <XMC_DMA_Enable+0x1e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:133
  else
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 8005428:	4807      	ldr	r0, [pc, #28]	; (8005448 <XMC_DMA_Enable+0x38>)
 800542a:	f7fc f9af 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:137
  }
#endif

  dma->DMACFGREG = 0x1U;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:138
}
 8005436:	bf00      	nop
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	50014000 	.word	0x50014000
 8005444:	20000010 	.word	0x20000010
 8005448:	20000020 	.word	0x20000020

0800544c <XMC_DMA_Disable>:
XMC_DMA_Disable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:142

/* Disable GPDMA module */
void XMC_DMA_Disable(XMC_DMA_t *const dma)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:143
  dma->DMACFGREG = 0x0U;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:146

#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a07      	ldr	r2, [pc, #28]	; (800547c <XMC_DMA_Disable+0x30>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d103      	bne.n	800546c <XMC_DMA_Disable+0x20>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:149
  {
#endif
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 8005464:	4806      	ldr	r0, [pc, #24]	; (8005480 <XMC_DMA_Disable+0x34>)
 8005466:	f7fc f975 	bl	8001754 <XMC_SCU_RESET_AssertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:163
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
#endif
  }
#endif
}
 800546a:	e002      	b.n	8005472 <XMC_DMA_Disable+0x26>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:157
#endif
#if defined(GPDMA1)
  }
  else
  {
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 800546c:	4805      	ldr	r0, [pc, #20]	; (8005484 <XMC_DMA_Disable+0x38>)
 800546e:	f7fc f971 	bl	8001754 <XMC_SCU_RESET_AssertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:163
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
#endif
  }
#endif
}
 8005472:	bf00      	nop
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	50014000 	.word	0x50014000
 8005480:	20000010 	.word	0x20000010
 8005484:	20000020 	.word	0x20000020

08005488 <XMC_DMA_IsEnabled>:
XMC_DMA_IsEnabled():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:167

/* Check is the GPDMA peripheral is enabled */
bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:171
  bool status;

#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a1f      	ldr	r2, [pc, #124]	; (8005510 <XMC_DMA_IsEnabled+0x88>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d111      	bne.n	80054bc <XMC_DMA_IsEnabled+0x34>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:174
  {
#endif
    status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 8005498:	481e      	ldr	r0, [pc, #120]	; (8005514 <XMC_DMA_IsEnabled+0x8c>)
 800549a:	f7fc f993 	bl	80017c4 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	bf14      	ite	ne
 80054a4:	2301      	movne	r3, #1
 80054a6:	2300      	moveq	r3, #0
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	f083 0301 	eor.w	r3, r3, #1
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	73fb      	strb	r3, [r7, #15]
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	73fb      	strb	r3, [r7, #15]
 80054ba:	e010      	b.n	80054de <XMC_DMA_IsEnabled+0x56>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:182
#endif
#if defined(GPDMA1)
  }
  else
  {
    status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 80054bc:	4816      	ldr	r0, [pc, #88]	; (8005518 <XMC_DMA_IsEnabled+0x90>)
 80054be:	f7fc f981 	bl	80017c4 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	bf14      	ite	ne
 80054c8:	2301      	movne	r3, #1
 80054ca:	2300      	moveq	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	f083 0301 	eor.w	r3, r3, #1
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	73fb      	strb	r3, [r7, #15]
 80054d6:	7bfb      	ldrb	r3, [r7, #15]
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:190
#endif
  }
#endif

  /* DMA reset is not asserted and peripheral clock is not gated */
  if (status == true)
 80054de:	7bfb      	ldrb	r3, [r7, #15]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00f      	beq.n	8005504 <XMC_DMA_IsEnabled+0x7c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:192
  {
    status = status && (dma->DMACFGREG != 0U);
 80054e4:	7bfb      	ldrb	r3, [r7, #15]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d006      	beq.n	80054f8 <XMC_DMA_IsEnabled+0x70>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:192 (discriminator 1)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 3398 	ldr.w	r3, [r3, #920]	; 0x398
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <XMC_DMA_IsEnabled+0x70>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:192 (discriminator 3)
 80054f4:	2301      	movs	r3, #1
 80054f6:	e000      	b.n	80054fa <XMC_DMA_IsEnabled+0x72>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:192 (discriminator 4)
 80054f8:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:192 (discriminator 6)
 80054fa:	73fb      	strb	r3, [r7, #15]
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:195
  }

  return status;
 8005504:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:196
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	50014000 	.word	0x50014000
 8005514:	20000010 	.word	0x20000010
 8005518:	20000020 	.word	0x20000020

0800551c <XMC_DMA_EnableRequestLine>:
XMC_DMA_EnableRequestLine():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:200

/* Enable request line */
void XMC_DMA_EnableRequestLine(XMC_DMA_t *const dma, uint8_t line, uint8_t peripheral)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	460b      	mov	r3, r1
 8005526:	70fb      	strb	r3, [r7, #3]
 8005528:	4613      	mov	r3, r2
 800552a:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:202
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a20      	ldr	r2, [pc, #128]	; (80055b0 <XMC_DMA_EnableRequestLine+0x94>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d11c      	bne.n	800556e <XMC_DMA_EnableRequestLine+0x52>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:205
  {
#endif
    DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8005534:	481f      	ldr	r0, [pc, #124]	; (80055b4 <XMC_DMA_EnableRequestLine+0x98>)
 8005536:	4b1f      	ldr	r3, [pc, #124]	; (80055b4 <XMC_DMA_EnableRequestLine+0x98>)
 8005538:	689a      	ldr	r2, [r3, #8]
 800553a:	78fb      	ldrb	r3, [r7, #3]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	210f      	movs	r1, #15
 8005540:	fa01 f303 	lsl.w	r3, r1, r3
 8005544:	43db      	mvns	r3, r3
 8005546:	401a      	ands	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:206
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 8005548:	78b9      	ldrb	r1, [r7, #2]
 800554a:	78fb      	ldrb	r3, [r7, #3]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	fa01 f303 	lsl.w	r3, r1, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:205
{
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
  {
#endif
    DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8005552:	4313      	orrs	r3, r2
 8005554:	6083      	str	r3, [r0, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:207
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
    DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
 8005556:	4917      	ldr	r1, [pc, #92]	; (80055b4 <XMC_DMA_EnableRequestLine+0x98>)
 8005558:	4b16      	ldr	r3, [pc, #88]	; (80055b4 <XMC_DMA_EnableRequestLine+0x98>)
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	78fb      	ldrb	r3, [r7, #3]
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	2001      	movs	r0, #1
 8005564:	fa00 f303 	lsl.w	r3, r0, r3
 8005568:	4313      	orrs	r3, r2
 800556a:	610b      	str	r3, [r1, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:217
    DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
    DLR->LNEN |= (0x100UL << line);
  }
#endif
}
 800556c:	e01a      	b.n	80055a4 <XMC_DMA_EnableRequestLine+0x88>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:212
    DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
#if defined(GPDMA1)
  }
  else
  {
    DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 800556e:	4811      	ldr	r0, [pc, #68]	; (80055b4 <XMC_DMA_EnableRequestLine+0x98>)
 8005570:	4b10      	ldr	r3, [pc, #64]	; (80055b4 <XMC_DMA_EnableRequestLine+0x98>)
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	78fb      	ldrb	r3, [r7, #3]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	210f      	movs	r1, #15
 800557a:	fa01 f303 	lsl.w	r3, r1, r3
 800557e:	43db      	mvns	r3, r3
 8005580:	401a      	ands	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:213
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 8005582:	78b9      	ldrb	r1, [r7, #2]
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	fa01 f303 	lsl.w	r3, r1, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:212
    DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
#if defined(GPDMA1)
  }
  else
  {
    DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 800558c:	4313      	orrs	r3, r2
 800558e:	60c3      	str	r3, [r0, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:214
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
    DLR->LNEN |= (0x100UL << line);
 8005590:	4908      	ldr	r1, [pc, #32]	; (80055b4 <XMC_DMA_EnableRequestLine+0x98>)
 8005592:	4b08      	ldr	r3, [pc, #32]	; (80055b4 <XMC_DMA_EnableRequestLine+0x98>)
 8005594:	691a      	ldr	r2, [r3, #16]
 8005596:	78fb      	ldrb	r3, [r7, #3]
 8005598:	f44f 7080 	mov.w	r0, #256	; 0x100
 800559c:	fa00 f303 	lsl.w	r3, r0, r3
 80055a0:	4313      	orrs	r3, r2
 80055a2:	610b      	str	r3, [r1, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:217
  }
#endif
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bc80      	pop	{r7}
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	50014000 	.word	0x50014000
 80055b4:	50004900 	.word	0x50004900

080055b8 <XMC_DMA_DisableRequestLine>:
XMC_DMA_DisableRequestLine():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:220

void XMC_DMA_DisableRequestLine(XMC_DMA_t *const dma, uint8_t line)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:222
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a0f      	ldr	r2, [pc, #60]	; (8005604 <XMC_DMA_DisableRequestLine+0x4c>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d10a      	bne.n	80055e2 <XMC_DMA_DisableRequestLine+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:225
  {
#endif
    DLR->LNEN &= ~(0x1UL << line);
 80055cc:	490e      	ldr	r1, [pc, #56]	; (8005608 <XMC_DMA_DisableRequestLine+0x50>)
 80055ce:	4b0e      	ldr	r3, [pc, #56]	; (8005608 <XMC_DMA_DisableRequestLine+0x50>)
 80055d0:	691a      	ldr	r2, [r3, #16]
 80055d2:	78fb      	ldrb	r3, [r7, #3]
 80055d4:	2001      	movs	r0, #1
 80055d6:	fa00 f303 	lsl.w	r3, r0, r3
 80055da:	43db      	mvns	r3, r3
 80055dc:	4013      	ands	r3, r2
 80055de:	610b      	str	r3, [r1, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:233
  else
  {
    DLR->LNEN &= ~(0x100UL << line);
  }
#endif
}
 80055e0:	e00a      	b.n	80055f8 <XMC_DMA_DisableRequestLine+0x40>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:230
    DLR->LNEN &= ~(0x1UL << line);
#if defined(GPDMA1)
  }
  else
  {
    DLR->LNEN &= ~(0x100UL << line);
 80055e2:	4909      	ldr	r1, [pc, #36]	; (8005608 <XMC_DMA_DisableRequestLine+0x50>)
 80055e4:	4b08      	ldr	r3, [pc, #32]	; (8005608 <XMC_DMA_DisableRequestLine+0x50>)
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	78fb      	ldrb	r3, [r7, #3]
 80055ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80055ee:	fa00 f303 	lsl.w	r3, r0, r3
 80055f2:	43db      	mvns	r3, r3
 80055f4:	4013      	ands	r3, r2
 80055f6:	610b      	str	r3, [r1, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:233
  }
#endif
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bc80      	pop	{r7}
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	50014000 	.word	0x50014000
 8005608:	50004900 	.word	0x50004900

0800560c <XMC_DMA_ClearRequestLine>:
XMC_DMA_ClearRequestLine():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:236

void XMC_DMA_ClearRequestLine(XMC_DMA_t *const dma, uint8_t line)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	460b      	mov	r3, r1
 8005616:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:238
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a18      	ldr	r2, [pc, #96]	; (800567c <XMC_DMA_ClearRequestLine+0x70>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d113      	bne.n	8005648 <XMC_DMA_ClearRequestLine+0x3c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:241
  {
#endif
    DLR->LNEN &= ~(0x1UL << line);
 8005620:	4917      	ldr	r1, [pc, #92]	; (8005680 <XMC_DMA_ClearRequestLine+0x74>)
 8005622:	4b17      	ldr	r3, [pc, #92]	; (8005680 <XMC_DMA_ClearRequestLine+0x74>)
 8005624:	691a      	ldr	r2, [r3, #16]
 8005626:	78fb      	ldrb	r3, [r7, #3]
 8005628:	2001      	movs	r0, #1
 800562a:	fa00 f303 	lsl.w	r3, r0, r3
 800562e:	43db      	mvns	r3, r3
 8005630:	4013      	ands	r3, r2
 8005632:	610b      	str	r3, [r1, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:242
	DLR->LNEN |= 0x1UL << line;
 8005634:	4912      	ldr	r1, [pc, #72]	; (8005680 <XMC_DMA_ClearRequestLine+0x74>)
 8005636:	4b12      	ldr	r3, [pc, #72]	; (8005680 <XMC_DMA_ClearRequestLine+0x74>)
 8005638:	691a      	ldr	r2, [r3, #16]
 800563a:	78fb      	ldrb	r3, [r7, #3]
 800563c:	2001      	movs	r0, #1
 800563e:	fa00 f303 	lsl.w	r3, r0, r3
 8005642:	4313      	orrs	r3, r2
 8005644:	610b      	str	r3, [r1, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:251
  {
    DLR->LNEN &= ~(0x100UL << line);
	DLR->LNEN |= 0x100UL << line;
  }
#endif
}
 8005646:	e014      	b.n	8005672 <XMC_DMA_ClearRequestLine+0x66>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:247
	DLR->LNEN |= 0x1UL << line;
#if defined(GPDMA1)
  }
  else
  {
    DLR->LNEN &= ~(0x100UL << line);
 8005648:	490d      	ldr	r1, [pc, #52]	; (8005680 <XMC_DMA_ClearRequestLine+0x74>)
 800564a:	4b0d      	ldr	r3, [pc, #52]	; (8005680 <XMC_DMA_ClearRequestLine+0x74>)
 800564c:	691a      	ldr	r2, [r3, #16]
 800564e:	78fb      	ldrb	r3, [r7, #3]
 8005650:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005654:	fa00 f303 	lsl.w	r3, r0, r3
 8005658:	43db      	mvns	r3, r3
 800565a:	4013      	ands	r3, r2
 800565c:	610b      	str	r3, [r1, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:248
	DLR->LNEN |= 0x100UL << line;
 800565e:	4908      	ldr	r1, [pc, #32]	; (8005680 <XMC_DMA_ClearRequestLine+0x74>)
 8005660:	4b07      	ldr	r3, [pc, #28]	; (8005680 <XMC_DMA_ClearRequestLine+0x74>)
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	78fb      	ldrb	r3, [r7, #3]
 8005666:	f44f 7080 	mov.w	r0, #256	; 0x100
 800566a:	fa00 f303 	lsl.w	r3, r0, r3
 800566e:	4313      	orrs	r3, r2
 8005670:	610b      	str	r3, [r1, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:251
  }
#endif
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	bc80      	pop	{r7}
 800567a:	4770      	bx	lr
 800567c:	50014000 	.word	0x50014000
 8005680:	50004900 	.word	0x50004900

08005684 <XMC_DMA_GetOverrunStatus>:
XMC_DMA_GetOverrunStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:255

/* Get DMA DLR overrun status */
bool XMC_DMA_GetOverrunStatus(XMC_DMA_t *const dma, uint8_t line)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:259
  bool status;

#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a11      	ldr	r2, [pc, #68]	; (80056d8 <XMC_DMA_GetOverrunStatus+0x54>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d10c      	bne.n	80056b2 <XMC_DMA_GetOverrunStatus+0x2e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:262
  {
#endif
    status = (bool)(DLR->OVRSTAT & (0x1UL << line));
 8005698:	4b10      	ldr	r3, [pc, #64]	; (80056dc <XMC_DMA_GetOverrunStatus+0x58>)
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	78fb      	ldrb	r3, [r7, #3]
 800569e:	fa22 f303 	lsr.w	r3, r2, r3
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	bf14      	ite	ne
 80056aa:	2301      	movne	r3, #1
 80056ac:	2300      	moveq	r3, #0
 80056ae:	73fb      	strb	r3, [r7, #15]
 80056b0:	e00c      	b.n	80056cc <XMC_DMA_GetOverrunStatus+0x48>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:267
#if defined(GPDMA1)
  }
  else
  {
    status = (bool)(DLR->OVRSTAT & (0x100UL << line));
 80056b2:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <XMC_DMA_GetOverrunStatus+0x58>)
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056bc:	fa01 f303 	lsl.w	r3, r1, r3
 80056c0:	4013      	ands	r3, r2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	bf14      	ite	ne
 80056c6:	2301      	movne	r3, #1
 80056c8:	2300      	moveq	r3, #0
 80056ca:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:271
  }
#endif

  return status;
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:272
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bc80      	pop	{r7}
 80056d6:	4770      	bx	lr
 80056d8:	50014000 	.word	0x50014000
 80056dc:	50004900 	.word	0x50004900

080056e0 <XMC_DMA_ClearOverrunStatus>:
XMC_DMA_ClearOverrunStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:276

/* Clear DMA DLR overrun status */
void XMC_DMA_ClearOverrunStatus(XMC_DMA_t *const dma, const uint8_t line)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	460b      	mov	r3, r1
 80056ea:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:278
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a0b      	ldr	r2, [pc, #44]	; (800571c <XMC_DMA_ClearOverrunStatus+0x3c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d106      	bne.n	8005702 <XMC_DMA_ClearOverrunStatus+0x22>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:281
  {
#endif
    DLR->OVRCLR = (uint32_t)(0x1UL << line);
 80056f4:	4a0a      	ldr	r2, [pc, #40]	; (8005720 <XMC_DMA_ClearOverrunStatus+0x40>)
 80056f6:	78fb      	ldrb	r3, [r7, #3]
 80056f8:	2101      	movs	r1, #1
 80056fa:	fa01 f303 	lsl.w	r3, r1, r3
 80056fe:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:289
  else
  {
    DLR->OVRCLR = (uint32_t)(0x100UL << line);
  }
#endif
}
 8005700:	e006      	b.n	8005710 <XMC_DMA_ClearOverrunStatus+0x30>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:286
    DLR->OVRCLR = (uint32_t)(0x1UL << line);
#if defined(GPDMA1)
  }
  else
  {
    DLR->OVRCLR = (uint32_t)(0x100UL << line);
 8005702:	4a07      	ldr	r2, [pc, #28]	; (8005720 <XMC_DMA_ClearOverrunStatus+0x40>)
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	f44f 7180 	mov.w	r1, #256	; 0x100
 800570a:	fa01 f303 	lsl.w	r3, r1, r3
 800570e:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:289
  }
#endif
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	bc80      	pop	{r7}
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	50014000 	.word	0x50014000
 8005720:	50004900 	.word	0x50004900

08005724 <XMC_DMA_CH_Disable>:
XMC_DMA_CH_Disable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:293

/* Disable DMA channel */
void XMC_DMA_CH_Disable(XMC_DMA_t *const dma, const uint8_t channel)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	460b      	mov	r3, r1
 800572e:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:294
  dma->CHENREG = (uint32_t)(0x100UL << channel);
 8005730:	78fb      	ldrb	r3, [r7, #3]
 8005732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005736:	409a      	lsls	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:295
  while((dma->CHENREG & (uint32_t)(0x1UL << channel)) != 0U)
 800573e:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:295 (discriminator 1)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
 8005746:	78fb      	ldrb	r3, [r7, #3]
 8005748:	fa22 f303 	lsr.w	r3, r2, r3
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1f5      	bne.n	8005740 <XMC_DMA_CH_Disable+0x1c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:299
  {
    /* wait until channel is disabled */
  }
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	bc80      	pop	{r7}
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop

08005760 <XMC_DMA_CH_IsEnabled>:
XMC_DMA_CH_IsEnabled():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:303

/* Check if a DMA channel is enabled */
bool XMC_DMA_CH_IsEnabled(XMC_DMA_t *const dma, const uint8_t channel)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	460b      	mov	r3, r1
 800576a:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:304
  return (bool)(dma->CHENREG & ((uint32_t)1U << channel));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
 8005772:	78fb      	ldrb	r3, [r7, #3]
 8005774:	fa22 f303 	lsr.w	r3, r2, r3
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	bf14      	ite	ne
 8005780:	2301      	movne	r3, #1
 8005782:	2300      	moveq	r3, #0
 8005784:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:305
}
 8005786:	4618      	mov	r0, r3
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	bc80      	pop	{r7}
 800578e:	4770      	bx	lr

08005790 <XMC_DMA_CH_Init>:
XMC_DMA_CH_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:309

/* Initialize DMA channel */
XMC_DMA_CH_STATUS_t XMC_DMA_CH_Init(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_CONFIG_t *const config)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	460b      	mov	r3, r1
 800579a:	607a      	str	r2, [r7, #4]
 800579c:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:314
  XMC_DMA_CH_STATUS_t status;
  uint8_t line;
  uint8_t peripheral;

  if (XMC_DMA_IsEnabled(dma) == true)
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f7ff fe72 	bl	8005488 <XMC_DMA_IsEnabled>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 81ef 	beq.w	8005b8a <XMC_DMA_CH_Init+0x3fa>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:316
  {
    if (XMC_DMA_CH_IsEnabled(dma, channel) == false)
 80057ac:	7afb      	ldrb	r3, [r7, #11]
 80057ae:	4619      	mov	r1, r3
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f7ff ffd5 	bl	8005760 <XMC_DMA_CH_IsEnabled>
 80057b6:	4603      	mov	r3, r0
 80057b8:	f083 0301 	eor.w	r3, r3, #1
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 81e0 	beq.w	8005b84 <XMC_DMA_CH_Init+0x3f4>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:318
    {
      dma->CH[channel].SAR = config->src_addr;
 80057c4:	7afb      	ldrb	r3, [r7, #11]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	6852      	ldr	r2, [r2, #4]
 80057ca:	68f9      	ldr	r1, [r7, #12]
 80057cc:	2058      	movs	r0, #88	; 0x58
 80057ce:	fb00 f303 	mul.w	r3, r0, r3
 80057d2:	440b      	add	r3, r1
 80057d4:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:319
      dma->CH[channel].DAR = config->dst_addr;
 80057d6:	7afb      	ldrb	r3, [r7, #11]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6892      	ldr	r2, [r2, #8]
 80057dc:	68f9      	ldr	r1, [r7, #12]
 80057de:	2058      	movs	r0, #88	; 0x58
 80057e0:	fb00 f303 	mul.w	r3, r0, r3
 80057e4:	440b      	add	r3, r1
 80057e6:	3308      	adds	r3, #8
 80057e8:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:320
      dma->CH[channel].LLP = (uint32_t)config->linked_list_pointer;
 80057ea:	7afb      	ldrb	r3, [r7, #11]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	68d2      	ldr	r2, [r2, #12]
 80057f0:	4610      	mov	r0, r2
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	2158      	movs	r1, #88	; 0x58
 80057f6:	fb01 f303 	mul.w	r3, r1, r3
 80057fa:	4413      	add	r3, r2
 80057fc:	3310      	adds	r3, #16
 80057fe:	6018      	str	r0, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:321
      dma->CH[channel].CTLH = (uint32_t)config->block_size;
 8005800:	7afb      	ldrb	r3, [r7, #11]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	8b12      	ldrh	r2, [r2, #24]
 8005806:	4610      	mov	r0, r2
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	2158      	movs	r1, #88	; 0x58
 800580c:	fb01 f303 	mul.w	r3, r1, r3
 8005810:	4413      	add	r3, r2
 8005812:	331c      	adds	r3, #28
 8005814:	6018      	str	r0, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:322
      dma->CH[channel].CTLL = config->control;
 8005816:	7afb      	ldrb	r3, [r7, #11]
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6812      	ldr	r2, [r2, #0]
 800581c:	68f9      	ldr	r1, [r7, #12]
 800581e:	2058      	movs	r0, #88	; 0x58
 8005820:	fb00 f303 	mul.w	r3, r0, r3
 8005824:	440b      	add	r3, r1
 8005826:	3318      	adds	r3, #24
 8005828:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:324

      dma->CH[channel].CFGL = (uint32_t)((uint32_t)config->priority |
 800582a:	7afb      	ldrb	r3, [r7, #11]
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	7ed2      	ldrb	r2, [r2, #27]
 8005830:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 8005834:	68f9      	ldr	r1, [r7, #12]
 8005836:	2058      	movs	r0, #88	; 0x58
 8005838:	fb00 f303 	mul.w	r3, r0, r3
 800583c:	440b      	add	r3, r1
 800583e:	3340      	adds	r3, #64	; 0x40
 8005840:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:328
                                         (uint32_t)GPDMA0_CH_CFGL_HS_SEL_SRC_Msk |
                                         (uint32_t)GPDMA0_CH_CFGL_HS_SEL_DST_Msk);

      if ((dma == XMC_DMA0) && (channel < (uint8_t)2))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4ab0      	ldr	r2, [pc, #704]	; (8005b08 <XMC_DMA_CH_Init+0x378>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d116      	bne.n	8005878 <XMC_DMA_CH_Init+0xe8>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:328 (discriminator 1)
 800584a:	7afb      	ldrb	r3, [r7, #11]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d813      	bhi.n	8005878 <XMC_DMA_CH_Init+0xe8>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:331
      {
        /* Configure scatter and gather */
        dma->CH[channel].SGR = config->src_gather_control;
 8005850:	7afb      	ldrb	r3, [r7, #11]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6912      	ldr	r2, [r2, #16]
 8005856:	68f9      	ldr	r1, [r7, #12]
 8005858:	2058      	movs	r0, #88	; 0x58
 800585a:	fb00 f303 	mul.w	r3, r0, r3
 800585e:	440b      	add	r3, r1
 8005860:	3348      	adds	r3, #72	; 0x48
 8005862:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:332
        dma->CH[channel].DSR = config->dst_scatter_control;
 8005864:	7afb      	ldrb	r3, [r7, #11]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6952      	ldr	r2, [r2, #20]
 800586a:	68f9      	ldr	r1, [r7, #12]
 800586c:	2058      	movs	r0, #88	; 0x58
 800586e:	fb00 f303 	mul.w	r3, r0, r3
 8005872:	440b      	add	r3, r1
 8005874:	3350      	adds	r3, #80	; 0x50
 8005876:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:335
      }

      if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	8c1b      	ldrh	r3, [r3, #32]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d14e      	bne.n	800591e <XMC_DMA_CH_Init+0x18e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:338
      {
        /* Hardware handshaking interface configuration */
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	789b      	ldrb	r3, [r3, #2]
 8005884:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b10      	cmp	r3, #16
 800588c:	d006      	beq.n	800589c <XMC_DMA_CH_Init+0x10c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:339 (discriminator 1)
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	789b      	ldrb	r3, [r3, #2]
 8005892:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005896:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:338 (discriminator 1)
      }

      if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
      {
        /* Hardware handshaking interface configuration */
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 8005898:	2b30      	cmp	r3, #48	; 0x30
 800589a:	d140      	bne.n	800591e <XMC_DMA_CH_Init+0x18e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:342
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
        {
#if defined(GPDMA1)
          if (dma == XMC_DMA0)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4a9a      	ldr	r2, [pc, #616]	; (8005b08 <XMC_DMA_CH_Init+0x378>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d106      	bne.n	80058b2 <XMC_DMA_CH_Init+0x122>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:345
          {
#endif
            line = config->dst_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80058aa:	f003 0307 	and.w	r3, r3, #7
 80058ae:	75bb      	strb	r3, [r7, #22]
 80058b0:	e005      	b.n	80058be <XMC_DMA_CH_Init+0x12e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:350
#if defined(GPDMA1)
          }
          else
          {
            line = config->dst_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80058b8:	f003 0303 	and.w	r3, r3, #3
 80058bc:	75bb      	strb	r3, [r7, #22]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:353
          }
#endif
          peripheral = config->dst_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80058c4:	091b      	lsrs	r3, r3, #4
 80058c6:	757b      	strb	r3, [r7, #21]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:355

          dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_DEST_PER_Pos);
 80058c8:	7afb      	ldrb	r3, [r7, #11]
 80058ca:	7afa      	ldrb	r2, [r7, #11]
 80058cc:	68f9      	ldr	r1, [r7, #12]
 80058ce:	2058      	movs	r0, #88	; 0x58
 80058d0:	fb00 f202 	mul.w	r2, r0, r2
 80058d4:	440a      	add	r2, r1
 80058d6:	3244      	adds	r2, #68	; 0x44
 80058d8:	6811      	ldr	r1, [r2, #0]
 80058da:	7dba      	ldrb	r2, [r7, #22]
 80058dc:	02d2      	lsls	r2, r2, #11
 80058de:	430a      	orrs	r2, r1
 80058e0:	68f9      	ldr	r1, [r7, #12]
 80058e2:	2058      	movs	r0, #88	; 0x58
 80058e4:	fb00 f303 	mul.w	r3, r0, r3
 80058e8:	440b      	add	r3, r1
 80058ea:	3344      	adds	r3, #68	; 0x44
 80058ec:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:356
          XMC_DMA_EnableRequestLine(dma, line, peripheral);
 80058ee:	7d7a      	ldrb	r2, [r7, #21]
 80058f0:	7dbb      	ldrb	r3, [r7, #22]
 80058f2:	4619      	mov	r1, r3
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f7ff fe11 	bl	800551c <XMC_DMA_EnableRequestLine>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:357
          dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_DST_Msk;
 80058fa:	7afb      	ldrb	r3, [r7, #11]
 80058fc:	7afa      	ldrb	r2, [r7, #11]
 80058fe:	68f9      	ldr	r1, [r7, #12]
 8005900:	2058      	movs	r0, #88	; 0x58
 8005902:	fb00 f202 	mul.w	r2, r0, r2
 8005906:	440a      	add	r2, r1
 8005908:	3240      	adds	r2, #64	; 0x40
 800590a:	6812      	ldr	r2, [r2, #0]
 800590c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005910:	68f9      	ldr	r1, [r7, #12]
 8005912:	2058      	movs	r0, #88	; 0x58
 8005914:	fb00 f303 	mul.w	r3, r0, r3
 8005918:	440b      	add	r3, r1
 800591a:	3340      	adds	r3, #64	; 0x40
 800591c:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:362
        }
      }


      if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	8b9b      	ldrh	r3, [r3, #28]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d14b      	bne.n	80059be <XMC_DMA_CH_Init+0x22e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:364
      {
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	789b      	ldrb	r3, [r3, #2]
 800592a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b20      	cmp	r3, #32
 8005932:	d006      	beq.n	8005942 <XMC_DMA_CH_Init+0x1b2>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:365 (discriminator 1)
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	789b      	ldrb	r3, [r3, #2]
 8005938:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800593c:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:364 (discriminator 1)
      }


      if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
      {
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 800593e:	2b30      	cmp	r3, #48	; 0x30
 8005940:	d13d      	bne.n	80059be <XMC_DMA_CH_Init+0x22e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:368
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
        {
#if defined(GPDMA1)
          if (dma == XMC_DMA0)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4a70      	ldr	r2, [pc, #448]	; (8005b08 <XMC_DMA_CH_Init+0x378>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d105      	bne.n	8005956 <XMC_DMA_CH_Init+0x1c6>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:371
          {
#endif
            line = config->src_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	7f9b      	ldrb	r3, [r3, #30]
 800594e:	f003 0307 	and.w	r3, r3, #7
 8005952:	75bb      	strb	r3, [r7, #22]
 8005954:	e004      	b.n	8005960 <XMC_DMA_CH_Init+0x1d0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:376
#if defined(GPDMA1)
          }
          else
          {
            line = config->src_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	7f9b      	ldrb	r3, [r3, #30]
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	75bb      	strb	r3, [r7, #22]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:379
          }
#endif
          peripheral = config->src_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	7f9b      	ldrb	r3, [r3, #30]
 8005964:	091b      	lsrs	r3, r3, #4
 8005966:	757b      	strb	r3, [r7, #21]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:381

          dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_SRC_PER_Pos);
 8005968:	7afb      	ldrb	r3, [r7, #11]
 800596a:	7afa      	ldrb	r2, [r7, #11]
 800596c:	68f9      	ldr	r1, [r7, #12]
 800596e:	2058      	movs	r0, #88	; 0x58
 8005970:	fb00 f202 	mul.w	r2, r0, r2
 8005974:	440a      	add	r2, r1
 8005976:	3244      	adds	r2, #68	; 0x44
 8005978:	6811      	ldr	r1, [r2, #0]
 800597a:	7dba      	ldrb	r2, [r7, #22]
 800597c:	01d2      	lsls	r2, r2, #7
 800597e:	430a      	orrs	r2, r1
 8005980:	68f9      	ldr	r1, [r7, #12]
 8005982:	2058      	movs	r0, #88	; 0x58
 8005984:	fb00 f303 	mul.w	r3, r0, r3
 8005988:	440b      	add	r3, r1
 800598a:	3344      	adds	r3, #68	; 0x44
 800598c:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:382
          XMC_DMA_EnableRequestLine(dma, line, peripheral);
 800598e:	7d7a      	ldrb	r2, [r7, #21]
 8005990:	7dbb      	ldrb	r3, [r7, #22]
 8005992:	4619      	mov	r1, r3
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f7ff fdc1 	bl	800551c <XMC_DMA_EnableRequestLine>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:383
          dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_SRC_Msk;
 800599a:	7afb      	ldrb	r3, [r7, #11]
 800599c:	7afa      	ldrb	r2, [r7, #11]
 800599e:	68f9      	ldr	r1, [r7, #12]
 80059a0:	2058      	movs	r0, #88	; 0x58
 80059a2:	fb00 f202 	mul.w	r2, r0, r2
 80059a6:	440a      	add	r2, r1
 80059a8:	3240      	adds	r2, #64	; 0x40
 80059aa:	6812      	ldr	r2, [r2, #0]
 80059ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059b0:	68f9      	ldr	r1, [r7, #12]
 80059b2:	2058      	movs	r0, #88	; 0x58
 80059b4:	fb00 f303 	mul.w	r3, r0, r3
 80059b8:	440b      	add	r3, r1
 80059ba:	3340      	adds	r3, #64	; 0x40
 80059bc:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:387
        }
      }
      
      XMC_DMA_CH_ClearEventStatus(dma, channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE |
 80059be:	7afb      	ldrb	r3, [r7, #11]
 80059c0:	221f      	movs	r2, #31
 80059c2:	4619      	mov	r1, r3
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 f98d 	bl	8005ce4 <XMC_DMA_CH_ClearEventStatus>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:393
                                                           (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
                                                           (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
                                                           (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE |
                                                           (uint32_t)XMC_DMA_CH_EVENT_ERROR));

      switch (config->transfer_type)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	7e9b      	ldrb	r3, [r3, #26]
 80059ce:	2b08      	cmp	r3, #8
 80059d0:	f200 80d4 	bhi.w	8005b7c <XMC_DMA_CH_Init+0x3ec>
 80059d4:	a201      	add	r2, pc, #4	; (adr r2, 80059dc <XMC_DMA_CH_Init+0x24c>)
 80059d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059da:	bf00      	nop
 80059dc:	08005b7d 	.word	0x08005b7d
 80059e0:	08005a01 	.word	0x08005a01
 80059e4:	08005a27 	.word	0x08005a27
 80059e8:	08005a4d 	.word	0x08005a4d
 80059ec:	08005a73 	.word	0x08005a73
 80059f0:	08005a99 	.word	0x08005a99
 80059f4:	08005ae3 	.word	0x08005ae3
 80059f8:	08005b0d 	.word	0x08005b0d
 80059fc:	08005b57 	.word	0x08005b57
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:399
      {
        case XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK:
          break;

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 8005a00:	7afb      	ldrb	r3, [r7, #11]
 8005a02:	7afa      	ldrb	r2, [r7, #11]
 8005a04:	68f9      	ldr	r1, [r7, #12]
 8005a06:	2058      	movs	r0, #88	; 0x58
 8005a08:	fb00 f202 	mul.w	r2, r0, r2
 8005a0c:	440a      	add	r2, r1
 8005a0e:	3240      	adds	r2, #64	; 0x40
 8005a10:	6812      	ldr	r2, [r2, #0]
 8005a12:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005a16:	68f9      	ldr	r1, [r7, #12]
 8005a18:	2058      	movs	r0, #88	; 0x58
 8005a1a:	fb00 f303 	mul.w	r3, r0, r3
 8005a1e:	440b      	add	r3, r1
 8005a20:	3340      	adds	r3, #64	; 0x40
 8005a22:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:400
          break;
 8005a24:	e0ab      	b.n	8005b7e <XMC_DMA_CH_Init+0x3ee>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:403

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 8005a26:	7afb      	ldrb	r3, [r7, #11]
 8005a28:	7afa      	ldrb	r2, [r7, #11]
 8005a2a:	68f9      	ldr	r1, [r7, #12]
 8005a2c:	2058      	movs	r0, #88	; 0x58
 8005a2e:	fb00 f202 	mul.w	r2, r0, r2
 8005a32:	440a      	add	r2, r1
 8005a34:	3240      	adds	r2, #64	; 0x40
 8005a36:	6812      	ldr	r2, [r2, #0]
 8005a38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005a3c:	68f9      	ldr	r1, [r7, #12]
 8005a3e:	2058      	movs	r0, #88	; 0x58
 8005a40:	fb00 f303 	mul.w	r3, r0, r3
 8005a44:	440b      	add	r3, r1
 8005a46:	3340      	adds	r3, #64	; 0x40
 8005a48:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:404
          break;
 8005a4a:	e098      	b.n	8005b7e <XMC_DMA_CH_Init+0x3ee>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:407

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)((uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk |
 8005a4c:	7afb      	ldrb	r3, [r7, #11]
 8005a4e:	7afa      	ldrb	r2, [r7, #11]
 8005a50:	68f9      	ldr	r1, [r7, #12]
 8005a52:	2058      	movs	r0, #88	; 0x58
 8005a54:	fb00 f202 	mul.w	r2, r0, r2
 8005a58:	440a      	add	r2, r1
 8005a5a:	3240      	adds	r2, #64	; 0x40
 8005a5c:	6812      	ldr	r2, [r2, #0]
 8005a5e:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8005a62:	68f9      	ldr	r1, [r7, #12]
 8005a64:	2058      	movs	r0, #88	; 0x58
 8005a66:	fb00 f303 	mul.w	r3, r0, r3
 8005a6a:	440b      	add	r3, r1
 8005a6c:	3340      	adds	r3, #64	; 0x40
 8005a6e:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:409
                                              (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
          break;
 8005a70:	e085      	b.n	8005b7e <XMC_DMA_CH_Init+0x3ee>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:412

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED:
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 8005a72:	7afb      	ldrb	r3, [r7, #11]
 8005a74:	7afa      	ldrb	r2, [r7, #11]
 8005a76:	68f9      	ldr	r1, [r7, #12]
 8005a78:	2058      	movs	r0, #88	; 0x58
 8005a7a:	fb00 f202 	mul.w	r2, r0, r2
 8005a7e:	440a      	add	r2, r1
 8005a80:	3218      	adds	r2, #24
 8005a82:	6812      	ldr	r2, [r2, #0]
 8005a84:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8005a88:	68f9      	ldr	r1, [r7, #12]
 8005a8a:	2058      	movs	r0, #88	; 0x58
 8005a8c:	fb00 f303 	mul.w	r3, r0, r3
 8005a90:	440b      	add	r3, r1
 8005a92:	3318      	adds	r3, #24
 8005a94:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:413
          break;
 8005a96:	e072      	b.n	8005b7e <XMC_DMA_CH_Init+0x3ee>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:416

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 8005a98:	7afb      	ldrb	r3, [r7, #11]
 8005a9a:	7afa      	ldrb	r2, [r7, #11]
 8005a9c:	68f9      	ldr	r1, [r7, #12]
 8005a9e:	2058      	movs	r0, #88	; 0x58
 8005aa0:	fb00 f202 	mul.w	r2, r0, r2
 8005aa4:	440a      	add	r2, r1
 8005aa6:	3240      	adds	r2, #64	; 0x40
 8005aa8:	6812      	ldr	r2, [r2, #0]
 8005aaa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005aae:	68f9      	ldr	r1, [r7, #12]
 8005ab0:	2058      	movs	r0, #88	; 0x58
 8005ab2:	fb00 f303 	mul.w	r3, r0, r3
 8005ab6:	440b      	add	r3, r1
 8005ab8:	3340      	adds	r3, #64	; 0x40
 8005aba:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:417
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 8005abc:	7afb      	ldrb	r3, [r7, #11]
 8005abe:	7afa      	ldrb	r2, [r7, #11]
 8005ac0:	68f9      	ldr	r1, [r7, #12]
 8005ac2:	2058      	movs	r0, #88	; 0x58
 8005ac4:	fb00 f202 	mul.w	r2, r0, r2
 8005ac8:	440a      	add	r2, r1
 8005aca:	3218      	adds	r2, #24
 8005acc:	6812      	ldr	r2, [r2, #0]
 8005ace:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8005ad2:	68f9      	ldr	r1, [r7, #12]
 8005ad4:	2058      	movs	r0, #88	; 0x58
 8005ad6:	fb00 f303 	mul.w	r3, r0, r3
 8005ada:	440b      	add	r3, r1
 8005adc:	3318      	adds	r3, #24
 8005ade:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:418
          break;
 8005ae0:	e04d      	b.n	8005b7e <XMC_DMA_CH_Init+0x3ee>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:421

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS:
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 8005ae2:	7afb      	ldrb	r3, [r7, #11]
 8005ae4:	7afa      	ldrb	r2, [r7, #11]
 8005ae6:	68f9      	ldr	r1, [r7, #12]
 8005ae8:	2058      	movs	r0, #88	; 0x58
 8005aea:	fb00 f202 	mul.w	r2, r0, r2
 8005aee:	440a      	add	r2, r1
 8005af0:	3218      	adds	r2, #24
 8005af2:	6812      	ldr	r2, [r2, #0]
 8005af4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005af8:	68f9      	ldr	r1, [r7, #12]
 8005afa:	2058      	movs	r0, #88	; 0x58
 8005afc:	fb00 f303 	mul.w	r3, r0, r3
 8005b00:	440b      	add	r3, r1
 8005b02:	3318      	adds	r3, #24
 8005b04:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:422
          break;
 8005b06:	e03a      	b.n	8005b7e <XMC_DMA_CH_Init+0x3ee>
 8005b08:	50014000 	.word	0x50014000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:425

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 8005b0c:	7afb      	ldrb	r3, [r7, #11]
 8005b0e:	7afa      	ldrb	r2, [r7, #11]
 8005b10:	68f9      	ldr	r1, [r7, #12]
 8005b12:	2058      	movs	r0, #88	; 0x58
 8005b14:	fb00 f202 	mul.w	r2, r0, r2
 8005b18:	440a      	add	r2, r1
 8005b1a:	3240      	adds	r2, #64	; 0x40
 8005b1c:	6812      	ldr	r2, [r2, #0]
 8005b1e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005b22:	68f9      	ldr	r1, [r7, #12]
 8005b24:	2058      	movs	r0, #88	; 0x58
 8005b26:	fb00 f303 	mul.w	r3, r0, r3
 8005b2a:	440b      	add	r3, r1
 8005b2c:	3340      	adds	r3, #64	; 0x40
 8005b2e:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:426
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 8005b30:	7afb      	ldrb	r3, [r7, #11]
 8005b32:	7afa      	ldrb	r2, [r7, #11]
 8005b34:	68f9      	ldr	r1, [r7, #12]
 8005b36:	2058      	movs	r0, #88	; 0x58
 8005b38:	fb00 f202 	mul.w	r2, r0, r2
 8005b3c:	440a      	add	r2, r1
 8005b3e:	3218      	adds	r2, #24
 8005b40:	6812      	ldr	r2, [r2, #0]
 8005b42:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005b46:	68f9      	ldr	r1, [r7, #12]
 8005b48:	2058      	movs	r0, #88	; 0x58
 8005b4a:	fb00 f303 	mul.w	r3, r0, r3
 8005b4e:	440b      	add	r3, r1
 8005b50:	3318      	adds	r3, #24
 8005b52:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:427
          break;
 8005b54:	e013      	b.n	8005b7e <XMC_DMA_CH_Init+0x3ee>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:430

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED:
          dma->CH[channel].CTLL |= (uint32_t)((uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk |
 8005b56:	7afb      	ldrb	r3, [r7, #11]
 8005b58:	7afa      	ldrb	r2, [r7, #11]
 8005b5a:	68f9      	ldr	r1, [r7, #12]
 8005b5c:	2058      	movs	r0, #88	; 0x58
 8005b5e:	fb00 f202 	mul.w	r2, r0, r2
 8005b62:	440a      	add	r2, r1
 8005b64:	3218      	adds	r2, #24
 8005b66:	6812      	ldr	r2, [r2, #0]
 8005b68:	f042 52c0 	orr.w	r2, r2, #402653184	; 0x18000000
 8005b6c:	68f9      	ldr	r1, [r7, #12]
 8005b6e:	2058      	movs	r0, #88	; 0x58
 8005b70:	fb00 f303 	mul.w	r3, r0, r3
 8005b74:	440b      	add	r3, r1
 8005b76:	3318      	adds	r3, #24
 8005b78:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:432
                                              (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
          break;
 8005b7a:	e000      	b.n	8005b7e <XMC_DMA_CH_Init+0x3ee>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:435

        default:
          break;
 8005b7c:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:438
      }

      status = XMC_DMA_CH_STATUS_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	75fb      	strb	r3, [r7, #23]
 8005b82:	e004      	b.n	8005b8e <XMC_DMA_CH_Init+0x3fe>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:443

    }
    else
    {
      status = XMC_DMA_CH_STATUS_BUSY;
 8005b84:	2302      	movs	r3, #2
 8005b86:	75fb      	strb	r3, [r7, #23]
 8005b88:	e001      	b.n	8005b8e <XMC_DMA_CH_Init+0x3fe>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:448
    }
  }
  else 
  {
    status = XMC_DMA_CH_STATUS_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:451
  }
  
  return status;
 8005b8e:	7dfb      	ldrb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:452
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <XMC_DMA_CH_Suspend>:
XMC_DMA_CH_Suspend():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:456

/* Suspend DMA channel transfer */
void XMC_DMA_CH_Suspend(XMC_DMA_t *const dma, const uint8_t channel)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:457
  dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk;
 8005ba4:	78fb      	ldrb	r3, [r7, #3]
 8005ba6:	78fa      	ldrb	r2, [r7, #3]
 8005ba8:	6879      	ldr	r1, [r7, #4]
 8005baa:	2058      	movs	r0, #88	; 0x58
 8005bac:	fb00 f202 	mul.w	r2, r0, r2
 8005bb0:	440a      	add	r2, r1
 8005bb2:	3240      	adds	r2, #64	; 0x40
 8005bb4:	6812      	ldr	r2, [r2, #0]
 8005bb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bba:	6879      	ldr	r1, [r7, #4]
 8005bbc:	2058      	movs	r0, #88	; 0x58
 8005bbe:	fb00 f303 	mul.w	r3, r0, r3
 8005bc2:	440b      	add	r3, r1
 8005bc4:	3340      	adds	r3, #64	; 0x40
 8005bc6:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:458
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bc80      	pop	{r7}
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop

08005bd4 <XMC_DMA_CH_Resume>:
XMC_DMA_CH_Resume():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:462

/* Resume DMA channel transfer */
void XMC_DMA_CH_Resume(XMC_DMA_t *const dma, const uint8_t channel)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:463
  dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_CH_SUSP_Msk;
 8005be0:	78fb      	ldrb	r3, [r7, #3]
 8005be2:	78fa      	ldrb	r2, [r7, #3]
 8005be4:	6879      	ldr	r1, [r7, #4]
 8005be6:	2058      	movs	r0, #88	; 0x58
 8005be8:	fb00 f202 	mul.w	r2, r0, r2
 8005bec:	440a      	add	r2, r1
 8005bee:	3240      	adds	r2, #64	; 0x40
 8005bf0:	6812      	ldr	r2, [r2, #0]
 8005bf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bf6:	6879      	ldr	r1, [r7, #4]
 8005bf8:	2058      	movs	r0, #88	; 0x58
 8005bfa:	fb00 f303 	mul.w	r3, r0, r3
 8005bfe:	440b      	add	r3, r1
 8005c00:	3340      	adds	r3, #64	; 0x40
 8005c02:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:464
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bc80      	pop	{r7}
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop

08005c10 <XMC_DMA_CH_IsSuspended>:
XMC_DMA_CH_IsSuspended():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:468

/* Check if a DMA channel is suspended */
bool XMC_DMA_CH_IsSuspended(XMC_DMA_t *const dma, const uint8_t channel)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:469
  return (bool)(dma->CH[channel].CFGL & (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk);
 8005c1c:	78fb      	ldrb	r3, [r7, #3]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	2158      	movs	r1, #88	; 0x58
 8005c22:	fb01 f303 	mul.w	r3, r1, r3
 8005c26:	4413      	add	r3, r2
 8005c28:	3340      	adds	r3, #64	; 0x40
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	bf14      	ite	ne
 8005c34:	2301      	movne	r3, #1
 8005c36:	2300      	moveq	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:470
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bc80      	pop	{r7}
 8005c42:	4770      	bx	lr

08005c44 <XMC_DMA_CH_EnableEvent>:
XMC_DMA_CH_EnableEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:474

/* Enable GPDMA event */
void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	607a      	str	r2, [r7, #4]
 8005c50:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:477
  uint32_t event_idx;

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8005c52:	2300      	movs	r3, #0
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	e014      	b.n	8005c82 <XMC_DMA_CH_EnableEvent+0x3e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:479
  {
    if (event & ((uint32_t)0x1UL << event_idx))
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d009      	beq.n	8005c7c <XMC_DMA_CH_EnableEvent+0x38>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:481
    {
      dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	005a      	lsls	r2, r3, #1
 8005c6c:	7afb      	ldrb	r3, [r7, #11]
 8005c6e:	f240 1101 	movw	r1, #257	; 0x101
 8005c72:	4099      	lsls	r1, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	32c4      	adds	r2, #196	; 0xc4
 8005c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:477 (discriminator 2)
/* Enable GPDMA event */
void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
  uint32_t event_idx;

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:477 (discriminator 1)
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2b04      	cmp	r3, #4
 8005c86:	d9e7      	bls.n	8005c58 <XMC_DMA_CH_EnableEvent+0x14>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:484
    if (event & ((uint32_t)0x1UL << event_idx))
    {
      dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
    }
  }
}
 8005c88:	bf00      	nop
 8005c8a:	371c      	adds	r7, #28
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bc80      	pop	{r7}
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop

08005c94 <XMC_DMA_CH_DisableEvent>:
XMC_DMA_CH_DisableEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:488

/* Disable GPDMA event */
void XMC_DMA_CH_DisableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:491
  uint32_t event_idx;

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	617b      	str	r3, [r7, #20]
 8005ca6:	e014      	b.n	8005cd2 <XMC_DMA_CH_DisableEvent+0x3e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:493
  {
    if (event & ((uint32_t)0x1UL << event_idx))
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d009      	beq.n	8005ccc <XMC_DMA_CH_DisableEvent+0x38>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:495
    {
      dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x100UL << channel);
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	005a      	lsls	r2, r3, #1
 8005cbc:	7afb      	ldrb	r3, [r7, #11]
 8005cbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005cc2:	4099      	lsls	r1, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	32c4      	adds	r2, #196	; 0xc4
 8005cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:491 (discriminator 2)
/* Disable GPDMA event */
void XMC_DMA_CH_DisableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
  uint32_t event_idx;

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:491 (discriminator 1)
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2b04      	cmp	r3, #4
 8005cd6:	d9e7      	bls.n	8005ca8 <XMC_DMA_CH_DisableEvent+0x14>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:498
    if (event & ((uint32_t)0x1UL << event_idx))
    {
      dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x100UL << channel);
    }
  }
}
 8005cd8:	bf00      	nop
 8005cda:	371c      	adds	r7, #28
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bc80      	pop	{r7}
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop

08005ce4 <XMC_DMA_CH_ClearEventStatus>:
XMC_DMA_CH_ClearEventStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:502

/* Clear GPDMA event */
void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	460b      	mov	r3, r1
 8005cee:	607a      	str	r2, [r7, #4]
 8005cf0:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:505
  uint32_t event_idx;

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	617b      	str	r3, [r7, #20]
 8005cf6:	e013      	b.n	8005d20 <XMC_DMA_CH_ClearEventStatus+0x3c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:507
  {
    if (event & (uint32_t)((uint32_t)0x1UL << event_idx))
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d008      	beq.n	8005d1a <XMC_DMA_CH_ClearEventStatus+0x36>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:509
    {
      dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	005a      	lsls	r2, r3, #1
 8005d0c:	7afb      	ldrb	r3, [r7, #11]
 8005d0e:	2101      	movs	r1, #1
 8005d10:	4099      	lsls	r1, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	32ce      	adds	r2, #206	; 0xce
 8005d16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:505 (discriminator 2)
/* Clear GPDMA event */
void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
  uint32_t event_idx;

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:505 (discriminator 1)
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d9e8      	bls.n	8005cf8 <XMC_DMA_CH_ClearEventStatus+0x14>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:513
    {
      dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
    }
  }

}
 8005d26:	bf00      	nop
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bc80      	pop	{r7}
 8005d2e:	4770      	bx	lr

08005d30 <XMC_DMA_CH_GetEventStatus>:
XMC_DMA_CH_GetEventStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:517

/* Get GPDMA event status */
uint32_t XMC_DMA_CH_GetEventStatus(XMC_DMA_t *const dma, const uint8_t channel)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:519
  uint32_t event_idx;
  uint32_t status = 0UL;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:521

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8005d40:	2300      	movs	r3, #0
 8005d42:	60fb      	str	r3, [r7, #12]
 8005d44:	e018      	b.n	8005d78 <XMC_DMA_CH_GetEventStatus+0x48>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:523
  {
    status |= (uint32_t)((dma->STATUSCHEV[event_idx * 2UL] & (uint32_t)((uint32_t)0x1UL << (uint32_t)channel)) ?
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	005a      	lsls	r2, r3, #1
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	32ba      	adds	r2, #186	; 0xba
 8005d4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d52:	78fb      	ldrb	r3, [r7, #3]
 8005d54:	fa22 f303 	lsr.w	r3, r2, r3
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d004      	beq.n	8005d6a <XMC_DMA_CH_GetEventStatus+0x3a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:523 (discriminator 1)
 8005d60:	2201      	movs	r2, #1
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	fa02 f303 	lsl.w	r3, r2, r3
 8005d68:	e000      	b.n	8005d6c <XMC_DMA_CH_GetEventStatus+0x3c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:523 (discriminator 2)
 8005d6a:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:523 (discriminator 4)
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:521 (discriminator 4)
uint32_t XMC_DMA_CH_GetEventStatus(XMC_DMA_t *const dma, const uint8_t channel)
{
  uint32_t event_idx;
  uint32_t status = 0UL;

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3301      	adds	r3, #1
 8005d76:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:521 (discriminator 2)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2b04      	cmp	r3, #4
 8005d7c:	d9e3      	bls.n	8005d46 <XMC_DMA_CH_GetEventStatus+0x16>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:527
  {
    status |= (uint32_t)((dma->STATUSCHEV[event_idx * 2UL] & (uint32_t)((uint32_t)0x1UL << (uint32_t)channel)) ?
                         ((uint32_t)0x1UL << event_idx) : (uint32_t)0UL);
  }

  return status;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:528
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bc80      	pop	{r7}
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop

08005d8c <XMC_DMA_CH_EnableSourceGather>:
XMC_DMA_CH_EnableSourceGather():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:532

/* Enable source gather */
void XMC_DMA_CH_EnableSourceGather(XMC_DMA_t *const dma, const uint8_t channel, uint32_t interval, uint16_t count)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	607a      	str	r2, [r7, #4]
 8005d96:	461a      	mov	r2, r3
 8005d98:	460b      	mov	r3, r1
 8005d9a:	72fb      	strb	r3, [r7, #11]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	813b      	strh	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:533
  dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 8005da0:	7afb      	ldrb	r3, [r7, #11]
 8005da2:	7afa      	ldrb	r2, [r7, #11]
 8005da4:	68f9      	ldr	r1, [r7, #12]
 8005da6:	2058      	movs	r0, #88	; 0x58
 8005da8:	fb00 f202 	mul.w	r2, r0, r2
 8005dac:	440a      	add	r2, r1
 8005dae:	3218      	adds	r2, #24
 8005db0:	6812      	ldr	r2, [r2, #0]
 8005db2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005db6:	68f9      	ldr	r1, [r7, #12]
 8005db8:	2058      	movs	r0, #88	; 0x58
 8005dba:	fb00 f303 	mul.w	r3, r0, r3
 8005dbe:	440b      	add	r3, r1
 8005dc0:	3318      	adds	r3, #24
 8005dc2:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:534
  dma->CH[channel].SGR = ((uint32_t)interval << GPDMA0_CH_SGR_SGI_Pos) | ((uint32_t)count << GPDMA0_CH_SGR_SGC_Pos);
 8005dc4:	7afb      	ldrb	r3, [r7, #11]
 8005dc6:	893a      	ldrh	r2, [r7, #8]
 8005dc8:	0511      	lsls	r1, r2, #20
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	68f9      	ldr	r1, [r7, #12]
 8005dd0:	2058      	movs	r0, #88	; 0x58
 8005dd2:	fb00 f303 	mul.w	r3, r0, r3
 8005dd6:	440b      	add	r3, r1
 8005dd8:	3348      	adds	r3, #72	; 0x48
 8005dda:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:535
}
 8005ddc:	bf00      	nop
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bc80      	pop	{r7}
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop

08005de8 <XMC_DMA_CH_DisableSourceGather>:
XMC_DMA_CH_DisableSourceGather():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:539

/* Disable source gather */
void XMC_DMA_CH_DisableSourceGather(XMC_DMA_t *const dma, const uint8_t channel)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	460b      	mov	r3, r1
 8005df2:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:540
  dma->CH[channel].CTLL &= (uint32_t)~GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	78fa      	ldrb	r2, [r7, #3]
 8005df8:	6879      	ldr	r1, [r7, #4]
 8005dfa:	2058      	movs	r0, #88	; 0x58
 8005dfc:	fb00 f202 	mul.w	r2, r0, r2
 8005e00:	440a      	add	r2, r1
 8005e02:	3218      	adds	r2, #24
 8005e04:	6812      	ldr	r2, [r2, #0]
 8005e06:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	2058      	movs	r0, #88	; 0x58
 8005e0e:	fb00 f303 	mul.w	r3, r0, r3
 8005e12:	440b      	add	r3, r1
 8005e14:	3318      	adds	r3, #24
 8005e16:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:541
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bc80      	pop	{r7}
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop

08005e24 <XMC_DMA_CH_EnableDestinationScatter>:
XMC_DMA_CH_EnableDestinationScatter():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:545

/* Enable destination scatter */
void XMC_DMA_CH_EnableDestinationScatter(XMC_DMA_t *const dma, const uint8_t channel, uint32_t interval, uint16_t count)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	607a      	str	r2, [r7, #4]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	460b      	mov	r3, r1
 8005e32:	72fb      	strb	r3, [r7, #11]
 8005e34:	4613      	mov	r3, r2
 8005e36:	813b      	strh	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:546
  dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 8005e38:	7afb      	ldrb	r3, [r7, #11]
 8005e3a:	7afa      	ldrb	r2, [r7, #11]
 8005e3c:	68f9      	ldr	r1, [r7, #12]
 8005e3e:	2058      	movs	r0, #88	; 0x58
 8005e40:	fb00 f202 	mul.w	r2, r0, r2
 8005e44:	440a      	add	r2, r1
 8005e46:	3218      	adds	r2, #24
 8005e48:	6812      	ldr	r2, [r2, #0]
 8005e4a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005e4e:	68f9      	ldr	r1, [r7, #12]
 8005e50:	2058      	movs	r0, #88	; 0x58
 8005e52:	fb00 f303 	mul.w	r3, r0, r3
 8005e56:	440b      	add	r3, r1
 8005e58:	3318      	adds	r3, #24
 8005e5a:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:547
  dma->CH[channel].DSR = ((uint32_t)interval << GPDMA0_CH_DSR_DSI_Pos) | ((uint32_t)count << GPDMA0_CH_DSR_DSC_Pos);
 8005e5c:	7afb      	ldrb	r3, [r7, #11]
 8005e5e:	893a      	ldrh	r2, [r7, #8]
 8005e60:	0511      	lsls	r1, r2, #20
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	68f9      	ldr	r1, [r7, #12]
 8005e68:	2058      	movs	r0, #88	; 0x58
 8005e6a:	fb00 f303 	mul.w	r3, r0, r3
 8005e6e:	440b      	add	r3, r1
 8005e70:	3350      	adds	r3, #80	; 0x50
 8005e72:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:548
}
 8005e74:	bf00      	nop
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bc80      	pop	{r7}
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop

08005e80 <XMC_DMA_CH_DisableDestinationScatter>:
XMC_DMA_CH_DisableDestinationScatter():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:552

/* Disable destination scatter */
void XMC_DMA_CH_DisableDestinationScatter(XMC_DMA_t *const dma, const uint8_t channel)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:553
  dma->CH[channel].CTLL &= (uint32_t)~GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 8005e8c:	78fb      	ldrb	r3, [r7, #3]
 8005e8e:	78fa      	ldrb	r2, [r7, #3]
 8005e90:	6879      	ldr	r1, [r7, #4]
 8005e92:	2058      	movs	r0, #88	; 0x58
 8005e94:	fb00 f202 	mul.w	r2, r0, r2
 8005e98:	440a      	add	r2, r1
 8005e9a:	3218      	adds	r2, #24
 8005e9c:	6812      	ldr	r2, [r2, #0]
 8005e9e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ea2:	6879      	ldr	r1, [r7, #4]
 8005ea4:	2058      	movs	r0, #88	; 0x58
 8005ea6:	fb00 f303 	mul.w	r3, r0, r3
 8005eaa:	440b      	add	r3, r1
 8005eac:	3318      	adds	r3, #24
 8005eae:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:554
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bc80      	pop	{r7}
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop

08005ebc <XMC_DMA_CH_TriggerSourceRequest>:
XMC_DMA_CH_TriggerSourceRequest():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:558

/* Trigger source request */
void XMC_DMA_CH_TriggerSourceRequest(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_TRANSACTION_TYPE_t type, bool last)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	4608      	mov	r0, r1
 8005ec6:	4611      	mov	r1, r2
 8005ec8:	461a      	mov	r2, r3
 8005eca:	4603      	mov	r3, r0
 8005ecc:	70fb      	strb	r3, [r7, #3]
 8005ece:	460b      	mov	r3, r1
 8005ed0:	70bb      	strb	r3, [r7, #2]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	707b      	strb	r3, [r7, #1]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:559
  if ((uint32_t)type == (uint32_t)XMC_DMA_CH_TRANSACTION_TYPE_SINGLE)
 8005ed6:	78bb      	ldrb	r3, [r7, #2]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d106      	bne.n	8005eea <XMC_DMA_CH_TriggerSourceRequest+0x2e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:561
  {  
    dma->SGLREQSRCREG = ((uint32_t)0x101UL << channel);
 8005edc:	78fb      	ldrb	r3, [r7, #3]
 8005ede:	f240 1201 	movw	r2, #257	; 0x101
 8005ee2:	409a      	lsls	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:564
  }

  if (last == true)
 8005eea:	787b      	ldrb	r3, [r7, #1]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d006      	beq.n	8005efe <XMC_DMA_CH_TriggerSourceRequest+0x42>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:566
  {
  dma->LSTSRCREG = (uint32_t)0x101UL << channel;
 8005ef0:	78fb      	ldrb	r3, [r7, #3]
 8005ef2:	f240 1201 	movw	r2, #257	; 0x101
 8005ef6:	409a      	lsls	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:569
  }
  
  dma->REQSRCREG = (uint32_t)0x101UL << channel;
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	f240 1201 	movw	r2, #257	; 0x101
 8005f04:	409a      	lsls	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:570
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bc80      	pop	{r7}
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop

08005f18 <XMC_DMA_CH_TriggerDestinationRequest>:
XMC_DMA_CH_TriggerDestinationRequest():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:574

/* Trigger destination request */
void XMC_DMA_CH_TriggerDestinationRequest(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_TRANSACTION_TYPE_t type, bool last)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	4608      	mov	r0, r1
 8005f22:	4611      	mov	r1, r2
 8005f24:	461a      	mov	r2, r3
 8005f26:	4603      	mov	r3, r0
 8005f28:	70fb      	strb	r3, [r7, #3]
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	70bb      	strb	r3, [r7, #2]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	707b      	strb	r3, [r7, #1]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:575
  if(type == XMC_DMA_CH_TRANSACTION_TYPE_SINGLE)
 8005f32:	78bb      	ldrb	r3, [r7, #2]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d106      	bne.n	8005f46 <XMC_DMA_CH_TriggerDestinationRequest+0x2e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:577
  {  
    dma->SGLREQDSTREG = (uint32_t)0x101UL << channel;
 8005f38:	78fb      	ldrb	r3, [r7, #3]
 8005f3a:	f240 1201 	movw	r2, #257	; 0x101
 8005f3e:	409a      	lsls	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:580
  }

  if (last == true)
 8005f46:	787b      	ldrb	r3, [r7, #1]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d006      	beq.n	8005f5a <XMC_DMA_CH_TriggerDestinationRequest+0x42>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:582
  {
    dma->LSTDSTREG = (uint32_t)0x101UL << channel;
 8005f4c:	78fb      	ldrb	r3, [r7, #3]
 8005f4e:	f240 1201 	movw	r2, #257	; 0x101
 8005f52:	409a      	lsls	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:585
  }

  dma->REQDSTREG = (uint32_t)0x101UL << channel;
 8005f5a:	78fb      	ldrb	r3, [r7, #3]
 8005f5c:	f240 1201 	movw	r2, #257	; 0x101
 8005f60:	409a      	lsls	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:586
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bc80      	pop	{r7}
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop

08005f74 <XMC_DMA_CH_EnableSourceAddressReload>:
XMC_DMA_CH_EnableSourceAddressReload():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:590

/* Enable source address reload */
void XMC_DMA_CH_EnableSourceAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:591
  dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 8005f80:	78fb      	ldrb	r3, [r7, #3]
 8005f82:	78fa      	ldrb	r2, [r7, #3]
 8005f84:	6879      	ldr	r1, [r7, #4]
 8005f86:	2058      	movs	r0, #88	; 0x58
 8005f88:	fb00 f202 	mul.w	r2, r0, r2
 8005f8c:	440a      	add	r2, r1
 8005f8e:	3240      	adds	r2, #64	; 0x40
 8005f90:	6812      	ldr	r2, [r2, #0]
 8005f92:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	2058      	movs	r0, #88	; 0x58
 8005f9a:	fb00 f303 	mul.w	r3, r0, r3
 8005f9e:	440b      	add	r3, r1
 8005fa0:	3340      	adds	r3, #64	; 0x40
 8005fa2:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:592
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bc80      	pop	{r7}
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop

08005fb0 <XMC_DMA_CH_DisableSourceAddressReload>:
XMC_DMA_CH_DisableSourceAddressReload():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:596

/* Disable source address reload */
void XMC_DMA_CH_DisableSourceAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:597
  dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 8005fbc:	78fb      	ldrb	r3, [r7, #3]
 8005fbe:	78fa      	ldrb	r2, [r7, #3]
 8005fc0:	6879      	ldr	r1, [r7, #4]
 8005fc2:	2058      	movs	r0, #88	; 0x58
 8005fc4:	fb00 f202 	mul.w	r2, r0, r2
 8005fc8:	440a      	add	r2, r1
 8005fca:	3240      	adds	r2, #64	; 0x40
 8005fcc:	6812      	ldr	r2, [r2, #0]
 8005fce:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8005fd2:	6879      	ldr	r1, [r7, #4]
 8005fd4:	2058      	movs	r0, #88	; 0x58
 8005fd6:	fb00 f303 	mul.w	r3, r0, r3
 8005fda:	440b      	add	r3, r1
 8005fdc:	3340      	adds	r3, #64	; 0x40
 8005fde:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:598
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bc80      	pop	{r7}
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop

08005fec <XMC_DMA_CH_EnableDestinationAddressReload>:
XMC_DMA_CH_EnableDestinationAddressReload():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:602

/* Enable destination address reload */
void XMC_DMA_CH_EnableDestinationAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:603
  dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 8005ff8:	78fb      	ldrb	r3, [r7, #3]
 8005ffa:	78fa      	ldrb	r2, [r7, #3]
 8005ffc:	6879      	ldr	r1, [r7, #4]
 8005ffe:	2058      	movs	r0, #88	; 0x58
 8006000:	fb00 f202 	mul.w	r2, r0, r2
 8006004:	440a      	add	r2, r1
 8006006:	3240      	adds	r2, #64	; 0x40
 8006008:	6812      	ldr	r2, [r2, #0]
 800600a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800600e:	6879      	ldr	r1, [r7, #4]
 8006010:	2058      	movs	r0, #88	; 0x58
 8006012:	fb00 f303 	mul.w	r3, r0, r3
 8006016:	440b      	add	r3, r1
 8006018:	3340      	adds	r3, #64	; 0x40
 800601a:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:604
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	bc80      	pop	{r7}
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop

08006028 <XMC_DMA_CH_DisableDestinationAddressReload>:
XMC_DMA_CH_DisableDestinationAddressReload():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:608

/* Disable destination address reload */
void XMC_DMA_CH_DisableDestinationAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	460b      	mov	r3, r1
 8006032:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:609
  dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 8006034:	78fb      	ldrb	r3, [r7, #3]
 8006036:	78fa      	ldrb	r2, [r7, #3]
 8006038:	6879      	ldr	r1, [r7, #4]
 800603a:	2058      	movs	r0, #88	; 0x58
 800603c:	fb00 f202 	mul.w	r2, r0, r2
 8006040:	440a      	add	r2, r1
 8006042:	3240      	adds	r2, #64	; 0x40
 8006044:	6812      	ldr	r2, [r2, #0]
 8006046:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	2058      	movs	r0, #88	; 0x58
 800604e:	fb00 f303 	mul.w	r3, r0, r3
 8006052:	440b      	add	r3, r1
 8006054:	3340      	adds	r3, #64	; 0x40
 8006056:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:610
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	bc80      	pop	{r7}
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop

08006064 <XMC_DMA_CH_RequestLastMultiblockTransfer>:
XMC_DMA_CH_RequestLastMultiblockTransfer():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:614

/* Request last multi-block transfer */
void XMC_DMA_CH_RequestLastMultiblockTransfer(XMC_DMA_t *const dma, const uint8_t channel)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	460b      	mov	r3, r1
 800606e:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:615
  dma->CH[channel].CFGL &= (uint32_t)~(GPDMA0_CH_CFGL_RELOAD_SRC_Msk | GPDMA0_CH_CFGL_RELOAD_DST_Msk);
 8006070:	78fb      	ldrb	r3, [r7, #3]
 8006072:	78fa      	ldrb	r2, [r7, #3]
 8006074:	6879      	ldr	r1, [r7, #4]
 8006076:	2058      	movs	r0, #88	; 0x58
 8006078:	fb00 f202 	mul.w	r2, r0, r2
 800607c:	440a      	add	r2, r1
 800607e:	3240      	adds	r2, #64	; 0x40
 8006080:	6812      	ldr	r2, [r2, #0]
 8006082:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8006086:	6879      	ldr	r1, [r7, #4]
 8006088:	2058      	movs	r0, #88	; 0x58
 800608a:	fb00 f303 	mul.w	r3, r0, r3
 800608e:	440b      	add	r3, r1
 8006090:	3340      	adds	r3, #64	; 0x40
 8006092:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:616
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	bc80      	pop	{r7}
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop

080060a0 <XMC_DMA_CH_SetEventHandler>:
XMC_DMA_CH_SetEventHandler():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:620

/* Set event handler */
void XMC_DMA_CH_SetEventHandler(XMC_DMA_t *const dma, const uint8_t channel, XMC_DMA_CH_EVENT_HANDLER_t event_handler)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	460b      	mov	r3, r1
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:622
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4a09      	ldr	r2, [pc, #36]	; (80060d8 <XMC_DMA_CH_SetEventHandler+0x38>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d105      	bne.n	80060c2 <XMC_DMA_CH_SetEventHandler+0x22>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:625
  {
#endif
    dma0_event_handlers[channel] = event_handler;
 80060b6:	7afb      	ldrb	r3, [r7, #11]
 80060b8:	4908      	ldr	r1, [pc, #32]	; (80060dc <XMC_DMA_CH_SetEventHandler+0x3c>)
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:633
  else
  {
    dma1_event_handlers[channel] = event_handler;
  }
#endif
}
 80060c0:	e004      	b.n	80060cc <XMC_DMA_CH_SetEventHandler+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:630
    dma0_event_handlers[channel] = event_handler;
#if defined(GPDMA1)
  }
  else
  {
    dma1_event_handlers[channel] = event_handler;
 80060c2:	7afb      	ldrb	r3, [r7, #11]
 80060c4:	4906      	ldr	r1, [pc, #24]	; (80060e0 <XMC_DMA_CH_SetEventHandler+0x40>)
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:633
  }
#endif
}
 80060cc:	bf00      	nop
 80060ce:	3714      	adds	r7, #20
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bc80      	pop	{r7}
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	50014000 	.word	0x50014000
 80060dc:	2000017c 	.word	0x2000017c
 80060e0:	2000019c 	.word	0x2000019c

080060e4 <XMC_DMA_CH_ClearSourcePeripheralRequest>:
XMC_DMA_CH_ClearSourcePeripheralRequest():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:636

void XMC_DMA_CH_ClearSourcePeripheralRequest(XMC_DMA_t *const dma, uint8_t channel)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	460b      	mov	r3, r1
 80060ee:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:638
  uint32_t line;
  line = (dma->CH[channel].CFGH & GPDMA0_CH_CFGH_SRC_PER_Msk) >> GPDMA0_CH_CFGH_SRC_PER_Pos;
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	2158      	movs	r1, #88	; 0x58
 80060f6:	fb01 f303 	mul.w	r3, r1, r3
 80060fa:	4413      	add	r3, r2
 80060fc:	3344      	adds	r3, #68	; 0x44
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 8006104:	09db      	lsrs	r3, r3, #7
 8006106:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:640

  XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	b2db      	uxtb	r3, r3
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7ff fa7c 	bl	800560c <XMC_DMA_ClearRequestLine>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:641
}
 8006114:	bf00      	nop
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <XMC_DMA_CH_ClearDestinationPeripheralRequest>:
XMC_DMA_CH_ClearDestinationPeripheralRequest():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:644

void XMC_DMA_CH_ClearDestinationPeripheralRequest(XMC_DMA_t *const dma, uint8_t channel)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	460b      	mov	r3, r1
 8006126:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:646
  uint32_t line;
  line = (dma->CH[channel].CFGH & GPDMA0_CH_CFGH_DEST_PER_Msk) >> GPDMA0_CH_CFGH_DEST_PER_Pos;
 8006128:	78fb      	ldrb	r3, [r7, #3]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	2158      	movs	r1, #88	; 0x58
 800612e:	fb01 f303 	mul.w	r3, r1, r3
 8006132:	4413      	add	r3, r2
 8006134:	3344      	adds	r3, #68	; 0x44
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 800613c:	0adb      	lsrs	r3, r3, #11
 800613e:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:648

  XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	b2db      	uxtb	r3, r3
 8006144:	4619      	mov	r1, r3
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f7ff fa60 	bl	800560c <XMC_DMA_ClearRequestLine>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:649
}
 800614c:	bf00      	nop
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <XMC_DMA_IRQHandler>:
XMC_DMA_IRQHandler():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:653

/* Default DMA IRQ handler */
void XMC_DMA_IRQHandler(XMC_DMA_t *const dma)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b088      	sub	sp, #32
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:661
  uint32_t mask;
  XMC_DMA_CH_EVENT_HANDLER_t *dma_event_handlers;
  XMC_DMA_CH_EVENT_HANDLER_t event_handler;

#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a84      	ldr	r2, [pc, #528]	; (8006370 <XMC_DMA_IRQHandler+0x21c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d102      	bne.n	800616a <XMC_DMA_IRQHandler+0x16>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:664
  {
#endif
    dma_event_handlers = dma0_event_handlers;
 8006164:	4b83      	ldr	r3, [pc, #524]	; (8006374 <XMC_DMA_IRQHandler+0x220>)
 8006166:	61bb      	str	r3, [r7, #24]
 8006168:	e001      	b.n	800616e <XMC_DMA_IRQHandler+0x1a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:669
#if defined(GPDMA1)
  }
  else
  {
    dma_event_handlers = dma1_event_handlers;
 800616a:	4b83      	ldr	r3, [pc, #524]	; (8006378 <XMC_DMA_IRQHandler+0x224>)
 800616c:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:673
  }
#endif
  
  event = XMC_DMA_GetEventStatus(dma);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7ff f8fa 	bl	8005368 <XMC_DMA_GetEventStatus>
 8006174:	6178      	str	r0, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:674
  channel = 0;
 8006176:	2300      	movs	r3, #0
 8006178:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:676

  if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f003 0310 	and.w	r3, r3, #16
 8006180:	2b00      	cmp	r3, #0
 8006182:	d02a      	beq.n	80061da <XMC_DMA_IRQHandler+0x86>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:678
  {
    event = XMC_DMA_GetChannelsErrorStatus(dma);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7ff f92b 	bl	80053e0 <XMC_DMA_GetChannelsErrorStatus>
 800618a:	6178      	str	r0, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:679
    while (event != 0)
 800618c:	e021      	b.n	80061d2 <XMC_DMA_IRQHandler+0x7e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:681
    {
      mask = (uint32_t)1U << channel;
 800618e:	2201      	movs	r2, #1
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	fa02 f303 	lsl.w	r3, r2, r3
 8006196:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:682
      if ((event & mask) != 0)
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	4013      	ands	r3, r2
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d014      	beq.n	80061cc <XMC_DMA_IRQHandler+0x78>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:684
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_ERROR);
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2210      	movs	r2, #16
 80061a8:	4619      	mov	r1, r3
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7ff fd9a 	bl	8005ce4 <XMC_DMA_CH_ClearEventStatus>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:687

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	4413      	add	r3, r2
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:688
        if (event_handler != NULL)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 80c8 	beq.w	8006354 <XMC_DMA_IRQHandler+0x200>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:690
        {
          event_handler(XMC_DMA_CH_EVENT_ERROR);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2010      	movs	r0, #16
 80061c8:	4798      	blx	r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:693
        }
       
        break;
 80061ca:	e0c3      	b.n	8006354 <XMC_DMA_IRQHandler+0x200>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:695
      }
      ++channel;
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	3301      	adds	r3, #1
 80061d0:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:679
  channel = 0;

  if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsErrorStatus(dma);
    while (event != 0)
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1da      	bne.n	800618e <XMC_DMA_IRQHandler+0x3a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:796
  else
  {
    /* no active interrupt was found? */
  }

}
 80061d8:	e0c5      	b.n	8006366 <XMC_DMA_IRQHandler+0x212>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:698
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d02a      	beq.n	800623a <XMC_DMA_IRQHandler+0xe6>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:700
  {
    event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7ff f8cb 	bl	8005380 <XMC_DMA_GetChannelsTransferCompleteStatus>
 80061ea:	6178      	str	r0, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:701
    while (event != 0)
 80061ec:	e021      	b.n	8006232 <XMC_DMA_IRQHandler+0xde>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:703
    {
      mask = (uint32_t)1U << channel;
 80061ee:	2201      	movs	r2, #1
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	fa02 f303 	lsl.w	r3, r2, r3
 80061f6:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:704
      if (event & mask)
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	4013      	ands	r3, r2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d014      	beq.n	800622c <XMC_DMA_IRQHandler+0xd8>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:706
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE | 
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	b2db      	uxtb	r3, r3
 8006206:	220f      	movs	r2, #15
 8006208:	4619      	mov	r1, r3
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7ff fd6a 	bl	8005ce4 <XMC_DMA_CH_ClearEventStatus>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:712
                                                                      (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE | 
                                                                      (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE | 
                                                                      (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE));

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	4413      	add	r3, r2
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:713
        if (event_handler != NULL)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 809a 	beq.w	8006358 <XMC_DMA_IRQHandler+0x204>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:715
        {
          event_handler(XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2001      	movs	r0, #1
 8006228:	4798      	blx	r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:718
        }
																	  
        break;
 800622a:	e095      	b.n	8006358 <XMC_DMA_IRQHandler+0x204>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:720
      }
      ++channel;
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	3301      	adds	r3, #1
 8006230:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:701
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
    while (event != 0)
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1da      	bne.n	80061ee <XMC_DMA_IRQHandler+0x9a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:796
  else
  {
    /* no active interrupt was found? */
  }

}
 8006238:	e095      	b.n	8006366 <XMC_DMA_IRQHandler+0x212>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:723
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d029      	beq.n	8006298 <XMC_DMA_IRQHandler+0x144>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:725
  {
    event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7ff f8a7 	bl	8005398 <XMC_DMA_GetChannelsBlockCompleteStatus>
 800624a:	6178      	str	r0, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:726
    while (event != 0)
 800624c:	e020      	b.n	8006290 <XMC_DMA_IRQHandler+0x13c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:728
    {
      mask = (uint32_t)1U << channel;
 800624e:	2201      	movs	r2, #1
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	fa02 f303 	lsl.w	r3, r2, r3
 8006256:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:729
      if (event & mask)
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	4013      	ands	r3, r2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d013      	beq.n	800628a <XMC_DMA_IRQHandler+0x136>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:731
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	b2db      	uxtb	r3, r3
 8006266:	220e      	movs	r2, #14
 8006268:	4619      	mov	r1, r3
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff fd3a 	bl	8005ce4 <XMC_DMA_CH_ClearEventStatus>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:736
                                                                      (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE | 
                                                                      (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE));

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	4413      	add	r3, r2
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:737
        if (event_handler != NULL)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d06c      	beq.n	800635c <XMC_DMA_IRQHandler+0x208>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:739
        {
          event_handler(XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2002      	movs	r0, #2
 8006286:	4798      	blx	r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:742
        }

        break;
 8006288:	e068      	b.n	800635c <XMC_DMA_IRQHandler+0x208>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:744
      }
      ++channel;
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	3301      	adds	r3, #1
 800628e:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:726
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
    while (event != 0)
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1db      	bne.n	800624e <XMC_DMA_IRQHandler+0xfa>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:796
  else
  {
    /* no active interrupt was found? */
  }

}
 8006296:	e066      	b.n	8006366 <XMC_DMA_IRQHandler+0x212>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:747
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f003 0304 	and.w	r3, r3, #4
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d029      	beq.n	80062f6 <XMC_DMA_IRQHandler+0x1a2>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:749
  {
    event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7ff f884 	bl	80053b0 <XMC_DMA_GetChannelsSourceTransactionCompleteStatus>
 80062a8:	6178      	str	r0, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:750
    while (event != 0)
 80062aa:	e020      	b.n	80062ee <XMC_DMA_IRQHandler+0x19a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:752
    {
      mask = (uint32_t)1U << channel;
 80062ac:	2201      	movs	r2, #1
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	fa02 f303 	lsl.w	r3, r2, r3
 80062b4:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:753
      if (event & mask)
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	4013      	ands	r3, r2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d013      	beq.n	80062e8 <XMC_DMA_IRQHandler+0x194>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:755
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2204      	movs	r2, #4
 80062c6:	4619      	mov	r1, r3
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7ff fd0b 	bl	8005ce4 <XMC_DMA_CH_ClearEventStatus>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:758

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	4413      	add	r3, r2
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:759
        if (event_handler != NULL)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d03f      	beq.n	8006360 <XMC_DMA_IRQHandler+0x20c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:761
        {
          event_handler(XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2004      	movs	r0, #4
 80062e4:	4798      	blx	r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:764
        }
        
        break;
 80062e6:	e03b      	b.n	8006360 <XMC_DMA_IRQHandler+0x20c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:766
      }
      ++channel;
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	3301      	adds	r3, #1
 80062ec:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:750
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
    while (event != 0)
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1db      	bne.n	80062ac <XMC_DMA_IRQHandler+0x158>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:796
  else
  {
    /* no active interrupt was found? */
  }

}
 80062f4:	e037      	b.n	8006366 <XMC_DMA_IRQHandler+0x212>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:769
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f003 0308 	and.w	r3, r3, #8
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d032      	beq.n	8006366 <XMC_DMA_IRQHandler+0x212>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:771
  {
    event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff f861 	bl	80053c8 <XMC_DMA_GetChannelsDestinationTransactionCompleteStatus>
 8006306:	6178      	str	r0, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:772
    while (event != 0)
 8006308:	e020      	b.n	800634c <XMC_DMA_IRQHandler+0x1f8>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:774
    {
      mask = (uint32_t)1U << channel;
 800630a:	2201      	movs	r2, #1
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	fa02 f303 	lsl.w	r3, r2, r3
 8006312:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:775
      if (event & mask)
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	4013      	ands	r3, r2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d013      	beq.n	8006346 <XMC_DMA_IRQHandler+0x1f2>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:777
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2208      	movs	r2, #8
 8006324:	4619      	mov	r1, r3
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7ff fcdc 	bl	8005ce4 <XMC_DMA_CH_ClearEventStatus>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:780

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	4413      	add	r3, r2
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:781
        if (event_handler != NULL)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d012      	beq.n	8006364 <XMC_DMA_IRQHandler+0x210>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:783
        {
          event_handler(XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2008      	movs	r0, #8
 8006342:	4798      	blx	r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:786
        }      

        break;
 8006344:	e00e      	b.n	8006364 <XMC_DMA_IRQHandler+0x210>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:788
      }
      ++channel;
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	3301      	adds	r3, #1
 800634a:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:772
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
    while (event != 0)
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1db      	bne.n	800630a <XMC_DMA_IRQHandler+0x1b6>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:796
  else
  {
    /* no active interrupt was found? */
  }

}
 8006352:	e008      	b.n	8006366 <XMC_DMA_IRQHandler+0x212>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:693
        if (event_handler != NULL)
        {
          event_handler(XMC_DMA_CH_EVENT_ERROR);
        }
       
        break;
 8006354:	bf00      	nop
 8006356:	e006      	b.n	8006366 <XMC_DMA_IRQHandler+0x212>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:718
        if (event_handler != NULL)
        {
          event_handler(XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
        }
																	  
        break;
 8006358:	bf00      	nop
 800635a:	e004      	b.n	8006366 <XMC_DMA_IRQHandler+0x212>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:742
        if (event_handler != NULL)
        {
          event_handler(XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE);
        }

        break;
 800635c:	bf00      	nop
 800635e:	e002      	b.n	8006366 <XMC_DMA_IRQHandler+0x212>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:764
        if (event_handler != NULL)
        {
          event_handler(XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
        }
        
        break;
 8006360:	bf00      	nop
 8006362:	e000      	b.n	8006366 <XMC_DMA_IRQHandler+0x212>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:786
        if (event_handler != NULL)
        {
          event_handler(XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
        }      

        break;
 8006364:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dma.c:796
  else
  {
    /* no active interrupt was found? */
  }

}
 8006366:	bf00      	nop
 8006368:	3720      	adds	r7, #32
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	50014000 	.word	0x50014000
 8006374:	2000017c 	.word	0x2000017c
 8006378:	2000019c 	.word	0x2000019c

0800637c <XMC_DSD_Enable>:
XMC_DSD_Enable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:80
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*Enable the DSD Module*/
void XMC_DSD_Enable(XMC_DSD_t *const dsd)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:87
  XMC_UNUSED_ARG(dsd);

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_DSD);
#endif
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_DSD);
 8006384:	2002      	movs	r0, #2
 8006386:	f7fb fa01 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:88
}
 800638a:	bf00      	nop
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop

08006394 <XMC_DSD_Disable>:
XMC_DSD_Disable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:92

/*Disable the DSD Module*/
void XMC_DSD_Disable(XMC_DSD_t *const dsd)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:96
  XMC_ASSERT("XMC_DSD_Disable:Invalid module pointer", XMC_DSD_CHECK_MODULE_PTR(dsd));
  XMC_UNUSED_ARG(dsd);

  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_DSD);
 800639c:	2002      	movs	r0, #2
 800639e:	f7fb f9d9 	bl	8001754 <XMC_SCU_RESET_AssertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:100
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_DSD);
#endif
}
 80063a2:	bf00      	nop
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop

080063ac <XMC_DSD_EnableClock>:
XMC_DSD_EnableClock():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:104

/* Enable the module clock*/
void XMC_DSD_EnableClock(XMC_DSD_t *const dsd)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:107
  XMC_ASSERT("XMC_DSD_EnableClock:Invalid module pointer", XMC_DSD_CHECK_MODULE_PTR(dsd));
  /* Enable the module clock */
  dsd->CLC &= ~(uint32_t)DSD_CLC_DISR_Msk;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f023 0201 	bic.w	r2, r3, #1
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:109
  /* enable internal module clock */
  dsd ->GLOBCFG |= (uint32_t)0x01;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063c6:	f043 0201 	orr.w	r2, r3, #1
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:110
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bc80      	pop	{r7}
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop

080063dc <XMC_DSD_DisableClock>:
XMC_DSD_DisableClock():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:113

void XMC_DSD_DisableClock(XMC_DSD_t *const dsd)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:117
  XMC_ASSERT("XMC_DSD_DisableClock:Invalid module pointer", XMC_DSD_CHECK_MODULE_PTR(dsd));

  /* disable internal module clock */
  dsd->GLOBCFG &= ~(uint32_t)DSD_GLOBCFG_MCSEL_Msk;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063ea:	f023 0207 	bic.w	r2, r3, #7
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:120

  /* stop the module clock */
  dsd->CLC |= (uint32_t)DSD_CLC_DISR_Msk;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f043 0201 	orr.w	r2, r3, #1
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:122

}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	bc80      	pop	{r7}
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop

0800640c <XMC_DSD_Init>:
XMC_DSD_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:126

/* Enable the DSD module and clock */
void XMC_DSD_Init(XMC_DSD_t *const dsd)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:128
  XMC_ASSERT("XMC_DSD_Init:Invalid module pointer", XMC_DSD_CHECK_MODULE_PTR(dsd));
  XMC_DSD_Enable(dsd);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff ffb1 	bl	800637c <XMC_DSD_Enable>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:129
  XMC_DSD_EnableClock(dsd);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff ffc6 	bl	80063ac <XMC_DSD_EnableClock>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:130
}
 8006420:	bf00      	nop
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <XMC_DSD_IsEnabled>:
XMC_DSD_IsEnabled():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:133

bool XMC_DSD_IsEnabled(XMC_DSD_t *const dsd)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:155
  else
  {
    status = false;
  }
  #else
  if(XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_DSD) == false)
 8006430:	2002      	movs	r0, #2
 8006432:	f7fb f9c7 	bl	80017c4 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8006436:	4603      	mov	r3, r0
 8006438:	f083 0301 	eor.w	r3, r3, #1
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <XMC_DSD_IsEnabled+0x20>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:157
  {
    status = true;
 8006442:	2301      	movs	r3, #1
 8006444:	73fb      	strb	r3, [r7, #15]
 8006446:	e001      	b.n	800644c <XMC_DSD_IsEnabled+0x24>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:161
  }
  else
  {
    status = false;
 8006448:	2300      	movs	r3, #0
 800644a:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:165
  }
  #endif
  
  return (status);
 800644c:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:166
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop

08006458 <XMC_DSD_Generator_Init>:
XMC_DSD_Generator_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:170

/*Initializes the Waveform Generator*/
void XMC_DSD_Generator_Init(XMC_DSD_t *const dsd, const XMC_DSD_GENERATOR_CONFIG_t *const config)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:174
  XMC_ASSERT("XMC_DSD_GENERATOR_Init:Invalid module pointer", XMC_DSD_CHECK_MODULE_PTR(dsd));
  XMC_ASSERT("XMC_DSD_GENERATOR_Init:NULL Pointer", (config != (XMC_DSD_GENERATOR_CONFIG_t *)NULL) );
  /* Reset Generator */
  dsd ->CGCFG &= ~((uint32_t)DSD_CGCFG_CGMOD_Msk | (uint32_t)DSD_CGCFG_BREV_Msk | (uint32_t)DSD_CGCFG_SIGPOL_Msk | (uint32_t)DSD_CGCFG_DIVCG_Msk);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006468:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:177

  /* Generator configuration */
  dsd ->CGCFG = config->generator_conf;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:178
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	bc80      	pop	{r7}
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop

08006488 <XMC_DSD_CH_Init>:
XMC_DSD_CH_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:182

/* Initialize main filter,auxiliary filter,integrator, rectifier and timestamp of DSD*/
XMC_DSD_STATUS_t XMC_DSD_CH_Init( XMC_DSD_CH_t *const channel, const XMC_DSD_CH_CONFIG_t *const config)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:188
  XMC_DSD_STATUS_t status;

  XMC_ASSERT("XMC_DSD_CH_Init:Invalid module pointer", XMC_DSD_CHECK_CHANNEL_PTR(channel));
  XMC_ASSERT("XMC_DSD_CH_Init:NULL Pointer", (config != (XMC_DSD_CH_CONFIG_t *)NULL) );

  if (config->filter != (XMC_DSD_CH_FILTER_CONFIG_t*)NULL)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d030      	beq.n	80064fc <XMC_DSD_CH_Init+0x74>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:190
  {
    XMC_DSD_CH_MainFilter_Init(channel, config->filter);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4619      	mov	r1, r3
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f833 	bl	800650c <XMC_DSD_CH_MainFilter_Init>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:192

    if (config->aux != (XMC_DSD_CH_AUX_FILTER_CONFIG_t*)NULL)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d005      	beq.n	80064ba <XMC_DSD_CH_Init+0x32>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:194
    {
      XMC_DSD_CH_AuxFilter_Init(channel, config->aux);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	4619      	mov	r1, r3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f87b 	bl	80065b0 <XMC_DSD_CH_AuxFilter_Init>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:196
    }
    if (config->integrator != (XMC_DSD_CH_INTEGRATOR_CONFIG_t*)NULL)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d005      	beq.n	80064ce <XMC_DSD_CH_Init+0x46>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:198
    {
      XMC_DSD_CH_Integrator_Init(channel, config->integrator);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f889 	bl	80065e0 <XMC_DSD_CH_Integrator_Init>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:200
    }
    if (config->rectify != (XMC_DSD_CH_RECTIFY_CONFIG_t*)NULL)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d005      	beq.n	80064e2 <XMC_DSD_CH_Init+0x5a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:202
    {
      XMC_DSD_CH_Rectify_Init(channel, config->rectify);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	4619      	mov	r1, r3
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f8af 	bl	8006640 <XMC_DSD_CH_Rectify_Init>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:204
    }
    if (config->timestamp != (XMC_DSD_CH_TIMESTAMP_CONFIG_t*)NULL)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d005      	beq.n	80064f6 <XMC_DSD_CH_Init+0x6e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:206
    {
      XMC_DSD_CH_Timestamp_Init(channel, config->timestamp);
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	4619      	mov	r1, r3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f841 	bl	8006578 <XMC_DSD_CH_Timestamp_Init>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:208
    }
    status =  XMC_DSD_STATUS_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	73fb      	strb	r3, [r7, #15]
 80064fa:	e001      	b.n	8006500 <XMC_DSD_CH_Init+0x78>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:212
  }
  else
  {
    status =  XMC_DSD_STATUS_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:214
  }
  return (status);
 8006500:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:216

}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop

0800650c <XMC_DSD_CH_MainFilter_Init>:
XMC_DSD_CH_MainFilter_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:220

/* Initialize main filter of DSD */
void XMC_DSD_CH_MainFilter_Init(XMC_DSD_CH_t *const channel, const XMC_DSD_CH_FILTER_CONFIG_t *const config)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:233
  XMC_ASSERT("XMC_DSD_MAIN_FILTER_Init:Invalid Decimation Factor",
      ((config->decimation_factor >= XMC_DSD_MIN_DECIMATION_FACTOR) && (config->decimation_factor <= XMC_DSD_MAX_DECIMATION_FACTOR)));
  XMC_ASSERT("XMC_DSD_MAIN_FILTER_Init:Invalid divider",(((uint32_t)config->clock_divider <= XMC_DSD_CH_CLK_DIV_32)));

  /*Set Channel frequency*/
  channel->MODCFG = ((uint32_t)config->clock_divider << DSD_CH_MODCFG_DIVM_Pos) | (uint32_t)DSD_CH_MODCFG_DWC_Msk;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800651e:	b2db      	uxtb	r3, r3
 8006520:	041b      	lsls	r3, r3, #16
 8006522:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:236

  /* Input Data/Clk */
  channel->DICFG = config->demodulator_conf | (uint32_t)DSD_CH_DICFG_DSWC_Msk | (uint32_t)DSD_CH_DICFG_SCWC_Msk;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6093      	str	r3, [r2, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:239

  /*The decimation factor of the Main CIC filter is CFMDF + 1.*/
  decimation_factor_temp = config->decimation_factor-1U;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	3b01      	subs	r3, #1
 8006540:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:240
  filter_start_value_temp = config->filter_start_value-1U;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	3b01      	subs	r3, #1
 8006548:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:244

  /* Filter setup*/
  channel->FCFGC = (decimation_factor_temp |
		  (filter_start_value_temp << (uint32_t)DSD_CH_FCFGC_CFMSV_Pos)|
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	041a      	lsls	r2, r3, #16
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:243
  /*The decimation factor of the Main CIC filter is CFMDF + 1.*/
  decimation_factor_temp = config->decimation_factor-1U;
  filter_start_value_temp = config->filter_start_value-1U;

  /* Filter setup*/
  channel->FCFGC = (decimation_factor_temp |
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:245
		  (filter_start_value_temp << (uint32_t)DSD_CH_FCFGC_CFMSV_Pos)|
		  config->main_filter_conf|
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:244
  decimation_factor_temp = config->decimation_factor-1U;
  filter_start_value_temp = config->filter_start_value-1U;

  /* Filter setup*/
  channel->FCFGC = (decimation_factor_temp |
		  (filter_start_value_temp << (uint32_t)DSD_CH_FCFGC_CFMSV_Pos)|
 8006556:	4313      	orrs	r3, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:245
		  config->main_filter_conf|
 8006558:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:243
  /*The decimation factor of the Main CIC filter is CFMDF + 1.*/
  decimation_factor_temp = config->decimation_factor-1U;
  filter_start_value_temp = config->filter_start_value-1U;

  /* Filter setup*/
  channel->FCFGC = (decimation_factor_temp |
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:249
		  (filter_start_value_temp << (uint32_t)DSD_CH_FCFGC_CFMSV_Pos)|
		  config->main_filter_conf|
		  (uint32_t)DSD_CH_FCFGC_CFEN_Msk);

  /* Offset */
  channel->OFFM = (uint16_t)config->offset;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006566:	b29b      	uxth	r3, r3
 8006568:	461a      	mov	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	639a      	str	r2, [r3, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:250
}
 800656e:	bf00      	nop
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	bc80      	pop	{r7}
 8006576:	4770      	bx	lr

08006578 <XMC_DSD_CH_Timestamp_Init>:
XMC_DSD_CH_Timestamp_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:254

/* Initialize timestamp mode of DSD */
void XMC_DSD_CH_Timestamp_Init(XMC_DSD_CH_t *const channel, const XMC_DSD_CH_TIMESTAMP_CONFIG_t *const config)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:259
  uint32_t temp;
  XMC_ASSERT("XMC_DSD_MAIN_FILTER_Init:Invalid module pointer", XMC_DSD_CHECK_CHANNEL_PTR(channel));
  XMC_ASSERT("XMC_DSD_MAIN_FILTER_Init:NULL Pointer", (config != (XMC_DSD_CH_TIMESTAMP_CONFIG_t *)NULL) );

  temp = (channel->DICFG | (uint32_t)DSD_CH_DICFG_TRWC_Msk);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800658a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:260
  temp &= ~((uint32_t)DSD_CH_DICFG_TSTRMODE_Msk|(uint32_t)DSD_CH_DICFG_TRSEL_Msk);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006592:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:261
  temp |= config->timestamp_conf;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:262
  channel->DICFG = temp;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:263
}
 80065a4:	bf00      	nop
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bc80      	pop	{r7}
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop

080065b0 <XMC_DSD_CH_AuxFilter_Init>:
XMC_DSD_CH_AuxFilter_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:267

/* Initialize auxiliary filter of DSD */
void XMC_DSD_CH_AuxFilter_Init(XMC_DSD_CH_t *const channel, const XMC_DSD_CH_AUX_FILTER_CONFIG_t *const config)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:275
  XMC_ASSERT("XMC_DSD_AUX_FILTER_Init:Invalid module pointer", XMC_DSD_CHECK_CHANNEL_PTR(channel));
  XMC_ASSERT("XMC_DSD_AUX_FILTER_Init:NULL Pointer", (config != (XMC_DSD_CH_AUX_FILTER_CONFIG_t *)NULL) );
  XMC_ASSERT("XMC_DSD_AUX_FILTER_Init:Invalid Decimation Factor",
      ((config->decimation_factor >= XMC_DSD_MIN_DECIMATION_FACTOR) && (config->decimation_factor <= XMC_DSD_MAX_DECIMATION_FACTOR_AUX)));

  channel->BOUNDSEL = config->boundary_conf;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	629a      	str	r2, [r3, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:277
  /*The decimation factor of the Aux CIC filter is CFMDF + 1.*/
  decimation_factor_temp = config->decimation_factor-1U;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:278
  channel->FCFGA = (decimation_factor_temp | config->aux_filter_conf);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	431a      	orrs	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	619a      	str	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:279
}
 80065d6:	bf00      	nop
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	bc80      	pop	{r7}
 80065de:	4770      	bx	lr

080065e0 <XMC_DSD_CH_Integrator_Init>:
XMC_DSD_CH_Integrator_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:283

/* Integrator initialization of DSD */
void XMC_DSD_CH_Integrator_Init(XMC_DSD_CH_t *const channel, const XMC_DSD_CH_INTEGRATOR_CONFIG_t *const config)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:290
  XMC_ASSERT("XMC_DSD_INTEGRATOR_Init:Invalid module pointer", XMC_DSD_CHECK_CHANNEL_PTR(channel));
  XMC_ASSERT("XMC_DSD_INTEGRATOR_Init:NULL Pointer", (config != (XMC_DSD_CH_INTEGRATOR_CONFIG_t *)NULL) );
  XMC_ASSERT("XMC_DSD_INTEGRATOR_Init:Invalid integration_loop", (config->integration_loop > 0U ));
  XMC_ASSERT("XMC_DSD_INTEGRATOR_Init:Invalid counted_values", (config->counted_values > 0U ));

  channel->IWCTR = ((config->integration_loop - 1U) << DSD_CH_IWCTR_REPVAL_Pos)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	3b01      	subs	r3, #1
 80065f0:	031a      	lsls	r2, r3, #12
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:291
                   | (config->discarded_values << DSD_CH_IWCTR_NVALDIS_Pos)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	041b      	lsls	r3, r3, #16
 80065f8:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:292
                   | (config->stop_condition << DSD_CH_IWCTR_IWS_Pos)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	05db      	lsls	r3, r3, #23
 8006600:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:293
                   | ((config->counted_values - 1U) << DSD_CH_IWCTR_NVALINT_Pos);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	3b01      	subs	r3, #1
 8006608:	061b      	lsls	r3, r3, #24
 800660a:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:290
  XMC_ASSERT("XMC_DSD_INTEGRATOR_Init:Invalid module pointer", XMC_DSD_CHECK_CHANNEL_PTR(channel));
  XMC_ASSERT("XMC_DSD_INTEGRATOR_Init:NULL Pointer", (config != (XMC_DSD_CH_INTEGRATOR_CONFIG_t *)NULL) );
  XMC_ASSERT("XMC_DSD_INTEGRATOR_Init:Invalid integration_loop", (config->integration_loop > 0U ));
  XMC_ASSERT("XMC_DSD_INTEGRATOR_Init:Invalid counted_values", (config->counted_values > 0U ));

  channel->IWCTR = ((config->integration_loop - 1U) << DSD_CH_IWCTR_REPVAL_Pos)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	621a      	str	r2, [r3, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:296
                   | (config->discarded_values << DSD_CH_IWCTR_NVALDIS_Pos)
                   | (config->stop_condition << DSD_CH_IWCTR_IWS_Pos)
                   | ((config->counted_values - 1U) << DSD_CH_IWCTR_NVALINT_Pos);

  /*To ensure proper operation, ensure that bit field ITRMODE is zero before selecting any other trigger mode.*/
  temp = (channel->DICFG & ~((uint32_t)DSD_CH_DICFG_ITRMODE_Msk|(uint32_t)DSD_CH_DICFG_TRSEL_Msk)) | (uint32_t)DSD_CH_DICFG_TRWC_Msk;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f423 4373 	bic.w	r3, r3, #62208	; 0xf300
 8006618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800661c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:298

  channel->DICFG = temp;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:300

  temp |=  config->integrator_trigger;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	4313      	orrs	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:301
  channel->DICFG = temp;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:302
}
 8006634:	bf00      	nop
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	bc80      	pop	{r7}
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop

08006640 <XMC_DSD_CH_Rectify_Init>:
XMC_DSD_CH_Rectify_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:306

/* Rectifier initialization of DSD */
void XMC_DSD_CH_Rectify_Init(XMC_DSD_CH_t *const channel, const XMC_DSD_CH_RECTIFY_CONFIG_t *const config)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:311
  XMC_ASSERT("XMC_DSD_RECTIFY_Init:Invalid module pointer", XMC_DSD_CHECK_CHANNEL_PTR(channel));
  XMC_ASSERT("XMC_DSD_RECTIFY_Init:NULL Pointer", (config != (XMC_DSD_CH_RECTIFY_CONFIG_t *)NULL));
  XMC_ASSERT("XMC_DSD_RECTIFY_Init:NULL Pointer", (((uint16_t)config->delay + (uint16_t)config->half_cycle) <= 0xFF));

  channel->RECTCFG = config->rectify_config | (uint32_t)DSD_CH_RECTCFG_RFEN_Msk;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f043 0201 	orr.w	r2, r3, #1
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:312
  channel->CGSYNC = (((uint32_t) config->delay << (uint32_t)DSD_CH_CGSYNC_SDPOS_Pos)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	791b      	ldrb	r3, [r3, #4]
 800665c:	041a      	lsls	r2, r3, #16
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:313
                      | (((uint32_t)config->delay + (uint32_t)config->half_cycle) << (uint32_t)DSD_CH_CGSYNC_SDNEG_Pos));
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	791b      	ldrb	r3, [r3, #4]
 8006662:	4619      	mov	r1, r3
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	795b      	ldrb	r3, [r3, #5]
 8006668:	440b      	add	r3, r1
 800666a:	061b      	lsls	r3, r3, #24
 800666c:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:312
  XMC_ASSERT("XMC_DSD_RECTIFY_Init:Invalid module pointer", XMC_DSD_CHECK_CHANNEL_PTR(channel));
  XMC_ASSERT("XMC_DSD_RECTIFY_Init:NULL Pointer", (config != (XMC_DSD_CH_RECTIFY_CONFIG_t *)NULL));
  XMC_ASSERT("XMC_DSD_RECTIFY_Init:NULL Pointer", (((uint16_t)config->delay + (uint16_t)config->half_cycle) <= 0xFF));

  channel->RECTCFG = config->rectify_config | (uint32_t)DSD_CH_RECTCFG_RFEN_Msk;
  channel->CGSYNC = (((uint32_t) config->delay << (uint32_t)DSD_CH_CGSYNC_SDPOS_Pos)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:314
                      | (((uint32_t)config->delay + (uint32_t)config->half_cycle) << (uint32_t)DSD_CH_CGSYNC_SDNEG_Pos));
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	bc80      	pop	{r7}
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop

08006680 <XMC_DSD_CH_GetResult_TS>:
XMC_DSD_CH_GetResult_TS():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:321
/* API to get the result of the last conversion */
void XMC_DSD_CH_GetResult_TS(XMC_DSD_CH_t* const channel,
                             int16_t* dsd_result,
                             uint8_t* dsd_filter_count,
                             uint8_t* dsd_integration_count)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
 800668c:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:325
  uint32_t timestamp;
  uint16_t result;

  timestamp = channel->TSTMP;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006692:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:326
  result = (uint16_t)((uint32_t)timestamp & DSD_CH_TSTMP_RESULT_Msk);
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	827b      	strh	r3, [r7, #18]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:327
  *dsd_result = (int16_t)(result);
 8006698:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	801a      	strh	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:328
  *dsd_filter_count = (uint8_t) ((timestamp & (uint32_t)DSD_CH_TSTMP_CFMDCNT_Msk)>>(uint32_t)DSD_CH_TSTMP_CFMDCNT_Pos);
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	0c1b      	lsrs	r3, r3, #16
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	701a      	strb	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:329
  *dsd_integration_count = (uint8_t) ((timestamp & (uint32_t)DSD_CH_TSTMP_NVALCNT_Msk)>>(uint32_t)DSD_CH_TSTMP_NVALCNT_Pos);
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	0e1b      	lsrs	r3, r3, #24
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	701a      	strb	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:330
}
 80066ba:	bf00      	nop
 80066bc:	371c      	adds	r7, #28
 80066be:	46bd      	mov	sp, r7
 80066c0:	bc80      	pop	{r7}
 80066c2:	4770      	bx	lr

080066c4 <XMC_DSD_CH_GetResult_TS_Time>:
XMC_DSD_CH_GetResult_TS_Time():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:334

/* API to get the result of the last conversion with the time */
void XMC_DSD_CH_GetResult_TS_Time(XMC_DSD_CH_t* const channel, int16_t* dsd_Result, uint32_t* time)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b089      	sub	sp, #36	; 0x24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:341
  uint16_t filter_count;
  uint16_t integrator_count;
  uint16_t decimation;
  uint16_t result;

  timestamp = channel->TSTMP;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d4:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:342
  decimation = (uint16_t)(channel->FCFGC & DSD_CH_FCFGC_CFMDF_Msk);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	b29b      	uxth	r3, r3
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	82fb      	strh	r3, [r7, #22]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:343
  filter_count = (uint16_t)((timestamp & DSD_CH_TSTMP_CFMDCNT_Msk)>>DSD_CH_TSTMP_CFMDCNT_Pos);
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	0c1b      	lsrs	r3, r3, #16
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	82bb      	strh	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:346

  /* Integration enabled? */
  if ((channel->IWCTR & DSD_CH_IWCTR_INTEN_Msk))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d018      	beq.n	8006728 <XMC_DSD_CH_GetResult_TS_Time+0x64>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:348
  {
    integrator_count = (uint16_t) ((timestamp & DSD_CH_TSTMP_NVALCNT_Msk)>>DSD_CH_TSTMP_NVALCNT_Pos);
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	0e1b      	lsrs	r3, r3, #24
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006700:	83fb      	strh	r3, [r7, #30]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:351

    /*See Errata number: xxyy */
    if (filter_count == decimation)
 8006702:	8aba      	ldrh	r2, [r7, #20]
 8006704:	8afb      	ldrh	r3, [r7, #22]
 8006706:	429a      	cmp	r2, r3
 8006708:	d102      	bne.n	8006710 <XMC_DSD_CH_GetResult_TS_Time+0x4c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:353
    {
      integrator_count++;
 800670a:	8bfb      	ldrh	r3, [r7, #30]
 800670c:	3301      	adds	r3, #1
 800670e:	83fb      	strh	r3, [r7, #30]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:355
    }
    *time = (uint32_t)(((uint32_t) integrator_count * ((uint32_t) decimation + 1U)) + (uint32_t) ((uint32_t)decimation - filter_count));
 8006710:	8bfb      	ldrh	r3, [r7, #30]
 8006712:	8afa      	ldrh	r2, [r7, #22]
 8006714:	3201      	adds	r2, #1
 8006716:	fb02 f203 	mul.w	r2, r2, r3
 800671a:	8af9      	ldrh	r1, [r7, #22]
 800671c:	8abb      	ldrh	r3, [r7, #20]
 800671e:	1acb      	subs	r3, r1, r3
 8006720:	441a      	add	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	e004      	b.n	8006732 <XMC_DSD_CH_GetResult_TS_Time+0x6e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:359
  }
  else
  {
    *time = (uint32_t) ((uint32_t)decimation - filter_count);
 8006728:	8afa      	ldrh	r2, [r7, #22]
 800672a:	8abb      	ldrh	r3, [r7, #20]
 800672c:	1ad2      	subs	r2, r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:361
  }
  result = (uint16_t)((uint32_t)timestamp & DSD_CH_TSTMP_RESULT_Msk);
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	827b      	strh	r3, [r7, #18]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:362
  *dsd_Result = (int16_t)(result);
 8006736:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	801a      	strh	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_dsd.c:363
}
 800673e:	bf00      	nop
 8006740:	3724      	adds	r7, #36	; 0x24
 8006742:	46bd      	mov	sp, r7
 8006744:	bc80      	pop	{r7}
 8006746:	4770      	bx	lr

08006748 <XMC_EBU_Enable>:
XMC_EBU_Enable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_ebu.h:1114
 *
 * \par<b>Related APIs:</b><br>
 * XMC_EBU_Disable(), XMC_SCU_RESET_AssertPeripheralReset()
 */
__STATIC_INLINE void XMC_EBU_Enable(XMC_EBU_t *const ebu)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_ebu.h:1116
  XMC_ASSERT("XMC_EBU_Enable: Invalid module pointer", XMC_EBU_CHECK_MODULE_PTR(ebu));
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_EBU);
 8006750:	4806      	ldr	r0, [pc, #24]	; (800676c <XMC_EBU_Enable+0x24>)
 8006752:	f7fb f81b 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_ebu.h:1117
  ebu->CLC &= ~EBU_CLC_DISR_Msk;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f023 0201 	bic.w	r2, r3, #1
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_ebu.h:1118
}
 8006762:	bf00      	nop
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	30000004 	.word	0x30000004

08006770 <XMC_EBU_Init>:
XMC_EBU_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ebu.c:64

/*
 * Initialize the EBU peripheral
 */
XMC_EBU_STATUS_t XMC_EBU_Init(XMC_EBU_t *const ebu,const XMC_EBU_CONFIG_t *const config)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ebu.c:69
  XMC_ASSERT("XMC_EBU_Init: Invalid module pointer", XMC_EBU_CHECK_MODULE_PTR(ebu));
  XMC_ASSERT("XMC_EBU_Init:Null Pointer", (config != (XMC_EBU_CONFIG_t *)NULL));
  
  /* Enable EBU */
  XMC_EBU_Enable(ebu);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7ff ffe4 	bl	8006748 <XMC_EBU_Enable>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ebu.c:72

  /* Clock configuration */
  ebu->CLC  =  config->ebu_clk_config.raw0;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ebu.c:75

  /*EBU Mode Configuration */
  ebu->MODCON =   config->ebu_mode_config.raw0;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ebu.c:78

  /* Address Bits available for GPIO function */
  ebu->USERCON = config->ebu_free_pins_to_gpio.raw0;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ebu.c:80

  return XMC_EBU_STATUS_OK;
 8006798:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ebu.c:81
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop

080067a4 <XMC_EBU_ConfigureSdram>:
XMC_EBU_ConfigureSdram():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ebu.c:87

/*
 * Configures the SDRAM with operating modes and refresh parameters
 */
void XMC_EBU_ConfigureSdram(XMC_EBU_t *const ebu,const XMC_EBU_SDRAM_CONFIG_t *const config)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ebu.c:92
  XMC_ASSERT("XMC_EBU_Init: Invalid module pointer", XMC_EBU_CHECK_MODULE_PTR(ebu));
  XMC_ASSERT("XMC_EBU_Init:Null Pointer", (config != (XMC_EBU_SDRAM_CONFIG_t *)NULL));
  
  /* EBU SDRAM Refresh Configuration Parameters */
  ebu->SDRMREF = config->raw2;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	689a      	ldr	r2, [r3, #8]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	671a      	str	r2, [r3, #112]	; 0x70
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ebu.c:94
  /* EBU SDRAM General Configuration Parameters */
  ebu->SDRMCON = config->raw0;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	669a      	str	r2, [r3, #104]	; 0x68
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ebu.c:96
  /* EBU SDRAM Operation Mode Configuration Parameters */
  ebu->SDRMOD = config->raw1;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	66da      	str	r2, [r3, #108]	; 0x6c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ebu.c:97
}
 80067c6:	bf00      	nop
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bc80      	pop	{r7}
 80067ce:	4770      	bx	lr

080067d0 <XMC_EBU_ConfigureRegion>:
XMC_EBU_ConfigureRegion():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ebu.c:103

/*
 * Configures the SDRAM region for read and write operation
 */
void XMC_EBU_ConfigureRegion(XMC_EBU_t *const ebu,const XMC_EBU_REGION_t *const region)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ebu.c:109
  
  XMC_ASSERT("XMC_EBU_Init: Invalid module pointer", XMC_EBU_CHECK_MODULE_PTR(ebu));
  XMC_ASSERT("XMC_EBU_Init:Null Pointer", (region != (XMC_EBU_REGION_t *)NULL));
  
  /* Read configuration of the region*/
  ebu->BUS[region->read_config.ebu_region_no].RDCON = region->read_config.ebu_bus_read_config.raw0;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	6852      	ldr	r2, [r2, #4]
 80067e2:	6879      	ldr	r1, [r7, #4]
 80067e4:	011b      	lsls	r3, r3, #4
 80067e6:	440b      	add	r3, r1
 80067e8:	3328      	adds	r3, #40	; 0x28
 80067ea:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ebu.c:112

  /* Read parameters of the region*/
  ebu->BUS[region->read_config.ebu_region_no].RDAPR = region->read_config.ebu_bus_read_config.raw1;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	6892      	ldr	r2, [r2, #8]
 80067f4:	6879      	ldr	r1, [r7, #4]
 80067f6:	011b      	lsls	r3, r3, #4
 80067f8:	440b      	add	r3, r1
 80067fa:	332c      	adds	r3, #44	; 0x2c
 80067fc:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ebu.c:115

  /* Write configuration of the region*/
  ebu->BUS[region->write_config.ebu_region_no].WRCON = region->write_config.ebu_bus_write_config.raw0;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	6912      	ldr	r2, [r2, #16]
 8006806:	6879      	ldr	r1, [r7, #4]
 8006808:	3303      	adds	r3, #3
 800680a:	011b      	lsls	r3, r3, #4
 800680c:	440b      	add	r3, r1
 800680e:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ebu.c:118

  /* Write parameters of the region*/
  ebu->BUS[region->write_config.ebu_region_no].WRAPR = region->write_config.ebu_bus_write_config.raw1;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	6952      	ldr	r2, [r2, #20]
 8006818:	6879      	ldr	r1, [r7, #4]
 800681a:	3303      	adds	r3, #3
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	440b      	add	r3, r1
 8006820:	3304      	adds	r3, #4
 8006822:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ebu.c:119
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	bc80      	pop	{r7}
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop

08006830 <XMC_ERU_ETL_Init>:
XMC_ERU_ETL_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:130
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{ 
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	460b      	mov	r3, r1
 800683a:	607a      	str	r2, [r7, #4]
 800683c:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:134
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f7f9 ff06 	bl	8000650 <XMC_ERU_Enable>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:136

  eru->EXISEL = (eru->EXISEL & 
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681a      	ldr	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:137
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8006848:	7afb      	ldrb	r3, [r7, #11]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	210f      	movs	r1, #15
 800684e:	fa01 f303 	lsl.w	r3, r1, r3
 8006852:	43db      	mvns	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:136
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 8006854:	401a      	ands	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:138
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6819      	ldr	r1, [r3, #0]
 800685a:	7afb      	ldrb	r3, [r7, #11]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	fa01 f303 	lsl.w	r3, r1, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:137
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8006862:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:136
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:140
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  
  eru->EXICON[channel] = config->raw;
 8006868:	7afa      	ldrb	r2, [r7, #11]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6859      	ldr	r1, [r3, #4]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	3204      	adds	r2, #4
 8006872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:141
}
 8006876:	bf00      	nop
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop

08006880 <XMC_ERU_OGU_Init>:
XMC_ERU_OGU_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:147

/* Initializes the selected ERU_OGUy channel with the config structure.  */
void XMC_ERU_OGU_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_OGU_CONFIG_t *const config)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	460b      	mov	r3, r1
 800688a:	607a      	str	r2, [r7, #4]
 800688c:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:151
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f7f9 fede 	bl	8000650 <XMC_ERU_Enable>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:153

  eru->EXOCON[channel] = config->raw;
 8006894:	7afa      	ldrb	r2, [r7, #11]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6819      	ldr	r1, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3208      	adds	r2, #8
 800689e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:154
}
 80068a2:	bf00      	nop
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop

080068ac <XMC_ERU_ETL_SetInput>:
XMC_ERU_ETL_SetInput():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:161
/* Configures the event source for path A and path B, with selected input_a and input_b respectively.*/
void XMC_ERU_ETL_SetInput(XMC_ERU_t *const eru,
                          const uint8_t channel,
                          const XMC_ERU_ETL_INPUT_A_t input_a,
                          const XMC_ERU_ETL_INPUT_B_t input_b)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	4608      	mov	r0, r1
 80068b6:	4611      	mov	r1, r2
 80068b8:	461a      	mov	r2, r3
 80068ba:	4603      	mov	r3, r0
 80068bc:	70fb      	strb	r3, [r7, #3]
 80068be:	460b      	mov	r3, r1
 80068c0:	70bb      	strb	r3, [r7, #2]
 80068c2:	4613      	mov	r3, r2
 80068c4:	707b      	strb	r3, [r7, #1]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:167
  XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid A", XMC_ERU_ETL_CHECK_INPUT_A(input_a));
  XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid B", XMC_ERU_ETL_CHECK_INPUT_B(input_b));

  eru->EXISEL = (eru->EXISEL & ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	78fb      	ldrb	r3, [r7, #3]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	210f      	movs	r1, #15
 80068d0:	fa01 f303 	lsl.w	r3, r1, r3
 80068d4:	43db      	mvns	r3, r3
 80068d6:	401a      	ands	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:168
                (((uint32_t)input_a | (uint32_t)(input_b << ERU_EXISEL_INPUT_BITSIZE))  << (channel * ERU_EXISEL_BITSIZE));
 80068d8:	78bb      	ldrb	r3, [r7, #2]
 80068da:	7879      	ldrb	r1, [r7, #1]
 80068dc:	0089      	lsls	r1, r1, #2
 80068de:	4319      	orrs	r1, r3
 80068e0:	78fb      	ldrb	r3, [r7, #3]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	fa01 f303 	lsl.w	r3, r1, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:167
  XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid A", XMC_ERU_ETL_CHECK_INPUT_A(input_a));
  XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid B", XMC_ERU_ETL_CHECK_INPUT_B(input_b));

  eru->EXISEL = (eru->EXISEL & ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 80068e8:	431a      	orrs	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:169
                (((uint32_t)input_a | (uint32_t)(input_b << ERU_EXISEL_INPUT_BITSIZE))  << (channel * ERU_EXISEL_BITSIZE));
}
 80068ee:	bf00      	nop
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bc80      	pop	{r7}
 80068f6:	4770      	bx	lr

080068f8 <XMC_ERU_ETL_SetSource>:
XMC_ERU_ETL_SetSource():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:176
/* Select input path combination along with polarity for event generation by setting (SS, NA, NB) bits of 
   EXICONx(x = [0 to 3]) register */
void XMC_ERU_ETL_SetSource(XMC_ERU_t *const eru,
                          const uint8_t channel,
                          const XMC_ERU_ETL_SOURCE_t source)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	460b      	mov	r3, r1
 8006902:	70fb      	strb	r3, [r7, #3]
 8006904:	4613      	mov	r3, r2
 8006906:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:181
  XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Source", XMC_ERU_ETL_CHECK_EVENT_SOURCE(source));

  eru->EXICON_b[channel].SS = (uint8_t)source;
 8006908:	78fb      	ldrb	r3, [r7, #3]
 800690a:	78ba      	ldrb	r2, [r7, #2]
 800690c:	f002 020f 	and.w	r2, r2, #15
 8006910:	b2d0      	uxtb	r0, r2
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	1d19      	adds	r1, r3, #4
 8006916:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800691a:	f360 230b 	bfi	r3, r0, #8, #4
 800691e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:182
}
 8006922:	bf00      	nop
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	bc80      	pop	{r7}
 800692a:	4770      	bx	lr

0800692c <XMC_ERU_ETL_SetEdgeDetection>:
XMC_ERU_ETL_SetEdgeDetection():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:188

/* Configure event trigger edge/s by setting (RE, FE) bits of EXICONx(x = [0 to 3]) register.*/
void XMC_ERU_ETL_SetEdgeDetection(XMC_ERU_t *const eru,
                                  const uint8_t channel,
                                  const XMC_ERU_ETL_EDGE_DETECTION_t edge_detection)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	70fb      	strb	r3, [r7, #3]
 8006938:	4613      	mov	r3, r2
 800693a:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:193
  XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Trigger Edge", XMC_ERU_ETL_CHECK_TRIGGER_EDGE(edge_detection));

  eru->EXICON_b[channel].ED = (uint8_t)edge_detection;
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	78ba      	ldrb	r2, [r7, #2]
 8006940:	f002 0203 	and.w	r2, r2, #3
 8006944:	b2d0      	uxtb	r0, r2
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	1d19      	adds	r1, r3, #4
 800694a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800694e:	f360 0383 	bfi	r3, r0, #2, #2
 8006952:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:194
}
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	bc80      	pop	{r7}
 800695e:	4770      	bx	lr

08006960 <XMC_ERU_ETL_GetEdgeDetection>:
XMC_ERU_ETL_GetEdgeDetection():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:198

/* Returns the configured event trigger edge/s by reading (RE, FE) bits of EXICONx(x = [0 to 3]) register. */
XMC_ERU_ETL_EDGE_DETECTION_t XMC_ERU_ETL_GetEdgeDetection(XMC_ERU_t *const eru, const uint8_t channel)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	460b      	mov	r3, r1
 800696a:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:201
  XMC_ASSERT("XMC_ERU_ETL_GetEdgeDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_GetEdgeDetection:Invalid Channel Number", (channel < 4U));
  return ((XMC_ERU_ETL_EDGE_DETECTION_t)(eru->EXICON_b[channel].ED));
 800696c:	78fa      	ldrb	r2, [r7, #3]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	3204      	adds	r2, #4
 8006972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006976:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800697a:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:202
}
 800697c:	4618      	mov	r0, r3
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	bc80      	pop	{r7}
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop

08006988 <XMC_ERU_ETL_SetStatusFlagMode>:
XMC_ERU_ETL_SetStatusFlagMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:208

/* Set the status flag bit(FL) in EXICONx(x = [0 to 3]). */
void XMC_ERU_ETL_SetStatusFlagMode(XMC_ERU_t *const eru,
                                   const uint8_t channel,
                                   const XMC_ERU_ETL_STATUS_FLAG_MODE_t mode)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	460b      	mov	r3, r1
 8006992:	70fb      	strb	r3, [r7, #3]
 8006994:	4613      	mov	r3, r2
 8006996:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:213
  XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Status Flag Mode", XMC_ERU_ETL_CHECK_STATUS_FLAG_MODE(mode));

  eru->EXICON_b[channel].LD = (uint8_t)mode;
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	78ba      	ldrb	r2, [r7, #2]
 800699c:	f002 0201 	and.w	r2, r2, #1
 80069a0:	b2d0      	uxtb	r0, r2
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	1d19      	adds	r1, r3, #4
 80069a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80069aa:	f360 0341 	bfi	r3, r0, #1, #1
 80069ae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:214
}
 80069b2:	bf00      	nop
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bc80      	pop	{r7}
 80069ba:	4770      	bx	lr

080069bc <XMC_ERU_ETL_EnableOutputTrigger>:
XMC_ERU_ETL_EnableOutputTrigger():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:221
/* Configure which Channel of OGUy(Output gating unit y = [0 to 3]) to be mapped by the trigger pulse generated by 
 * ETLx(Event Trigger Logic, x = [0 to 3]) by setting (OCS and PE) bit fields. */
void XMC_ERU_ETL_EnableOutputTrigger(XMC_ERU_t *const eru,
                                     const uint8_t channel,
                                     const XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL_t trigger)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	460b      	mov	r3, r1
 80069c6:	70fb      	strb	r3, [r7, #3]
 80069c8:	4613      	mov	r3, r2
 80069ca:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:226
  XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Output Channel", XMC_ERU_ETL_CHECK_TRIGGER_CHANNEL(trigger));

  eru->EXICON_b[channel].OCS = (uint8_t)trigger;
 80069cc:	78fb      	ldrb	r3, [r7, #3]
 80069ce:	78ba      	ldrb	r2, [r7, #2]
 80069d0:	f002 0207 	and.w	r2, r2, #7
 80069d4:	b2d0      	uxtb	r0, r2
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	1d19      	adds	r1, r3, #4
 80069da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80069de:	f360 1306 	bfi	r3, r0, #4, #3
 80069e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:227
  eru->EXICON_b[channel].PE = (uint8_t)true;
 80069e6:	78fb      	ldrb	r3, [r7, #3]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	1d19      	adds	r1, r3, #4
 80069ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80069f0:	f043 0301 	orr.w	r3, r3, #1
 80069f4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:228
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bc80      	pop	{r7}
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop

08006a04 <XMC_ERU_ETL_DisableOutputTrigger>:
XMC_ERU_ETL_DisableOutputTrigger():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:232

/* Disables the trigger pulse generation by clearing the (PE) of the EXICONx(x = [0 to 3]). */
void XMC_ERU_ETL_DisableOutputTrigger(XMC_ERU_t *const eru, const uint8_t channel)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:236
  XMC_ASSERT("XMC_ERU_ETL_DisableOutputTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_DisableOutputTrigger:Invalid Channel Number", (channel < 4U));

  eru->EXICON_b[channel].PE = false;
 8006a10:	78fb      	ldrb	r3, [r7, #3]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	1d19      	adds	r1, r3, #4
 8006a16:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a1a:	f36f 0300 	bfc	r3, #0, #1
 8006a1e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:237
}
 8006a22:	bf00      	nop
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bc80      	pop	{r7}
 8006a2a:	4770      	bx	lr

08006a2c <XMC_ERU_OGU_EnablePatternDetection>:
XMC_ERU_OGU_EnablePatternDetection():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:243

/* Configures ERU_ETLx(x = [0 to 3]) for pattern match detection by setting IPENx(x = [0 to 3) and GEEN bits. */
void XMC_ERU_OGU_EnablePatternDetection(XMC_ERU_t *const eru,
                                        const uint8_t channel,
                                        const XMC_ERU_OGU_PATTERN_DETECTION_INPUT_t input)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	460b      	mov	r3, r1
 8006a36:	70fb      	strb	r3, [r7, #3]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:248
  XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Pattern input", XMC_ERU_OGU_CHECK_PATTERN_INPUT(input));

  eru->EXOCON_b[channel].IPEN = (uint8_t)input;
 8006a3c:	78fb      	ldrb	r3, [r7, #3]
 8006a3e:	78ba      	ldrb	r2, [r7, #2]
 8006a40:	f002 020f 	and.w	r2, r2, #15
 8006a44:	b2d0      	uxtb	r0, r2
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	f103 0108 	add.w	r1, r3, #8
 8006a4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a50:	f360 330f 	bfi	r3, r0, #12, #4
 8006a54:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:249
  eru->EXOCON_b[channel].GEEN = true;
 8006a58:	78fb      	ldrb	r3, [r7, #3]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	f103 0108 	add.w	r1, r3, #8
 8006a60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a64:	f043 0304 	orr.w	r3, r3, #4
 8006a68:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:250
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bc80      	pop	{r7}
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop

08006a78 <XMC_ERU_OGU_DisablePatternDetection>:
XMC_ERU_OGU_DisablePatternDetection():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:254

/* Disable the pattern detection by clearing (GEEN) bit. */
void XMC_ERU_OGU_DisablePatternDetection(XMC_ERU_t *const eru, const uint8_t channel)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	460b      	mov	r3, r1
 8006a82:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:258
  XMC_ASSERT("XMC_ERU_OGU_DisablePatternDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_DisablePatternDetection:Invalid Channel Number", (channel < 4U));

  eru->EXOCON_b[channel].GEEN = false;
 8006a84:	78fb      	ldrb	r3, [r7, #3]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	f103 0108 	add.w	r1, r3, #8
 8006a8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a90:	f36f 0382 	bfc	r3, #2, #1
 8006a94:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:259
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bc80      	pop	{r7}
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop

08006aa4 <XMC_ERU_OGU_EnablePeripheralTrigger>:
XMC_ERU_OGU_EnablePeripheralTrigger():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:265

/* Configures peripheral trigger input, by setting (ISS) bit. */
void XMC_ERU_OGU_EnablePeripheralTrigger(XMC_ERU_t *const eru,
                                         const uint8_t channel,
                                         const XMC_ERU_OGU_PERIPHERAL_TRIGGER_t peripheral_trigger)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	460b      	mov	r3, r1
 8006aae:	70fb      	strb	r3, [r7, #3]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:271
  XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Peripheral Trigger Input", 
              XMC_ERU_OGU_CHECK_PERIPHERAL_TRIGGER(peripheral_trigger));

  eru->EXOCON_b[channel].ISS = (uint8_t)peripheral_trigger;
 8006ab4:	78fb      	ldrb	r3, [r7, #3]
 8006ab6:	78ba      	ldrb	r2, [r7, #2]
 8006ab8:	f002 0203 	and.w	r2, r2, #3
 8006abc:	b2d0      	uxtb	r0, r2
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	f103 0108 	add.w	r1, r3, #8
 8006ac4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ac8:	f360 0301 	bfi	r3, r0, #0, #2
 8006acc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:272
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bc80      	pop	{r7}
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop

08006adc <XMC_ERU_OGU_DisablePeripheralTrigger>:
XMC_ERU_OGU_DisablePeripheralTrigger():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:277

/* Disables event generation based on peripheral trigger by clearing (ISS) bit. */
void XMC_ERU_OGU_DisablePeripheralTrigger(XMC_ERU_t *const eru,
                                          const uint8_t channel)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:281
  XMC_ASSERT("XMC_ERU_OGU_DisablePeripheralTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_DisablePeripheralTrigger:Invalid Channel Number", (channel < 4U));

  eru->EXOCON_b[channel].ISS = (uint8_t)0;
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	f103 0108 	add.w	r1, r3, #8
 8006af0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006af4:	f36f 0301 	bfc	r3, #0, #2
 8006af8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:282
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bc80      	pop	{r7}
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop

08006b08 <XMC_ERU_OGU_SetServiceRequestMode>:
XMC_ERU_OGU_SetServiceRequestMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:288

/* Configures the gating scheme for service request generation by setting (GP) bit. */
void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
                                       const uint8_t channel,
                                       const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	460b      	mov	r3, r1
 8006b12:	70fb      	strb	r3, [r7, #3]
 8006b14:	4613      	mov	r3, r2
 8006b16:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:293
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(mode));

  eru->EXOCON_b[channel].GP = (uint8_t)mode;
 8006b18:	78fb      	ldrb	r3, [r7, #3]
 8006b1a:	78ba      	ldrb	r2, [r7, #2]
 8006b1c:	f002 0203 	and.w	r2, r2, #3
 8006b20:	b2d0      	uxtb	r0, r2
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	f103 0108 	add.w	r1, r3, #8
 8006b28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b2c:	f360 1305 	bfi	r3, r0, #4, #2
 8006b30:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eru.c:295

}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bc80      	pop	{r7}
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop

08006b40 <XMC_ETH_MAC_Reset>:
XMC_ETH_MAC_Reset():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_eth_mac.h:455
 *
 * \par
 * The function resets the ETH MAC peripheral. It blocks until reset.
 */
__STATIC_INLINE void XMC_ETH_MAC_Reset(XMC_ETH_MAC_t *const eth_mac)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_eth_mac.h:456
  eth_mac->regs->BUS_MODE |= (uint32_t)ETH_BUS_MODE_SWR_Msk;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6812      	ldr	r2, [r2, #0]
 8006b50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b54:	6812      	ldr	r2, [r2, #0]
 8006b56:	f042 0201 	orr.w	r2, r2, #1
 8006b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b5e:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_eth_mac.h:457
  while ((eth_mac->regs->BUS_MODE & (uint32_t)ETH_BUS_MODE_SWR_Msk) != 0U)
 8006b60:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_eth_mac.h:457 (discriminator 1)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1f6      	bne.n	8006b62 <XMC_ETH_MAC_Reset+0x22>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_eth_mac.h:460
  {
  }
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bc80      	pop	{r7}
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop

08006b80 <XMC_ETH_MAC_SetAddress>:
XMC_ETH_MAC_SetAddress():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_eth_mac.h:544
 * \par
 * The function sets the MAC address by writing to the MAC_ADDRESS0_HIGH and
 * MAC_ADDRESS0_LOW registers.
 */
__STATIC_INLINE void XMC_ETH_MAC_SetAddress(XMC_ETH_MAC_t *const eth_mac, uint64_t addr)
{
 8006b80:	b4f0      	push	{r4, r5, r6, r7}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	e9c7 2300 	strd	r2, r3, [r7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_eth_mac.h:545
  eth_mac->regs->MAC_ADDRESS0_HIGH = (uint32_t)(addr >> 32);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006b94:	0025      	movs	r5, r4
 8006b96:	2600      	movs	r6, #0
 8006b98:	462b      	mov	r3, r5
 8006b9a:	6413      	str	r3, [r2, #64]	; 0x40
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_eth_mac.h:546
  eth_mac->regs->MAC_ADDRESS0_LOW = (uint32_t)addr;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	683a      	ldr	r2, [r7, #0]
 8006ba2:	645a      	str	r2, [r3, #68]	; 0x44
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_eth_mac.h:547
}
 8006ba4:	bf00      	nop
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bcf0      	pop	{r4, r5, r6, r7}
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop

08006bb0 <XMC_SCU_CLOCK_GetSystemClockFrequency>:
XMC_SCU_CLOCK_GetSystemClockFrequency():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc4_scu.h:2470
 * fSYS = fCPU << CPUDIV.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc4_scu.h:2471
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8006bb4:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <XMC_SCU_CLOCK_GetSystemClockFrequency+0x1c>)
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	4b05      	ldr	r3, [pc, #20]	; (8006bd0 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x20>)
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	f003 0301 	and.w	r3, r3, #1
 8006bc0:	fa02 f303 	lsl.w	r3, r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc4_scu.h:2472
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bc80      	pop	{r7}
 8006bca:	4770      	bx	lr
 8006bcc:	2000ffc0 	.word	0x2000ffc0
 8006bd0:	50004600 	.word	0x50004600

08006bd4 <XMC_SCU_CLOCK_GetEthernetClockFrequency>:
XMC_SCU_CLOCK_GetEthernetClockFrequency():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc4_scu.h:2516
 * fETH = fSYS >> 1;
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetSystemClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetEthernetClockFrequency(void)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc4_scu.h:2517
  return XMC_SCU_CLOCK_GetSystemClockFrequency() >> 1U;
 8006bd8:	f7ff ffea 	bl	8006bb0 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	085b      	lsrs	r3, r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc4_scu.h:2518
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <XCM_ETH_MAC_IsNormalEvent>:
XCM_ETH_MAC_IsNormalEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:138
 * API IMPLEMENTATION
 *******************************************************************************/

/* Check if the event passed is a normal event */
__STATIC_INLINE bool XCM_ETH_MAC_IsNormalEvent(uint32_t event)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:139
  return (bool)((event & ((uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT |
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	f244 0345 	movw	r3, #16453	; 0x4045
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	bf14      	ite	ne
 8006bf8:	2301      	movne	r3, #1
 8006bfa:	2300      	moveq	r3, #0
 8006bfc:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:143
                          (uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_BUFFER_UNAVAILABLE |
                          (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE |
                          (uint32_t)XMC_ETH_MAC_EVENT_EARLY_RECEIVE)) != (uint32_t)0);
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bc80      	pop	{r7}
 8006c06:	4770      	bx	lr

08006c08 <XCM_ETH_MAC_IsAbnormalEvent>:
XCM_ETH_MAC_IsAbnormalEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:147

/* Check if the event passed is an abnormal event */
__STATIC_INLINE bool XCM_ETH_MAC_IsAbnormalEvent(uint32_t event)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:148
   return (bool)((event & ((uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_PROCESS_STOPPED |
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	f242 73ba 	movw	r3, #10170	; 0x27ba
 8006c16:	4013      	ands	r3, r2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	bf14      	ite	ne
 8006c1c:	2301      	movne	r3, #1
 8006c1e:	2300      	moveq	r3, #0
 8006c20:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:157
                           (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_BUFFER_UNAVAILABLE |
                           (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_PROCESS_STOPPED |
                           (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_WATCHDOG_TIMEOUT |
                           (uint32_t)XMC_ETH_MAC_EVENT_EARLY_TRANSMIT |
                           (uint32_t)XMC_ETH_MAC_EVENT_BUS_ERROR)) != (uint32_t)0);
 }
 8006c22:	4618      	mov	r0, r3
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bc80      	pop	{r7}
 8006c2a:	4770      	bx	lr

08006c2c <XMC_ETH_MAC_Init>:
XMC_ETH_MAC_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:171

#endif

/* ETH MAC initialize */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_Init(XMC_ETH_MAC_t *const eth_mac)
{
 8006c2c:	b590      	push	{r4, r7, lr}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:176
  XMC_ETH_MAC_STATUS_t status;

  XMC_ASSERT("XMC_ETH_MAC_Init: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  XMC_ETH_MAC_Enable(eth_mac);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 facb 	bl	80071d0 <XMC_ETH_MAC_Enable>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:177
  XMC_ETH_MAC_Reset(eth_mac);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7ff ff80 	bl	8006b40 <XMC_ETH_MAC_Reset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:179

  status = XMC_ETH_MAC_SetManagmentClockDivider(eth_mac);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fa75 	bl	8007130 <XMC_ETH_MAC_SetManagmentClockDivider>
 8006c46:	4603      	mov	r3, r0
 8006c48:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:181

  XMC_ETH_MAC_SetAddress(eth_mac, eth_mac->address);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8006c50:	461a      	mov	r2, r3
 8006c52:	4623      	mov	r3, r4
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7ff ff93 	bl	8006b80 <XMC_ETH_MAC_SetAddress>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:184

  /* Initialize MAC configuration */
  eth_mac->regs->MAC_CONFIGURATION = (uint32_t)ETH_MAC_CONFIGURATION_IPC_Msk;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c62:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:187

  /* Initialize Filter registers */
  eth_mac->regs->FLOW_CONTROL = ETH_FLOW_CONTROL_DZPQ_Msk; /* Disable Zero Quanta Pause */
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2280      	movs	r2, #128	; 0x80
 8006c6a:	619a      	str	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:189

  eth_mac->regs->OPERATION_MODE = (uint32_t)ETH_OPERATION_MODE_RSF_Msk |
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c74:	3318      	adds	r3, #24
 8006c76:	f04f 7208 	mov.w	r2, #35651584	; 0x2200000
 8006c7a:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:193
		                          (uint32_t)ETH_OPERATION_MODE_TSF_Msk;

  /* Increase enhanced descriptor to 8 WORDS, required when the Advanced Time-Stamp feature or Full IPC Offload Engine is enabled */
  eth_mac->regs->BUS_MODE |= (uint32_t)ETH_BUS_MODE_ATDS_Msk;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	6812      	ldr	r2, [r2, #0]
 8006c84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006c88:	6812      	ldr	r2, [r2, #0]
 8006c8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c92:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:196

  /* Initialize DMA Descriptors */
  XMC_ETH_MAC_InitRxDescriptors(eth_mac);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f81f 	bl	8006cd8 <XMC_ETH_MAC_InitRxDescriptors>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:197
  XMC_ETH_MAC_InitTxDescriptors(eth_mac);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f874 	bl	8006d88 <XMC_ETH_MAC_InitTxDescriptors>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:200

  /* Clear interrupts */
  eth_mac->regs->STATUS = 0xFFFFFFFFUL;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ca8:	3314      	adds	r3, #20
 8006caa:	f04f 32ff 	mov.w	r2, #4294967295
 8006cae:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:203

  /* Disable MMC interrupt events */
  eth_mac->regs->MMC_TRANSMIT_INTERRUPT_MASK = ETH_MAC_MMC_INTERRUPT_MSK;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f06f 427c 	mvn.w	r2, #4227858432	; 0xfc000000
 8006cb8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:204
  eth_mac->regs->MMC_RECEIVE_INTERRUPT_MASK = ETH_MAC_MMC_INTERRUPT_MSK;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f06f 427c 	mvn.w	r2, #4227858432	; 0xfc000000
 8006cc4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:206

  eth_mac->frame_end = NULL;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	621a      	str	r2, [r3, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:208

  return status;
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:209
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd90      	pop	{r4, r7, pc}

08006cd8 <XMC_ETH_MAC_InitRxDescriptors>:
XMC_ETH_MAC_InitRxDescriptors():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:213

/* Initialize RX descriptors */
void XMC_ETH_MAC_InitRxDescriptors(XMC_ETH_MAC_t *const eth_mac)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:223

  /*
   * Chained structure (ETH_MAC_DMA_RDES1_RCH), second address in the descriptor
   * (buffer2) is the next descriptor address
   */
  for (i = 0U; i < eth_mac->num_rx_buf; ++i)
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	e037      	b.n	8006d56 <XMC_ETH_MAC_InitRxDescriptors+0x7e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:225
  {
	eth_mac->rx_desc[i].status = (uint32_t)ETH_MAC_DMA_RDES0_OWN;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	691a      	ldr	r2, [r3, #16]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	015b      	lsls	r3, r3, #5
 8006cee:	4413      	add	r3, r2
 8006cf0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006cf4:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:226
	eth_mac->rx_desc[i].length = (uint32_t)ETH_MAC_DMA_RDES1_RCH | (uint32_t)XMC_ETH_MAC_BUF_SIZE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	691a      	ldr	r2, [r3, #16]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	015b      	lsls	r3, r3, #5
 8006cfe:	4413      	add	r3, r2
 8006d00:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8006d04:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:227
	eth_mac->rx_desc[i].buffer1 = (uint32_t)&(eth_mac->rx_buf[i * XMC_ETH_MAC_BUF_SIZE]);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	691a      	ldr	r2, [r3, #16]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	015b      	lsls	r3, r3, #5
 8006d0e:	4413      	add	r3, r2
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	6991      	ldr	r1, [r2, #24]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	f240 50f4 	movw	r0, #1524	; 0x5f4
 8006d1a:	fb00 f202 	mul.w	r2, r0, r2
 8006d1e:	440a      	add	r2, r1
 8006d20:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:228
    next = i + 1U;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	3301      	adds	r3, #1
 8006d26:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:229
    if (next == eth_mac->num_rx_buf)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d2e:	461a      	mov	r2, r3
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d101      	bne.n	8006d3a <XMC_ETH_MAC_InitRxDescriptors+0x62>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:231
    {
      next = 0U;
 8006d36:	2300      	movs	r3, #0
 8006d38:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:233 (discriminator 2)
    }
    eth_mac->rx_desc[i].buffer2 = (uint32_t)&(eth_mac->rx_desc[next]);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	691a      	ldr	r2, [r3, #16]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	015b      	lsls	r3, r3, #5
 8006d42:	4413      	add	r3, r2
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	6911      	ldr	r1, [r2, #16]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	0152      	lsls	r2, r2, #5
 8006d4c:	440a      	add	r2, r1
 8006d4e:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:223 (discriminator 2)

  /*
   * Chained structure (ETH_MAC_DMA_RDES1_RCH), second address in the descriptor
   * (buffer2) is the next descriptor address
   */
  for (i = 0U; i < eth_mac->num_rx_buf; ++i)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	3301      	adds	r3, #1
 8006d54:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:223 (discriminator 1)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d8c0      	bhi.n	8006ce6 <XMC_ETH_MAC_InitRxDescriptors+0xe>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:235
    {
      next = 0U;
    }
    eth_mac->rx_desc[i].buffer2 = (uint32_t)&(eth_mac->rx_desc[next]);
  }
  eth_mac->regs->RECEIVE_DESCRIPTOR_LIST_ADDRESS = (uint32_t)&(eth_mac->rx_desc[0]);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	6912      	ldr	r2, [r2, #16]
 8006d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d70:	330c      	adds	r3, #12
 8006d72:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:236
  eth_mac->rx_index = 0U;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:237
}
 8006d7c:	bf00      	nop
 8006d7e:	3714      	adds	r7, #20
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bc80      	pop	{r7}
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop

08006d88 <XMC_ETH_MAC_InitTxDescriptors>:
XMC_ETH_MAC_InitTxDescriptors():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:241

/* Initialize TX descriptors */
void XMC_ETH_MAC_InitTxDescriptors(XMC_ETH_MAC_t *const eth_mac)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:248
  uint32_t next;

  XMC_ASSERT("XMC_ETH_MAC_InitTxDescriptors: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  /* Chained structure (ETH_MAC_DMA_TDES0_TCH), second address in the descriptor (buffer2) is the next descriptor address */
  for (i = 0U; i < eth_mac->num_tx_buf; ++i)
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	e02e      	b.n	8006df4 <XMC_ETH_MAC_InitTxDescriptors+0x6c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:250
  {
	eth_mac->tx_desc[i].status = ETH_MAC_DMA_TDES0_TCH | ETH_MAC_DMA_TDES0_LS | ETH_MAC_DMA_TDES0_FS;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	695a      	ldr	r2, [r3, #20]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	015b      	lsls	r3, r3, #5
 8006d9e:	4413      	add	r3, r2
 8006da0:	4a20      	ldr	r2, [pc, #128]	; (8006e24 <XMC_ETH_MAC_InitTxDescriptors+0x9c>)
 8006da2:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:251
	eth_mac->tx_desc[i].buffer1 = (uint32_t)&(eth_mac->tx_buf[i * XMC_ETH_MAC_BUF_SIZE]);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	695a      	ldr	r2, [r3, #20]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	015b      	lsls	r3, r3, #5
 8006dac:	4413      	add	r3, r2
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	69d1      	ldr	r1, [r2, #28]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	f240 50f4 	movw	r0, #1524	; 0x5f4
 8006db8:	fb00 f202 	mul.w	r2, r0, r2
 8006dbc:	440a      	add	r2, r1
 8006dbe:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:252
    next = i + 1U;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:253
    if (next == eth_mac->num_tx_buf)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006dcc:	461a      	mov	r2, r3
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d101      	bne.n	8006dd8 <XMC_ETH_MAC_InitTxDescriptors+0x50>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:255
    {
        next = 0U;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:257 (discriminator 2)
    }
    eth_mac->tx_desc[i].buffer2 = (uint32_t)&(eth_mac->tx_desc[next]);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	695a      	ldr	r2, [r3, #20]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	015b      	lsls	r3, r3, #5
 8006de0:	4413      	add	r3, r2
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	6951      	ldr	r1, [r2, #20]
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	0152      	lsls	r2, r2, #5
 8006dea:	440a      	add	r2, r1
 8006dec:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:248 (discriminator 2)
  uint32_t next;

  XMC_ASSERT("XMC_ETH_MAC_InitTxDescriptors: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  /* Chained structure (ETH_MAC_DMA_TDES0_TCH), second address in the descriptor (buffer2) is the next descriptor address */
  for (i = 0U; i < eth_mac->num_tx_buf; ++i)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	3301      	adds	r3, #1
 8006df2:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:248 (discriminator 1)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d8c9      	bhi.n	8006d96 <XMC_ETH_MAC_InitTxDescriptors+0xe>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:259
    {
        next = 0U;
    }
    eth_mac->tx_desc[i].buffer2 = (uint32_t)&(eth_mac->tx_desc[next]);
  }
  eth_mac->regs->TRANSMIT_DESCRIPTOR_LIST_ADDRESS = (uint32_t)&(eth_mac->tx_desc[0]);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	6952      	ldr	r2, [r2, #20]
 8006e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e0e:	3310      	adds	r3, #16
 8006e10:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:260
  eth_mac->tx_index = 0U;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:261
}
 8006e1a:	bf00      	nop
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bc80      	pop	{r7}
 8006e22:	4770      	bx	lr
 8006e24:	30100000 	.word	0x30100000

08006e28 <XMC_ETH_MAC_SetAddressPerfectFilter>:
XMC_ETH_MAC_SetAddressPerfectFilter():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:268
/* Set address perfect filter */
void XMC_ETH_MAC_SetAddressPerfectFilter(XMC_ETH_MAC_t *const eth_mac,
		                                 uint8_t index,
								         const uint64_t addr,
								         uint32_t flags)
{
 8006e28:	b4f0      	push	{r4, r5, r6, r7}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	e9c7 2300 	strd	r2, r3, [r7]
 8006e34:	460b      	mov	r3, r1
 8006e36:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:274
  __IO uint32_t *reg;

  XMC_ASSERT("XMC_ETH_MAC_SetAddressPerfectFilter: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));
  XMC_ASSERT("XMC_ETH_MAC_SetAddressFilter: index is out of range", ((index > 0) && (index < 4)));

  reg = &(eth_mac->regs->MAC_ADDRESS0_HIGH);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3340      	adds	r3, #64	; 0x40
 8006e3e:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:275
  reg[index] = (uint32_t)(addr >> 32U) | flags;
 8006e40:	7afb      	ldrb	r3, [r7, #11]
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	441a      	add	r2, r3
 8006e48:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006e4c:	0025      	movs	r5, r4
 8006e4e:	2600      	movs	r6, #0
 8006e50:	4629      	mov	r1, r5
 8006e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e54:	430b      	orrs	r3, r1
 8006e56:	6013      	str	r3, [r2, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:276
  reg[index + 1U] = (uint32_t)addr;
 8006e58:	7afb      	ldrb	r3, [r7, #11]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	4413      	add	r3, r2
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:277
}
 8006e66:	bf00      	nop
 8006e68:	3718      	adds	r7, #24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bcf0      	pop	{r4, r5, r6, r7}
 8006e6e:	4770      	bx	lr

08006e70 <XMC_ETH_MAC_SetAddressHashFilter>:
XMC_ETH_MAC_SetAddressHashFilter():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:281

/* Set address hash filter */
void XMC_ETH_MAC_SetAddressHashFilter(XMC_ETH_MAC_t *const eth_mac, const uint64_t hash)
{
 8006e70:	b4f0      	push	{r4, r5, r6, r7}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	e9c7 2300 	strd	r2, r3, [r7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:282
  eth_mac->regs->HASH_TABLE_HIGH = (uint32_t)(hash >> 32);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006e84:	0025      	movs	r5, r4
 8006e86:	2600      	movs	r6, #0
 8006e88:	462b      	mov	r3, r5
 8006e8a:	6093      	str	r3, [r2, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:283
  eth_mac->regs->HASH_TABLE_LOW = (uint32_t)hash;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:284
}
 8006e94:	bf00      	nop
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bcf0      	pop	{r4, r5, r6, r7}
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop

08006ea0 <XMC_ETH_MAC_SendFrame>:
XMC_ETH_MAC_SendFrame():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:288

/* Send frame */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_SendFrame(XMC_ETH_MAC_t *const eth_mac, const uint8_t *frame, uint32_t len, uint32_t flags)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b088      	sub	sp, #32
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
 8006eac:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:297

  XMC_ASSERT("XMC_ETH_MAC_SendFrame:", eth_mac != NULL);
  XMC_ASSERT("XMC_ETH_MAC_SendFrame:", eth_mac->regs == ETH0);
  XMC_ASSERT("XMC_ETH_MAC_SendFrame:", (frame != NULL) && (len > 0));

  dst = eth_mac->frame_end;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:299

  if (eth_mac->tx_desc[eth_mac->tx_index].status & ETH_MAC_DMA_TDES0_OWN)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	695a      	ldr	r2, [r3, #20]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006ebe:	015b      	lsls	r3, r3, #5
 8006ec0:	4413      	add	r3, r2
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	da1b      	bge.n	8006f00 <XMC_ETH_MAC_SendFrame+0x60>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:302
  {
    /* Transmitter is busy, wait */
    status = XMC_ETH_MAC_STATUS_BUSY;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	77fb      	strb	r3, [r7, #31]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:303
    if (eth_mac->regs->STATUS & ETH_STATUS_TU_Msk)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ed4:	3314      	adds	r3, #20
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0304 	and.w	r3, r3, #4
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 809e 	beq.w	800701e <XMC_ETH_MAC_SendFrame+0x17e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:306
    {
      /* Receive buffer unavailable, resume DMA */
      eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_TU_Msk;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eea:	3314      	adds	r3, #20
 8006eec:	2204      	movs	r2, #4
 8006eee:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:307
      eth_mac->regs->TRANSMIT_POLL_DEMAND = 0U;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ef8:	3304      	adds	r3, #4
 8006efa:	2200      	movs	r2, #0
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	e08e      	b.n	800701e <XMC_ETH_MAC_SendFrame+0x17e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:313
    }

  }
  else
  {
    if (dst == NULL)
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d112      	bne.n	8006f2c <XMC_ETH_MAC_SendFrame+0x8c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:316
    {
      /* Start of a new transmit frame */
      dst = (uint8_t *)eth_mac->tx_desc[eth_mac->tx_index].buffer1;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	695a      	ldr	r2, [r3, #20]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006f10:	015b      	lsls	r3, r3, #5
 8006f12:	4413      	add	r3, r2
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:317
      eth_mac->tx_desc[eth_mac->tx_index].length = len;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	695a      	ldr	r2, [r3, #20]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006f22:	015b      	lsls	r3, r3, #5
 8006f24:	4413      	add	r3, r2
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	605a      	str	r2, [r3, #4]
 8006f2a:	e011      	b.n	8006f50 <XMC_ETH_MAC_SendFrame+0xb0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:322
    }
    else
    {
      /* Sending data fragments in progress */
      eth_mac->tx_desc[eth_mac->tx_index].length += len;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	695a      	ldr	r2, [r3, #20]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006f36:	015b      	lsls	r3, r3, #5
 8006f38:	4413      	add	r3, r2
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	6951      	ldr	r1, [r2, #20]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8006f44:	0152      	lsls	r2, r2, #5
 8006f46:	440a      	add	r2, r1
 8006f48:	6851      	ldr	r1, [r2, #4]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	440a      	add	r2, r1
 8006f4e:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:325
    }

    memcpy(dst, frame, len);
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	68b9      	ldr	r1, [r7, #8]
 8006f54:	69b8      	ldr	r0, [r7, #24]
 8006f56:	f007 ff9f 	bl	800ee98 <memcpy>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:327

    if (flags & (uint32_t)XMC_ETH_MAC_TX_FRAME_FRAGMENT)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <XMC_ETH_MAC_SendFrame+0xcc>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:330
    {
      /* More data to come, remember current write position */
      eth_mac->frame_end = dst;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	621a      	str	r2, [r3, #32]
 8006f6a:	e056      	b.n	800701a <XMC_ETH_MAC_SendFrame+0x17a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:335
    }
    else
    {
      /* Frame is now ready, send it to DMA */
      ctrl = eth_mac->tx_desc[eth_mac->tx_index].status | ETH_MAC_DMA_TDES0_CIC;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	695a      	ldr	r2, [r3, #20]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006f76:	015b      	lsls	r3, r3, #5
 8006f78:	4413      	add	r3, r2
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8006f80:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:336
      ctrl &= ~(ETH_MAC_DMA_TDES0_IC | ETH_MAC_DMA_TDES0_TTSE);
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f023 4384 	bic.w	r3, r3, #1107296256	; 0x42000000
 8006f88:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:338

      if (flags & (uint32_t)XMC_ETH_MAC_TX_FRAME_EVENT)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	f003 0302 	and.w	r3, r3, #2
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d003      	beq.n	8006f9c <XMC_ETH_MAC_SendFrame+0xfc>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:340
      {
    	ctrl |= ETH_MAC_DMA_TDES0_IC;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f9a:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:343
      }

      if (flags & (uint32_t)XMC_ETH_MAC_TX_FRAME_TIMESTAMP)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	f003 0304 	and.w	r3, r3, #4
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <XMC_ETH_MAC_SendFrame+0x10e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:345
      {
    	ctrl |= ETH_MAC_DMA_TDES0_TTSE;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006fac:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:347
      }
      eth_mac->tx_ts_index = eth_mac->tx_index;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:349

      eth_mac->tx_desc[eth_mac->tx_index].status = ctrl | ETH_MAC_DMA_TDES0_OWN;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	695a      	ldr	r2, [r3, #20]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006fc4:	015b      	lsls	r3, r3, #5
 8006fc6:	4413      	add	r3, r2
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006fce:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:351

      eth_mac->tx_index++;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	b2da      	uxtb	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:352
      if (eth_mac->tx_index == eth_mac->num_tx_buf)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d103      	bne.n	8006ff8 <XMC_ETH_MAC_SendFrame+0x158>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:354
      {
    	eth_mac->tx_index = 0U;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:356
      }
      eth_mac->frame_end = NULL;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	621a      	str	r2, [r3, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:359

      /* Start frame transmission */
      eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_TPS_Msk;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007006:	3314      	adds	r3, #20
 8007008:	2202      	movs	r2, #2
 800700a:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:360
      eth_mac->regs->TRANSMIT_POLL_DEMAND = 0U;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007014:	3304      	adds	r3, #4
 8007016:	2200      	movs	r2, #0
 8007018:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:362
    }
    status = XMC_ETH_MAC_STATUS_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	77fb      	strb	r3, [r7, #31]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:365
  }

  return status;
 800701e:	7ffb      	ldrb	r3, [r7, #31]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:366
}
 8007020:	4618      	mov	r0, r3
 8007022:	3720      	adds	r7, #32
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <XMC_ETH_MAC_ReadFrame>:
XMC_ETH_MAC_ReadFrame():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:370

/* Read frame */
uint32_t XMC_ETH_MAC_ReadFrame(XMC_ETH_MAC_t *const eth_mac, uint8_t *frame, uint32_t len)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:378
  XMC_ASSERT("XMC_ETH_MAC_ReadFrame:", eth_mac != NULL);
  XMC_ASSERT("XMC_ETH_MAC_ReadFrame:", eth_mac->regs == ETH0);
  XMC_ASSERT("XMC_ETH_MAC_ReadFrame:", (frame != NULL) && (len > 0));

  /* Fast-copy data to packet buffer */
  src = (uint8_t const *)eth_mac->rx_desc[eth_mac->rx_index].buffer1;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	691a      	ldr	r2, [r3, #16]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800703e:	015b      	lsls	r3, r3, #5
 8007040:	4413      	add	r3, r2
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:380

  memcpy(frame, src, len);
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	6979      	ldr	r1, [r7, #20]
 800704a:	68b8      	ldr	r0, [r7, #8]
 800704c:	f007 ff24 	bl	800ee98 <memcpy>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:383

  /* Return this block back to DMA */
  eth_mac->rx_desc[eth_mac->rx_index].status = ETH_MAC_DMA_RDES0_OWN;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	691a      	ldr	r2, [r3, #16]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800705a:	015b      	lsls	r3, r3, #5
 800705c:	4413      	add	r3, r2
 800705e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007062:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:385

  eth_mac->rx_index++;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800706a:	3301      	adds	r3, #1
 800706c:	b2da      	uxtb	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:386
  if (eth_mac->rx_index == eth_mac->num_rx_buf)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007080:	429a      	cmp	r2, r3
 8007082:	d103      	bne.n	800708c <XMC_ETH_MAC_ReadFrame+0x64>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:388
  {
    eth_mac->rx_index = 0U;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:391
  }

  if (eth_mac->regs->STATUS & ETH_STATUS_RU_Msk)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007094:	3314      	adds	r3, #20
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00d      	beq.n	80070bc <XMC_ETH_MAC_ReadFrame+0x94>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:394
  {
    /* Receive buffer unavailable, resume DMA */
	eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_RU_Msk;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070a8:	3314      	adds	r3, #20
 80070aa:	2280      	movs	r2, #128	; 0x80
 80070ac:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:395
	eth_mac->regs->RECEIVE_POLL_DEMAND = 0U;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070b6:	3308      	adds	r3, #8
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:398
  }

  return (len);
 80070bc:	687b      	ldr	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:399
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3718      	adds	r7, #24
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop

080070c8 <XMC_ETH_MAC_GetRxFrameSize>:
XMC_ETH_MAC_GetRxFrameSize():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:403

/* Get RX frame size */
uint32_t XMC_ETH_MAC_GetRxFrameSize(XMC_ETH_MAC_t *const eth_mac)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:405
  uint32_t status;
  uint32_t len = 0U;
 80070d0:	2300      	movs	r3, #0
 80070d2:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:407

  status = eth_mac->rx_desc[eth_mac->rx_index].status;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	691a      	ldr	r2, [r3, #16]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80070de:	015b      	lsls	r3, r3, #5
 80070e0:	4413      	add	r3, r2
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:409

  if (status & ETH_MAC_DMA_RDES0_OWN)
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	da02      	bge.n	80070f2 <XMC_ETH_MAC_GetRxFrameSize+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:412
  {
    /* Owned by DMA */
    len = 0U;
 80070ec:	2300      	movs	r3, #0
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	e018      	b.n	8007124 <XMC_ETH_MAC_GetRxFrameSize+0x5c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:414
  }
  else if (((status & ETH_MAC_DMA_RDES0_ES) != 0U) ||
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d109      	bne.n	8007110 <XMC_ETH_MAC_GetRxFrameSize+0x48>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:415 (discriminator 1)
           ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:414 (discriminator 1)
  if (status & ETH_MAC_DMA_RDES0_OWN)
  {
    /* Owned by DMA */
    len = 0U;
  }
  else if (((status & ETH_MAC_DMA_RDES0_ES) != 0U) ||
 8007102:	2b00      	cmp	r3, #0
 8007104:	d004      	beq.n	8007110 <XMC_ETH_MAC_GetRxFrameSize+0x48>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:416
           ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
           ((status & ETH_MAC_DMA_RDES0_LS) == 0U)) 
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	f403 7380 	and.w	r3, r3, #256	; 0x100
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:415
  {
    /* Owned by DMA */
    len = 0U;
  }
  else if (((status & ETH_MAC_DMA_RDES0_ES) != 0U) ||
           ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
 800710c:	2b00      	cmp	r3, #0
 800710e:	d103      	bne.n	8007118 <XMC_ETH_MAC_GetRxFrameSize+0x50>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:419
           ((status & ETH_MAC_DMA_RDES0_LS) == 0U)) 
  {
    /* Error, this block is invalid */
    len = 0xFFFFFFFFU;
 8007110:	f04f 33ff 	mov.w	r3, #4294967295
 8007114:	60fb      	str	r3, [r7, #12]
 8007116:	e005      	b.n	8007124 <XMC_ETH_MAC_GetRxFrameSize+0x5c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:424
  }
  else 
  {
    /* Subtract CRC */
    len = ((status & ETH_MAC_DMA_RDES0_FL) >> 16U) - 4U;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	0c1b      	lsrs	r3, r3, #16
 800711c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007120:	3b04      	subs	r3, #4
 8007122:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:427
  }

  return len;
 8007124:	68fb      	ldr	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:428
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	bc80      	pop	{r7}
 800712e:	4770      	bx	lr

08007130 <XMC_ETH_MAC_SetManagmentClockDivider>:
XMC_ETH_MAC_SetManagmentClockDivider():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:432

/* Set management clock divider */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_SetManagmentClockDivider(XMC_ETH_MAC_t *const eth_mac)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b086      	sub	sp, #24
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:437
  uint32_t eth_mac_clk;
  XMC_ETH_MAC_STATUS_t status;
  __IO uint32_t *reg;

  eth_mac_clk = XMC_SCU_CLOCK_GetEthernetClockFrequency();
 8007138:	f7ff fd4c 	bl	8006bd4 <XMC_SCU_CLOCK_GetEthernetClockFrequency>
 800713c:	6138      	str	r0, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:438
  status = XMC_ETH_MAC_STATUS_OK;
 800713e:	2300      	movs	r3, #0
 8007140:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:440

  reg = &(eth_mac->regs->GMII_ADDRESS);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3310      	adds	r3, #16
 8007148:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:441
  if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_35MHZ)
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	4a1a      	ldr	r2, [pc, #104]	; (80071b8 <XMC_ETH_MAC_SetManagmentClockDivider+0x88>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d803      	bhi.n	800715a <XMC_ETH_MAC_SetManagmentClockDivider+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:443
  {
	*reg = XMC_ETH_MAC_MDC_DIVIDER_16;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2208      	movs	r2, #8
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	e029      	b.n	80071ae <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:445
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_60MHZ)
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	4a17      	ldr	r2, [pc, #92]	; (80071bc <XMC_ETH_MAC_SetManagmentClockDivider+0x8c>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d803      	bhi.n	800716a <XMC_ETH_MAC_SetManagmentClockDivider+0x3a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:447
  {
	*reg = XMC_ETH_MAC_MDC_DIVIDER_26;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	220c      	movs	r2, #12
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	e021      	b.n	80071ae <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:449
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_100MHZ)
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	4a14      	ldr	r2, [pc, #80]	; (80071c0 <XMC_ETH_MAC_SetManagmentClockDivider+0x90>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d803      	bhi.n	800717a <XMC_ETH_MAC_SetManagmentClockDivider+0x4a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:451
  {
	*reg = XMC_ETH_MAC_MDC_DIVIDER_42;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	e019      	b.n	80071ae <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:453
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_150MHZ)
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	4a11      	ldr	r2, [pc, #68]	; (80071c4 <XMC_ETH_MAC_SetManagmentClockDivider+0x94>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d803      	bhi.n	800718a <XMC_ETH_MAC_SetManagmentClockDivider+0x5a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:455
  {
	*reg = XMC_ETH_MAC_MDC_DIVIDER_62;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2204      	movs	r2, #4
 8007186:	601a      	str	r2, [r3, #0]
 8007188:	e011      	b.n	80071ae <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:457
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_200MHZ)
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	4a0e      	ldr	r2, [pc, #56]	; (80071c8 <XMC_ETH_MAC_SetManagmentClockDivider+0x98>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d803      	bhi.n	800719a <XMC_ETH_MAC_SetManagmentClockDivider+0x6a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:459
  {
	*reg = XMC_ETH_MAC_MDC_DIVIDER_102;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2210      	movs	r2, #16
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	e009      	b.n	80071ae <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:461
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_250MHZ)
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	4a0b      	ldr	r2, [pc, #44]	; (80071cc <XMC_ETH_MAC_SetManagmentClockDivider+0x9c>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d803      	bhi.n	80071aa <XMC_ETH_MAC_SetManagmentClockDivider+0x7a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:463
  {
	*reg = XMC_ETH_MAC_MDC_DIVIDER_124;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2214      	movs	r2, #20
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	e001      	b.n	80071ae <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:467
  }
  else
  {
    status = XMC_ETH_MAC_STATUS_ERROR;
 80071aa:	2302      	movs	r3, #2
 80071ac:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:470
  }

  return status;
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:471
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3718      	adds	r7, #24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	02160ec0 	.word	0x02160ec0
 80071bc:	03938700 	.word	0x03938700
 80071c0:	05f5e100 	.word	0x05f5e100
 80071c4:	08f0d180 	.word	0x08f0d180
 80071c8:	0bebc200 	.word	0x0bebc200
 80071cc:	0ee6b280 	.word	0x0ee6b280

080071d0 <XMC_ETH_MAC_Enable>:
XMC_ETH_MAC_Enable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:475

/* ETH MAC enable */
void XMC_ETH_MAC_Enable(XMC_ETH_MAC_t *const eth_mac)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:476
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_ETH);
 80071d8:	2004      	movs	r0, #4
 80071da:	f7fa fda9 	bl	8001d30 <XMC_SCU_CLOCK_EnableClock>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:480
#if UC_DEVICE != XMC4500
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ETH0);
#endif
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ETH0);
 80071de:	4803      	ldr	r0, [pc, #12]	; (80071ec <XMC_ETH_MAC_Enable+0x1c>)
 80071e0:	f7fa fad4 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:481
}
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	20000004 	.word	0x20000004

080071f0 <XMC_ETH_MAC_Disable>:
XMC_ETH_MAC_Disable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:485

/* ETH MAC disable */
void XMC_ETH_MAC_Disable(XMC_ETH_MAC_t *const eth_mac)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:486
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ETH0);
 80071f8:	4804      	ldr	r0, [pc, #16]	; (800720c <XMC_ETH_MAC_Disable+0x1c>)
 80071fa:	f7fa faab 	bl	8001754 <XMC_SCU_RESET_AssertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:490
#if UC_DEVICE != XMC4500
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ETH0);
#endif
  XMC_SCU_CLOCK_DisableClock(XMC_SCU_CLOCK_ETH);
 80071fe:	2004      	movs	r0, #4
 8007200:	f7fa fda6 	bl	8001d50 <XMC_SCU_CLOCK_DisableClock>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:491
}
 8007204:	bf00      	nop
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	20000004 	.word	0x20000004

08007210 <XMC_ETH_MAC_ReadPhy>:
XMC_ETH_MAC_ReadPhy():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:495

/* Read physical layer and obtain status */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_ReadPhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_addr, uint16_t *data)
{
 8007210:	b480      	push	{r7}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	607b      	str	r3, [r7, #4]
 800721a:	460b      	mov	r3, r1
 800721c:	72fb      	strb	r3, [r7, #11]
 800721e:	4613      	mov	r3, r2
 8007220:	72bb      	strb	r3, [r7, #10]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:500
  uint32_t retries;

  XMC_ASSERT("XMC_ETH_MAC_PhyRead: Parameter error", data != NULL);

  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	6812      	ldr	r2, [r2, #0]
 800722a:	6912      	ldr	r2, [r2, #16]
 800722c:	f002 013c 	and.w	r1, r2, #60	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:502
                                           (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
                                           (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
 8007230:	7afa      	ldrb	r2, [r7, #11]
 8007232:	02d2      	lsls	r2, r2, #11
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:501
  uint32_t retries;

  XMC_ASSERT("XMC_ETH_MAC_PhyRead: Parameter error", data != NULL);

  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
                                           (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
 8007234:	4311      	orrs	r1, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:503
                                           (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
                                           (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos));
 8007236:	7aba      	ldrb	r2, [r7, #10]
 8007238:	0192      	lsls	r2, r2, #6
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:500
{
  uint32_t retries;

  XMC_ASSERT("XMC_ETH_MAC_PhyRead: Parameter error", data != NULL);

  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 800723a:	430a      	orrs	r2, r1
 800723c:	f042 0201 	orr.w	r2, r2, #1
 8007240:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:506
                                           (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
                                           (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
                                           (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos));

  /* Poll busy bit during max PHY_TIMEOUT time */
  retries = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:509
  do
  {
    if ((eth_mac->regs->GMII_ADDRESS & ETH_GMII_ADDRESS_MB_Msk) == 0U)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	2b00      	cmp	r3, #0
 8007252:	d107      	bne.n	8007264 <XMC_ETH_MAC_ReadPhy+0x54>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:511
    {
      *data = (uint16_t)(eth_mac->regs->GMII_DATA & ETH_GMII_DATA_MD_Msk);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	b29a      	uxth	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	801a      	strh	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:512
      return XMC_ETH_MAC_STATUS_OK;
 8007260:	2300      	movs	r3, #0
 8007262:	e008      	b.n	8007276 <XMC_ETH_MAC_ReadPhy+0x66>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:514
    }
    ++retries;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	3301      	adds	r3, #1
 8007268:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:515
  } while (retries < XMC_ETH_MAC_PHY_MAX_RETRIES);
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007270:	4293      	cmp	r3, r2
 8007272:	d9e8      	bls.n	8007246 <XMC_ETH_MAC_ReadPhy+0x36>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:517

  return XMC_ETH_MAC_STATUS_ERROR;
 8007274:	2302      	movs	r3, #2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:518
}
 8007276:	4618      	mov	r0, r3
 8007278:	371c      	adds	r7, #28
 800727a:	46bd      	mov	sp, r7
 800727c:	bc80      	pop	{r7}
 800727e:	4770      	bx	lr

08007280 <XMC_ETH_MAC_WritePhy>:
XMC_ETH_MAC_WritePhy():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:522

/* Write physical layer and return status */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_WritePhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_addr, uint16_t data)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	4608      	mov	r0, r1
 800728a:	4611      	mov	r1, r2
 800728c:	461a      	mov	r2, r3
 800728e:	4603      	mov	r3, r0
 8007290:	70fb      	strb	r3, [r7, #3]
 8007292:	460b      	mov	r3, r1
 8007294:	70bb      	strb	r3, [r7, #2]
 8007296:	4613      	mov	r3, r2
 8007298:	803b      	strh	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:525
  uint32_t retries;

  eth_mac->regs->GMII_DATA  = data;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	883a      	ldrh	r2, [r7, #0]
 80072a0:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:526
  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	6812      	ldr	r2, [r2, #0]
 80072aa:	6912      	ldr	r2, [r2, #16]
 80072ac:	f002 013c 	and.w	r1, r2, #60	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:529
                                           (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
                                           (uint32_t)ETH_GMII_ADDRESS_MW_Msk |
                                           (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
 80072b0:	78fa      	ldrb	r2, [r7, #3]
 80072b2:	02d2      	lsls	r2, r2, #11
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:528
  uint32_t retries;

  eth_mac->regs->GMII_DATA  = data;
  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
                                           (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
                                           (uint32_t)ETH_GMII_ADDRESS_MW_Msk |
 80072b4:	4311      	orrs	r1, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:530
                                           (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
                                           (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos));
 80072b6:	78ba      	ldrb	r2, [r7, #2]
 80072b8:	0192      	lsls	r2, r2, #6
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:526
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_WritePhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_addr, uint16_t data)
{
  uint32_t retries;

  eth_mac->regs->GMII_DATA  = data;
  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 80072ba:	430a      	orrs	r2, r1
 80072bc:	f042 0203 	orr.w	r2, r2, #3
 80072c0:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:533
                                           (uint32_t)ETH_GMII_ADDRESS_MW_Msk |
                                           (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
                                           (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos));

   /* Poll busy bit during max PHY_TIMEOUT time */
  retries = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:536
  do
  {
    if ((eth_mac->regs->GMII_ADDRESS & ETH_GMII_ADDRESS_MB_Msk) == 0U)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d101      	bne.n	80072d8 <XMC_ETH_MAC_WritePhy+0x58>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:538
    {
      return XMC_ETH_MAC_STATUS_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	e008      	b.n	80072ea <XMC_ETH_MAC_WritePhy+0x6a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:540
    }
    ++retries;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	3301      	adds	r3, #1
 80072dc:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:541
  } while (retries < XMC_ETH_MAC_PHY_MAX_RETRIES);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d9ee      	bls.n	80072c6 <XMC_ETH_MAC_WritePhy+0x46>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:543

  return XMC_ETH_MAC_STATUS_ERROR;
 80072e8:	2302      	movs	r3, #2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:544
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3714      	adds	r7, #20
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bc80      	pop	{r7}
 80072f2:	4770      	bx	lr

080072f4 <XMC_ETH_MAC_FlushTx>:
XMC_ETH_MAC_FlushTx():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:548

/* Flush TX */
void XMC_ETH_MAC_FlushTx(XMC_ETH_MAC_t *const eth_mac)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:549
  eth_mac->regs->OPERATION_MODE &= (uint32_t)~ETH_OPERATION_MODE_ST_Msk;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6819      	ldr	r1, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007308:	3318      	adds	r3, #24
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007310:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8007314:	3318      	adds	r3, #24
 8007316:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:550
  XMC_ETH_MAC_InitTxDescriptors(eth_mac);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7ff fd35 	bl	8006d88 <XMC_ETH_MAC_InitTxDescriptors>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:551
  eth_mac->regs->OPERATION_MODE |= (uint32_t)ETH_OPERATION_MODE_ST_Msk;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6819      	ldr	r1, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800732a:	3318      	adds	r3, #24
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007332:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8007336:	3318      	adds	r3, #24
 8007338:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:552
}
 800733a:	bf00      	nop
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop

08007344 <XMC_ETH_MAC_FlushRx>:
XMC_ETH_MAC_FlushRx():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:556

/* Flush RX */
void XMC_ETH_MAC_FlushRx(XMC_ETH_MAC_t *const eth_mac)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:557
  eth_mac->regs->OPERATION_MODE &= (uint32_t)~ETH_OPERATION_MODE_SR_Msk;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6819      	ldr	r1, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007358:	3318      	adds	r3, #24
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f023 0202 	bic.w	r2, r3, #2
 8007360:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8007364:	3318      	adds	r3, #24
 8007366:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:558
  XMC_ETH_MAC_InitRxDescriptors(eth_mac);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7ff fcb5 	bl	8006cd8 <XMC_ETH_MAC_InitRxDescriptors>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:559
  eth_mac->regs->OPERATION_MODE |= (uint32_t)ETH_OPERATION_MODE_SR_Msk;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6819      	ldr	r1, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800737a:	3318      	adds	r3, #24
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f043 0202 	orr.w	r2, r3, #2
 8007382:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8007386:	3318      	adds	r3, #24
 8007388:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:560
}
 800738a:	bf00      	nop
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop

08007394 <XMC_ETH_MAC_SetWakeUpFrameFilter>:
XMC_ETH_MAC_SetWakeUpFrameFilter():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:565

/* Set wakeup frame filter */
void XMC_ETH_MAC_SetWakeUpFrameFilter(XMC_ETH_MAC_t *const eth_mac,
                                      const uint32_t (*const filter)[XMC_ETH_WAKEUP_REGISTER_LENGTH])
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:566
  uint32_t i = 0U;
 800739e:	2300      	movs	r3, #0
 80073a0:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:569

  /* Fill Remote Wake-up frame filter register with buffer data */
  for (i = 0U; i < XMC_ETH_WAKEUP_REGISTER_LENGTH; i++)
 80073a2:	2300      	movs	r3, #0
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	e009      	b.n	80073bc <XMC_ETH_MAC_SetWakeUpFrameFilter+0x28>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:572 (discriminator 3)
  {
    /* Write each time to the same register */
    eth_mac->regs->REMOTE_WAKE_UP_FRAME_FILTER = (*filter)[i];
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	68f9      	ldr	r1, [r7, #12]
 80073b0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80073b4:	629a      	str	r2, [r3, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:569 (discriminator 3)
                                      const uint32_t (*const filter)[XMC_ETH_WAKEUP_REGISTER_LENGTH])
{
  uint32_t i = 0U;

  /* Fill Remote Wake-up frame filter register with buffer data */
  for (i = 0U; i < XMC_ETH_WAKEUP_REGISTER_LENGTH; i++)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	3301      	adds	r3, #1
 80073ba:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:569 (discriminator 1)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2b07      	cmp	r3, #7
 80073c0:	d9f2      	bls.n	80073a8 <XMC_ETH_MAC_SetWakeUpFrameFilter+0x14>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:574
  {
    /* Write each time to the same register */
    eth_mac->regs->REMOTE_WAKE_UP_FRAME_FILTER = (*filter)[i];
  }
}
 80073c2:	bf00      	nop
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bc80      	pop	{r7}
 80073ca:	4770      	bx	lr

080073cc <XMC_ETH_MAC_EnableEvent>:
XMC_ETH_MAC_EnableEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:578

/* Enable event */
void XMC_ETH_MAC_EnableEvent(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:581
  XMC_ASSERT("XMC_ETH_MAC_EnableDMAEvent: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  eth_mac->regs->INTERRUPT_MASK &= ~(event >> 16U);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	6812      	ldr	r2, [r2, #0]
 80073de:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	0c12      	lsrs	r2, r2, #16
 80073e4:	43d2      	mvns	r2, r2
 80073e6:	400a      	ands	r2, r1
 80073e8:	63da      	str	r2, [r3, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:583

  event &= (uint16_t)0x7fffU;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80073f0:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:584
  if (XCM_ETH_MAC_IsNormalEvent(event))
 80073f2:	6838      	ldr	r0, [r7, #0]
 80073f4:	f7ff fbf6 	bl	8006be4 <XCM_ETH_MAC_IsNormalEvent>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <XMC_ETH_MAC_EnableEvent+0x3a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:586
  {
	event |= (uint32_t)ETH_INTERRUPT_ENABLE_NIE_Msk;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007404:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:589
  }

  if (XCM_ETH_MAC_IsAbnormalEvent(event))
 8007406:	6838      	ldr	r0, [r7, #0]
 8007408:	f7ff fbfe 	bl	8006c08 <XCM_ETH_MAC_IsAbnormalEvent>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <XMC_ETH_MAC_EnableEvent+0x4e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:591
  {
	event |= (uint32_t)ETH_INTERRUPT_ENABLE_AIE_Msk;
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007418:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:594
  }

  eth_mac->regs->INTERRUPT_ENABLE |= event;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6819      	ldr	r1, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007426:	331c      	adds	r3, #28
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	431a      	orrs	r2, r3
 800742e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8007432:	331c      	adds	r3, #28
 8007434:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:595
}
 8007436:	bf00      	nop
 8007438:	3708      	adds	r7, #8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop

08007440 <XMC_ETH_MAC_DisableEvent>:
XMC_ETH_MAC_DisableEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:599

/* Disable event */
void XMC_ETH_MAC_DisableEvent(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:602
  XMC_ASSERT("XMC_ETH_MAC_DisableDMAEvent: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  eth_mac->regs->INTERRUPT_MASK |= event >> 16U;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	6812      	ldr	r2, [r2, #0]
 8007452:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	0c12      	lsrs	r2, r2, #16
 8007458:	430a      	orrs	r2, r1
 800745a:	63da      	str	r2, [r3, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:604

  event &= 0x7fffU;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007462:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:605
  eth_mac->regs->INTERRUPT_ENABLE &= ~event;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6819      	ldr	r1, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007470:	331c      	adds	r3, #28
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	43db      	mvns	r3, r3
 8007478:	401a      	ands	r2, r3
 800747a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800747e:	331c      	adds	r3, #28
 8007480:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:606
}
 8007482:	bf00      	nop
 8007484:	370c      	adds	r7, #12
 8007486:	46bd      	mov	sp, r7
 8007488:	bc80      	pop	{r7}
 800748a:	4770      	bx	lr

0800748c <XMC_ETH_MAC_ClearEventStatus>:
XMC_ETH_MAC_ClearEventStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:610

/* Clear event status */
void XMC_ETH_MAC_ClearEventStatus(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:613
  XMC_ASSERT("XMC_ETH_MAC_ClearDMAEventStatus: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  if ((eth_mac->regs->STATUS & ETH_STATUS_NIS_Msk) != 0U)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800749e:	3314      	adds	r3, #20
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <XMC_ETH_MAC_ClearEventStatus+0x26>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:615
  {
	event |= (uint32_t)ETH_STATUS_NIS_Msk;
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074b0:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:618
  }

  if ((eth_mac->regs->STATUS & ETH_STATUS_AIS_Msk) != 0U)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ba:	3314      	adds	r3, #20
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <XMC_ETH_MAC_ClearEventStatus+0x42>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:620
  {
	event |= (uint32_t)ETH_STATUS_AIS_Msk;
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074cc:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:623
  }

  eth_mac->regs->STATUS = event;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074d6:	3314      	adds	r3, #20
 80074d8:	683a      	ldr	r2, [r7, #0]
 80074da:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:624
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bc80      	pop	{r7}
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop

080074e8 <XMC_ETH_MAC_GetEventStatus>:
XMC_ETH_MAC_GetEventStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:628

/* Obtain event status */
uint32_t XMC_ETH_MAC_GetEventStatus(const XMC_ETH_MAC_t *const eth_mac)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:629
  uint32_t temp_status = 0;
 80074f0:	2300      	movs	r3, #0
 80074f2:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:632
  XMC_ASSERT("XMC_ETH_MAC_GetDMAEventStatus: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));
  
  temp_status =  (eth_mac->regs->STATUS & (uint32_t)0x7ffUL);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074fc:	3314      	adds	r3, #20
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007504:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:634

  return ((uint32_t)((eth_mac->regs->INTERRUPT_STATUS & (ETH_INTERRUPT_MASK_PMTIM_Msk | ETH_INTERRUPT_MASK_TSIM_Msk)) << 16U) |
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750c:	f403 7302 	and.w	r3, r3, #520	; 0x208
 8007510:	041a      	lsls	r2, r3, #16
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	4313      	orrs	r3, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:636
		  temp_status);
}
 8007516:	4618      	mov	r0, r3
 8007518:	3714      	adds	r7, #20
 800751a:	46bd      	mov	sp, r7
 800751c:	bc80      	pop	{r7}
 800751e:	4770      	bx	lr

08007520 <XMC_ETH_MAC_ReturnRxDescriptor>:
XMC_ETH_MAC_ReturnRxDescriptor():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:640

/* Return RX descriptor */
void XMC_ETH_MAC_ReturnRxDescriptor(XMC_ETH_MAC_t *const eth_mac)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:641
  eth_mac->rx_desc[eth_mac->rx_index].status |= ETH_MAC_DMA_RDES0_OWN;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	691a      	ldr	r2, [r3, #16]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007532:	015b      	lsls	r3, r3, #5
 8007534:	4413      	add	r3, r2
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	6911      	ldr	r1, [r2, #16]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8007540:	0152      	lsls	r2, r2, #5
 8007542:	440a      	add	r2, r1
 8007544:	6812      	ldr	r2, [r2, #0]
 8007546:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800754a:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:642
  eth_mac->rx_index++;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007552:	3301      	adds	r3, #1
 8007554:	b2da      	uxtb	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:643
  if (eth_mac->rx_index == eth_mac->num_rx_buf)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007568:	429a      	cmp	r2, r3
 800756a:	d103      	bne.n	8007574 <XMC_ETH_MAC_ReturnRxDescriptor+0x54>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:645
  {
    eth_mac->rx_index = 0U;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:647
  } 
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	bc80      	pop	{r7}
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop

08007580 <XMC_ETH_MAC_ReturnTxDescriptor>:
XMC_ETH_MAC_ReturnTxDescriptor():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:651

/* Return TX descriptor */
void XMC_ETH_MAC_ReturnTxDescriptor(XMC_ETH_MAC_t *const eth_mac)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:652
  eth_mac->tx_ts_index = eth_mac->tx_index;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:654

  eth_mac->tx_desc[eth_mac->tx_index].status |= ETH_MAC_DMA_TDES0_CIC |ETH_MAC_DMA_TDES0_OWN;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	695a      	ldr	r2, [r3, #20]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800759e:	015b      	lsls	r3, r3, #5
 80075a0:	441a      	add	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6959      	ldr	r1, [r3, #20]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80075ac:	015b      	lsls	r3, r3, #5
 80075ae:	440b      	add	r3, r1
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075b6:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80075ba:	6013      	str	r3, [r2, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:655
  eth_mac->tx_index++;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80075c2:	3301      	adds	r3, #1
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:656
  if (eth_mac->tx_index == eth_mac->num_tx_buf)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80075d8:	429a      	cmp	r2, r3
 80075da:	d103      	bne.n	80075e4 <XMC_ETH_MAC_ReturnTxDescriptor+0x64>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:658
  {
    eth_mac->tx_index = 0U;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:661
  } 

  eth_mac->frame_end = NULL;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	621a      	str	r2, [r3, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:662
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bc80      	pop	{r7}
 80075f2:	4770      	bx	lr

080075f4 <XMC_ETH_MAC_SetVLANTag>:
XMC_ETH_MAC_SetVLANTag():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:666

/* Set VLAN tag */
void XMC_ETH_MAC_SetVLANTag(XMC_ETH_MAC_t *const eth_mac, uint16_t tag)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	807b      	strh	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:669
  XMC_ASSERT("XMC_ETH_MAC_SetVLANTag: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  eth_mac->regs->VLAN_TAG = (uint32_t)tag;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	887a      	ldrh	r2, [r7, #2]
 8007606:	61da      	str	r2, [r3, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:670
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	bc80      	pop	{r7}
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop

08007614 <XMC_ETH_MAC_InitPTP>:
XMC_ETH_MAC_InitPTP():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:674

/* Initialize PTP */
void XMC_ETH_MAC_InitPTP(XMC_ETH_MAC_t *const eth_mac, uint32_t config)
{
 8007614:	b590      	push	{r4, r7, lr}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:678
  XMC_ASSERT("XMC_ETH_MAC_InitPTP: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  /* Mask the time stamp interrupt */
  eth_mac->regs->INTERRUPT_MASK |= (uint32_t)ETH_INTERRUPT_MASK_TSIM_Msk;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	6812      	ldr	r2, [r2, #0]
 8007626:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800762c:	63da      	str	r2, [r3, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:681

  /* Enable time stamp */
  eth_mac->regs->TIMESTAMP_CONTROL = config | (uint32_t)ETH_TIMESTAMP_CONTROL_TSENA_Msk;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	f042 0201 	orr.w	r2, r2, #1
 8007638:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:683

  if ((config & (uint32_t)XMC_ETH_MAC_TIMESTAMP_CONFIG_FINE_UPDATE) != 0U)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d02b      	beq.n	800769e <XMC_ETH_MAC_InitPTP+0x8a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:686
  {
	/* Program addend register to obtain fSYS/2 from reference clock (fSYS) */
	eth_mac->regs->TIMESTAMP_ADDEND = (uint32_t)0x80000000U;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800764e:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:687
	eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSADDREG_Msk;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	6812      	ldr	r2, [r2, #0]
 800765a:	f8d2 2700 	ldr.w	r2, [r2, #1792]	; 0x700
 800765e:	f042 0220 	orr.w	r2, r2, #32
 8007662:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:691

	/* Program sub-second increment register based on PTP clock frequency = fSYS/2 */
	/* the nanoseconds register has a resolution of ~0.465ns. */
	eth_mac->regs->SUB_SECOND_INCREMENT = (uint32_t)((1.0F / (0x80000000U)) * (2.0F / XMC_SCU_CLOCK_GetSystemClockFrequency()));
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681c      	ldr	r4, [r3, #0]
 800766a:	f7ff faa1 	bl	8006bb0 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 800766e:	4603      	mov	r3, r0
 8007670:	4618      	mov	r0, r3
 8007672:	f007 fa1d 	bl	800eab0 <__aeabi_ui2f>
 8007676:	4603      	mov	r3, r0
 8007678:	4619      	mov	r1, r3
 800767a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800767e:	f007 fb23 	bl	800ecc8 <__aeabi_fdiv>
 8007682:	4603      	mov	r3, r0
 8007684:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 8007688:	4618      	mov	r0, r3
 800768a:	f007 fa69 	bl	800eb60 <__aeabi_fmul>
 800768e:	4603      	mov	r3, r0
 8007690:	4618      	mov	r0, r3
 8007692:	f007 fbb5 	bl	800ee00 <__aeabi_f2uiz>
 8007696:	4603      	mov	r3, r0
 8007698:	f8c4 3704 	str.w	r3, [r4, #1796]	; 0x704
 800769c:	e01a      	b.n	80076d4 <XMC_ETH_MAC_InitPTP+0xc0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:697
  }
  else
  {
	/* Program sub-second increment register based on PTP clock frequency = fSYS */
	/* the nanoseconds register has a resolution of ~0.465ns. */
	eth_mac->regs->SUB_SECOND_INCREMENT = (uint32_t)((1.0F / (0x80000000U)) * (1.0F / XMC_SCU_CLOCK_GetSystemClockFrequency()));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681c      	ldr	r4, [r3, #0]
 80076a2:	f7ff fa85 	bl	8006bb0 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 80076a6:	4603      	mov	r3, r0
 80076a8:	4618      	mov	r0, r3
 80076aa:	f007 fa01 	bl	800eab0 <__aeabi_ui2f>
 80076ae:	4603      	mov	r3, r0
 80076b0:	4619      	mov	r1, r3
 80076b2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80076b6:	f007 fb07 	bl	800ecc8 <__aeabi_fdiv>
 80076ba:	4603      	mov	r3, r0
 80076bc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 80076c0:	4618      	mov	r0, r3
 80076c2:	f007 fa4d 	bl	800eb60 <__aeabi_fmul>
 80076c6:	4603      	mov	r3, r0
 80076c8:	4618      	mov	r0, r3
 80076ca:	f007 fb99 	bl	800ee00 <__aeabi_f2uiz>
 80076ce:	4603      	mov	r3, r0
 80076d0:	f8c4 3704 	str.w	r3, [r4, #1796]	; 0x704
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:700
  }

  eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSINIT_Msk;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	6812      	ldr	r2, [r2, #0]
 80076dc:	f8d2 2700 	ldr.w	r2, [r2, #1792]	; 0x700
 80076e0:	f042 0204 	orr.w	r2, r2, #4
 80076e4:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:701
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd90      	pop	{r4, r7, pc}

080076f0 <XMC_ETH_MAC_GetPTPTime>:
XMC_ETH_MAC_GetPTPTime():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:705

/* Get PTP time */
void XMC_ETH_MAC_GetPTPTime(XMC_ETH_MAC_t *const eth_mac, XMC_ETH_MAC_TIME_t *const time)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:708
  XMC_ASSERT("XMC_ETH_MAC_GetPTPTime: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  time->nanoseconds = (uint32_t)(eth_mac->regs->SYSTEM_TIME_NANOSECONDS * (0x80000000U / 1000000000.0F));
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 8007702:	4618      	mov	r0, r3
 8007704:	f007 f9d4 	bl	800eab0 <__aeabi_ui2f>
 8007708:	4603      	mov	r3, r0
 800770a:	490b      	ldr	r1, [pc, #44]	; (8007738 <XMC_ETH_MAC_GetPTPTime+0x48>)
 800770c:	4618      	mov	r0, r3
 800770e:	f007 fa27 	bl	800eb60 <__aeabi_fmul>
 8007712:	4603      	mov	r3, r0
 8007714:	4618      	mov	r0, r3
 8007716:	f007 fb73 	bl	800ee00 <__aeabi_f2uiz>
 800771a:	4603      	mov	r3, r0
 800771c:	461a      	mov	r2, r3
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:709
  time->seconds = eth_mac->regs->SYSTEM_TIME_SECONDS;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f8d3 2708 	ldr.w	r2, [r3, #1800]	; 0x708
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:710
}
 800772e:	bf00      	nop
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	4009705f 	.word	0x4009705f

0800773c <XMC_ETH_MAC_UpdatePTPTime>:
XMC_ETH_MAC_UpdatePTPTime():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:714

/* Update PTP time */
void XMC_ETH_MAC_UpdatePTPTime(XMC_ETH_MAC_t *const eth_mac, const XMC_ETH_MAC_TIME_t *const time)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:719
  uint32_t temp;

  XMC_ASSERT("XMC_ETH_MAC_UpdatePTPTime: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  temp = (uint32_t)(abs(time->nanoseconds) * (100000000.0F / (0x80000000U)));
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	bfb8      	it	lt
 800774e:	425b      	neglt	r3, r3
 8007750:	4618      	mov	r0, r3
 8007752:	f007 f9b1 	bl	800eab8 <__aeabi_i2f>
 8007756:	4603      	mov	r3, r0
 8007758:	4915      	ldr	r1, [pc, #84]	; (80077b0 <XMC_ETH_MAC_UpdatePTPTime+0x74>)
 800775a:	4618      	mov	r0, r3
 800775c:	f007 fa00 	bl	800eb60 <__aeabi_fmul>
 8007760:	4603      	mov	r3, r0
 8007762:	4618      	mov	r0, r3
 8007764:	f007 fb4c 	bl	800ee00 <__aeabi_f2uiz>
 8007768:	4603      	mov	r3, r0
 800776a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:720
  if (time->nanoseconds >= 0)
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	db03      	blt.n	800777c <XMC_ETH_MAC_UpdatePTPTime+0x40>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:722
  {
	temp |= (uint32_t)ETH_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB_Msk;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800777a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:725
  }

  eth_mac->regs->SYSTEM_TIME_NANOSECONDS_UPDATE = temp;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:726
  eth_mac->regs->SYSTEM_TIME_SECONDS_UPDATE = time->seconds;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	6852      	ldr	r2, [r2, #4]
 800778e:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:728

  eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSUPDT_Msk;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	6812      	ldr	r2, [r2, #0]
 800779a:	f8d2 2700 	ldr.w	r2, [r2, #1792]	; 0x700
 800779e:	f042 0208 	orr.w	r2, r2, #8
 80077a2:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:729
}
 80077a6:	bf00      	nop
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	3d3ebc20 	.word	0x3d3ebc20

080077b4 <XMC_ETH_MAC_SetPTPAlarm>:
XMC_ETH_MAC_SetPTPAlarm():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:733

/* Set PTP alarm */
void XMC_ETH_MAC_SetPTPAlarm(XMC_ETH_MAC_t *const eth_mac, const XMC_ETH_MAC_TIME_t *const time)
{
 80077b4:	b590      	push	{r4, r7, lr}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:736
  XMC_ASSERT("XMC_ETH_MAC_SetPTPAlarm: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  eth_mac->regs->TARGET_TIME_NANOSECONDS = (uint32_t)(time->nanoseconds * (100000000.0F / (0x80000000U)));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681c      	ldr	r4, [r3, #0]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4618      	mov	r0, r3
 80077c8:	f007 f976 	bl	800eab8 <__aeabi_i2f>
 80077cc:	4603      	mov	r3, r0
 80077ce:	490a      	ldr	r1, [pc, #40]	; (80077f8 <XMC_ETH_MAC_SetPTPAlarm+0x44>)
 80077d0:	4618      	mov	r0, r3
 80077d2:	f007 f9c5 	bl	800eb60 <__aeabi_fmul>
 80077d6:	4603      	mov	r3, r0
 80077d8:	4618      	mov	r0, r3
 80077da:	f007 fb11 	bl	800ee00 <__aeabi_f2uiz>
 80077de:	4603      	mov	r3, r0
 80077e0:	f8c4 3720 	str.w	r3, [r4, #1824]	; 0x720
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:737
  eth_mac->regs->TARGET_TIME_SECONDS = time->seconds;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	6852      	ldr	r2, [r2, #4]
 80077ec:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:738
}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd90      	pop	{r4, r7, pc}
 80077f8:	3d3ebc20 	.word	0x3d3ebc20

080077fc <XMC_ETH_MAC_AdjustPTPClock>:
XMC_ETH_MAC_AdjustPTPClock():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:742

/* Adjust PTP clock */
void XMC_ETH_MAC_AdjustPTPClock(XMC_ETH_MAC_t *const eth_mac, uint32_t correction)
{
 80077fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:746
  XMC_ASSERT("XMC_ETH_MAC_AdjustPTPClock: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  /* Correction factor is Q31 (0x80000000 = 1.000000000) */
  eth_mac->regs->TIMESTAMP_ADDEND = (uint32_t)(((uint64_t)correction * eth_mac->regs->TIMESTAMP_ADDEND) >> 31U);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6818      	ldr	r0, [r3, #0]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	4619      	mov	r1, r3
 800780e:	f04f 0200 	mov.w	r2, #0
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f8d3 3718 	ldr.w	r3, [r3, #1816]	; 0x718
 800781a:	f04f 0400 	mov.w	r4, #0
 800781e:	fb03 fc02 	mul.w	ip, r3, r2
 8007822:	fb01 fe04 	mul.w	lr, r1, r4
 8007826:	44e6      	add	lr, ip
 8007828:	fba1 3403 	umull	r3, r4, r1, r3
 800782c:	eb0e 0204 	add.w	r2, lr, r4
 8007830:	4614      	mov	r4, r2
 8007832:	0fdd      	lsrs	r5, r3, #31
 8007834:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
 8007838:	0fe6      	lsrs	r6, r4, #31
 800783a:	462b      	mov	r3, r5
 800783c:	f8c0 3718 	str.w	r3, [r0, #1816]	; 0x718
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:749

  /* Update addend register */
  eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSADDREG_Msk;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	6812      	ldr	r2, [r2, #0]
 8007848:	f8d2 2700 	ldr.w	r2, [r2, #1792]	; 0x700
 800784c:	f042 0220 	orr.w	r2, r2, #32
 8007850:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:750
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800785c <XMC_ETH_MAC_GetPTPStatus>:
XMC_ETH_MAC_GetPTPStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:754

/* Set PTP status */
uint32_t XMC_ETH_MAC_GetPTPStatus(const XMC_ETH_MAC_t *const eth_mac)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:757
  XMC_ASSERT("XMC_ETH_MAC_GetPTPStatus: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  return (eth_mac->regs->TIMESTAMP_STATUS);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:758
}
 800786c:	4618      	mov	r0, r3
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	bc80      	pop	{r7}
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop

08007878 <XMC_ETH_MAC_GetRxTimeStamp>:
XMC_ETH_MAC_GetRxTimeStamp():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:762

/* Get TX time-stamp */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_GetRxTimeStamp(XMC_ETH_MAC_t *const eth_mac, XMC_ETH_MAC_TIME_t *const time)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:769
  XMC_ETH_MAC_STATUS_t status;

  XMC_ASSERT("XMC_ETH_MAC_GetRxTimeStamp: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));
  XMC_ASSERT("XMC_ETH_MAC_GetRxTimeStamp: time is invalid", time != NULL);

  rx_desc = &eth_mac->rx_desc[eth_mac->rx_index];
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	691a      	ldr	r2, [r3, #16]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800788c:	015b      	lsls	r3, r3, #5
 800788e:	4413      	add	r3, r2
 8007890:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:770
  if (rx_desc->status & ETH_MAC_DMA_RDES0_OWN)
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	da02      	bge.n	80078a0 <XMC_ETH_MAC_GetRxTimeStamp+0x28>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:772
  {
    status = XMC_ETH_MAC_STATUS_BUSY;
 800789a:	2301      	movs	r3, #1
 800789c:	73fb      	strb	r3, [r7, #15]
 800789e:	e00a      	b.n	80078b6 <XMC_ETH_MAC_GetRxTimeStamp+0x3e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:776
  }
  else
  {
    time->nanoseconds = (int32_t)rx_desc->time_stamp_nanoseconds;
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	69db      	ldr	r3, [r3, #28]
 80078a4:	461a      	mov	r2, r3
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:777
    time->seconds = rx_desc->time_stamp_seconds;
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	699a      	ldr	r2, [r3, #24]
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:779

    status = XMC_ETH_MAC_STATUS_OK;
 80078b2:	2300      	movs	r3, #0
 80078b4:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:782
  }

  return status;
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:783
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	bc80      	pop	{r7}
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop

080078c4 <XMC_ETH_MAC_GetTxTimeStamp>:
XMC_ETH_MAC_GetTxTimeStamp():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:787

/* Get TX time-stamp */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_GetTxTimeStamp(XMC_ETH_MAC_t *const eth_mac, XMC_ETH_MAC_TIME_t *const time)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:794
  XMC_ETH_MAC_STATUS_t status;

  XMC_ASSERT("XMC_ETH_MAC_GetTxTimeStamp: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));
  XMC_ASSERT("XMC_ETH_MAC_GetTxTimeStamp: time is invalid", time != NULL);

  tx_desc = &eth_mac->tx_desc[eth_mac->tx_ts_index];
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	695a      	ldr	r2, [r3, #20]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078d8:	015b      	lsls	r3, r3, #5
 80078da:	4413      	add	r3, r2
 80078dc:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:795
  if (tx_desc->status & ETH_MAC_DMA_TDES0_OWN)
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	da02      	bge.n	80078ec <XMC_ETH_MAC_GetTxTimeStamp+0x28>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:797
  {
    status = XMC_ETH_MAC_STATUS_BUSY;
 80078e6:	2301      	movs	r3, #1
 80078e8:	73fb      	strb	r3, [r7, #15]
 80078ea:	e00a      	b.n	8007902 <XMC_ETH_MAC_GetTxTimeStamp+0x3e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:801
  }
  else
  {
    time->nanoseconds = (int32_t)tx_desc->time_stamp_nanoseconds;
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	69db      	ldr	r3, [r3, #28]
 80078f0:	461a      	mov	r2, r3
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:802
    time->seconds = tx_desc->time_stamp_seconds;
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	699a      	ldr	r2, [r3, #24]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:804

    status = XMC_ETH_MAC_STATUS_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:807
  }

  return status;
 8007902:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_eth_mac.c:808
}
 8007904:	4618      	mov	r0, r3
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	bc80      	pop	{r7}
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop

08007910 <XMC_FCE_Init>:
XMC_FCE_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:65
/*
 * Initialize the FCE peripheral:
 * Update FCE configuration and initialize seed value
 */
XMC_FCE_STATUS_t XMC_FCE_Init(const XMC_FCE_t *const engine)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:66
  engine->kernel_ptr->CFG = engine->fce_cfg_update.regval;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	6852      	ldr	r2, [r2, #4]
 8007920:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:67
  engine->kernel_ptr->CRC = engine->seedvalue;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	6892      	ldr	r2, [r2, #8]
 800792a:	619a      	str	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:69
  
  return XMC_FCE_STATUS_OK;
 800792c:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:70
}
 800792e:	4618      	mov	r0, r3
 8007930:	370c      	adds	r7, #12
 8007932:	46bd      	mov	sp, r7
 8007934:	bc80      	pop	{r7}
 8007936:	4770      	bx	lr

08007938 <XMC_FCE_Disable>:
XMC_FCE_Disable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:74

/* Disable FCE */
void XMC_FCE_Disable(void)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:75
  FCE->CLC |= (uint32_t)FCE_CLC_DISR_Msk;
 800793c:	4a05      	ldr	r2, [pc, #20]	; (8007954 <XMC_FCE_Disable+0x1c>)
 800793e:	4b05      	ldr	r3, [pc, #20]	; (8007954 <XMC_FCE_Disable+0x1c>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f043 0301 	orr.w	r3, r3, #1
 8007946:	6013      	str	r3, [r2, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:77
  
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_FCE);
 8007948:	4803      	ldr	r0, [pc, #12]	; (8007958 <XMC_FCE_Disable+0x20>)
 800794a:	f7f9 ff03 	bl	8001754 <XMC_SCU_RESET_AssertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:83

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_FCE);
#endif

}
 800794e:	bf00      	nop
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	50020000 	.word	0x50020000
 8007958:	20000040 	.word	0x20000040

0800795c <XMC_FCE_Enable>:
XMC_FCE_Enable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:87

/* Enable FCE */
void XMC_FCE_Enable(void)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:92
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_FCE);
#endif

  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_FCE);
 8007960:	4805      	ldr	r0, [pc, #20]	; (8007978 <XMC_FCE_Enable+0x1c>)
 8007962:	f7f9 ff13 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:94

  FCE->CLC &= (uint32_t)~FCE_CLC_DISR_Msk;
 8007966:	4a05      	ldr	r2, [pc, #20]	; (800797c <XMC_FCE_Enable+0x20>)
 8007968:	4b04      	ldr	r3, [pc, #16]	; (800797c <XMC_FCE_Enable+0x20>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f023 0301 	bic.w	r3, r3, #1
 8007970:	6013      	str	r3, [r2, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:95
}
 8007972:	bf00      	nop
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	20000040 	.word	0x20000040
 800797c:	50020000 	.word	0x50020000

08007980 <XMC_FCE_CalculateCRC8>:
XMC_FCE_CalculateCRC8():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:102
/* Calculate and return the SAE J1850 CRC8 checksum */
XMC_FCE_STATUS_t XMC_FCE_CalculateCRC8(const XMC_FCE_t *const engine,
                                       const uint8_t *data,
									   uint32_t length,
									   uint8_t *result)
{
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:103
  XMC_FCE_STATUS_t status = XMC_FCE_STATUS_OK;
 800798e:	2300      	movs	r3, #0
 8007990:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:107
	
  XMC_ASSERT("XMC_FCE_CalculateCRC8: Wrong FCE kernel used", (engine -> kernel_ptr == XMC_FCE_CRC8));

  if (length == 0UL)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10d      	bne.n	80079b4 <XMC_FCE_CalculateCRC8+0x34>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:109
  {
    status = XMC_FCE_STATUS_ERROR;
 8007998:	2302      	movs	r3, #2
 800799a:	75fb      	strb	r3, [r7, #23]
 800799c:	e013      	b.n	80079c6 <XMC_FCE_CalculateCRC8+0x46>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:115
  }
  else
  {
    while (0UL != length)
    {
      engine->kernel_ptr->IR = *data;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	7812      	ldrb	r2, [r2, #0]
 80079a6:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:116
      data++;
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	3301      	adds	r3, #1
 80079ac:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:117
      length -= 1U;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	3b01      	subs	r3, #1
 80079b2:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:113
  {
    status = XMC_FCE_STATUS_ERROR;
  }
  else
  {
    while (0UL != length)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1f1      	bne.n	800799e <XMC_FCE_CalculateCRC8+0x1e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:120
      engine->kernel_ptr->IR = *data;
      data++;
      length -= 1U;
    }

    *result = (uint8_t)engine->kernel_ptr->CRC;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	701a      	strb	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:123
  }

  return status;
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:124
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	371c      	adds	r7, #28
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bc80      	pop	{r7}
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop

080079d4 <XMC_FCE_CalculateCRC16>:
XMC_FCE_CalculateCRC16():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:131
/* Calculate and return calculated CCITT CRC16 checksum */
XMC_FCE_STATUS_t XMC_FCE_CalculateCRC16(const XMC_FCE_t *const engine,
                                        const uint16_t *data,
										uint32_t length,
										uint16_t *result)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b087      	sub	sp, #28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
 80079e0:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:132
  XMC_FCE_STATUS_t status = XMC_FCE_STATUS_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:140
  XMC_ASSERT("XMC_FCE_CalculateCRC16: Length field is empty", (length != 0));
  XMC_ASSERT("XMC_FCE_CalculateCRC16: Length is not aligned", ((length & 0x01) == 0));
  XMC_ASSERT("XMC_FCE_CalculateCRC16: Buffer is not aligned", (((uint32_t)data % 2U) == 0));

  /* Check if data and length are word aligned */
  if (((length & 0x01U) != 0U) || (((uint32_t)length % 2U) != 0U))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d104      	bne.n	80079fa <XMC_FCE_CalculateCRC16+0x26>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:140 (discriminator 1)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00d      	beq.n	8007a16 <XMC_FCE_CalculateCRC16+0x42>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:142
  {
    status = XMC_FCE_STATUS_ERROR;
 80079fa:	2302      	movs	r3, #2
 80079fc:	75fb      	strb	r3, [r7, #23]
 80079fe:	e013      	b.n	8007a28 <XMC_FCE_CalculateCRC16+0x54>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:148
  }
  else
  {
    while (0UL != length)
    {
      engine->kernel_ptr->IR = *data;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68ba      	ldr	r2, [r7, #8]
 8007a06:	8812      	ldrh	r2, [r2, #0]
 8007a08:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:149
      data++;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	3302      	adds	r3, #2
 8007a0e:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:150
      length -= 2U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	3b02      	subs	r3, #2
 8007a14:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:146
  {
    status = XMC_FCE_STATUS_ERROR;
  }
  else
  {
    while (0UL != length)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1f1      	bne.n	8007a00 <XMC_FCE_CalculateCRC16+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:153
      engine->kernel_ptr->IR = *data;
      data++;
      length -= 2U;
    }
	
    *result = (uint16_t)engine->kernel_ptr->CRC;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	801a      	strh	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:156
  }

  return status;
 8007a28:	7dfb      	ldrb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:157
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	371c      	adds	r7, #28
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bc80      	pop	{r7}
 8007a32:	4770      	bx	lr

08007a34 <XMC_FCE_CalculateCRC32>:
XMC_FCE_CalculateCRC32():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:164
/* Calculate and return the IEEE 802.3 Ethernet CRC32 checksum */
XMC_FCE_STATUS_t XMC_FCE_CalculateCRC32(const XMC_FCE_t *const engine,
                                        const uint32_t *data,
										uint32_t length,
										uint32_t *result)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b087      	sub	sp, #28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
 8007a40:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:165
  XMC_FCE_STATUS_t status = XMC_FCE_STATUS_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:174
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Length field is empty", (length != 0));
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Length is not aligned", ((length & 0x03) == 0));
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Buffer is not aligned", (((uint32_t)data % 4U) == 0));

  /* Check if data and length are word aligned */
  if (((length & 0x03U) != 0U) || (((uint32_t)length % 4U) != 0U))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f003 0303 	and.w	r3, r3, #3
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d104      	bne.n	8007a5a <XMC_FCE_CalculateCRC32+0x26>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:174 (discriminator 1)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f003 0303 	and.w	r3, r3, #3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00d      	beq.n	8007a76 <XMC_FCE_CalculateCRC32+0x42>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:176
  {
    status = XMC_FCE_STATUS_ERROR;
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	75fb      	strb	r3, [r7, #23]
 8007a5e:	e012      	b.n	8007a86 <XMC_FCE_CalculateCRC32+0x52>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:182
  }
  else
  {
    while (0UL != length)
    {
      engine->kernel_ptr->IR = *data;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	6812      	ldr	r2, [r2, #0]
 8007a68:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:183
      data++;
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:184
      length -= 4U;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	3b04      	subs	r3, #4
 8007a74:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:180
  {
    status = XMC_FCE_STATUS_ERROR;
  }
  else
  {
    while (0UL != length)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1f1      	bne.n	8007a60 <XMC_FCE_CalculateCRC32+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:187
      engine->kernel_ptr->IR = *data;
      data++;
      length -= 4U;
    }

    *result = engine->kernel_ptr->CRC;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	699a      	ldr	r2, [r3, #24]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:190
  }
  
  return status;
 8007a86:	7dfb      	ldrb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:191
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	371c      	adds	r7, #28
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bc80      	pop	{r7}
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop

08007a94 <XMC_FCE_TriggerMismatch>:
XMC_FCE_TriggerMismatch():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:195

/* Trigger mismatch in the CRC registers */
void XMC_FCE_TriggerMismatch(const XMC_FCE_t *const engine, XMC_FCE_CTR_TEST_t test)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:197
  /* Create a 0 to 1 transition and clear to 0 once it is done */
  engine->kernel_ptr->CTR &= ~((uint32_t)test);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	6812      	ldr	r2, [r2, #0]
 8007aa8:	69d1      	ldr	r1, [r2, #28]
 8007aaa:	78fa      	ldrb	r2, [r7, #3]
 8007aac:	43d2      	mvns	r2, r2
 8007aae:	400a      	ands	r2, r1
 8007ab0:	61da      	str	r2, [r3, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:198
  engine->kernel_ptr->CTR |= (uint32_t)test;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	6812      	ldr	r2, [r2, #0]
 8007aba:	69d1      	ldr	r1, [r2, #28]
 8007abc:	78fa      	ldrb	r2, [r7, #3]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	61da      	str	r2, [r3, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:199
  engine->kernel_ptr->CTR &= ~((uint32_t)test);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	6812      	ldr	r2, [r2, #0]
 8007aca:	69d1      	ldr	r1, [r2, #28]
 8007acc:	78fa      	ldrb	r2, [r7, #3]
 8007ace:	43d2      	mvns	r2, r2
 8007ad0:	400a      	ands	r2, r1
 8007ad2:	61da      	str	r2, [r3, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:200
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bc80      	pop	{r7}
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop

08007ae0 <XMC_FCE_LittleEndian16bit>:
XMC_FCE_LittleEndian16bit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:204

/* Change endianness of 16-bit input buffer */
void XMC_FCE_LittleEndian16bit(uint8_t* inbuffer, uint16_t* outbuffer, uint16_t length)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b087      	sub	sp, #28
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	4613      	mov	r3, r2
 8007aec:	80fb      	strh	r3, [r7, #6]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:205
  uint16_t counter = 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	82fb      	strh	r3, [r7, #22]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:206
  uint16_t bytecounter = 0U;
 8007af2:	2300      	movs	r3, #0
 8007af4:	82bb      	strh	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:208

  if ((length & 0x01U)  == 0)
 8007af6:	88fb      	ldrh	r3, [r7, #6]
 8007af8:	f003 0301 	and.w	r3, r3, #1
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d13a      	bne.n	8007b76 <XMC_FCE_LittleEndian16bit+0x96>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:210
  {
    for (counter = 0U; counter < (length >> 1); counter++)
 8007b00:	2300      	movs	r3, #0
 8007b02:	82fb      	strh	r3, [r7, #22]
 8007b04:	e008      	b.n	8007b18 <XMC_FCE_LittleEndian16bit+0x38>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:212 (discriminator 3)
    {
      outbuffer[counter] = 0U;
 8007b06:	8afb      	ldrh	r3, [r7, #22]
 8007b08:	005b      	lsls	r3, r3, #1
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	2200      	movs	r2, #0
 8007b10:	801a      	strh	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:210 (discriminator 3)
  uint16_t counter = 0U;
  uint16_t bytecounter = 0U;

  if ((length & 0x01U)  == 0)
  {
    for (counter = 0U; counter < (length >> 1); counter++)
 8007b12:	8afb      	ldrh	r3, [r7, #22]
 8007b14:	3301      	adds	r3, #1
 8007b16:	82fb      	strh	r3, [r7, #22]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:210 (discriminator 1)
 8007b18:	88fb      	ldrh	r3, [r7, #6]
 8007b1a:	085b      	lsrs	r3, r3, #1
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	8afa      	ldrh	r2, [r7, #22]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d3f0      	bcc.n	8007b06 <XMC_FCE_LittleEndian16bit+0x26>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:215
    {
      outbuffer[counter] = 0U;
    }

    outbuffer[counter] = 0U;
 8007b24:	8afb      	ldrh	r3, [r7, #22]
 8007b26:	005b      	lsls	r3, r3, #1
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	801a      	strh	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:216
    counter = 0U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	82fb      	strh	r3, [r7, #22]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:218

    while (length)
 8007b34:	e01c      	b.n	8007b70 <XMC_FCE_LittleEndian16bit+0x90>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:220
    {
      outbuffer[counter] = ((uint16_t)((uint16_t)inbuffer[bytecounter] << 8U) |
 8007b36:	8afb      	ldrh	r3, [r7, #22]
 8007b38:	005b      	lsls	r3, r3, #1
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	8aba      	ldrh	r2, [r7, #20]
 8007b40:	68f9      	ldr	r1, [r7, #12]
 8007b42:	440a      	add	r2, r1
 8007b44:	7812      	ldrb	r2, [r2, #0]
 8007b46:	b292      	uxth	r2, r2
 8007b48:	0212      	lsls	r2, r2, #8
 8007b4a:	b291      	uxth	r1, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:221
                            (inbuffer[bytecounter + 1U]));
 8007b4c:	8aba      	ldrh	r2, [r7, #20]
 8007b4e:	3201      	adds	r2, #1
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	4402      	add	r2, r0
 8007b54:	7812      	ldrb	r2, [r2, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:220
    outbuffer[counter] = 0U;
    counter = 0U;

    while (length)
    {
      outbuffer[counter] = ((uint16_t)((uint16_t)inbuffer[bytecounter] << 8U) |
 8007b56:	b292      	uxth	r2, r2
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	b292      	uxth	r2, r2
 8007b5c:	801a      	strh	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:222
                            (inbuffer[bytecounter + 1U]));
      counter += 1U;
 8007b5e:	8afb      	ldrh	r3, [r7, #22]
 8007b60:	3301      	adds	r3, #1
 8007b62:	82fb      	strh	r3, [r7, #22]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:223
      bytecounter += 2U;
 8007b64:	8abb      	ldrh	r3, [r7, #20]
 8007b66:	3302      	adds	r3, #2
 8007b68:	82bb      	strh	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:224
      length -= 2U;
 8007b6a:	88fb      	ldrh	r3, [r7, #6]
 8007b6c:	3b02      	subs	r3, #2
 8007b6e:	80fb      	strh	r3, [r7, #6]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:218
    }

    outbuffer[counter] = 0U;
    counter = 0U;

    while (length)
 8007b70:	88fb      	ldrh	r3, [r7, #6]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1df      	bne.n	8007b36 <XMC_FCE_LittleEndian16bit+0x56>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:227
      counter += 1U;
      bytecounter += 2U;
      length -= 2U;
    }
  }
}
 8007b76:	bf00      	nop
 8007b78:	371c      	adds	r7, #28
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bc80      	pop	{r7}
 8007b7e:	4770      	bx	lr

08007b80 <XMC_FCE_LittleEndian32bit>:
XMC_FCE_LittleEndian32bit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:231

/* Change endianness of 32-bit input buffer */
void XMC_FCE_LittleEndian32bit(uint8_t* inbuffer, uint32_t* outbuffer, uint16_t length)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b087      	sub	sp, #28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	80fb      	strh	r3, [r7, #6]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:232
  uint16_t counter = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	82fb      	strh	r3, [r7, #22]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:233
  uint16_t bytecounter = 0U;
 8007b92:	2300      	movs	r3, #0
 8007b94:	82bb      	strh	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:235
 
  if ((length & 0x03U) == 0)
 8007b96:	88fb      	ldrh	r3, [r7, #6]
 8007b98:	f003 0303 	and.w	r3, r3, #3
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d144      	bne.n	8007c2a <XMC_FCE_LittleEndian32bit+0xaa>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:237
  {
    for (counter = 0U; counter < (length >> 2U); counter++)
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	82fb      	strh	r3, [r7, #22]
 8007ba4:	e008      	b.n	8007bb8 <XMC_FCE_LittleEndian32bit+0x38>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:239 (discriminator 3)
    {
      outbuffer[counter] = 0U;
 8007ba6:	8afb      	ldrh	r3, [r7, #22]
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	4413      	add	r3, r2
 8007bae:	2200      	movs	r2, #0
 8007bb0:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:237 (discriminator 3)
  uint16_t counter = 0U;
  uint16_t bytecounter = 0U;
 
  if ((length & 0x03U) == 0)
  {
    for (counter = 0U; counter < (length >> 2U); counter++)
 8007bb2:	8afb      	ldrh	r3, [r7, #22]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	82fb      	strh	r3, [r7, #22]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:237 (discriminator 1)
 8007bb8:	88fb      	ldrh	r3, [r7, #6]
 8007bba:	089b      	lsrs	r3, r3, #2
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	8afa      	ldrh	r2, [r7, #22]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d3f0      	bcc.n	8007ba6 <XMC_FCE_LittleEndian32bit+0x26>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:242
    {
      outbuffer[counter] = 0U;
    }

    outbuffer[counter] = 0U;
 8007bc4:	8afb      	ldrh	r3, [r7, #22]
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	4413      	add	r3, r2
 8007bcc:	2200      	movs	r2, #0
 8007bce:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:243
    counter = 0U;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	82fb      	strh	r3, [r7, #22]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:245

    while (length)
 8007bd4:	e026      	b.n	8007c24 <XMC_FCE_LittleEndian32bit+0xa4>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:247
    {
      outbuffer[counter] = ((uint32_t)inbuffer[bytecounter]      << 24U) |
 8007bd6:	8afb      	ldrh	r3, [r7, #22]
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	4413      	add	r3, r2
 8007bde:	8aba      	ldrh	r2, [r7, #20]
 8007be0:	68f9      	ldr	r1, [r7, #12]
 8007be2:	440a      	add	r2, r1
 8007be4:	7812      	ldrb	r2, [r2, #0]
 8007be6:	0611      	lsls	r1, r2, #24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:248
                           ((uint32_t)inbuffer[bytecounter + 1U] << 16U) |
 8007be8:	8aba      	ldrh	r2, [r7, #20]
 8007bea:	3201      	adds	r2, #1
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	4402      	add	r2, r0
 8007bf0:	7812      	ldrb	r2, [r2, #0]
 8007bf2:	0412      	lsls	r2, r2, #16
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:247
    outbuffer[counter] = 0U;
    counter = 0U;

    while (length)
    {
      outbuffer[counter] = ((uint32_t)inbuffer[bytecounter]      << 24U) |
 8007bf4:	4311      	orrs	r1, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:249
                           ((uint32_t)inbuffer[bytecounter + 1U] << 16U) |
                           ((uint32_t)inbuffer[bytecounter + 2U] <<  8U) |
 8007bf6:	8aba      	ldrh	r2, [r7, #20]
 8007bf8:	3202      	adds	r2, #2
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	4402      	add	r2, r0
 8007bfe:	7812      	ldrb	r2, [r2, #0]
 8007c00:	0212      	lsls	r2, r2, #8
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:248
    counter = 0U;

    while (length)
    {
      outbuffer[counter] = ((uint32_t)inbuffer[bytecounter]      << 24U) |
                           ((uint32_t)inbuffer[bytecounter + 1U] << 16U) |
 8007c02:	430a      	orrs	r2, r1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:250
                           ((uint32_t)inbuffer[bytecounter + 2U] <<  8U) |
                           (inbuffer[bytecounter + 3U]);
 8007c04:	8ab9      	ldrh	r1, [r7, #20]
 8007c06:	3103      	adds	r1, #3
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	4401      	add	r1, r0
 8007c0c:	7809      	ldrb	r1, [r1, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:249

    while (length)
    {
      outbuffer[counter] = ((uint32_t)inbuffer[bytecounter]      << 24U) |
                           ((uint32_t)inbuffer[bytecounter + 1U] << 16U) |
                           ((uint32_t)inbuffer[bytecounter + 2U] <<  8U) |
 8007c0e:	430a      	orrs	r2, r1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:247
    outbuffer[counter] = 0U;
    counter = 0U;

    while (length)
    {
      outbuffer[counter] = ((uint32_t)inbuffer[bytecounter]      << 24U) |
 8007c10:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:251
                           ((uint32_t)inbuffer[bytecounter + 1U] << 16U) |
                           ((uint32_t)inbuffer[bytecounter + 2U] <<  8U) |
                           (inbuffer[bytecounter + 3U]);
      counter += 1U;
 8007c12:	8afb      	ldrh	r3, [r7, #22]
 8007c14:	3301      	adds	r3, #1
 8007c16:	82fb      	strh	r3, [r7, #22]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:252
      bytecounter += 4U;
 8007c18:	8abb      	ldrh	r3, [r7, #20]
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	82bb      	strh	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:253
      length -= 4U;
 8007c1e:	88fb      	ldrh	r3, [r7, #6]
 8007c20:	3b04      	subs	r3, #4
 8007c22:	80fb      	strh	r3, [r7, #6]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:245
    }

    outbuffer[counter] = 0U;
    counter = 0U;

    while (length)
 8007c24:	88fb      	ldrh	r3, [r7, #6]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1d5      	bne.n	8007bd6 <XMC_FCE_LittleEndian32bit+0x56>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_fce.c:256
      counter += 1U;
      bytecounter += 4U;
      length -= 4U;
    }
  }
}
 8007c2a:	bf00      	nop
 8007c2c:	371c      	adds	r7, #28
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bc80      	pop	{r7}
 8007c32:	4770      	bx	lr

08007c34 <XMC_GPIO_SetMode>:
XMC_GPIO_SetMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_gpio.c:66
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	70fb      	strb	r3, [r7, #3]
 8007c40:	4613      	mov	r3, r2
 8007c42:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_gpio.c:70
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8007c44:	78fb      	ldrb	r3, [r7, #3]
 8007c46:	089b      	lsrs	r3, r3, #2
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	78fb      	ldrb	r3, [r7, #3]
 8007c4e:	089b      	lsrs	r3, r3, #2
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	461a      	mov	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	3204      	adds	r2, #4
 8007c58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c5c:	78fb      	ldrb	r3, [r7, #3]
 8007c5e:	f003 0303 	and.w	r3, r3, #3
 8007c62:	00db      	lsls	r3, r3, #3
 8007c64:	21f8      	movs	r1, #248	; 0xf8
 8007c66:	fa01 f303 	lsl.w	r3, r1, r3
 8007c6a:	43db      	mvns	r3, r3
 8007c6c:	ea02 0103 	and.w	r1, r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	1d02      	adds	r2, r0, #4
 8007c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_gpio.c:71
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8007c78:	78fb      	ldrb	r3, [r7, #3]
 8007c7a:	089b      	lsrs	r3, r3, #2
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	4618      	mov	r0, r3
 8007c80:	78fb      	ldrb	r3, [r7, #3]
 8007c82:	089b      	lsrs	r3, r3, #2
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	461a      	mov	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3204      	adds	r2, #4
 8007c8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c90:	78b9      	ldrb	r1, [r7, #2]
 8007c92:	78fb      	ldrb	r3, [r7, #3]
 8007c94:	f003 0303 	and.w	r3, r3, #3
 8007c98:	00db      	lsls	r3, r3, #3
 8007c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c9e:	ea42 0103 	orr.w	r1, r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	1d02      	adds	r2, r0, #4
 8007ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_gpio.c:72
}
 8007caa:	bf00      	nop
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bc80      	pop	{r7}
 8007cb2:	4770      	bx	lr

08007cb4 <XMC_GPIO_SetHardwareControl>:
XMC_GPIO_SetHardwareControl():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_gpio.c:75

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	70fb      	strb	r3, [r7, #3]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_gpio.c:79
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007cc8:	78fb      	ldrb	r3, [r7, #3]
 8007cca:	005b      	lsls	r3, r3, #1
 8007ccc:	2103      	movs	r1, #3
 8007cce:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd2:	43db      	mvns	r3, r3
 8007cd4:	401a      	ands	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	675a      	str	r2, [r3, #116]	; 0x74
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_gpio.c:80
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007cde:	78b9      	ldrb	r1, [r7, #2]
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	005b      	lsls	r3, r3, #1
 8007ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	675a      	str	r2, [r3, #116]	; 0x74
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_gpio.c:81
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bc80      	pop	{r7}
 8007cf6:	4770      	bx	lr

08007cf8 <XMC_USIC_CH_GetTransmitBufferStatus>:
XMC_USIC_CH_GetTransmitBufferStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:1111
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:1112
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d0a:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:1113
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bc80      	pop	{r7}
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop

08007d18 <XMC_USIC_CH_SetMode>:
XMC_USIC_CH_SetMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:2005
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	460b      	mov	r3, r1
 8007d22:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:2006
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d28:	f023 020f 	bic.w	r2, r3, #15
 8007d2c:	78fb      	ldrb	r3, [r7, #3]
 8007d2e:	431a      	orrs	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	641a      	str	r2, [r3, #64]	; 0x40
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:2007
}
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bc80      	pop	{r7}
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop

08007d40 <XMC_I2C_CH_ClearStatusFlag>:
XMC_I2C_CH_ClearStatusFlag():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_i2c.h:673
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_i2c.h:674
  channel->PSCR |= flag;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	431a      	orrs	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	64da      	str	r2, [r3, #76]	; 0x4c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_i2c.h:675
}
 8007d56:	bf00      	nop
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bc80      	pop	{r7}
 8007d5e:	4770      	bx	lr

08007d60 <XMC_I2C_CH_Init>:
XMC_I2C_CH_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:109
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:110
  XMC_USIC_CH_Enable(channel);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f004 fe74 	bl	800ca58 <XMC_USIC_CH_Enable>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:113
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a0e      	ldr	r2, [pc, #56]	; (8007dac <XMC_I2C_CH_Init+0x4c>)
 8007d74:	635a      	str	r2, [r3, #52]	; 0x34
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:119
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	889b      	ldrh	r3, [r3, #4]
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f817 	bl	8007db0 <XMC_I2C_CH_SetSlaveAddress>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:120
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f851 	bl	8007e30 <XMC_I2C_CH_SetBaudrate>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:123
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8007d94:	639a      	str	r2, [r3, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:126

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f04f 32ff 	mov.w	r2, #4294967295
 8007d9c:	64da      	str	r2, [r3, #76]	; 0x4c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:129

  /* Disable parity generation */
  channel->CCR = 0x0U;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	641a      	str	r2, [r3, #64]	; 0x40
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:130
}
 8007da4:	bf00      	nop
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	073f0303 	.word	0x073f0303

08007db0 <XMC_I2C_CH_SetSlaveAddress>:
XMC_I2C_CH_SetSlaveAddress():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:133
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	460b      	mov	r3, r1
 8007dba:	807b      	strh	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:134
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 8007dbc:	887b      	ldrh	r3, [r7, #2]
 8007dbe:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8007dc2:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8007dc6:	d109      	bne.n	8007ddc <XMC_I2C_CH_SetSlaveAddress+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:136
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
 8007dc8:	887b      	ldrh	r3, [r7, #2]
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	887b      	ldrh	r3, [r7, #2]
 8007dce:	005b      	lsls	r3, r3, #1
 8007dd0:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 8007dd4:	431a      	orrs	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	63da      	str	r2, [r3, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:142
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  }
}
 8007dda:	e003      	b.n	8007de4 <XMC_I2C_CH_SetSlaveAddress+0x34>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:140
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 8007ddc:	887b      	ldrh	r3, [r7, #2]
 8007dde:	021a      	lsls	r2, r3, #8
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	63da      	str	r2, [r3, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:142
  }
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bc80      	pop	{r7}
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop

08007df0 <XMC_I2C_CH_GetSlaveAddress>:
XMC_I2C_CH_GetSlaveAddress():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:145
/* Read the slave address */
uint16_t XMC_I2C_CH_GetSlaveAddress(const XMC_USIC_CH_t *const channel)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:146
  uint32_t address = channel->PCR_IICMode & (uint32_t)USIC_CH_PCR_IICMode_SLAD_Msk;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:148
  
  if ((address & 0xffU) == 0U)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d103      	bne.n	8007e10 <XMC_I2C_CH_GetSlaveAddress+0x20>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:150
  {
    address = address >> XMC_I2C_7BIT_ADDR_Pos;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	0a1b      	lsrs	r3, r3, #8
 8007e0c:	60fb      	str	r3, [r7, #12]
 8007e0e:	e007      	b.n	8007e20 <XMC_I2C_CH_GetSlaveAddress+0x30>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:154
  }
  else
  {
    address = (address & 0xffU) | ((address >> 1) & 0x0300U);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	b2da      	uxtb	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	085b      	lsrs	r3, r3, #1
 8007e18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:157
  }
  
  return (uint16_t)address;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	b29b      	uxth	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:158
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bc80      	pop	{r7}
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop

08007e30 <XMC_I2C_CH_SetBaudrate>:
XMC_I2C_CH_SetBaudrate():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:161
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:164
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:166
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	4a17      	ldr	r2, [pc, #92]	; (8007ea0 <XMC_I2C_CH_SetBaudrate+0x70>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d810      	bhi.n	8007e68 <XMC_I2C_CH_SetBaudrate+0x38>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:168
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	63da      	str	r2, [r3, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:169
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
 8007e52:	220a      	movs	r2, #10
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f004 fe5e 	bl	800cb18 <XMC_USIC_CH_SetBaudrate>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d119      	bne.n	8007e96 <XMC_I2C_CH_SetBaudrate+0x66>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:171
    {
      status = XMC_I2C_CH_STATUS_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	73fb      	strb	r3, [r7, #15]
 8007e66:	e016      	b.n	8007e96 <XMC_I2C_CH_SetBaudrate+0x66>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:174
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	4a0e      	ldr	r2, [pc, #56]	; (8007ea4 <XMC_I2C_CH_SetBaudrate+0x74>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d810      	bhi.n	8007e92 <XMC_I2C_CH_SetBaudrate+0x62>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:176
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e74:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	63da      	str	r2, [r3, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:177
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
 8007e7c:	2219      	movs	r2, #25
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f004 fe49 	bl	800cb18 <XMC_USIC_CH_SetBaudrate>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d104      	bne.n	8007e96 <XMC_I2C_CH_SetBaudrate+0x66>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:179
    {
      status = XMC_I2C_CH_STATUS_OK;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	73fb      	strb	r3, [r7, #15]
 8007e90:	e001      	b.n	8007e96 <XMC_I2C_CH_SetBaudrate+0x66>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:184
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:187
  }
  
  return status;
 8007e96:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:188
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	000186a0 	.word	0x000186a0
 8007ea4:	00061a80 	.word	0x00061a80

08007ea8 <XMC_I2C_CH_MasterStart>:
XMC_I2C_CH_MasterStart():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:191
/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	807b      	strh	r3, [r7, #2]
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	707b      	strb	r3, [r7, #1]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:194
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 8007eb8:	887b      	ldrh	r3, [r7, #2]
 8007eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:195
  if (command == XMC_I2C_CH_CMD_READ)
 8007ec2:	787b      	ldrb	r3, [r7, #1]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d103      	bne.n	8007ed0 <XMC_I2C_CH_MasterStart+0x28>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:197
  {
    temp |= 0x1U;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f043 0301 	orr.w	r3, r3, #1
 8007ece:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:201
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007ed6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d110      	bne.n	8007f00 <XMC_I2C_CH_MasterStart+0x58>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:203
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8007ede:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:203 (discriminator 1)
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f7ff ff09 	bl	8007cf8 <XMC_USIC_CH_GetTransmitBufferStatus>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b80      	cmp	r3, #128	; 0x80
 8007eea:	d0f9      	beq.n	8007ee0 <XMC_I2C_CH_MasterStart+0x38>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:209
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8007eec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7ff ff25 	bl	8007d40 <XMC_I2C_CH_ClearStatusFlag>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:211

    channel->TBUF[0] = temp;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:217
  }
  else
  {
    channel->IN[0U] = temp;
  }
}
 8007efe:	e003      	b.n	8007f08 <XMC_I2C_CH_MasterStart+0x60>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:215

    channel->TBUF[0] = temp;
  }
  else
  {
    channel->IN[0U] = temp;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:217
  }
}
 8007f08:	bf00      	nop
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <XMC_I2C_CH_MasterRepeatedStart>:
XMC_I2C_CH_MasterRepeatedStart():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:220
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	460b      	mov	r3, r1
 8007f1a:	807b      	strh	r3, [r7, #2]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	707b      	strb	r3, [r7, #1]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:222
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 8007f20:	887b      	ldrh	r3, [r7, #2]
 8007f22:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:223
  if (command == XMC_I2C_CH_CMD_READ)
 8007f2a:	787b      	ldrb	r3, [r7, #1]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d103      	bne.n	8007f38 <XMC_I2C_CH_MasterRepeatedStart+0x28>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:225
  {
    tmp |= 0x1U;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f043 0301 	orr.w	r3, r3, #1
 8007f36:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:229
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007f3e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d110      	bne.n	8007f68 <XMC_I2C_CH_MasterRepeatedStart+0x58>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:231
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8007f46:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:231 (discriminator 1)
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f7ff fed5 	bl	8007cf8 <XMC_USIC_CH_GetTransmitBufferStatus>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b80      	cmp	r3, #128	; 0x80
 8007f52:	d0f9      	beq.n	8007f48 <XMC_I2C_CH_MasterRepeatedStart+0x38>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:237
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8007f54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f7ff fef1 	bl	8007d40 <XMC_I2C_CH_ClearStatusFlag>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:239

    channel->TBUF[0] = tmp;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:245
  }
  else
  {
    channel->IN[0U] = tmp;
  }
}
 8007f66:	e003      	b.n	8007f70 <XMC_I2C_CH_MasterRepeatedStart+0x60>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:243

    channel->TBUF[0] = tmp;
  }
  else
  {
    channel->IN[0U] = tmp;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:245
  }
}
 8007f70:	bf00      	nop
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <XMC_I2C_CH_MasterStop>:
XMC_I2C_CH_MasterStop():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:249

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:251
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007f86:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d111      	bne.n	8007fb2 <XMC_I2C_CH_MasterStop+0x3a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:253
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8007f8e:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:253 (discriminator 1)
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f7ff feb1 	bl	8007cf8 <XMC_USIC_CH_GetTransmitBufferStatus>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b80      	cmp	r3, #128	; 0x80
 8007f9a:	d0f9      	beq.n	8007f90 <XMC_I2C_CH_MasterStop+0x18>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:259
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8007f9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7ff fecd 	bl	8007d40 <XMC_I2C_CH_ClearStatusFlag>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:261

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007fac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:267
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
}
 8007fb0:	e004      	b.n	8007fbc <XMC_I2C_CH_MasterStop+0x44>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:265

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007fb8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:267
  }
}
 8007fbc:	bf00      	nop
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <XMC_I2C_CH_MasterTransmit>:
XMC_I2C_CH_MasterTransmit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:271

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:273
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007fd6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d110      	bne.n	8008000 <XMC_I2C_CH_MasterTransmit+0x3c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:275
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8007fde:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:275 (discriminator 1)
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f7ff fe89 	bl	8007cf8 <XMC_USIC_CH_GetTransmitBufferStatus>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b80      	cmp	r3, #128	; 0x80
 8007fea:	d0f9      	beq.n	8007fe0 <XMC_I2C_CH_MasterTransmit+0x1c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:281
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8007fec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7ff fea5 	bl	8007d40 <XMC_I2C_CH_ClearStatusFlag>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:283

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8007ff6:	78fa      	ldrb	r2, [r7, #3]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:289
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
}
 8007ffe:	e003      	b.n	8008008 <XMC_I2C_CH_MasterTransmit+0x44>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:287

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8008000:	78fa      	ldrb	r2, [r7, #3]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:289
  }
}
 8008008:	bf00      	nop
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <XMC_I2C_CH_SlaveTransmit>:
XMC_I2C_CH_SlaveTransmit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:293

/* Sends slave send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_SlaveTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	460b      	mov	r3, r1
 800801a:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:295
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008022:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d112      	bne.n	8008050 <XMC_I2C_CH_SlaveTransmit+0x40>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:297
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800802a:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:297 (discriminator 1)
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f7ff fe63 	bl	8007cf8 <XMC_USIC_CH_GetTransmitBufferStatus>
 8008032:	4603      	mov	r3, r0
 8008034:	2b80      	cmp	r3, #128	; 0x80
 8008036:	d0f9      	beq.n	800802c <XMC_I2C_CH_SlaveTransmit+0x1c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:303
	{
      /* check TDV, wait until TBUF is ready */
    }    

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8008038:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f7ff fe7f 	bl	8007d40 <XMC_I2C_CH_ClearStatusFlag>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:305

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_SLAVE_SEND | data;
 8008042:	78fb      	ldrb	r3, [r7, #3]
 8008044:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:311
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_SLAVE_SEND | data;
  }
}
 800804e:	e005      	b.n	800805c <XMC_I2C_CH_SlaveTransmit+0x4c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:309

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_SLAVE_SEND | data;
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_SLAVE_SEND | data;
 8008050:	78fb      	ldrb	r3, [r7, #3]
 8008052:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:311
  }
}
 800805c:	bf00      	nop
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <XMC_I2C_CH_MasterReceiveAck>:
XMC_I2C_CH_MasterReceiveAck():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:315

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:317
/* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008072:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d111      	bne.n	800809e <XMC_I2C_CH_MasterReceiveAck+0x3a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:319
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800807a:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:319 (discriminator 1)
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f7ff fe3b 	bl	8007cf8 <XMC_USIC_CH_GetTransmitBufferStatus>
 8008082:	4603      	mov	r3, r0
 8008084:	2b80      	cmp	r3, #128	; 0x80
 8008086:	d0f9      	beq.n	800807c <XMC_I2C_CH_MasterReceiveAck+0x18>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:325
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8008088:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7ff fe57 	bl	8007d40 <XMC_I2C_CH_ClearStatusFlag>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:327

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:333
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
  }
}
 800809c:	e004      	b.n	80080a8 <XMC_I2C_CH_MasterReceiveAck+0x44>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:331

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080a4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:333
  }
}
 80080a8:	bf00      	nop
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <XMC_I2C_CH_MasterReceiveNack>:
XMC_I2C_CH_MasterReceiveNack():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:337

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:339
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80080be:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d111      	bne.n	80080ea <XMC_I2C_CH_MasterReceiveNack+0x3a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:341
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80080c6:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:341 (discriminator 1)
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7ff fe15 	bl	8007cf8 <XMC_USIC_CH_GetTransmitBufferStatus>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b80      	cmp	r3, #128	; 0x80
 80080d2:	d0f9      	beq.n	80080c8 <XMC_I2C_CH_MasterReceiveNack+0x18>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:347
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80080d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7ff fe31 	bl	8007d40 <XMC_I2C_CH_ClearStatusFlag>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:349

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80080e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:355
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
}
 80080e8:	e004      	b.n	80080f4 <XMC_I2C_CH_MasterReceiveNack+0x44>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:353

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f44f 7240 	mov.w	r2, #768	; 0x300
 80080f0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:355
  }
}
 80080f4:	bf00      	nop
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <XMC_I2C_CH_GetReceivedData>:
XMC_I2C_CH_GetReceivedData():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:359

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:363
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800810a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d103      	bne.n	800811a <XMC_I2C_CH_GetReceivedData+0x1e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:365
  {
    retval = (uint8_t)channel->RBUF;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008116:	73fb      	strb	r3, [r7, #15]
 8008118:	e003      	b.n	8008122 <XMC_I2C_CH_GetReceivedData+0x26>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:369
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008120:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:372
  }

  return retval;
 8008122:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:373
}
 8008124:	4618      	mov	r0, r3
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	bc80      	pop	{r7}
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop

08008130 <XMC_I2C_CH_Stop>:
XMC_I2C_CH_Stop():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:377

/* Sets the operating mode of USIC to IDLE */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_Stop(XMC_USIC_CH_t *const channel)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:378
  XMC_I2C_CH_STATUS_t status = XMC_I2C_CH_STATUS_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:380

  if (((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) & (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY) != 0U)
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f7ff fddb 	bl	8007cf8 <XMC_USIC_CH_GetTransmitBufferStatus>
 8008142:	4603      	mov	r3, r0
 8008144:	b25b      	sxtb	r3, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	da02      	bge.n	8008150 <XMC_I2C_CH_Stop+0x20>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:382
  {
    status = XMC_I2C_CH_STATUS_BUSY;
 800814a:	2302      	movs	r3, #2
 800814c:	73fb      	strb	r3, [r7, #15]
 800814e:	e003      	b.n	8008158 <XMC_I2C_CH_Stop+0x28>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:387
  }
  else
  {
    /* USIC channel in IDLE mode */
    XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_IDLE);
 8008150:	2100      	movs	r1, #0
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7ff fde0 	bl	8007d18 <XMC_USIC_CH_SetMode>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:389
  }
  return status;
 8008158:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:390
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop

08008164 <XMC_I2C_CH_EnableEvent>:
XMC_I2C_CH_EnableEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:393

void XMC_I2C_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:394
  channel->CCR |= (event&0x1fc00U);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 8008178:	431a      	orrs	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	641a      	str	r2, [r3, #64]	; 0x40
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:395
  channel->PCR_IICMode |= ((event) & 0x41fc0000U);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	4b04      	ldr	r3, [pc, #16]	; (8008198 <XMC_I2C_CH_EnableEvent+0x34>)
 8008186:	400b      	ands	r3, r1
 8008188:	431a      	orrs	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	63da      	str	r2, [r3, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:396
}
 800818e:	bf00      	nop
 8008190:	370c      	adds	r7, #12
 8008192:	46bd      	mov	sp, r7
 8008194:	bc80      	pop	{r7}
 8008196:	4770      	bx	lr
 8008198:	41fc0000 	.word	0x41fc0000

0800819c <XMC_I2C_CH_DisableEvent>:
XMC_I2C_CH_DisableEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:399

void XMC_I2C_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:400
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 80081b0:	43db      	mvns	r3, r3
 80081b2:	401a      	ands	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	641a      	str	r2, [r3, #64]	; 0x40
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:401
  channel->PCR_IICMode &= (uint32_t)~((event) & 0x41fc0000U);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081bc:	6839      	ldr	r1, [r7, #0]
 80081be:	4b05      	ldr	r3, [pc, #20]	; (80081d4 <XMC_I2C_CH_DisableEvent+0x38>)
 80081c0:	400b      	ands	r3, r1
 80081c2:	43db      	mvns	r3, r3
 80081c4:	401a      	ands	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	63da      	str	r2, [r3, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2c.c:402
}
 80081ca:	bf00      	nop
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bc80      	pop	{r7}
 80081d2:	4770      	bx	lr
 80081d4:	41fc0000 	.word	0x41fc0000

080081d8 <XMC_USIC_CH_GetTransmitBufferStatus>:
XMC_USIC_CH_GetTransmitBufferStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:1111
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:1112
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80081ea:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:1113
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bc80      	pop	{r7}
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop

080081f8 <XMC_USIC_CH_SetMode>:
XMC_USIC_CH_SetMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:2005
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	460b      	mov	r3, r1
 8008202:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:2006
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008208:	f023 020f 	bic.w	r2, r3, #15
 800820c:	78fb      	ldrb	r3, [r7, #3]
 800820e:	431a      	orrs	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	641a      	str	r2, [r3, #64]	; 0x40
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:2007
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	bc80      	pop	{r7}
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop

08008220 <XMC_I2S_CH_ClearStatusFlag>:
XMC_I2S_CH_ClearStatusFlag():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_i2s.h:500
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_I2S_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_I2S_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_i2s.h:501
  channel->PSCR |= flag;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	431a      	orrs	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	64da      	str	r2, [r3, #76]	; 0x4c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_i2s.h:502
}
 8008236:	bf00      	nop
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	bc80      	pop	{r7}
 800823e:	4770      	bx	lr

08008240 <XMC_I2S_CH_Init>:
XMC_I2S_CH_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:89
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* Initializes the selected I2S channel with the config structure. */
void XMC_I2S_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2S_CH_CONFIG_t *const config)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:92
  XMC_ASSERT("XMC_I2S_CH_Init: data_delayed_sclk_periods value not valid",(config->data_delayed_sclk_periods  > 0U) &&
		                                                   (config->data_delayed_sclk_periods  < config->frame_length));
  XMC_USIC_CH_Enable(channel);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f004 fc04 	bl	800ca58 <XMC_USIC_CH_Enable>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:94

  if(config->bus_mode == XMC_I2S_CH_BUS_MODE_MASTER)
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	7a1b      	ldrb	r3, [r3, #8]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d105      	bne.n	8008264 <XMC_I2S_CH_Init+0x24>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:97
  {
    /* Configure baud rate */
    (void)XMC_I2S_CH_SetBaudrate(channel, config->baudrate);
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4619      	mov	r1, r3
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f83e 	bl	80082e0 <XMC_I2S_CH_SetBaudrate>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:102
  }
  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  channel->SCTR = (uint32_t)(0x3UL << USIC_CH_SCTR_TRM_Pos) |
                  (uint32_t)((config->frame_length -1U) << USIC_CH_SCTR_FLE_Pos) |
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	795b      	ldrb	r3, [r3, #5]
 8008268:	3b01      	subs	r3, #1
 800826a:	041a      	lsls	r2, r3, #16
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:103
                  (uint32_t)((config->data_bits - 1U) << USIC_CH_SCTR_WLE_Pos) |
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	791b      	ldrb	r3, [r3, #4]
 8008270:	3b01      	subs	r3, #1
 8008272:	061b      	lsls	r3, r3, #24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:102
    (void)XMC_I2S_CH_SetBaudrate(channel, config->baudrate);
  }
  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  channel->SCTR = (uint32_t)(0x3UL << USIC_CH_SCTR_TRM_Pos) |
                  (uint32_t)((config->frame_length -1U) << USIC_CH_SCTR_FLE_Pos) |
 8008274:	4313      	orrs	r3, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:103
                  (uint32_t)((config->data_bits - 1U) << USIC_CH_SCTR_WLE_Pos) |
 8008276:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800827a:	f043 0301 	orr.w	r3, r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:101
    /* Configure baud rate */
    (void)XMC_I2S_CH_SetBaudrate(channel, config->baudrate);
  }
  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  channel->SCTR = (uint32_t)(0x3UL << USIC_CH_SCTR_TRM_Pos) |
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	6353      	str	r3, [r2, #52]	; 0x34
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:110

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  /* WA mode enabled(WAMD) = 1 */
  channel->TCSR = (uint32_t)((channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008286:	f423 63a3 	bic.w	r3, r3, #1304	; 0x518
 800828a:	f023 0307 	bic.w	r3, r3, #7
 800828e:	f443 62a1 	orr.w	r2, r3, #1288	; 0x508
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	639a      	str	r2, [r3, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:118
                                                 USIC_CH_TCSR_HPCMD_Msk))) |
				  USIC_CH_TCSR_WAMD_Msk |
                  (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_I2S_CH_BUS_MODE_MASTER)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	7a1b      	ldrb	r3, [r3, #8]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d102      	bne.n	80082a4 <XMC_I2S_CH_Init+0x64>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:121
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_IISMode = (uint32_t)USIC_CH_PCR_IISMode_WAGEN_Msk;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	63da      	str	r2, [r3, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:125
  }

  /* Configuration of Protocol Control Register */
  channel->PCR_IISMode |= (uint32_t)(USIC_CH_PCR_IISMode_DTEN_Msk |
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:126
                          (uint32_t)config->wa_inversion) |
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	79db      	ldrb	r3, [r3, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:125
    /* Configuration of Protocol Control Register */
    channel->PCR_IISMode = (uint32_t)USIC_CH_PCR_IISMode_WAGEN_Msk;
  }

  /* Configuration of Protocol Control Register */
  channel->PCR_IISMode |= (uint32_t)(USIC_CH_PCR_IISMode_DTEN_Msk |
 80082ac:	f043 0302 	orr.w	r3, r3, #2
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	4619      	mov	r1, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:127
                          (uint32_t)config->wa_inversion) |
                          ((uint32_t)((uint32_t)config->data_delayed_sclk_periods - 1U) << USIC_CH_PCR_IISMode_TDEL_Pos);
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	799b      	ldrb	r3, [r3, #6]
 80082b8:	3b01      	subs	r3, #1
 80082ba:	041b      	lsls	r3, r3, #16
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:126
    channel->PCR_IISMode = (uint32_t)USIC_CH_PCR_IISMode_WAGEN_Msk;
  }

  /* Configuration of Protocol Control Register */
  channel->PCR_IISMode |= (uint32_t)(USIC_CH_PCR_IISMode_DTEN_Msk |
                          (uint32_t)config->wa_inversion) |
 80082bc:	430b      	orrs	r3, r1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:125
    /* Configuration of Protocol Control Register */
    channel->PCR_IISMode = (uint32_t)USIC_CH_PCR_IISMode_WAGEN_Msk;
  }

  /* Configuration of Protocol Control Register */
  channel->PCR_IISMode |= (uint32_t)(USIC_CH_PCR_IISMode_DTEN_Msk |
 80082be:	431a      	orrs	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	63da      	str	r2, [r3, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:129
                          (uint32_t)config->wa_inversion) |
                          ((uint32_t)((uint32_t)config->data_delayed_sclk_periods - 1U) << USIC_CH_PCR_IISMode_TDEL_Pos);

  XMC_I2S_CH_SetSystemWordLength(channel, config->frame_length);
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	795b      	ldrb	r3, [r3, #5]
 80082c8:	4619      	mov	r1, r3
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f82e 	bl	800832c <XMC_I2S_CH_SetSystemWordLength>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:132

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f04f 32ff 	mov.w	r2, #4294967295
 80082d6:	64da      	str	r2, [r3, #76]	; 0x4c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:133
}
 80082d8:	bf00      	nop
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <XMC_I2S_CH_SetBaudrate>:
XMC_I2S_CH_SetBaudrate():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:137


XMC_I2S_CH_STATUS_t XMC_I2S_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:140
  XMC_I2S_CH_STATUS_t status;

  status = XMC_I2S_CH_STATUS_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:142

  if (rate <= (XMC_SCU_CLOCK_GetPeripheralClockFrequency() >> 1U))
 80082ee:	f7f9 fbbf 	bl	8001a70 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80082f2:	4603      	mov	r3, r0
 80082f4:	085a      	lsrs	r2, r3, #1
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d311      	bcc.n	8008320 <XMC_I2S_CH_SetBaudrate+0x40>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:144
  {
    if (XMC_USIC_CH_SetBaudrate(channel, rate, XMC_I2S_CH_OVERSAMPLING) == XMC_USIC_CH_STATUS_OK)
 80082fc:	2204      	movs	r2, #4
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f004 fc09 	bl	800cb18 <XMC_USIC_CH_SetBaudrate>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d109      	bne.n	8008320 <XMC_I2S_CH_SetBaudrate+0x40>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:146
    {
      channel->BRG = (uint32_t)((channel->BRG & ~(USIC_CH_BRG_CTQSEL_Msk)) |
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	695b      	ldr	r3, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:147
                     (0x2UL << USIC_CH_BRG_CTQSEL_Pos)) |
 8008310:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8008314:	f043 0290 	orr.w	r2, r3, #144	; 0x90
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:146

  if (rate <= (XMC_SCU_CLOCK_GetPeripheralClockFrequency() >> 1U))
  {
    if (XMC_USIC_CH_SetBaudrate(channel, rate, XMC_I2S_CH_OVERSAMPLING) == XMC_USIC_CH_STATUS_OK)
    {
      channel->BRG = (uint32_t)((channel->BRG & ~(USIC_CH_BRG_CTQSEL_Msk)) |
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:150
                     (0x2UL << USIC_CH_BRG_CTQSEL_Pos)) |
                     USIC_CH_BRG_PPPEN_Msk;

      status = XMC_I2S_CH_STATUS_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:154
    }

  }
  return status;
 8008320:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:155
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop

0800832c <XMC_I2S_CH_SetSystemWordLength>:
XMC_I2S_CH_SetSystemWordLength():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:158

void XMC_I2S_CH_SetSystemWordLength(XMC_USIC_CH_t *const channel,uint32_t sclk_cycles_system_word_length)
{
 800832c:	b480      	push	{r7}
 800832e:	b087      	sub	sp, #28
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:162
  uint32_t sclk_cycles_system_word_length_temp;
  uint8_t dctq_temp;
  uint8_t pctq_temp;
  uint8_t dctq = 1U;
 8008336:	2301      	movs	r3, #1
 8008338:	757b      	strb	r3, [r7, #21]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:163
  uint8_t pctq = 1U;
 800833a:	2301      	movs	r3, #1
 800833c:	753b      	strb	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:164
  uint8_t best_error = 64U;
 800833e:	2340      	movs	r3, #64	; 0x40
 8008340:	74fb      	strb	r3, [r7, #19]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:169
  uint8_t error;
  XMC_ASSERT("XMC_I2S_CH_Init: data_delayed_sclk_periods value not valid",(sclk_cycles_system_word_length  > 0U) && (sclk_cycles_system_word_length  < 65U));


  for (dctq_temp =1U; dctq_temp < 33U ; dctq_temp++)
 8008342:	2301      	movs	r3, #1
 8008344:	75fb      	strb	r3, [r7, #23]
 8008346:	e034      	b.n	80083b2 <XMC_I2S_CH_SetSystemWordLength+0x86>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:171
  {
    for (pctq_temp =1U; pctq_temp < 5U ; pctq_temp++)
 8008348:	2301      	movs	r3, #1
 800834a:	75bb      	strb	r3, [r7, #22]
 800834c:	e02b      	b.n	80083a6 <XMC_I2S_CH_SetSystemWordLength+0x7a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:173
    {
      sclk_cycles_system_word_length_temp = ((uint32_t)dctq_temp) * ((uint32_t)pctq_temp);
 800834e:	7dfb      	ldrb	r3, [r7, #23]
 8008350:	7dba      	ldrb	r2, [r7, #22]
 8008352:	fb02 f303 	mul.w	r3, r2, r3
 8008356:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:174
      if(sclk_cycles_system_word_length_temp == sclk_cycles_system_word_length)
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	429a      	cmp	r2, r3
 800835e:	d104      	bne.n	800836a <XMC_I2S_CH_SetSystemWordLength+0x3e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:176
      {
        dctq = dctq_temp;
 8008360:	7dfb      	ldrb	r3, [r7, #23]
 8008362:	757b      	strb	r3, [r7, #21]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:177
        pctq = pctq_temp;
 8008364:	7dbb      	ldrb	r3, [r7, #22]
 8008366:	753b      	strb	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:178
        break;
 8008368:	e020      	b.n	80083ac <XMC_I2S_CH_SetSystemWordLength+0x80>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:180
      }
      if (sclk_cycles_system_word_length_temp > sclk_cycles_system_word_length)
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	429a      	cmp	r2, r3
 8008370:	d906      	bls.n	8008380 <XMC_I2S_CH_SetSystemWordLength+0x54>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:182
      {
        error = (uint8_t)(sclk_cycles_system_word_length_temp  - sclk_cycles_system_word_length);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	b2da      	uxtb	r2, r3
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	b2db      	uxtb	r3, r3
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	74bb      	strb	r3, [r7, #18]
 800837e:	e005      	b.n	800838c <XMC_I2S_CH_SetSystemWordLength+0x60>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:186
      }
      else
      {
        error = (uint8_t)(sclk_cycles_system_word_length - sclk_cycles_system_word_length_temp);
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	b2da      	uxtb	r2, r3
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	b2db      	uxtb	r3, r3
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	74bb      	strb	r3, [r7, #18]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:189
      }

      if(error < best_error)
 800838c:	7cba      	ldrb	r2, [r7, #18]
 800838e:	7cfb      	ldrb	r3, [r7, #19]
 8008390:	429a      	cmp	r2, r3
 8008392:	d205      	bcs.n	80083a0 <XMC_I2S_CH_SetSystemWordLength+0x74>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:191
      {
         best_error = error;
 8008394:	7cbb      	ldrb	r3, [r7, #18]
 8008396:	74fb      	strb	r3, [r7, #19]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:192
         dctq =  dctq_temp;
 8008398:	7dfb      	ldrb	r3, [r7, #23]
 800839a:	757b      	strb	r3, [r7, #21]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:193
         pctq = pctq_temp;
 800839c:	7dbb      	ldrb	r3, [r7, #22]
 800839e:	753b      	strb	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:171 (discriminator 2)
  XMC_ASSERT("XMC_I2S_CH_Init: data_delayed_sclk_periods value not valid",(sclk_cycles_system_word_length  > 0U) && (sclk_cycles_system_word_length  < 65U));


  for (dctq_temp =1U; dctq_temp < 33U ; dctq_temp++)
  {
    for (pctq_temp =1U; pctq_temp < 5U ; pctq_temp++)
 80083a0:	7dbb      	ldrb	r3, [r7, #22]
 80083a2:	3301      	adds	r3, #1
 80083a4:	75bb      	strb	r3, [r7, #22]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:171 (discriminator 1)
 80083a6:	7dbb      	ldrb	r3, [r7, #22]
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	d9d0      	bls.n	800834e <XMC_I2S_CH_SetSystemWordLength+0x22>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:169 (discriminator 2)
  uint8_t best_error = 64U;
  uint8_t error;
  XMC_ASSERT("XMC_I2S_CH_Init: data_delayed_sclk_periods value not valid",(sclk_cycles_system_word_length  > 0U) && (sclk_cycles_system_word_length  < 65U));


  for (dctq_temp =1U; dctq_temp < 33U ; dctq_temp++)
 80083ac:	7dfb      	ldrb	r3, [r7, #23]
 80083ae:	3301      	adds	r3, #1
 80083b0:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:169 (discriminator 1)
 80083b2:	7dfb      	ldrb	r3, [r7, #23]
 80083b4:	2b20      	cmp	r3, #32
 80083b6:	d9c7      	bls.n	8008348 <XMC_I2S_CH_SetSystemWordLength+0x1c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:197
         dctq =  dctq_temp;
         pctq = pctq_temp;
      }
    }
  }
  channel->BRG = (uint32_t)((channel->BRG & ~((uint32_t)(USIC_CH_BRG_DCTQ_Msk | 
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	695b      	ldr	r3, [r3, #20]
 80083bc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:199
                                                         USIC_CH_BRG_PCTQ_Msk))) |
                 (uint32_t)((uint32_t)((uint32_t)((uint32_t)dctq- 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80083c0:	7d7b      	ldrb	r3, [r7, #21]
 80083c2:	3b01      	subs	r3, #1
 80083c4:	0299      	lsls	r1, r3, #10
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:200
                            (uint32_t)((uint32_t)((uint32_t)pctq- 1U) << USIC_CH_BRG_PCTQ_Pos)));
 80083c6:	7d3b      	ldrb	r3, [r7, #20]
 80083c8:	3b01      	subs	r3, #1
 80083ca:	021b      	lsls	r3, r3, #8
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:199
      }
    }
  }
  channel->BRG = (uint32_t)((channel->BRG & ~((uint32_t)(USIC_CH_BRG_DCTQ_Msk | 
                                                         USIC_CH_BRG_PCTQ_Msk))) |
                 (uint32_t)((uint32_t)((uint32_t)((uint32_t)dctq- 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80083cc:	430b      	orrs	r3, r1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:197
         dctq =  dctq_temp;
         pctq = pctq_temp;
      }
    }
  }
  channel->BRG = (uint32_t)((channel->BRG & ~((uint32_t)(USIC_CH_BRG_DCTQ_Msk | 
 80083ce:	431a      	orrs	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:201
                                                         USIC_CH_BRG_PCTQ_Msk))) |
                 (uint32_t)((uint32_t)((uint32_t)((uint32_t)dctq- 1U) << USIC_CH_BRG_DCTQ_Pos) |
                            (uint32_t)((uint32_t)((uint32_t)pctq- 1U) << USIC_CH_BRG_PCTQ_Pos)));
}
 80083d4:	bf00      	nop
 80083d6:	371c      	adds	r7, #28
 80083d8:	46bd      	mov	sp, r7
 80083da:	bc80      	pop	{r7}
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop

080083e0 <XMC_I2S_CH_Transmit>:
XMC_I2S_CH_Transmit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:205

/* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the proper mode. */
void XMC_I2S_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_I2S_CH_CHANNEL_t channel_number)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	460b      	mov	r3, r1
 80083ea:	807b      	strh	r3, [r7, #2]
 80083ec:	4613      	mov	r3, r2
 80083ee:	707b      	strb	r3, [r7, #1]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:207
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80083f6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d113      	bne.n	8008426 <XMC_I2S_CH_Transmit+0x46>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:209
  {
    while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 80083fe:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:209 (discriminator 1)
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f7ff fee9 	bl	80081d8 <XMC_USIC_CH_GetTransmitBufferStatus>
 8008406:	4603      	mov	r3, r0
 8008408:	2b80      	cmp	r3, #128	; 0x80
 800840a:	d0f9      	beq.n	8008400 <XMC_I2S_CH_Transmit+0x20>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:213
    {
    }

    XMC_I2S_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2S_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 800840c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f7ff ff05 	bl	8008220 <XMC_I2S_CH_ClearStatusFlag>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:215

    channel->TBUF[(uint32_t)channel_number << 4] = data;
 8008416:	787b      	ldrb	r3, [r7, #1]
 8008418:	011a      	lsls	r2, r3, #4
 800841a:	8879      	ldrh	r1, [r7, #2]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	3220      	adds	r2, #32
 8008420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:221
  }
  else
  {
    channel->IN[(uint32_t)channel_number << 4] = data;
  }
}
 8008424:	e006      	b.n	8008434 <XMC_I2S_CH_Transmit+0x54>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:219

    channel->TBUF[(uint32_t)channel_number << 4] = data;
  }
  else
  {
    channel->IN[(uint32_t)channel_number << 4] = data;
 8008426:	787b      	ldrb	r3, [r7, #1]
 8008428:	011a      	lsls	r2, r3, #4
 800842a:	8879      	ldrh	r1, [r7, #2]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	3260      	adds	r2, #96	; 0x60
 8008430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:221
  }
}
 8008434:	bf00      	nop
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <XMC_I2S_CH_GetReceivedData>:
XMC_I2S_CH_GetReceivedData():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:225

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_I2S_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:229
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800844a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d103      	bne.n	800845a <XMC_I2S_CH_GetReceivedData+0x1e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:231
  {
    retval = (uint16_t)channel->RBUF;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008456:	81fb      	strh	r3, [r7, #14]
 8008458:	e003      	b.n	8008462 <XMC_I2S_CH_GetReceivedData+0x26>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:235
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008460:	81fb      	strh	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:238
  }

  return retval;
 8008462:	89fb      	ldrh	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:239
}
 8008464:	4618      	mov	r0, r3
 8008466:	3714      	adds	r7, #20
 8008468:	46bd      	mov	sp, r7
 800846a:	bc80      	pop	{r7}
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop

08008470 <XMC_I2S_CH_Stop>:
XMC_I2S_CH_Stop():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:242

XMC_I2S_CH_STATUS_t XMC_I2S_CH_Stop(XMC_USIC_CH_t *const channel)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:243
  XMC_I2S_CH_STATUS_t status = XMC_I2S_CH_STATUS_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:245

  if (((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) & (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY) != 0U)
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f7ff feab 	bl	80081d8 <XMC_USIC_CH_GetTransmitBufferStatus>
 8008482:	4603      	mov	r3, r0
 8008484:	b25b      	sxtb	r3, r3
 8008486:	2b00      	cmp	r3, #0
 8008488:	da02      	bge.n	8008490 <XMC_I2S_CH_Stop+0x20>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:247
  {
    status = XMC_I2S_CH_STATUS_BUSY;
 800848a:	2302      	movs	r3, #2
 800848c:	73fb      	strb	r3, [r7, #15]
 800848e:	e003      	b.n	8008498 <XMC_I2S_CH_Stop+0x28>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:252
  }
  else
  {
    /* USIC channel in IDLE mode */
    XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_IDLE);
 8008490:	2100      	movs	r1, #0
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7ff feb0 	bl	80081f8 <XMC_USIC_CH_SetMode>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:255
  }

  return status;
 8008498:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:256
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop

080084a4 <XMC_I2S_CH_EnableEvent>:
XMC_I2S_CH_EnableEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:259

void XMC_I2S_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:260
  channel->CCR |= (event&0x1fc00U);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 80084b8:	431a      	orrs	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	641a      	str	r2, [r3, #64]	; 0x40
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:261
  channel->PCR_IISMode |= ((event >> 2U) & 0x8070U);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	0899      	lsrs	r1, r3, #2
 80084c6:	f248 0370 	movw	r3, #32880	; 0x8070
 80084ca:	400b      	ands	r3, r1
 80084cc:	431a      	orrs	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	63da      	str	r2, [r3, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:262
}
 80084d2:	bf00      	nop
 80084d4:	370c      	adds	r7, #12
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bc80      	pop	{r7}
 80084da:	4770      	bx	lr

080084dc <XMC_I2S_CH_DisableEvent>:
XMC_I2S_CH_DisableEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:265

void XMC_I2S_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:266
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 80084f0:	43db      	mvns	r3, r3
 80084f2:	401a      	ands	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	641a      	str	r2, [r3, #64]	; 0x40
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:267
  channel->PCR_IISMode &= (uint32_t)~((event >> 2U) & 0x8070U);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	0899      	lsrs	r1, r3, #2
 8008500:	f248 0370 	movw	r3, #32880	; 0x8070
 8008504:	400b      	ands	r3, r1
 8008506:	43db      	mvns	r3, r3
 8008508:	401a      	ands	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	63da      	str	r2, [r3, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_i2s.c:268
}
 800850e:	bf00      	nop
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	bc80      	pop	{r7}
 8008516:	4770      	bx	lr

08008518 <XMC_LEDTS_InitGlobal>:
XMC_LEDTS_InitGlobal():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:92

/**
  * Initialization of global register
  */
XMC_LEDTS_STATUS_t XMC_LEDTS_InitGlobal(XMC_LEDTS_t *const ledts, const XMC_LEDTS_GLOBAL_CONFIG_t *config)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:96
  XMC_ASSERT("XMC_LEDTS_InitGlobal:Wrong Module Pointer", XMC_LEDTS_CHECK_KERNEL_PTR(ledts));
  XMC_ASSERT("XMC_LEDTS_InitGlobal:Null Pointer", (config != (XMC_LEDTS_GLOBAL_CONFIG_t *)NULL));

  switch ((uint32_t)ledts)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a0b      	ldr	r2, [pc, #44]	; (8008554 <XMC_LEDTS_InitGlobal+0x3c>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d103      	bne.n	8008532 <XMC_LEDTS_InitGlobal+0x1a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:103
    case (uint32_t)XMC_LEDTS0:
#if defined(CLOCK_GATING_SUPPORTED)
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_LEDTS0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_LEDTS0);
 800852a:	480b      	ldr	r0, [pc, #44]	; (8008558 <XMC_LEDTS_InitGlobal+0x40>)
 800852c:	f7f9 f92e 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:105
#endif
      break;
 8008530:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:131
      break;
#endif
      
  }

  if((ledts->GLOBCTL & LEDTS_GLOBCTL_CLK_PS_Msk) != XMC_LEDTS_CLOCK_NOT_RUNNING)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	0c1b      	lsrs	r3, r3, #16
 8008538:	041b      	lsls	r3, r3, #16
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <XMC_LEDTS_InitGlobal+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:133
  {
    return XMC_LEDTS_STATUS_RUNNING;
 800853e:	2301      	movs	r3, #1
 8008540:	e004      	b.n	800854c <XMC_LEDTS_InitGlobal+0x34>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:136
  }

  ledts->GLOBCTL = config->globctl;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:138

  return XMC_LEDTS_STATUS_SUCCESS;
 800854a:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:139
}
 800854c:	4618      	mov	r0, r3
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	48010000 	.word	0x48010000
 8008558:	10000008 	.word	0x10000008

0800855c <XMC_LEDTS_InitLED>:
XMC_LEDTS_InitLED():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:145

/**
  * Initialization of registers for LED-driving function
  */
XMC_LEDTS_STATUS_t XMC_LEDTS_InitLED(XMC_LEDTS_t *const ledts, const XMC_LEDTS_LED_CONFIG_t *config)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:149
  XMC_ASSERT("XMC_LEDTS_LED_Init:Wrong Module Pointer", XMC_LEDTS_CHECK_KERNEL_PTR(ledts));
  XMC_ASSERT("XMC_LEDTS_LED_Init:Null Pointer", (config != (XMC_LEDTS_LED_CONFIG_t *)NULL));

  if((ledts->GLOBCTL & LEDTS_GLOBCTL_CLK_PS_Msk) != XMC_LEDTS_CLOCK_NOT_RUNNING)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	0c1b      	lsrs	r3, r3, #16
 800856c:	041b      	lsls	r3, r3, #16
 800856e:	2b00      	cmp	r3, #0
 8008570:	d001      	beq.n	8008576 <XMC_LEDTS_InitLED+0x1a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:151
  {
    return XMC_LEDTS_STATUS_RUNNING;
 8008572:	2301      	movs	r3, #1
 8008574:	e013      	b.n	800859e <XMC_LEDTS_InitLED+0x42>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:154
  }

  ledts->FNCTL &= ~(LEDTS_FNCTL_COLLEV_Msk | LEDTS_FNCTL_NR_LEDCOL_Msk);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:155
  ledts->FNCTL |= (config->fnctl);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	689a      	ldr	r2, [r3, #8]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	431a      	orrs	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:158

  /* Enable LED function */
  ledts->GLOBCTL |= LEDTS_GLOBCTL_LD_EN_Msk;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	f043 0202 	orr.w	r2, r3, #2
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:160

  return XMC_LEDTS_STATUS_SUCCESS;
 800859c:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:161
}
 800859e:	4618      	mov	r0, r3
 80085a0:	370c      	adds	r7, #12
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bc80      	pop	{r7}
 80085a6:	4770      	bx	lr

080085a8 <XMC_LEDTS_InitTSBasic>:
XMC_LEDTS_InitTSBasic():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:167

/**
  * Initialization of registers for basic Touch-Sense control function
  */
XMC_LEDTS_STATUS_t XMC_LEDTS_InitTSBasic(XMC_LEDTS_t *const ledts, const XMC_LEDTS_TS_CONFIG_BASIC_t *config)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:173
  uint32_t reg;

  XMC_ASSERT("XMC_LEDTS_TS_Basic_Init:Wrong Module Pointer", XMC_LEDTS_CHECK_KERNEL_PTR(ledts));
  XMC_ASSERT("XMC_LEDTS_TS_Basic_Init:Null Pointer", (config != (XMC_LEDTS_TS_CONFIG_BASIC_t *)NULL));

  if((ledts->GLOBCTL & LEDTS_GLOBCTL_CLK_PS_Msk) != XMC_LEDTS_CLOCK_NOT_RUNNING)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	0c1b      	lsrs	r3, r3, #16
 80085b8:	041b      	lsls	r3, r3, #16
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d001      	beq.n	80085c2 <XMC_LEDTS_InitTSBasic+0x1a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:175
  {
    return XMC_LEDTS_STATUS_RUNNING;
 80085be:	2301      	movs	r3, #1
 80085c0:	e015      	b.n	80085ee <XMC_LEDTS_InitTSBasic+0x46>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:178
  }

  reg = ~(LEDTS_FNCTL_ACCCNT_Msk | LEDTS_FNCTL_TSCCMP_Msk | LEDTS_FNCTL_TSCTRR_Msk | LEDTS_FNCTL_TSCTRSAT_Msk |
 80085c2:	4b0d      	ldr	r3, [pc, #52]	; (80085f8 <XMC_LEDTS_InitTSBasic+0x50>)
 80085c4:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:180
		 LEDTS_FNCTL_NR_TSIN_Msk);
  ledts->FNCTL &= (reg);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	689a      	ldr	r2, [r3, #8]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	401a      	ands	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:181
  ledts->FNCTL |= (config->fnctl);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	689a      	ldr	r2, [r3, #8]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	431a      	orrs	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:184

  /* Enable TS function */
  ledts->GLOBCTL |= LEDTS_GLOBCTL_TS_EN_Msk;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	f043 0201 	orr.w	r2, r3, #1
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:186

  return XMC_LEDTS_STATUS_SUCCESS;
 80085ec:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:187
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3714      	adds	r7, #20
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bc80      	pop	{r7}
 80085f6:	4770      	bx	lr
 80085f8:	f060ffff 	.word	0xf060ffff

080085fc <XMC_LEDTS_InitTSAdvanced>:
XMC_LEDTS_InitTSAdvanced():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:193

/**
  * Initialization of registers for advanced Touch-Sense control function
  */
XMC_LEDTS_STATUS_t XMC_LEDTS_InitTSAdvanced (XMC_LEDTS_t *const ledts, const XMC_LEDTS_TS_CONFIG_ADVANCED_t *config)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:199
  uint32_t reg;

  XMC_ASSERT("XMC_LEDTS_TS_Advanced_Init:Wrong Module Pointer", XMC_LEDTS_CHECK_KERNEL_PTR(ledts));
  XMC_ASSERT("XMC_LEDTS_TS_Advanced_Init:Null Pointer", (config != (XMC_LEDTS_TS_CONFIG_ADVANCED_t *)NULL));

  if((ledts->GLOBCTL & LEDTS_GLOBCTL_CLK_PS_Msk) != XMC_LEDTS_CLOCK_NOT_RUNNING)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	0c1b      	lsrs	r3, r3, #16
 800860c:	041b      	lsls	r3, r3, #16
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <XMC_LEDTS_InitTSAdvanced+0x1a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:201
  {
    return XMC_LEDTS_STATUS_RUNNING;
 8008612:	2301      	movs	r3, #1
 8008614:	e01f      	b.n	8008656 <XMC_LEDTS_InitTSAdvanced+0x5a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:204
  }

  reg = ~(LEDTS_GLOBCTL_MASKVAL_Msk | LEDTS_GLOBCTL_FENVAL_Msk);
 8008616:	f46f 53f0 	mvn.w	r3, #7680	; 0x1e00
 800861a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:205
  ledts->GLOBCTL &= (reg);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685a      	ldr	r2, [r3, #4]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	401a      	ands	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:206
  ledts->GLOBCTL |= (config->globctl);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	431a      	orrs	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:208

  reg = ~(LEDTS_FNCTL_PADT_Msk | LEDTS_FNCTL_PADTSW_Msk | LEDTS_FNCTL_EPULL_Msk | LEDTS_FNCTL_TSOEXT_Msk);
 8008636:	4b0a      	ldr	r3, [pc, #40]	; (8008660 <XMC_LEDTS_InitTSAdvanced+0x64>)
 8008638:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:209
  ledts->FNCTL &= (reg);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	689a      	ldr	r2, [r3, #8]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	401a      	ands	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:210
  ledts->FNCTL |= (config->fnctl);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	689a      	ldr	r2, [r3, #8]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	431a      	orrs	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:212

  return XMC_LEDTS_STATUS_SUCCESS;
 8008654:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:213
}
 8008656:	4618      	mov	r0, r3
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	bc80      	pop	{r7}
 800865e:	4770      	bx	lr
 8008660:	ff9fffe0 	.word	0xff9fffe0

08008664 <XMC_LEDTS_StartCounter>:
XMC_LEDTS_StartCounter():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:219

/**
  * Starts LEDTS-counter
  */
void XMC_LEDTS_StartCounter(XMC_LEDTS_t *const ledts, const uint16_t prescaler)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	460b      	mov	r3, r1
 800866e:	807b      	strh	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:222
  XMC_ASSERT("XMC_LEDTS_Start_Counter:Wrong Module Pointer", XMC_LEDTS_CHECK_KERNEL_PTR(ledts));

  ledts->GLOBCTL |= prescaler<<16U;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	887a      	ldrh	r2, [r7, #2]
 8008676:	0412      	lsls	r2, r2, #16
 8008678:	431a      	orrs	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:223
}
 800867e:	bf00      	nop
 8008680:	370c      	adds	r7, #12
 8008682:	46bd      	mov	sp, r7
 8008684:	bc80      	pop	{r7}
 8008686:	4770      	bx	lr

08008688 <XMC_LEDTS_StopCounter>:
XMC_LEDTS_StopCounter():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:229

/**
  * Stops LEDTS-counter
  */
void XMC_LEDTS_StopCounter(XMC_LEDTS_t *const ledts)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:232
  XMC_ASSERT("XMC_LEDTS_Stop_Counter:Wrong Module Pointer", XMC_LEDTS_CHECK_KERNEL_PTR(ledts));

  ledts->GLOBCTL &= 0x0000FFFF;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	b29a      	uxth	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:233
}
 800869a:	bf00      	nop
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	bc80      	pop	{r7}
 80086a2:	4770      	bx	lr

080086a4 <XMC_LEDTS_ReadInterruptFlag>:
XMC_LEDTS_ReadInterruptFlag():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:239

/**
  * Reads time interrupt flags
  */
uint32_t XMC_LEDTS_ReadInterruptFlag(XMC_LEDTS_t *const ledts)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:242
  XMC_ASSERT("XMC_LEDTS_ReadInterruptFlag:Wrong Module Pointer", XMC_LEDTS_CHECK_KERNEL_PTR(ledts));

  return (ledts->EVFR & 0xF);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	f003 030f 	and.w	r3, r3, #15
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:243
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bc80      	pop	{r7}
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop

080086c0 <XMC_LEDTS_SetActivePADNo>:
XMC_LEDTS_SetActivePADNo():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:249

/**
  * Set the active pad number
  */
void XMC_LEDTS_SetActivePADNo(XMC_LEDTS_t *const ledts, XMC_LEDTS_NUMBER_TS_INPUT_t pad_num)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:254
  uint32_t reg;

  XMC_ASSERT("XMC_LEDTS_SetActivePADNo:Wrong Module Pointer", XMC_LEDTS_CHECK_KERNEL_PTR(ledts));

  reg = ledts->FNCTL;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:255
  reg &= ~(LEDTS_FNCTL_PADT_Msk);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f023 0307 	bic.w	r3, r3, #7
 80086d8:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:256
  reg |= (uint32_t)pad_num;
 80086da:	78fb      	ldrb	r3, [r7, #3]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	4313      	orrs	r3, r2
 80086e0:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:257
  ledts->FNCTL = reg;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:258
}
 80086e8:	bf00      	nop
 80086ea:	3714      	adds	r7, #20
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bc80      	pop	{r7}
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop

080086f4 <XMC_LEDTS_ClearInterruptFlag>:
XMC_LEDTS_ClearInterruptFlag():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:264

/**
  * Clears interrupt indication flags
  */
void XMC_LEDTS_ClearInterruptFlag(XMC_LEDTS_t *const ledts, uint32_t interrupt_mask)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:267
  XMC_ASSERT("XMC_LEDTS_ClearInterruptFlag:Wrong Module Pointer", XMC_LEDTS_CHECK_KERNEL_PTR(ledts));

  ledts->EVFR = (interrupt_mask << LEDTS_EVFR_CTSF_Pos);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	041a      	lsls	r2, r3, #16
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:268
}
 8008706:	bf00      	nop
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	bc80      	pop	{r7}
 800870e:	4770      	bx	lr

08008710 <XMC_LEDTS_SetLEDLinePattern>:
XMC_LEDTS_SetLEDLinePattern():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:274

/**
  * Programming of registers to output pattern on an LED column in LED matrix
  */
void XMC_LEDTS_SetLEDLinePattern(XMC_LEDTS_t *const ledts, XMC_LEDTS_LED_COLUMN_t column, const uint8_t pattern)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	460b      	mov	r3, r1
 800871a:	70fb      	strb	r3, [r7, #3]
 800871c:	4613      	mov	r3, r2
 800871e:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:276
  uint32_t reg;
  uint8_t reg_index = ((uint8_t)column) >> 2;
 8008720:	78fb      	ldrb	r3, [r7, #3]
 8008722:	089b      	lsrs	r3, r3, #2
 8008724:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:277
  uint8_t bit_shift_count = ((uint8_t)column & 0x03) * 8;
 8008726:	78fb      	ldrb	r3, [r7, #3]
 8008728:	f003 0303 	and.w	r3, r3, #3
 800872c:	b2db      	uxtb	r3, r3
 800872e:	00db      	lsls	r3, r3, #3
 8008730:	73bb      	strb	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:281

  XMC_ASSERT("XMC_LEDTS_Set_LED_Line_Pattern:Wrong Module Pointer", XMC_LEDTS_CHECK_KERNEL_PTR(ledts));

  reg = ledts->LINE[reg_index];
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	3304      	adds	r3, #4
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:282
  reg &= (~(0xff << bit_shift_count));
 8008740:	7bbb      	ldrb	r3, [r7, #14]
 8008742:	22ff      	movs	r2, #255	; 0xff
 8008744:	fa02 f303 	lsl.w	r3, r2, r3
 8008748:	43db      	mvns	r3, r3
 800874a:	461a      	mov	r2, r3
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	4013      	ands	r3, r2
 8008750:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:283
  reg |= pattern << bit_shift_count;
 8008752:	78ba      	ldrb	r2, [r7, #2]
 8008754:	7bbb      	ldrb	r3, [r7, #14]
 8008756:	fa02 f303 	lsl.w	r3, r2, r3
 800875a:	461a      	mov	r2, r3
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	4313      	orrs	r3, r2
 8008760:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:284
  ledts->LINE[reg_index] = reg;
 8008762:	7bfb      	ldrb	r3, [r7, #15]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	3304      	adds	r3, #4
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4413      	add	r3, r2
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:286

}
 8008770:	bf00      	nop
 8008772:	3714      	adds	r7, #20
 8008774:	46bd      	mov	sp, r7
 8008776:	bc80      	pop	{r7}
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop

0800877c <XMC_LEDTS_SetColumnBrightness>:
XMC_LEDTS_SetColumnBrightness():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:292

/**
  * Programming of registers to adjust brightness of an LED column in LED matrix
  */
void XMC_LEDTS_SetColumnBrightness(XMC_LEDTS_t *const ledts, XMC_LEDTS_LED_COLUMN_t column, const uint8_t brightness)
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	70fb      	strb	r3, [r7, #3]
 8008788:	4613      	mov	r3, r2
 800878a:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:294
  uint32_t reg;
  uint8_t reg_index = ((uint8_t)column) >> 2;
 800878c:	78fb      	ldrb	r3, [r7, #3]
 800878e:	089b      	lsrs	r3, r3, #2
 8008790:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:295
  uint8_t bit_shift_count = ((uint8_t)column & 0x03) * 8;
 8008792:	78fb      	ldrb	r3, [r7, #3]
 8008794:	f003 0303 	and.w	r3, r3, #3
 8008798:	b2db      	uxtb	r3, r3
 800879a:	00db      	lsls	r3, r3, #3
 800879c:	73bb      	strb	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:299

  XMC_ASSERT("XMC_LEDTS_Set_Column_Brightness:Wrong Module Pointer", XMC_LEDTS_CHECK_KERNEL_PTR(ledts));

	reg = ledts->LDCMP[reg_index];
 800879e:	7bfb      	ldrb	r3, [r7, #15]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	3306      	adds	r3, #6
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:300
	reg &= (~(0xff << bit_shift_count));
 80087ac:	7bbb      	ldrb	r3, [r7, #14]
 80087ae:	22ff      	movs	r2, #255	; 0xff
 80087b0:	fa02 f303 	lsl.w	r3, r2, r3
 80087b4:	43db      	mvns	r3, r3
 80087b6:	461a      	mov	r2, r3
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	4013      	ands	r3, r2
 80087bc:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:301
	reg |= brightness << bit_shift_count;
 80087be:	78ba      	ldrb	r2, [r7, #2]
 80087c0:	7bbb      	ldrb	r3, [r7, #14]
 80087c2:	fa02 f303 	lsl.w	r3, r2, r3
 80087c6:	461a      	mov	r2, r3
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:302
	ledts->LDCMP[reg_index] = reg;
 80087ce:	7bfb      	ldrb	r3, [r7, #15]
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	3306      	adds	r3, #6
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	68ba      	ldr	r2, [r7, #8]
 80087da:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:303
}
 80087dc:	bf00      	nop
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bc80      	pop	{r7}
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop

080087e8 <XMC_LEDTS_SetCommonOscillationWindow>:
XMC_LEDTS_SetCommonOscillationWindow():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:309

/**
  * Programming of registers to set common oscillation window size for touch-sense inputs
  */
void XMC_LEDTS_SetCommonOscillationWindow(XMC_LEDTS_t *const ledts, const uint8_t common_size)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	460b      	mov	r3, r1
 80087f2:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:314
  uint32_t reg;

  XMC_ASSERT("XMC_LEDTS_Set_Common_Oscillation_Window:Wrong Module Pointer", XMC_LEDTS_CHECK_KERNEL_PTR(ledts));

  reg = ledts->LDCMP[1];
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a1b      	ldr	r3, [r3, #32]
 80087f8:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:315
  reg &= ~LEDTS_LDCMP1_CMP_LDA_TSCOM_Msk;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008800:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:316
  reg |= (common_size << LEDTS_LDCMP1_CMP_LDA_TSCOM_Pos);
 8008802:	78fb      	ldrb	r3, [r7, #3]
 8008804:	061b      	lsls	r3, r3, #24
 8008806:	461a      	mov	r2, r3
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4313      	orrs	r3, r2
 800880c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:317
  ledts->LDCMP[1] = reg;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	621a      	str	r2, [r3, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:318
}
 8008814:	bf00      	nop
 8008816:	3714      	adds	r7, #20
 8008818:	46bd      	mov	sp, r7
 800881a:	bc80      	pop	{r7}
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop

08008820 <XMC_LEDTS_ReadFNCOL>:
XMC_LEDTS_ReadFNCOL():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:324

/**
  * Checking the previous active function or LED column status
  */
uint32_t XMC_LEDTS_ReadFNCOL(XMC_LEDTS_t *const ledts)
{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:329
  uint32_t fncol_read;

  XMC_ASSERT("XMC_LEDTS_Read_FNCOL:Wrong Module Pointer", XMC_LEDTS_CHECK_KERNEL_PTR(ledts));

  fncol_read = ledts->FNCTL & LEDTS_FNCTL_FNCOL_Msk;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008830:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:330
  fncol_read >>= LEDTS_FNCTL_FNCOL_Pos;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	095b      	lsrs	r3, r3, #5
 8008836:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:332

  return fncol_read;
 8008838:	68fb      	ldr	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:333
}
 800883a:	4618      	mov	r0, r3
 800883c:	3714      	adds	r7, #20
 800883e:	46bd      	mov	sp, r7
 8008840:	bc80      	pop	{r7}
 8008842:	4770      	bx	lr

08008844 <XMC_LEDTS_SetNumOfLEDColumns>:
XMC_LEDTS_SetNumOfLEDColumns():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:339

/**
  * Set the number of LED column Enabled
  */
void XMC_LEDTS_SetNumOfLEDColumns(XMC_LEDTS_t *const ledts, uint8_t count)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	460b      	mov	r3, r1
 800884e:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:343

  XMC_ASSERT("XMC_LEDTS_SetNumOfLEDColumns:Wrong Module Pointer", XMC_LEDTS_CHECK_KERNEL_PTR(ledts));

  ledts->FNCTL &= ~(LEDTS_FNCTL_NR_LEDCOL_Msk);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:344
  ledts->FNCTL |= (count << LEDTS_FNCTL_NR_LEDCOL_Pos);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	78fa      	ldrb	r2, [r7, #3]
 8008862:	0752      	lsls	r2, r2, #29
 8008864:	431a      	orrs	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:345
}
 800886a:	bf00      	nop
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	bc80      	pop	{r7}
 8008872:	4770      	bx	lr

08008874 <XMC_LEDTS_ReadTSVAL>:
XMC_LEDTS_ReadTSVAL():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:351

/**
  * Reading recorded number of oscillation counts
  */
uint16_t XMC_LEDTS_ReadTSVAL(XMC_LEDTS_t *const ledts)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:356
  uint16_t no_of_oscillations;

  XMC_ASSERT("XMC_LEDTS_Read_TSVAL:Wrong Module Pointer", XMC_LEDTS_CHECK_KERNEL_PTR(ledts));

  no_of_oscillations = (ledts->TSVAL & 0xFFFF);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	81fb      	strh	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:358

  return no_of_oscillations;
 8008882:	89fb      	ldrh	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:359
}
 8008884:	4618      	mov	r0, r3
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	bc80      	pop	{r7}
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop

08008890 <XMC_LEDTS_SetOscillationWindow>:
XMC_LEDTS_SetOscillationWindow():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:365

/**
  * Programming of registers to adjust the size of oscillation window
  */
void XMC_LEDTS_SetOscillationWindow(XMC_LEDTS_t *const ledts, XMC_LEDTS_NUMBER_TS_INPUT_t touchpad, const uint8_t size)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	70fb      	strb	r3, [r7, #3]
 800889c:	4613      	mov	r3, r2
 800889e:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:367
  uint32_t reg;
  uint8_t reg_index = ((uint8_t)touchpad) >> 2;
 80088a0:	78fb      	ldrb	r3, [r7, #3]
 80088a2:	089b      	lsrs	r3, r3, #2
 80088a4:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:368
  uint8_t bit_shift_count = ((uint8_t)touchpad & 0x03) * 8;
 80088a6:	78fb      	ldrb	r3, [r7, #3]
 80088a8:	f003 0303 	and.w	r3, r3, #3
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	00db      	lsls	r3, r3, #3
 80088b0:	73bb      	strb	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:372

  XMC_ASSERT("XMC_LEDTS_Set_Oscillation_Window:Wrong Module Pointer", XMC_LEDTS_CHECK_KERNEL_PTR(ledts));

	reg = ledts->TSCMP[reg_index];
 80088b2:	7bfb      	ldrb	r3, [r7, #15]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	3308      	adds	r3, #8
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	4413      	add	r3, r2
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:373
	reg &= (~(0xff << bit_shift_count));
 80088c0:	7bbb      	ldrb	r3, [r7, #14]
 80088c2:	22ff      	movs	r2, #255	; 0xff
 80088c4:	fa02 f303 	lsl.w	r3, r2, r3
 80088c8:	43db      	mvns	r3, r3
 80088ca:	461a      	mov	r2, r3
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	4013      	ands	r3, r2
 80088d0:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:374
	reg |= size << bit_shift_count;
 80088d2:	78ba      	ldrb	r2, [r7, #2]
 80088d4:	7bbb      	ldrb	r3, [r7, #14]
 80088d6:	fa02 f303 	lsl.w	r3, r2, r3
 80088da:	461a      	mov	r2, r3
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	4313      	orrs	r3, r2
 80088e0:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:375
	ledts->TSCMP[reg_index] = reg;
 80088e2:	7bfb      	ldrb	r3, [r7, #15]
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	3308      	adds	r3, #8
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4413      	add	r3, r2
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_ledts.c:376
}
 80088f0:	bf00      	nop
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bc80      	pop	{r7}
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop

080088fc <XMC_POSIF_Stop>:
XMC_POSIF_Stop():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_posif.h:581
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_POSIF_Start(),XMC_POSIF_IsRunning() \n\n\n
 */
__STATIC_INLINE void XMC_POSIF_Stop(XMC_POSIF_t *const peripheral)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_posif.h:582
  peripheral->PRUNC = (uint32_t)(POSIF_PRUNC_CRB_Msk | POSIF_PRUNC_CSM_Msk);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2203      	movs	r2, #3
 8008908:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_posif.h:583
}
 800890a:	bf00      	nop
 800890c:	370c      	adds	r7, #12
 800890e:	46bd      	mov	sp, r7
 8008910:	bc80      	pop	{r7}
 8008912:	4770      	bx	lr

08008914 <XMC_POSIF_Enable>:
XMC_POSIF_Enable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:98
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to enable the POSIF module */
void XMC_POSIF_Enable(XMC_POSIF_t *const peripheral)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:100
#if UC_FAMILY == XMC4
   XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 800891c:	2010      	movs	r0, #16
 800891e:	f7f9 fa07 	bl	8001d30 <XMC_SCU_CLOCK_EnableClock>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:103
#endif

  switch ((uint32_t)peripheral)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a0a      	ldr	r2, [pc, #40]	; (8008950 <XMC_POSIF_Enable+0x3c>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d003      	beq.n	8008932 <XMC_POSIF_Enable+0x1e>
 800892a:	4a0a      	ldr	r2, [pc, #40]	; (8008954 <XMC_POSIF_Enable+0x40>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d005      	beq.n	800893c <XMC_POSIF_Enable+0x28>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:127
      break;
#endif

    default:
      XMC_ASSERT("XMC_POSIF_Disable:Invalid module pointer", 0);
      break;      
 8008930:	e009      	b.n	8008946 <XMC_POSIF_Enable+0x32>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:110
    case (uint32_t)POSIF0:
#if defined(CLOCK_GATING_SUPPORTED)
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_POSIF0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_POSIF0);
 8008932:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008936:	f7f8 ff29 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:112
#endif
      break;
 800893a:	e004      	b.n	8008946 <XMC_POSIF_Enable+0x32>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:120
    case (uint32_t)POSIF1:
#if defined(CLOCK_GATING_SUPPORTED)
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_POSIF1);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_POSIF1);
 800893c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008940:	f7f8 ff24 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:122
#endif
      break;
 8008944:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:129

    default:
      XMC_ASSERT("XMC_POSIF_Disable:Invalid module pointer", 0);
      break;      
  }
}
 8008946:	bf00      	nop
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	40028000 	.word	0x40028000
 8008954:	4002c000 	.word	0x4002c000

08008958 <XMC_POSIF_Disable>:
XMC_POSIF_Disable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:133

/* API to disable the POSIF module */
void XMC_POSIF_Disable(XMC_POSIF_t *const peripheral)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:134
  switch ((uint32_t)peripheral)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a0a      	ldr	r2, [pc, #40]	; (800898c <XMC_POSIF_Disable+0x34>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d003      	beq.n	8008970 <XMC_POSIF_Disable+0x18>
 8008968:	4a09      	ldr	r2, [pc, #36]	; (8008990 <XMC_POSIF_Disable+0x38>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d005      	beq.n	800897a <XMC_POSIF_Disable+0x22>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:158
      break;
#endif
    
    default:
      XMC_ASSERT("XMC_POSIF_Disable:Invalid module pointer", 0);
      break;      
 800896e:	e009      	b.n	8008984 <XMC_POSIF_Disable+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:138
{
  switch ((uint32_t)peripheral)
  {
    case (uint32_t)POSIF0:
#if defined(PERIPHERAL_RESET_SUPPORTED)
      XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_POSIF0);
 8008970:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008974:	f7f8 feee 	bl	8001754 <XMC_SCU_RESET_AssertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:143
#endif
#if defined(CLOCK_GATING_SUPPORTED)
      XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_POSIF0);
#endif
      break;
 8008978:	e004      	b.n	8008984 <XMC_POSIF_Disable+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:148
      
#if defined(POSIF1)
    case (uint32_t)POSIF1:
#if defined(PERIPHERAL_RESET_SUPPORTED)
      XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_POSIF1);
 800897a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800897e:	f7f8 fee9 	bl	8001754 <XMC_SCU_RESET_AssertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:153
#endif
#if defined(CLOCK_GATING_SUPPORTED)
      XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_POSIF1);
#endif
      break;
 8008982:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:160
    
    default:
      XMC_ASSERT("XMC_POSIF_Disable:Invalid module pointer", 0);
      break;      
  }
}
 8008984:	bf00      	nop
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	40028000 	.word	0x40028000
 8008990:	4002c000 	.word	0x4002c000

08008994 <XMC_POSIF_Init>:
XMC_POSIF_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:164

/* API to initialize POSIF global resources */
void XMC_POSIF_Init(XMC_POSIF_t *const peripheral, const XMC_POSIF_CONFIG_t *const config)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:169
  XMC_ASSERT("XMC_POSIF_Init:Invalid module pointer", XMC_POSIF_IsPeripheralValid(peripheral));
  XMC_ASSERT("XMC_POSIF_Init:NULL Pointer", (config != (XMC_POSIF_CONFIG_t *)NULL) );

  /* Enable the POSIF module */
  XMC_POSIF_Enable(peripheral);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7ff ffb8 	bl	8008914 <XMC_POSIF_Enable>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:172

  /* Stop POSIF */
  XMC_POSIF_Stop(peripheral);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7ff ffa9 	bl	80088fc <XMC_POSIF_Stop>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:175

  /* Program the operational mode, input selectors and debounce filter */
  peripheral->PCONF = config->pconf;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:176
}
 80089b2:	bf00      	nop
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop

080089bc <XMC_POSIF_HSC_Init>:
XMC_POSIF_HSC_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:180

/* API to initialize hall sensor interface */
XMC_POSIF_STATUS_t XMC_POSIF_HSC_Init(XMC_POSIF_t *const peripheral, const XMC_POSIF_HSC_CONFIG_t * const config)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:186
  XMC_POSIF_STATUS_t retval;
  
  XMC_ASSERT("XMC_POSIF_HSC_Init:Invalid module pointer\n", XMC_POSIF_IsPeripheralValid(peripheral));
  XMC_ASSERT("XMC_POSIF_HSC_Init:NULL Pointer\n", (config != (XMC_POSIF_HSC_CONFIG_t *)NULL) );

  if (XMC_POSIF_MODE_HALL_SENSOR == (XMC_POSIF_MODE_t)((peripheral->PCONF) & (uint32_t)POSIF_PCONF_FSEL_Msk) )
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 0303 	and.w	r3, r3, #3
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d109      	bne.n	80089e6 <XMC_POSIF_HSC_Init+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:188
  {
    peripheral->PCONF |= config->hall_config;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	431a      	orrs	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:189
    retval = XMC_POSIF_STATUS_OK;
 80089e0:	2300      	movs	r3, #0
 80089e2:	73fb      	strb	r3, [r7, #15]
 80089e4:	e001      	b.n	80089ea <XMC_POSIF_HSC_Init+0x2e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:193
  }
  else
  {
    retval = XMC_POSIF_STATUS_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:195
  }
  return retval;
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:196
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3714      	adds	r7, #20
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bc80      	pop	{r7}
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop

080089f8 <XMC_POSIF_QD_Init>:
XMC_POSIF_QD_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:200

/* API to initialize quadrature decoder interface */
XMC_POSIF_STATUS_t XMC_POSIF_QD_Init(XMC_POSIF_t *const peripheral, const XMC_POSIF_QD_CONFIG_t * const config)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:207
  XMC_POSIF_STATUS_t retval;
  
  XMC_ASSERT("XMC_POSIF_QD_Init:Invalid module pointer", XMC_POSIF_IsPeripheralValid(peripheral));
  XMC_ASSERT("XMC_POSIF_QD_Init:NULL Pointer", (config != (XMC_POSIF_QD_CONFIG_t *)NULL) );

  reg = (uint8_t)((peripheral->PCONF) & (uint32_t)POSIF_PCONF_FSEL_Msk);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	f003 0303 	and.w	r3, r3, #3
 8008a0c:	73bb      	strb	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:208
  if (((uint32_t)XMC_POSIF_MODE_QD == reg) || ((uint32_t)XMC_POSIF_MODE_MCM_QD == reg))
 8008a0e:	7bbb      	ldrb	r3, [r7, #14]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d002      	beq.n	8008a1a <XMC_POSIF_QD_Init+0x22>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:208 (discriminator 1)
 8008a14:	7bbb      	ldrb	r3, [r7, #14]
 8008a16:	2b03      	cmp	r3, #3
 8008a18:	d10e      	bne.n	8008a38 <XMC_POSIF_QD_Init+0x40>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:211
  {
    /* Program the quadrature mode */
    peripheral->PCONF |= (uint32_t)(config->mode) << POSIF_PCONF_QDCM_Pos;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	431a      	orrs	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:212
    peripheral->QDC = config->qdc;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	685a      	ldr	r2, [r3, #4]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	661a      	str	r2, [r3, #96]	; 0x60
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:213
    retval = XMC_POSIF_STATUS_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	73fb      	strb	r3, [r7, #15]
 8008a36:	e001      	b.n	8008a3c <XMC_POSIF_QD_Init+0x44>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:217
  }
  else
  {
    retval = XMC_POSIF_STATUS_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:220
  }
  
  return retval;
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:221
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3714      	adds	r7, #20
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bc80      	pop	{r7}
 8008a46:	4770      	bx	lr

08008a48 <XMC_POSIF_MCM_Init>:
XMC_POSIF_MCM_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:227

/* API to initialize multi-channel mode.
 * This is used in Hall mode, standalone multi-channel mode and quadrature with multi-channel mode
 */
XMC_POSIF_STATUS_t XMC_POSIF_MCM_Init(XMC_POSIF_t *const peripheral, const XMC_POSIF_MCM_CONFIG_t * const config)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:233
  XMC_POSIF_STATUS_t retval;

  XMC_ASSERT("XMC_POSIF_MCM_Init:Invalid module pointer", XMC_POSIF_IsPeripheralValid(peripheral));
  XMC_ASSERT("XMC_POSIF_MCM_Init:NULL Pointer", (config != (XMC_POSIF_MCM_CONFIG_t *)NULL) );

  if ((XMC_POSIF_MODE_t)((peripheral->PCONF) & (uint32_t)POSIF_PCONF_FSEL_Msk) != XMC_POSIF_MODE_QD)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 0303 	and.w	r3, r3, #3
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d009      	beq.n	8008a72 <XMC_POSIF_MCM_Init+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:235
  {
    peripheral->PCONF |= config->mcm_config;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	431a      	orrs	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:236
    retval = XMC_POSIF_STATUS_OK;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	73fb      	strb	r3, [r7, #15]
 8008a70:	e001      	b.n	8008a76 <XMC_POSIF_MCM_Init+0x2e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:240
  }
  else
  {
    retval = XMC_POSIF_STATUS_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:242
  }
  return retval;
 8008a76:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:243
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3714      	adds	r7, #20
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bc80      	pop	{r7}
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop

08008a84 <XMC_POSIF_SelectInputSource>:
XMC_POSIF_SelectInputSource():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:248

/* API to configure input source */
void XMC_POSIF_SelectInputSource (XMC_POSIF_t *const peripheral, const XMC_POSIF_INPUT_PORT_t input0,
    const XMC_POSIF_INPUT_PORT_t input1, const XMC_POSIF_INPUT_PORT_t input2)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b085      	sub	sp, #20
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	4608      	mov	r0, r1
 8008a8e:	4611      	mov	r1, r2
 8008a90:	461a      	mov	r2, r3
 8008a92:	4603      	mov	r3, r0
 8008a94:	70fb      	strb	r3, [r7, #3]
 8008a96:	460b      	mov	r3, r1
 8008a98:	70bb      	strb	r3, [r7, #2]
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	707b      	strb	r3, [r7, #1]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:255
  XMC_ASSERT("XMC_POSIF_SelectInputSource:Invalid module pointer", XMC_POSIF_IsPeripheralValid(peripheral));
  XMC_ASSERT("XMC_POSIF_SelectInputSource:Wrong input port input0", (input0 < XMC_POSIF_INSEL_MAX));
  XMC_ASSERT("XMC_POSIF_SelectInputSource:Wrong input port input1", (input1 < XMC_POSIF_INSEL_MAX));
  XMC_ASSERT("XMC_POSIF_SelectInputSource:Wrong input port input2", (input2 < XMC_POSIF_INSEL_MAX));

  reg = (uint32_t)((((uint32_t)input0 << POSIF_PCONF_INSEL0_Pos) & (uint32_t)POSIF_PCONF_INSEL0_Msk) |
 8008a9e:	78fb      	ldrb	r3, [r7, #3]
 8008aa0:	021b      	lsls	r3, r3, #8
 8008aa2:	f403 7240 	and.w	r2, r3, #768	; 0x300
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:256
        (((uint32_t)input1 << POSIF_PCONF_INSEL1_Pos) & (uint32_t)POSIF_PCONF_INSEL1_Msk) |
 8008aa6:	78bb      	ldrb	r3, [r7, #2]
 8008aa8:	029b      	lsls	r3, r3, #10
 8008aaa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:255
  XMC_ASSERT("XMC_POSIF_SelectInputSource:Invalid module pointer", XMC_POSIF_IsPeripheralValid(peripheral));
  XMC_ASSERT("XMC_POSIF_SelectInputSource:Wrong input port input0", (input0 < XMC_POSIF_INSEL_MAX));
  XMC_ASSERT("XMC_POSIF_SelectInputSource:Wrong input port input1", (input1 < XMC_POSIF_INSEL_MAX));
  XMC_ASSERT("XMC_POSIF_SelectInputSource:Wrong input port input2", (input2 < XMC_POSIF_INSEL_MAX));

  reg = (uint32_t)((((uint32_t)input0 << POSIF_PCONF_INSEL0_Pos) & (uint32_t)POSIF_PCONF_INSEL0_Msk) |
 8008aae:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:257
        (((uint32_t)input1 << POSIF_PCONF_INSEL1_Pos) & (uint32_t)POSIF_PCONF_INSEL1_Msk) |
        (((uint32_t)input2 << POSIF_PCONF_INSEL2_Pos) & (uint32_t)POSIF_PCONF_INSEL2_Msk));
 8008ab0:	787b      	ldrb	r3, [r7, #1]
 8008ab2:	031b      	lsls	r3, r3, #12
 8008ab4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:255
  XMC_ASSERT("XMC_POSIF_SelectInputSource:Invalid module pointer", XMC_POSIF_IsPeripheralValid(peripheral));
  XMC_ASSERT("XMC_POSIF_SelectInputSource:Wrong input port input0", (input0 < XMC_POSIF_INSEL_MAX));
  XMC_ASSERT("XMC_POSIF_SelectInputSource:Wrong input port input1", (input1 < XMC_POSIF_INSEL_MAX));
  XMC_ASSERT("XMC_POSIF_SelectInputSource:Wrong input port input2", (input2 < XMC_POSIF_INSEL_MAX));

  reg = (uint32_t)((((uint32_t)input0 << POSIF_PCONF_INSEL0_Pos) & (uint32_t)POSIF_PCONF_INSEL0_Msk) |
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:258
        (((uint32_t)input1 << POSIF_PCONF_INSEL1_Pos) & (uint32_t)POSIF_PCONF_INSEL1_Msk) |
        (((uint32_t)input2 << POSIF_PCONF_INSEL2_Pos) & (uint32_t)POSIF_PCONF_INSEL2_Msk));
  peripheral->PCONF = ((peripheral->PCONF & ~(uint32_t)XMC_POSIF_PCONF_INSEL_Msk) | reg);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:259
}
 8008acc:	bf00      	nop
 8008ace:	3714      	adds	r7, #20
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bc80      	pop	{r7}
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop

08008ad8 <XMC_POSIF_SetInterruptNode>:
XMC_POSIF_SetInterruptNode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:263

/* API to select an interrupt node */
void XMC_POSIF_SetInterruptNode(XMC_POSIF_t *const peripheral, const XMC_POSIF_IRQ_EVENT_t event, const XMC_POSIF_SR_ID_t sr)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	70fb      	strb	r3, [r7, #3]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:270
  
  XMC_ASSERT("XMC_POSIF_SetInterruptNode:Invalid module pointer", XMC_POSIF_IsPeripheralValid(peripheral));
  XMC_ASSERT("XMC_POSIF_SetInterruptNode:Wrong IRQ event", (event <= XMC_POSIF_IRQ_EVENT_PCLK) );
  XMC_ASSERT("XMC_POSIF_SetInterruptNode:Wrong SR ID", (sr <= XMC_POSIF_SR_ID_1) );
  
  reg = peripheral->PFLGE;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aec:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:271
  reg &= ~((uint32_t)1 << ((uint32_t)event + (uint32_t)POSIF_PFLGE_CHESEL_Pos));
 8008aee:	78fb      	ldrb	r3, [r7, #3]
 8008af0:	3310      	adds	r3, #16
 8008af2:	2201      	movs	r2, #1
 8008af4:	fa02 f303 	lsl.w	r3, r2, r3
 8008af8:	43db      	mvns	r3, r3
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	4013      	ands	r3, r2
 8008afe:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:272
  reg |= (uint32_t)sr << ((uint32_t)event + (uint32_t)POSIF_PFLGE_CHESEL_Pos);
 8008b00:	78ba      	ldrb	r2, [r7, #2]
 8008b02:	78fb      	ldrb	r3, [r7, #3]
 8008b04:	3310      	adds	r3, #16
 8008b06:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:273
  peripheral->PFLGE = reg;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	675a      	str	r2, [r3, #116]	; 0x74
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_posif.c:274
}
 8008b16:	bf00      	nop
 8008b18:	3714      	adds	r7, #20
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bc80      	pop	{r7}
 8008b1e:	4770      	bx	lr

08008b20 <XMC_SCU_GetMirrorStatus>:
XMC_SCU_GetMirrorStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_scu.h:544
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8008b20:	b480      	push	{r7}
 8008b22:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_scu.h:545
  return(SCU_GENERAL->MIRRSTS);
 8008b24:	4b03      	ldr	r3, [pc, #12]	; (8008b34 <XMC_SCU_GetMirrorStatus+0x14>)
 8008b26:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_scu.h:546
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bc80      	pop	{r7}
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	50004000 	.word	0x50004000

08008b38 <XMC_RTC_Start>:
XMC_RTC_Start():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:94

/*
 * Enables RTC peripheral to start counting time
 */
void XMC_RTC_Start(void)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:95
  while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 8008b3c:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:95 (discriminator 1)
 8008b3e:	f7ff ffef 	bl	8008b20 <XMC_SCU_GetMirrorStatus>
 8008b42:	4603      	mov	r3, r0
 8008b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1f8      	bne.n	8008b3e <XMC_RTC_Start+0x6>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:99
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR |= (uint32_t)RTC_CTR_ENB_Msk;
 8008b4c:	4a03      	ldr	r2, [pc, #12]	; (8008b5c <XMC_RTC_Start+0x24>)
 8008b4e:	4b03      	ldr	r3, [pc, #12]	; (8008b5c <XMC_RTC_Start+0x24>)
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	f043 0301 	orr.w	r3, r3, #1
 8008b56:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:100
}
 8008b58:	bf00      	nop
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	50004a00 	.word	0x50004a00

08008b60 <XMC_RTC_Stop>:
XMC_RTC_Stop():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:106

/*
 * Disables RTC peripheral to start counting time
 */
void XMC_RTC_Stop(void)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:107
  while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 8008b64:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:107 (discriminator 1)
 8008b66:	f7ff ffdb 	bl	8008b20 <XMC_SCU_GetMirrorStatus>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1f8      	bne.n	8008b66 <XMC_RTC_Stop+0x6>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:111
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR &= ~(uint32_t)RTC_CTR_ENB_Msk;
 8008b74:	4a03      	ldr	r2, [pc, #12]	; (8008b84 <XMC_RTC_Stop+0x24>)
 8008b76:	4b03      	ldr	r3, [pc, #12]	; (8008b84 <XMC_RTC_Stop+0x24>)
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	f023 0301 	bic.w	r3, r3, #1
 8008b7e:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:112
}
 8008b80:	bf00      	nop
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	50004a00 	.word	0x50004a00

08008b88 <XMC_RTC_SetPrescaler>:
XMC_RTC_SetPrescaler():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:118

/*
 * Sets the RTC module prescaler value
 */
void XMC_RTC_SetPrescaler(uint16_t prescaler)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	4603      	mov	r3, r0
 8008b90:	80fb      	strh	r3, [r7, #6]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:121
  XMC_ASSERT("XMC_RTC_SetPrescaler:Wrong prescaler value", (prescaler < XMC_RTC_MAXPRESCALER));
  
  while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 8008b92:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:121 (discriminator 1)
 8008b94:	f7ff ffc4 	bl	8008b20 <XMC_SCU_GetMirrorStatus>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1f8      	bne.n	8008b94 <XMC_RTC_SetPrescaler+0xc>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:125
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR = (RTC->CTR & ~(uint32_t)RTC_CTR_DIV_Msk) |
 8008ba2:	4906      	ldr	r1, [pc, #24]	; (8008bbc <XMC_RTC_SetPrescaler+0x34>)
 8008ba4:	4b05      	ldr	r3, [pc, #20]	; (8008bbc <XMC_RTC_SetPrescaler+0x34>)
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	b29a      	uxth	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:126
             ((uint32_t)prescaler << (uint32_t)RTC_CTR_DIV_Pos);
 8008baa:	88fb      	ldrh	r3, [r7, #6]
 8008bac:	041b      	lsls	r3, r3, #16
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:125
  
  while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR = (RTC->CTR & ~(uint32_t)RTC_CTR_DIV_Msk) |
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	604b      	str	r3, [r1, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:127
             ((uint32_t)prescaler << (uint32_t)RTC_CTR_DIV_Pos);
}
 8008bb2:	bf00      	nop
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	50004a00 	.word	0x50004a00

08008bc0 <XMC_RTC_SetTime>:
XMC_RTC_SetTime():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:133

/*
 * Sets the RTC_TIM0, RTC_TIM1 registers with time values
 */
void XMC_RTC_SetTime(const XMC_RTC_TIME_t *const time)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:143
  XMC_ASSERT("XMC_RTC_SetTime:Wrong week day value", ((uint32_t)time->daysofweek < XMC_RTC_MAXDAYSOFWEEK));
  XMC_ASSERT("XMC_RTC_SetTime:Wrong month value", ((uint32_t)time->month < XMC_RTC_MAXMONTH));
  XMC_ASSERT("XMC_RTC_SetTime:Wrong year value", ((uint32_t)time->year < XMC_RTC_MAXYEAR));

  #if (XMC_RTC_INIT_SEQUENCE == 1U)
      while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM0_Msk) != 0U)
 8008bc8:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:143 (discriminator 1)
 8008bca:	f7ff ffa9 	bl	8008b20 <XMC_SCU_GetMirrorStatus>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1f8      	bne.n	8008bca <XMC_RTC_SetTime+0xa>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:147
      { 
         /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
      }
      RTC->TIM0 = time->raw0;
 8008bd8:	4a09      	ldr	r2, [pc, #36]	; (8008c00 <XMC_RTC_SetTime+0x40>)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	6213      	str	r3, [r2, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:149
      
      while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM1_Msk) != 0U)
 8008be0:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:149 (discriminator 1)
 8008be2:	f7ff ff9d 	bl	8008b20 <XMC_SCU_GetMirrorStatus>
 8008be6:	4603      	mov	r3, r0
 8008be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d1f8      	bne.n	8008be2 <XMC_RTC_SetTime+0x22>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:153
      {
        /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
      }
      RTC->TIM1 = time->raw1;	     
 8008bf0:	4a03      	ldr	r2, [pc, #12]	; (8008c00 <XMC_RTC_SetTime+0x40>)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	6253      	str	r3, [r2, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:163
        /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
      }
      RTC->TIM0 = time->raw0;
      RTC->TIM1 = time->raw1;	; 
  #endif  
}
 8008bf8:	bf00      	nop
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	50004a00 	.word	0x50004a00

08008c04 <XMC_RTC_GetTime>:
XMC_RTC_GetTime():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:169

/*
 * Gets the RTC module time value
 */
void XMC_RTC_GetTime(XMC_RTC_TIME_t *const time)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:170
  time->raw0 = RTC->TIM0;
 8008c0c:	4b06      	ldr	r3, [pc, #24]	; (8008c28 <XMC_RTC_GetTime+0x24>)
 8008c0e:	6a1a      	ldr	r2, [r3, #32]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:171
  time->raw1 = RTC->TIM1;
 8008c14:	4b04      	ldr	r3, [pc, #16]	; (8008c28 <XMC_RTC_GetTime+0x24>)
 8008c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:172
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bc80      	pop	{r7}
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	50004a00 	.word	0x50004a00

08008c2c <XMC_RTC_SetTimeStdFormat>:
XMC_RTC_SetTimeStdFormat():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:178

/*
 * Sets the RTC module time values in standard format
 */
void XMC_RTC_SetTimeStdFormat(const struct tm *const stdtime)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:182

  XMC_RTC_TIME_t time;

  time.seconds = stdtime->tm_sec;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	7a3b      	ldrb	r3, [r7, #8]
 8008c42:	f362 0305 	bfi	r3, r2, #0, #6
 8008c46:	723b      	strb	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:183
  time.minutes = stdtime->tm_min;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c52:	b2da      	uxtb	r2, r3
 8008c54:	7a7b      	ldrb	r3, [r7, #9]
 8008c56:	f362 0305 	bfi	r3, r2, #0, #6
 8008c5a:	727b      	strb	r3, [r7, #9]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:184
  time.hours = stdtime->tm_hour;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	f003 031f 	and.w	r3, r3, #31
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	7abb      	ldrb	r3, [r7, #10]
 8008c6a:	f362 0304 	bfi	r3, r2, #0, #5
 8008c6e:	72bb      	strb	r3, [r7, #10]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:185
  time.days = stdtime->tm_mday - 1;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	3b01      	subs	r3, #1
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	f003 031f 	and.w	r3, r3, #31
 8008c7e:	b2da      	uxtb	r2, r3
 8008c80:	7afb      	ldrb	r3, [r7, #11]
 8008c82:	f362 0304 	bfi	r3, r2, #0, #5
 8008c86:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:186
  time.month = stdtime->tm_mon;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	f003 030f 	and.w	r3, r3, #15
 8008c92:	b2da      	uxtb	r2, r3
 8008c94:	7b7b      	ldrb	r3, [r7, #13]
 8008c96:	f362 0303 	bfi	r3, r2, #0, #4
 8008c9a:	737b      	strb	r3, [r7, #13]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:187
  time.year = stdtime->tm_year + XMC_RTC_YEAR_OFFSET;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	695b      	ldr	r3, [r3, #20]
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	81fb      	strh	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:188
  time.daysofweek = stdtime->tm_wday;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	f003 0307 	and.w	r3, r3, #7
 8008cb4:	b2da      	uxtb	r2, r3
 8008cb6:	7b3b      	ldrb	r3, [r7, #12]
 8008cb8:	f362 0302 	bfi	r3, r2, #0, #3
 8008cbc:	733b      	strb	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:190

  XMC_RTC_SetTime(&time);
 8008cbe:	f107 0308 	add.w	r3, r7, #8
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7ff ff7c 	bl	8008bc0 <XMC_RTC_SetTime>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:191
}
 8008cc8:	bf00      	nop
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <XMC_RTC_GetTimeStdFormat>:
XMC_RTC_GetTimeStdFormat():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:197

/*
 * Gets the RTC module time values in standard format
 */
void XMC_RTC_GetTimeStdFormat(struct tm *const stdtime)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:199
  XMC_RTC_TIME_t time;
  time.raw0 = RTC->TIM0;
 8008cd8:	4b1c      	ldr	r3, [pc, #112]	; (8008d4c <XMC_RTC_GetTimeStdFormat+0x7c>)
 8008cda:	6a1b      	ldr	r3, [r3, #32]
 8008cdc:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:200
  time.raw1 = RTC->TIM1;
 8008cde:	4b1b      	ldr	r3, [pc, #108]	; (8008d4c <XMC_RTC_GetTimeStdFormat+0x7c>)
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:202
  
  stdtime->tm_sec = (int8_t)time.seconds;
 8008ce4:	7a3b      	ldrb	r3, [r7, #8]
 8008ce6:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	461a      	mov	r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:203
  stdtime->tm_min = (int8_t)time.minutes;
 8008cf2:	7a7b      	ldrb	r3, [r7, #9]
 8008cf4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:204
  stdtime->tm_hour = (int8_t)time.hours;
 8008d00:	7abb      	ldrb	r3, [r7, #10]
 8008d02:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	461a      	mov	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:205
  stdtime->tm_mday = ((int8_t)time.days + (int8_t)1);
 8008d0e:	7afb      	ldrb	r3, [r7, #11]
 8008d10:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	1c5a      	adds	r2, r3, #1
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:206
  stdtime->tm_mon = (int8_t)time.month;
 8008d1c:	7b7b      	ldrb	r3, [r7, #13]
 8008d1e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	461a      	mov	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:207
  stdtime->tm_year = (int32_t)time.year - (int32_t)XMC_RTC_YEAR_OFFSET;
 8008d2a:	89fb      	ldrh	r3, [r7, #14]
 8008d2c:	f2a3 726c 	subw	r2, r3, #1900	; 0x76c
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:208
  stdtime->tm_wday = (int8_t)time.daysofweek;
 8008d34:	7b3b      	ldrb	r3, [r7, #12]
 8008d36:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	619a      	str	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:209
}
 8008d42:	bf00      	nop
 8008d44:	3714      	adds	r7, #20
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bc80      	pop	{r7}
 8008d4a:	4770      	bx	lr
 8008d4c:	50004a00 	.word	0x50004a00

08008d50 <XMC_RTC_SetAlarm>:
XMC_RTC_SetAlarm():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:215

/*
 * Sets the RTC module alarm time value
 */
void XMC_RTC_SetAlarm(const XMC_RTC_ALARM_t *const alarm)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:224
  XMC_ASSERT("XMC_RTC_SetAlarm:Wrong days value", ((uint32_t)alarm->days < XMC_RTC_MAXDAYS));
  XMC_ASSERT("XMC_RTC_SetAlarm:Wrong month value", ((uint32_t)alarm->month < XMC_RTC_MAXMONTH));
  XMC_ASSERT("XMC_RTC_SetAlarm:Wrong year value", ((uint32_t)alarm->year < XMC_RTC_MAXYEAR));

  #if (XMC_RTC_INIT_SEQUENCE == 1U)
      while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM0_Msk) != 0U)
 8008d58:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:224 (discriminator 1)
 8008d5a:	f7ff fee1 	bl	8008b20 <XMC_SCU_GetMirrorStatus>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1f8      	bne.n	8008d5a <XMC_RTC_SetAlarm+0xa>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:228
      {
        /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
      }
      RTC->ATIM0 = alarm->raw0;
 8008d68:	4a09      	ldr	r2, [pc, #36]	; (8008d90 <XMC_RTC_SetAlarm+0x40>)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	6193      	str	r3, [r2, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:230
      
      while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM1_Msk) != 0U)
 8008d70:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:230 (discriminator 1)
 8008d72:	f7ff fed5 	bl	8008b20 <XMC_SCU_GetMirrorStatus>
 8008d76:	4603      	mov	r3, r0
 8008d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1f8      	bne.n	8008d72 <XMC_RTC_SetAlarm+0x22>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:234
      {
        /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
      }
      RTC->ATIM1 = alarm->raw1; 
 8008d80:	4a03      	ldr	r2, [pc, #12]	; (8008d90 <XMC_RTC_SetAlarm+0x40>)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	61d3      	str	r3, [r2, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:244
        /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
      }
      RTC->ATIM0 = alarm->raw0;
      RTC->ATIM1 = alarm->raw1; 
  #endif  
}
 8008d88:	bf00      	nop
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	50004a00 	.word	0x50004a00

08008d94 <XMC_RTC_GetAlarm>:
XMC_RTC_GetAlarm():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:250

/*
 * Gets the RTC module alarm time value
 */
void XMC_RTC_GetAlarm(XMC_RTC_ALARM_t *const alarm)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:251
  alarm->raw0 = RTC->ATIM0;
 8008d9c:	4b06      	ldr	r3, [pc, #24]	; (8008db8 <XMC_RTC_GetAlarm+0x24>)
 8008d9e:	699a      	ldr	r2, [r3, #24]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:252
  alarm->raw1 = RTC->ATIM1;
 8008da4:	4b04      	ldr	r3, [pc, #16]	; (8008db8 <XMC_RTC_GetAlarm+0x24>)
 8008da6:	69da      	ldr	r2, [r3, #28]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:253
}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bc80      	pop	{r7}
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	50004a00 	.word	0x50004a00

08008dbc <XMC_RTC_SetAlarmStdFormat>:
XMC_RTC_SetAlarmStdFormat():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:260

/*
 * Sets the RTC module alarm time value in standard format
 */
void XMC_RTC_SetAlarmStdFormat(const struct tm *const stdtime)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:264
  XMC_RTC_ALARM_t alarm;
  

  alarm.seconds = stdtime->tm_sec;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dce:	b2da      	uxtb	r2, r3
 8008dd0:	7a3b      	ldrb	r3, [r7, #8]
 8008dd2:	f362 0305 	bfi	r3, r2, #0, #6
 8008dd6:	723b      	strb	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:265
  alarm.minutes = stdtime->tm_min;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008de2:	b2da      	uxtb	r2, r3
 8008de4:	7a7b      	ldrb	r3, [r7, #9]
 8008de6:	f362 0305 	bfi	r3, r2, #0, #6
 8008dea:	727b      	strb	r3, [r7, #9]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:266
  alarm.hours = stdtime->tm_hour;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	f003 031f 	and.w	r3, r3, #31
 8008df6:	b2da      	uxtb	r2, r3
 8008df8:	7abb      	ldrb	r3, [r7, #10]
 8008dfa:	f362 0304 	bfi	r3, r2, #0, #5
 8008dfe:	72bb      	strb	r3, [r7, #10]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:267
  alarm.days = stdtime->tm_mday - 1;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	3b01      	subs	r3, #1
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	f003 031f 	and.w	r3, r3, #31
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	7afb      	ldrb	r3, [r7, #11]
 8008e12:	f362 0304 	bfi	r3, r2, #0, #5
 8008e16:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:268
  alarm.month = stdtime->tm_mon;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	f003 030f 	and.w	r3, r3, #15
 8008e22:	b2da      	uxtb	r2, r3
 8008e24:	7b7b      	ldrb	r3, [r7, #13]
 8008e26:	f362 0303 	bfi	r3, r2, #0, #4
 8008e2a:	737b      	strb	r3, [r7, #13]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:269
  alarm.year = stdtime->tm_year + XMC_RTC_YEAR_OFFSET;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	695b      	ldr	r3, [r3, #20]
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	81fb      	strh	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:271

  XMC_RTC_SetAlarm(&alarm);
 8008e3a:	f107 0308 	add.w	r3, r7, #8
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7ff ff86 	bl	8008d50 <XMC_RTC_SetAlarm>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:272
}
 8008e44:	bf00      	nop
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <XMC_RTC_GetAlarmStdFormat>:
XMC_RTC_GetAlarmStdFormat():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:278

/*
 * Gets the RTC module alarm time value in standard format
 */
void XMC_RTC_GetAlarmStdFormat(struct tm *const stdtime)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:281
  XMC_RTC_ALARM_t alarm;
  
  alarm.raw0 = RTC->ATIM0;
 8008e54:	4b19      	ldr	r3, [pc, #100]	; (8008ebc <XMC_RTC_GetAlarmStdFormat+0x70>)
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:282
  alarm.raw1 = RTC->ATIM1;
 8008e5a:	4b18      	ldr	r3, [pc, #96]	; (8008ebc <XMC_RTC_GetAlarmStdFormat+0x70>)
 8008e5c:	69db      	ldr	r3, [r3, #28]
 8008e5e:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:284

  stdtime->tm_sec = (int8_t)alarm.seconds;
 8008e60:	7a3b      	ldrb	r3, [r7, #8]
 8008e62:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	461a      	mov	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:285
  stdtime->tm_min = (int8_t)alarm.minutes;
 8008e6e:	7a7b      	ldrb	r3, [r7, #9]
 8008e70:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	461a      	mov	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:286
  stdtime->tm_hour = (int8_t)alarm.hours;
 8008e7c:	7abb      	ldrb	r3, [r7, #10]
 8008e7e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	461a      	mov	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:287
  stdtime->tm_mday = ((int8_t)alarm.days + (int8_t)1);
 8008e8a:	7afb      	ldrb	r3, [r7, #11]
 8008e8c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	1c5a      	adds	r2, r3, #1
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:288
  stdtime->tm_mon = (int8_t)alarm.month;
 8008e98:	7b7b      	ldrb	r3, [r7, #13]
 8008e9a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:289
  stdtime->tm_year = (int32_t)alarm.year - (int32_t)XMC_RTC_YEAR_OFFSET;
 8008ea6:	89fb      	ldrh	r3, [r7, #14]
 8008ea8:	f2a3 726c 	subw	r2, r3, #1900	; 0x76c
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:290
}
 8008eb0:	bf00      	nop
 8008eb2:	3714      	adds	r7, #20
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bc80      	pop	{r7}
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	50004a00 	.word	0x50004a00

08008ec0 <XMC_RTC_GetEventStatus>:
XMC_RTC_GetEventStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:296

/*
 * Gets the RTC periodic and alarm event(s) status
 */
uint32_t XMC_RTC_GetEventStatus(void)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:297
  return RTC->STSSR;
 8008ec4:	4b02      	ldr	r3, [pc, #8]	; (8008ed0 <XMC_RTC_GetEventStatus+0x10>)
 8008ec6:	68db      	ldr	r3, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_rtc.c:298
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bc80      	pop	{r7}
 8008ece:	4770      	bx	lr
 8008ed0:	50004a00 	.word	0x50004a00

08008ed4 <XMC_SDMMC_GetPowerStatus>:
XMC_SDMMC_GetPowerStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:164
 * API IMPLEMENTATION
 *******************************************************************************/
 
/* Get power status of the SDMMC peripheral */
bool XMC_SDMMC_GetPowerStatus(XMC_SDMMC_t *const sdmmc)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:167
  XMC_ASSERT("XMC_SDMMC_GetPowerStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));

  return (bool)(sdmmc->POWER_CTRL & SDMMC_POWER_CTRL_SD_BUS_POWER_Msk);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	f003 0301 	and.w	r3, r3, #1
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	bf14      	ite	ne
 8008eec:	2301      	movne	r3, #1
 8008eee:	2300      	moveq	r3, #0
 8008ef0:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:168
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	370c      	adds	r7, #12
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bc80      	pop	{r7}
 8008efa:	4770      	bx	lr

08008efc <XMC_SDMMC_Enable>:
XMC_SDMMC_Enable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:175
/*
 * De-assert the peripheral reset. The SDMMC peripheral
 * needs to be initialized
 */
void XMC_SDMMC_Enable(XMC_SDMMC_t *const sdmmc)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:182

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_SDMMC);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_SDMMC);
 8008f04:	4803      	ldr	r0, [pc, #12]	; (8008f14 <XMC_SDMMC_Enable+0x18>)
 8008f06:	f7f8 fc41 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:184
#endif  
}
 8008f0a:	bf00      	nop
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	10000040 	.word	0x10000040

08008f18 <XMC_SDMMC_Disable>:
XMC_SDMMC_Disable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:188

/* Assert the peripheral reset */
void XMC_SDMMC_Disable(XMC_SDMMC_t *const sdmmc)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:192
  XMC_ASSERT("XMC_SDMMC_Disable: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_SDMMC);
 8008f20:	4803      	ldr	r0, [pc, #12]	; (8008f30 <XMC_SDMMC_Disable+0x18>)
 8008f22:	f7f8 fc17 	bl	8001754 <XMC_SCU_RESET_AssertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:197
#endif  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_SDMMC);
#endif
}
 8008f26:	bf00      	nop
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	10000040 	.word	0x10000040

08008f34 <XMC_SDMMC_Init>:
XMC_SDMMC_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:201

/* Initialize SDMMC peripheral */
XMC_SDMMC_STATUS_t XMC_SDMMC_Init(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_CONFIG_t *config)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:207
  XMC_ASSERT("XMC_SDMMC_Init: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
  XMC_ASSERT("XMC_SDMMC_Init: Invalid clock divider value", XMC_SDMMC_CHECK_SDCLK_FREQ(config->clock_divider));
  XMC_ASSERT("XMC_SDMMC_Init: Invalid bus width", XMC_SDMMC_CHECK_DATA_LINES(config->bus_width));
  
  /* Enable SDMMC peripheral */
  XMC_SDMMC_Enable(sdmmc);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f7ff ffdc 	bl	8008efc <XMC_SDMMC_Enable>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:210
  
  /* Write internal clock divider register */
  sdmmc->CLOCK_CTRL |= (uint16_t)((uint32_t)config->clock_divider << SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL_Pos);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	785b      	ldrb	r3, [r3, #1]
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	021b      	lsls	r3, r3, #8
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	4313      	orrs	r3, r2
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	859a      	strh	r2, [r3, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:213
  
  /* Set bus width */
  sdmmc->HOST_CTRL = (uint8_t)((sdmmc->HOST_CTRL & (uint8_t)~SDMMC_HOST_CTRL_DATA_TX_WIDTH_Msk) |
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	b25b      	sxtb	r3, r3
 8008f66:	f023 0302 	bic.w	r3, r3, #2
 8008f6a:	b25a      	sxtb	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:214
                               ((uint8_t)config->bus_width << SDMMC_HOST_CTRL_DATA_TX_WIDTH_Pos));
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	005b      	lsls	r3, r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:213
  
  /* Write internal clock divider register */
  sdmmc->CLOCK_CTRL |= (uint16_t)((uint32_t)config->clock_divider << SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL_Pos);
  
  /* Set bus width */
  sdmmc->HOST_CTRL = (uint8_t)((sdmmc->HOST_CTRL & (uint8_t)~SDMMC_HOST_CTRL_DATA_TX_WIDTH_Msk) |
 8008f72:	b25b      	sxtb	r3, r3
 8008f74:	4313      	orrs	r3, r2
 8008f76:	b25b      	sxtb	r3, r3
 8008f78:	b2da      	uxtb	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:216
                               ((uint8_t)config->bus_width << SDMMC_HOST_CTRL_DATA_TX_WIDTH_Pos));

  return XMC_SDMMC_STATUS_SUCCESS;
 8008f80:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:217
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop

08008f8c <XMC_SDMMC_EnableEventStatus>:
XMC_SDMMC_EnableEventStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:221

/* Enable event status */
void XMC_SDMMC_EnableEventStatus(XMC_SDMMC_t *const sdmmc, uint32_t event)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:225
  XMC_ASSERT("XMC_SDMMC_EnableEventStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));

  /* Set INT status enable register */
  sdmmc->EN_INT_STATUS_NORM |= (uint16_t)event;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	b21a      	sxth	r2, r3
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	b21b      	sxth	r3, r3
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	b21b      	sxth	r3, r3
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	869a      	strh	r2, [r3, #52]	; 0x34
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:226
  sdmmc->EN_INT_STATUS_ERR |= (uint16_t)(event >> 16U);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	b21a      	sxth	r2, r3
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	0c1b      	lsrs	r3, r3, #16
 8008fb8:	b21b      	sxth	r3, r3
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	b21b      	sxth	r3, r3
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	86da      	strh	r2, [r3, #54]	; 0x36
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:227
}
 8008fc4:	bf00      	nop
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bc80      	pop	{r7}
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop

08008fd0 <XMC_SDMMC_DisableEventStatus>:
XMC_SDMMC_DisableEventStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:231

/* Disable event status */
void XMC_SDMMC_DisableEventStatus(XMC_SDMMC_t *const sdmmc, uint32_t event)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:235
  XMC_ASSERT("XMC_SDMMC_DisableEventStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));

  /* Clear INT status enable register */
  sdmmc->EN_INT_STATUS_NORM &= (uint16_t)~event;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008fde:	b29a      	uxth	r2, r3
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	43db      	mvns	r3, r3
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	4013      	ands	r3, r2
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	869a      	strh	r2, [r3, #52]	; 0x34
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:236
  sdmmc->EN_INT_STATUS_ERR &= (uint16_t)~(event >> 16U);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	0c1b      	lsrs	r3, r3, #16
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	43db      	mvns	r3, r3
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	4013      	ands	r3, r2
 8009002:	b29a      	uxth	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	86da      	strh	r2, [r3, #54]	; 0x36
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:237
}
 8009008:	bf00      	nop
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	bc80      	pop	{r7}
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop

08009014 <XMC_SDMMC_EnableEvent>:
XMC_SDMMC_EnableEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:241

/* Enable SDMMC event */
void XMC_SDMMC_EnableEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:244
  XMC_ASSERT("XMC_SDMMC_EnableEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
  
  XMC_SDMMC_EnableEventStatus(sdmmc, event);
 800901e:	6839      	ldr	r1, [r7, #0]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f7ff ffb3 	bl	8008f8c <XMC_SDMMC_EnableEventStatus>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:246

  sdmmc->EN_INT_SIGNAL_NORM |= (uint16_t)event;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800902a:	b29b      	uxth	r3, r3
 800902c:	b21a      	sxth	r2, r3
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	b21b      	sxth	r3, r3
 8009032:	4313      	orrs	r3, r2
 8009034:	b21b      	sxth	r3, r3
 8009036:	b29a      	uxth	r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	871a      	strh	r2, [r3, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:247
  sdmmc->EN_INT_SIGNAL_ERR |= (uint16_t)(event >> 16U);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8009040:	b29b      	uxth	r3, r3
 8009042:	b21a      	sxth	r2, r3
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	0c1b      	lsrs	r3, r3, #16
 8009048:	b21b      	sxth	r3, r3
 800904a:	4313      	orrs	r3, r2
 800904c:	b21b      	sxth	r3, r3
 800904e:	b29a      	uxth	r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	875a      	strh	r2, [r3, #58]	; 0x3a
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:248
}
 8009054:	bf00      	nop
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <XMC_SDMMC_DisableEvent>:
XMC_SDMMC_DisableEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:252

/* Disable SDMMC event without disabling event status */
void XMC_SDMMC_DisableEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:256
  XMC_ASSERT("XMC_SDMMC_DisableEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));

  /* Clear INT signal enable register */
  sdmmc->EN_INT_SIGNAL_NORM &= (uint16_t)~event;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800906a:	b29a      	uxth	r2, r3
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	b29b      	uxth	r3, r3
 8009070:	43db      	mvns	r3, r3
 8009072:	b29b      	uxth	r3, r3
 8009074:	4013      	ands	r3, r2
 8009076:	b29a      	uxth	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	871a      	strh	r2, [r3, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:257
  sdmmc->EN_INT_SIGNAL_ERR &= (uint16_t)~(event >> 16U);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8009080:	b29a      	uxth	r2, r3
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	0c1b      	lsrs	r3, r3, #16
 8009086:	b29b      	uxth	r3, r3
 8009088:	43db      	mvns	r3, r3
 800908a:	b29b      	uxth	r3, r3
 800908c:	4013      	ands	r3, r2
 800908e:	b29a      	uxth	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	875a      	strh	r2, [r3, #58]	; 0x3a
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:258
}
 8009094:	bf00      	nop
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	bc80      	pop	{r7}
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop

080090a0 <XMC_SDMMC_ClearEvent>:
XMC_SDMMC_ClearEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:262

/* Clear SDMMC event(s) */
void XMC_SDMMC_ClearEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:266
  XMC_ASSERT("XMC_SDMMC_ClearEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
  XMC_ASSERT("XMC_SDMMC_ClearEvent: Invalid bit-field", !(event & XMC_SDMMC_TARGET_RESP_ERR));

  sdmmc->INT_STATUS_NORM = (uint16_t)event;
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	861a      	strh	r2, [r3, #48]	; 0x30
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:267
  sdmmc->INT_STATUS_ERR = (uint16_t)(event >> 16U);
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	0c1b      	lsrs	r3, r3, #16
 80090b6:	b29a      	uxth	r2, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	865a      	strh	r2, [r3, #50]	; 0x32
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:268
}
 80090bc:	bf00      	nop
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bc80      	pop	{r7}
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop

080090c8 <XMC_SDMMC_GetEvent>:
XMC_SDMMC_GetEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:272

/* Get the status of an SDMMC event */
bool XMC_SDMMC_GetEvent(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_EVENT_t event)
{  
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:278
  bool status;
  
  XMC_ASSERT("XMC_SDMMC_GetEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
  XMC_ASSERT("XMC_SDMMC_GetEvent: Invalid SDMMC event", XMC_SDMMC_CHECK_EVENT(event));

  if (event < XMC_SDMMC_CMD_TIMEOUT_ERR)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090d8:	d20c      	bcs.n	80090f4 <XMC_SDMMC_GetEvent+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:280
  {
    status = (bool)(sdmmc->INT_STATUS_NORM & (uint16_t)event);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80090de:	b29b      	uxth	r3, r3
 80090e0:	461a      	mov	r2, r3
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	4013      	ands	r3, r2
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	bf14      	ite	ne
 80090ec:	2301      	movne	r3, #1
 80090ee:	2300      	moveq	r3, #0
 80090f0:	73fb      	strb	r3, [r7, #15]
 80090f2:	e00b      	b.n	800910c <XMC_SDMMC_GetEvent+0x44>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:284
  }
  else
  {
    status = (bool)(sdmmc->INT_STATUS_ERR & (uint16_t)((uint32_t)event >> 16U));
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	461a      	mov	r2, r3
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	0c1b      	lsrs	r3, r3, #16
 8009100:	4013      	ands	r3, r2
 8009102:	2b00      	cmp	r3, #0
 8009104:	bf14      	ite	ne
 8009106:	2301      	movne	r3, #1
 8009108:	2300      	moveq	r3, #0
 800910a:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:287
  }
  
  return status;
 800910c:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:288
}
 800910e:	4618      	mov	r0, r3
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	bc80      	pop	{r7}
 8009116:	4770      	bx	lr

08009118 <XMC_SDMMC_GetR2Response>:
XMC_SDMMC_GetR2Response():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:292

/* Read R2 response (CID, CSD register) */
void XMC_SDMMC_GetR2Response(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_RESPONSE_t *const response)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:295
  XMC_ASSERT("XMC_SDMMC_GetR2Response: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
  
  response->response_0 = sdmmc->RESPONSE[0];
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	691a      	ldr	r2, [r3, #16]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:296
  response->response_2 = sdmmc->RESPONSE[1];
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	695a      	ldr	r2, [r3, #20]
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:297
  response->response_4 = sdmmc->RESPONSE[2];
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	699a      	ldr	r2, [r3, #24]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:298
  response->response_6 = sdmmc->RESPONSE[3];
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	69da      	ldr	r2, [r3, #28]
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:299
}
 8009142:	bf00      	nop
 8009144:	370c      	adds	r7, #12
 8009146:	46bd      	mov	sp, r7
 8009148:	bc80      	pop	{r7}
 800914a:	4770      	bx	lr

0800914c <XMC_SDMMC_SendCommand>:
XMC_SDMMC_SendCommand():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:303

/* Send SDMMC command */
XMC_SDMMC_STATUS_t XMC_SDMMC_SendCommand(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_COMMAND_t *cmd, uint32_t arg)
{
 800914c:	b480      	push	{r7}
 800914e:	b085      	sub	sp, #20
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	607a      	str	r2, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:306
  XMC_ASSERT("XMC_SDMMC_SendCommand: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
  
  sdmmc->ARGUMENT1 = arg;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:307
  sdmmc->COMMAND = (uint16_t)(*(uint16_t *)cmd);
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	881a      	ldrh	r2, [r3, #0]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	81da      	strh	r2, [r3, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:309
  
  return XMC_SDMMC_STATUS_SUCCESS;
 8009166:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:310
}
 8009168:	4618      	mov	r0, r3
 800916a:	3714      	adds	r7, #20
 800916c:	46bd      	mov	sp, r7
 800916e:	bc80      	pop	{r7}
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop

08009174 <XMC_SDMMC_SetDataTransferMode>:
XMC_SDMMC_SetDataTransferMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:314

/* Set data transfer mode */
void XMC_SDMMC_SetDataTransferMode(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_TRANSFER_MODE_t *const response)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:319
  XMC_ASSERT("XMC_SDMMC_SetDataTransferMode: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
  XMC_ASSERT("XMC_SDMMC_SetDataTransferMode: Invalid transfer type", XMC_SDMMC_CHECK_TRANSFER_MODE(response->type));
  
  /* Block size */
  sdmmc->BLOCK_SIZE = (uint16_t)(response->block_size);
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	b29a      	uxth	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	809a      	strh	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:322
  
  /* Number of blocks */
  sdmmc->BLOCK_COUNT = (uint16_t)(response->num_blocks);
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	b29a      	uxth	r2, r3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	80da      	strh	r2, [r3, #6]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:325

  /* Type of data transfer: single, infinite, multiple or stop multiple */
  sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_MULTI_BLOCK_SELECT_Msk) |
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	899b      	ldrh	r3, [r3, #12]
 8009196:	b29b      	uxth	r3, r3
 8009198:	b21b      	sxth	r3, r3
 800919a:	f023 0320 	bic.w	r3, r3, #32
 800919e:	b21a      	sxth	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:326
                                    ((uint16_t)response->type));
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	7a1b      	ldrb	r3, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:325
  
  /* Number of blocks */
  sdmmc->BLOCK_COUNT = (uint16_t)(response->num_blocks);

  /* Type of data transfer: single, infinite, multiple or stop multiple */
  sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_MULTI_BLOCK_SELECT_Msk) |
 80091a4:	b21b      	sxth	r3, r3
 80091a6:	4313      	orrs	r3, r2
 80091a8:	b21b      	sxth	r3, r3
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	819a      	strh	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:332

  /*
   * Clear block count enable bit; that's only valid for
   * a multi-block transfer
   */
  if (response->type == XMC_SDMMC_TRANSFER_MODE_TYPE_SINGLE)
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	7a1b      	ldrb	r3, [r3, #8]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d107      	bne.n	80091c8 <XMC_SDMMC_SetDataTransferMode+0x54>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:334
  {
    sdmmc->TRANSFER_MODE &= (uint16_t)~SDMMC_TRANSFER_MODE_BLOCK_COUNT_EN_Msk;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	899b      	ldrh	r3, [r3, #12]
 80091bc:	b29b      	uxth	r3, r3
 80091be:	f023 0302 	bic.w	r3, r3, #2
 80091c2:	b29a      	uxth	r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	819a      	strh	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:338
  }

  /* Auto CMD configuration */
  sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_ACMD_EN_Msk) |
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	899b      	ldrh	r3, [r3, #12]
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	b21b      	sxth	r3, r3
 80091d0:	f023 030c 	bic.w	r3, r3, #12
 80091d4:	b21a      	sxth	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:339
                                    ((uint16_t)response->auto_cmd << SDMMC_TRANSFER_MODE_ACMD_EN_Pos));
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	7a5b      	ldrb	r3, [r3, #9]
 80091da:	009b      	lsls	r3, r3, #2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:338
  {
    sdmmc->TRANSFER_MODE &= (uint16_t)~SDMMC_TRANSFER_MODE_BLOCK_COUNT_EN_Msk;
  }

  /* Auto CMD configuration */
  sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_ACMD_EN_Msk) |
 80091dc:	b21b      	sxth	r3, r3
 80091de:	4313      	orrs	r3, r2
 80091e0:	b21b      	sxth	r3, r3
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	819a      	strh	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_sdmmc.c:340
                                    ((uint16_t)response->auto_cmd << SDMMC_TRANSFER_MODE_ACMD_EN_Pos));
}
 80091e8:	bf00      	nop
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bc80      	pop	{r7}
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop

080091f4 <XMC_USIC_CH_GetTransmitBufferStatus>:
XMC_USIC_CH_GetTransmitBufferStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:1111
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:1112
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009200:	b2db      	uxtb	r3, r3
 8009202:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009206:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:1113
}
 8009208:	4618      	mov	r0, r3
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	bc80      	pop	{r7}
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop

08009214 <XMC_USIC_CH_SetMode>:
XMC_USIC_CH_SetMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:2005
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	460b      	mov	r3, r1
 800921e:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:2006
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009224:	f023 020f 	bic.w	r2, r3, #15
 8009228:	78fb      	ldrb	r3, [r7, #3]
 800922a:	431a      	orrs	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	641a      	str	r2, [r3, #64]	; 0x40
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:2007
}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	bc80      	pop	{r7}
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop

0800923c <XMC_SPI_CH_ClearStatusFlag>:
XMC_SPI_CH_ClearStatusFlag():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_spi.h:631
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_spi.h:632
  channel->PSCR |= flag;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	431a      	orrs	r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	64da      	str	r2, [r3, #76]	; 0x4c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_spi.h:633
}
 8009252:	bf00      	nop
 8009254:	370c      	adds	r7, #12
 8009256:	46bd      	mov	sp, r7
 8009258:	bc80      	pop	{r7}
 800925a:	4770      	bx	lr

0800925c <XMC_SPI_CH_Init>:
XMC_SPI_CH_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:80
 * API IMPLEMENTATION
 ********************************************************************************************************************/
 
/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:81
  XMC_USIC_CH_Enable(channel);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f003 fbf6 	bl	800ca58 <XMC_USIC_CH_Enable>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:83
  
  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	791b      	ldrb	r3, [r3, #4]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d106      	bne.n	8009282 <XMC_SPI_CH_Init+0x26>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:86
  {
    /* Configure baud rate */
    (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2202      	movs	r2, #2
 800927a:	4619      	mov	r1, r3
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f003 fc4b 	bl	800cb18 <XMC_USIC_CH_SetBaudrate>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:92
  }
  
  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a0f      	ldr	r2, [pc, #60]	; (80092c4 <XMC_SPI_CH_Init+0x68>)
 8009286:	635a      	str	r2, [r3, #52]	; 0x34
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:100
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 800928e:	639a      	str	r2, [r3, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:104
                  (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	791b      	ldrb	r3, [r3, #4]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d107      	bne.n	80092a8 <XMC_SPI_CH_Init+0x4c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:109
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                           USIC_CH_PCR_SSCMode_SELCTR_Msk |
                           (uint32_t)config->selo_inversion |
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	795b      	ldrb	r3, [r3, #5]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:107
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 800929c:	f043 030b 	orr.w	r3, r3, #11
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	461a      	mov	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	63da      	str	r2, [r3, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:114
                           (uint32_t)config->selo_inversion |
                           USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f04f 32ff 	mov.w	r2, #4294967295
 80092ae:	64da      	str	r2, [r3, #76]	; 0x4c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:117

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	88db      	ldrh	r3, [r3, #6]
 80092b4:	461a      	mov	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	641a      	str	r2, [r3, #64]	; 0x40
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:118
}
 80092ba:	bf00      	nop
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	073f0102 	.word	0x073f0102

080092c8 <XMC_SPI_CH_SetBaudrate>:
XMC_SPI_CH_SetBaudrate():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:121

XMC_SPI_CH_STATUS_t XMC_SPI_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:124
  XMC_SPI_CH_STATUS_t status;
  
  status = XMC_SPI_CH_STATUS_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:126
  
  if (rate <= (XMC_SCU_CLOCK_GetPeripheralClockFrequency() >> 1U))
 80092d6:	f7f8 fbcb 	bl	8001a70 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80092da:	4603      	mov	r3, r0
 80092dc:	085a      	lsrs	r2, r3, #1
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d309      	bcc.n	80092f8 <XMC_SPI_CH_SetBaudrate+0x30>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:128
  {
    if (XMC_USIC_CH_SetBaudrate(channel, rate, XMC_SPI_CH_OVERSAMPLING) == XMC_USIC_CH_STATUS_OK)
 80092e4:	2202      	movs	r2, #2
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f003 fc15 	bl	800cb18 <XMC_USIC_CH_SetBaudrate>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d101      	bne.n	80092f8 <XMC_SPI_CH_SetBaudrate+0x30>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:130
    {
      status = XMC_SPI_CH_STATUS_OK;
 80092f4:	2300      	movs	r3, #0
 80092f6:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:133
    }
  } 
  return status;
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:134
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop

08009304 <XMC_SPI_CH_EnableSlaveSelect>:
XMC_SPI_CH_EnableSlaveSelect():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:138

/* Enable the selected slave signal by setting (SELO) bits in PCR register. */
void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t slave)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:140
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009312:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	63da      	str	r2, [r3, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:141
  channel->PCR_SSCMode |= (uint32_t)slave;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	431a      	orrs	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	63da      	str	r2, [r3, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:142
}
 8009326:	bf00      	nop
 8009328:	370c      	adds	r7, #12
 800932a:	46bd      	mov	sp, r7
 800932c:	bc80      	pop	{r7}
 800932e:	4770      	bx	lr

08009330 <XMC_SPI_CH_DisableSlaveSelect>:
XMC_SPI_CH_DisableSlaveSelect():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:146

/* Disable the slave signals by clearing (SELO) bits in PCR register. */
void XMC_SPI_CH_DisableSlaveSelect(XMC_USIC_CH_t *const channel)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:147
  XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_MSLS);
 8009338:	2101      	movs	r1, #1
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f7ff ff7e 	bl	800923c <XMC_SPI_CH_ClearStatusFlag>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:150
  
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009344:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	63da      	str	r2, [r3, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:151
}
 800934c:	bf00      	nop
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <XMC_SPI_CH_Transmit>:
XMC_SPI_CH_Transmit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:155

/* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the proper mode. */
void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t mode)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	460b      	mov	r3, r1
 800935e:	807b      	strh	r3, [r7, #2]
 8009360:	4613      	mov	r3, r2
 8009362:	707b      	strb	r3, [r7, #1]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:157

  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009368:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:158
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 800936c:	787b      	ldrb	r3, [r7, #1]
 800936e:	019b      	lsls	r3, r3, #6
 8009370:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:157

/* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the proper mode. */
void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t mode)
{

  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8009372:	431a      	orrs	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	641a      	str	r2, [r3, #64]	; 0x40
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:162
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);


  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800937e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009382:	2b00      	cmp	r3, #0
 8009384:	d112      	bne.n	80093ac <XMC_SPI_CH_Transmit+0x58>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:164
  {
    while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 8009386:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:164 (discriminator 1)
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f7ff ff33 	bl	80091f4 <XMC_USIC_CH_GetTransmitBufferStatus>
 800938e:	4603      	mov	r3, r0
 8009390:	2b80      	cmp	r3, #128	; 0x80
 8009392:	d0f9      	beq.n	8009388 <XMC_SPI_CH_Transmit+0x34>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:168
    {
    }
  
    XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8009394:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f7ff ff4f 	bl	800923c <XMC_SPI_CH_ClearStatusFlag>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:170
  
    channel->TBUF[mode] = data;
 800939e:	787a      	ldrb	r2, [r7, #1]
 80093a0:	8879      	ldrh	r1, [r7, #2]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	3220      	adds	r2, #32
 80093a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:176
  }
  else
  {
    channel->IN[mode] = data;
  }
}
 80093aa:	e005      	b.n	80093b8 <XMC_SPI_CH_Transmit+0x64>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:174
  
    channel->TBUF[mode] = data;
  }
  else
  {
    channel->IN[mode] = data;
 80093ac:	787a      	ldrb	r2, [r7, #1]
 80093ae:	8879      	ldrh	r1, [r7, #2]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	3260      	adds	r2, #96	; 0x60
 80093b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:176
  }
}
 80093b8:	bf00      	nop
 80093ba:	3708      	adds	r7, #8
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <XMC_SPI_CH_GetReceivedData>:
XMC_SPI_CH_GetReceivedData():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:180

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:184
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80093ce:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d103      	bne.n	80093de <XMC_SPI_CH_GetReceivedData+0x1e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:186
  {
    retval = (uint16_t)channel->RBUF;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093da:	81fb      	strh	r3, [r7, #14]
 80093dc:	e003      	b.n	80093e6 <XMC_SPI_CH_GetReceivedData+0x26>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:190
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80093e4:	81fb      	strh	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:193
  }

  return retval;
 80093e6:	89fb      	ldrh	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:194
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3714      	adds	r7, #20
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bc80      	pop	{r7}
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop

080093f4 <XMC_SPI_CH_SetInterwordDelay>:
XMC_SPI_CH_SetInterwordDelay():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:198

/* Configures the inter word delay by setting PCR.PCTQ1, PCR.DCTQ1 bit fields. */
void XMC_SPI_CH_SetInterwordDelay(XMC_USIC_CH_t *const channel,uint32_t tinterword_delay_us)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b08e      	sub	sp, #56	; 0x38
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:204
  uint32_t peripheral_clock;
  uint32_t pdiv;
  uint32_t step;
  uint32_t fFD;
  uint32_t fpdiv;
  uint32_t divider_factor1 = 0U;
 80093fe:	2300      	movs	r3, #0
 8009400:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:205
  uint32_t divider_factor2 = 32U;
 8009402:	2320      	movs	r3, #32
 8009404:	637b      	str	r3, [r7, #52]	; 0x34
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:206
  uint32_t divider_factor1_int = 0U;
 8009406:	2300      	movs	r3, #0
 8009408:	633b      	str	r3, [r7, #48]	; 0x30
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:207
  uint32_t divider_factor1_int_min = 4U;
 800940a:	2304      	movs	r3, #4
 800940c:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:208
  uint32_t divider_factor1_frac_min =100U;
 800940e:	2364      	movs	r3, #100	; 0x64
 8009410:	62bb      	str	r3, [r7, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:209
  uint32_t divider_factor1_frac = 0U;
 8009412:	2300      	movs	r3, #0
 8009414:	627b      	str	r3, [r7, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:210
  uint32_t divider_factor2_temp = 0U;
 8009416:	2300      	movs	r3, #0
 8009418:	623b      	str	r3, [r7, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:211
  peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 800941a:	f7f8 fb29 	bl	8001a70 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 800941e:	61b8      	str	r0, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:212
  pdiv = (uint32_t)(channel->BRG & USIC_CH_BRG_PDIV_Msk) >> USIC_CH_BRG_PDIV_Pos;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	695a      	ldr	r2, [r3, #20]
 8009424:	4b3c      	ldr	r3, [pc, #240]	; (8009518 <XMC_SPI_CH_SetInterwordDelay+0x124>)
 8009426:	4013      	ands	r3, r2
 8009428:	0c1b      	lsrs	r3, r3, #16
 800942a:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:213
  step = (uint32_t)(channel->FDR & USIC_CH_FDR_STEP_Msk) >> USIC_CH_FDR_STEP_Pos;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009434:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:214
  fFD = (uint32_t)((peripheral_clock >> 10U) * step);
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	0a9b      	lsrs	r3, r3, #10
 800943a:	693a      	ldr	r2, [r7, #16]
 800943c:	fb02 f303 	mul.w	r3, r2, r3
 8009440:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:215
  fpdiv= fFD/(1U+pdiv);
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	3301      	adds	r3, #1
 8009446:	68fa      	ldr	r2, [r7, #12]
 8009448:	fbb2 f3f3 	udiv	r3, r2, r3
 800944c:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:217

  if(tinterword_delay_us < (128000000/fpdiv))
 800944e:	4a33      	ldr	r2, [pc, #204]	; (800951c <XMC_SPI_CH_SetInterwordDelay+0x128>)
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	fbb2 f2f3 	udiv	r2, r2, r3
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	429a      	cmp	r2, r3
 800945a:	d946      	bls.n	80094ea <XMC_SPI_CH_SetInterwordDelay+0xf6>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:219
  {
    for(divider_factor2_temp = 32U; divider_factor2_temp > 0U; --divider_factor2_temp)
 800945c:	2320      	movs	r3, #32
 800945e:	623b      	str	r3, [r7, #32]
 8009460:	e040      	b.n	80094e4 <XMC_SPI_CH_SetInterwordDelay+0xf0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:222
    {

      divider_factor1 = (tinterword_delay_us*fpdiv)/(divider_factor2_temp*10000);
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	68ba      	ldr	r2, [r7, #8]
 8009466:	fb02 f203 	mul.w	r2, r2, r3
 800946a:	6a3b      	ldr	r3, [r7, #32]
 800946c:	f242 7110 	movw	r1, #10000	; 0x2710
 8009470:	fb01 f303 	mul.w	r3, r1, r3
 8009474:	fbb2 f3f3 	udiv	r3, r2, r3
 8009478:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:223
      divider_factor1_frac = divider_factor1%100U;
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	4a28      	ldr	r2, [pc, #160]	; (8009520 <XMC_SPI_CH_SetInterwordDelay+0x12c>)
 800947e:	fba2 1203 	umull	r1, r2, r2, r3
 8009482:	0952      	lsrs	r2, r2, #5
 8009484:	2164      	movs	r1, #100	; 0x64
 8009486:	fb01 f202 	mul.w	r2, r1, r2
 800948a:	1a9b      	subs	r3, r3, r2
 800948c:	627b      	str	r3, [r7, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:225

      if(divider_factor1_frac > 50)
 800948e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009490:	2b32      	cmp	r3, #50	; 0x32
 8009492:	d90e      	bls.n	80094b2 <XMC_SPI_CH_SetInterwordDelay+0xbe>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:227
      {
        divider_factor1_int =  (divider_factor1/100U)+1;
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	4a22      	ldr	r2, [pc, #136]	; (8009520 <XMC_SPI_CH_SetInterwordDelay+0x12c>)
 8009498:	fba2 2303 	umull	r2, r3, r2, r3
 800949c:	095b      	lsrs	r3, r3, #5
 800949e:	3301      	adds	r3, #1
 80094a0:	633b      	str	r3, [r7, #48]	; 0x30
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:228
        divider_factor1_frac = (divider_factor1_int*100)-divider_factor1;
 80094a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a4:	2264      	movs	r2, #100	; 0x64
 80094a6:	fb02 f203 	mul.w	r2, r2, r3
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	1ad3      	subs	r3, r2, r3
 80094ae:	627b      	str	r3, [r7, #36]	; 0x24
 80094b0:	e005      	b.n	80094be <XMC_SPI_CH_SetInterwordDelay+0xca>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:232
      }
      else
      {
        divider_factor1_int =  (divider_factor1/100U);
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	4a1a      	ldr	r2, [pc, #104]	; (8009520 <XMC_SPI_CH_SetInterwordDelay+0x12c>)
 80094b6:	fba2 2303 	umull	r2, r3, r2, r3
 80094ba:	095b      	lsrs	r3, r3, #5
 80094bc:	633b      	str	r3, [r7, #48]	; 0x30
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:235
      }

      if ((divider_factor1_int < 5U) && (divider_factor1_int > 0) && (divider_factor1_frac < divider_factor1_frac_min))
 80094be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c0:	2b04      	cmp	r3, #4
 80094c2:	d80c      	bhi.n	80094de <XMC_SPI_CH_SetInterwordDelay+0xea>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:235 (discriminator 1)
 80094c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d009      	beq.n	80094de <XMC_SPI_CH_SetInterwordDelay+0xea>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:235 (discriminator 2)
 80094ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d205      	bcs.n	80094de <XMC_SPI_CH_SetInterwordDelay+0xea>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:237
      {
        divider_factor1_frac_min = divider_factor1_frac;
 80094d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d4:	62bb      	str	r3, [r7, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:238
        divider_factor1_int_min = divider_factor1_int;
 80094d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d8:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:239
        divider_factor2= divider_factor2_temp;
 80094da:	6a3b      	ldr	r3, [r7, #32]
 80094dc:	637b      	str	r3, [r7, #52]	; 0x34
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:219 (discriminator 2)
  fFD = (uint32_t)((peripheral_clock >> 10U) * step);
  fpdiv= fFD/(1U+pdiv);

  if(tinterword_delay_us < (128000000/fpdiv))
  {
    for(divider_factor2_temp = 32U; divider_factor2_temp > 0U; --divider_factor2_temp)
 80094de:	6a3b      	ldr	r3, [r7, #32]
 80094e0:	3b01      	subs	r3, #1
 80094e2:	623b      	str	r3, [r7, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:219 (discriminator 1)
 80094e4:	6a3b      	ldr	r3, [r7, #32]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1bb      	bne.n	8009462 <XMC_SPI_CH_SetInterwordDelay+0x6e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:244
        divider_factor2= divider_factor2_temp;
      }
    }
  }

  channel->PCR_SSCMode = (uint32_t)((channel->PCR_SSCMode) & (~(USIC_CH_PCR_SSCMode_DCTQ1_Msk |
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ee:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80094f2:	f023 0310 	bic.w	r3, r3, #16
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:247
                                                                USIC_CH_PCR_SSCMode_PCTQ1_Msk |
                                                                USIC_CH_PCR_SSCMode_CTQSEL1_Msk))) |
                         (((divider_factor1_int_min - 1) << USIC_CH_PCR_SSCMode_PCTQ1_Pos) & (uint32_t)USIC_CH_PCR_SSCMode_PCTQ1_Msk) |
 80094f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094f8:	3a01      	subs	r2, #1
 80094fa:	0192      	lsls	r2, r2, #6
 80094fc:	b2d2      	uxtb	r2, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:246
    }
  }

  channel->PCR_SSCMode = (uint32_t)((channel->PCR_SSCMode) & (~(USIC_CH_PCR_SSCMode_DCTQ1_Msk |
                                                                USIC_CH_PCR_SSCMode_PCTQ1_Msk |
                                                                USIC_CH_PCR_SSCMode_CTQSEL1_Msk))) |
 80094fe:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:248
                         (((divider_factor1_int_min - 1) << USIC_CH_PCR_SSCMode_PCTQ1_Pos) & (uint32_t)USIC_CH_PCR_SSCMode_PCTQ1_Msk) |
                         (((divider_factor2 - 1 ) << USIC_CH_PCR_SSCMode_DCTQ1_Pos) & (uint32_t)USIC_CH_PCR_SSCMode_DCTQ1_Msk);
 8009500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009502:	3b01      	subs	r3, #1
 8009504:	021b      	lsls	r3, r3, #8
 8009506:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:247
  }

  channel->PCR_SSCMode = (uint32_t)((channel->PCR_SSCMode) & (~(USIC_CH_PCR_SSCMode_DCTQ1_Msk |
                                                                USIC_CH_PCR_SSCMode_PCTQ1_Msk |
                                                                USIC_CH_PCR_SSCMode_CTQSEL1_Msk))) |
                         (((divider_factor1_int_min - 1) << USIC_CH_PCR_SSCMode_PCTQ1_Pos) & (uint32_t)USIC_CH_PCR_SSCMode_PCTQ1_Msk) |
 800950a:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:244
        divider_factor2= divider_factor2_temp;
      }
    }
  }

  channel->PCR_SSCMode = (uint32_t)((channel->PCR_SSCMode) & (~(USIC_CH_PCR_SSCMode_DCTQ1_Msk |
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	63da      	str	r2, [r3, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:249
                                                                USIC_CH_PCR_SSCMode_PCTQ1_Msk |
                                                                USIC_CH_PCR_SSCMode_CTQSEL1_Msk))) |
                         (((divider_factor1_int_min - 1) << USIC_CH_PCR_SSCMode_PCTQ1_Pos) & (uint32_t)USIC_CH_PCR_SSCMode_PCTQ1_Msk) |
                         (((divider_factor2 - 1 ) << USIC_CH_PCR_SSCMode_DCTQ1_Pos) & (uint32_t)USIC_CH_PCR_SSCMode_DCTQ1_Msk);
}
 8009510:	bf00      	nop
 8009512:	3738      	adds	r7, #56	; 0x38
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	03ff0000 	.word	0x03ff0000
 800951c:	07a12000 	.word	0x07a12000
 8009520:	51eb851f 	.word	0x51eb851f

08009524 <XMC_SPI_CH_Stop>:
XMC_SPI_CH_Stop():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:252

XMC_SPI_CH_STATUS_t XMC_SPI_CH_Stop(XMC_USIC_CH_t *const channel)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:253
  XMC_SPI_CH_STATUS_t status = XMC_SPI_CH_STATUS_OK;
 800952c:	2300      	movs	r3, #0
 800952e:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:255

  if (((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) & (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY) != 0U)
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f7ff fe5f 	bl	80091f4 <XMC_USIC_CH_GetTransmitBufferStatus>
 8009536:	4603      	mov	r3, r0
 8009538:	b25b      	sxtb	r3, r3
 800953a:	2b00      	cmp	r3, #0
 800953c:	da02      	bge.n	8009544 <XMC_SPI_CH_Stop+0x20>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:257
  {
    status = XMC_SPI_CH_STATUS_BUSY;
 800953e:	2302      	movs	r3, #2
 8009540:	73fb      	strb	r3, [r7, #15]
 8009542:	e003      	b.n	800954c <XMC_SPI_CH_Stop+0x28>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:263
  }
  else
  {

    /* USIC channel in IDLE mode */
    XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_IDLE);
 8009544:	2100      	movs	r1, #0
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f7ff fe64 	bl	8009214 <XMC_USIC_CH_SetMode>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:266
  }

  return status;
 800954c:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:267
}
 800954e:	4618      	mov	r0, r3
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop

08009558 <XMC_SPI_CH_EnableEvent>:
XMC_SPI_CH_EnableEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:270

void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:271
  channel->CCR |= (event&0x1fc00U);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 800956c:	431a      	orrs	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	641a      	str	r2, [r3, #64]	; 0x40
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:272
  channel->PCR_SSCMode |= ((event << 13U) & 0xe000U);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	035b      	lsls	r3, r3, #13
 800957a:	b29b      	uxth	r3, r3
 800957c:	431a      	orrs	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	63da      	str	r2, [r3, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:273
}
 8009582:	bf00      	nop
 8009584:	370c      	adds	r7, #12
 8009586:	46bd      	mov	sp, r7
 8009588:	bc80      	pop	{r7}
 800958a:	4770      	bx	lr

0800958c <XMC_SPI_CH_DisableEvent>:
XMC_SPI_CH_DisableEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:276

void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:277
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 80095a0:	43db      	mvns	r3, r3
 80095a2:	401a      	ands	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	641a      	str	r2, [r3, #64]	; 0x40
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:278
  channel->PCR_SSCMode &= (uint32_t)~((event << 13U) & 0xe000U);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	035b      	lsls	r3, r3, #13
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	43db      	mvns	r3, r3
 80095b4:	401a      	ands	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	63da      	str	r2, [r3, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_spi.c:279
}
 80095ba:	bf00      	nop
 80095bc:	370c      	adds	r7, #12
 80095be:	46bd      	mov	sp, r7
 80095c0:	bc80      	pop	{r7}
 80095c2:	4770      	bx	lr

080095c4 <XMC_USIC_CH_GetTransmitBufferStatus>:
XMC_USIC_CH_GetTransmitBufferStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:1111
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:1112
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80095d6:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:1113
}
 80095d8:	4618      	mov	r0, r3
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	bc80      	pop	{r7}
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop

080095e4 <XMC_USIC_CH_SetMode>:
XMC_USIC_CH_SetMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:2005
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	460b      	mov	r3, r1
 80095ee:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:2006
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f4:	f023 020f 	bic.w	r2, r3, #15
 80095f8:	78fb      	ldrb	r3, [r7, #3]
 80095fa:	431a      	orrs	r2, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	641a      	str	r2, [r3, #64]	; 0x40
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:2007
}
 8009600:	bf00      	nop
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	bc80      	pop	{r7}
 8009608:	4770      	bx	lr
 800960a:	bf00      	nop

0800960c <XMC_UART_CH_GetStatusFlag>:
XMC_UART_CH_GetStatusFlag():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_uart.h:534
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableEvent(),  XMC_UART_CH_ClearStatusFlag()\n\n\n
 */
__STATIC_INLINE uint32_t XMC_UART_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_uart.h:535
  return channel->PSR_ASCMode;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_uart.h:536
}
 8009618:	4618      	mov	r0, r3
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	bc80      	pop	{r7}
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop

08009624 <XMC_UART_CH_ClearStatusFlag>:
XMC_UART_CH_ClearStatusFlag():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_uart.h:557
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_uart.h:558
  channel->PSCR = flag;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	683a      	ldr	r2, [r7, #0]
 8009632:	64da      	str	r2, [r3, #76]	; 0x4c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_uart.h:559
}
 8009634:	bf00      	nop
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	bc80      	pop	{r7}
 800963c:	4770      	bx	lr
 800963e:	bf00      	nop

08009640 <XMC_UART_CH_Init>:
XMC_UART_CH_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:79
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:80
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 800964a:	2310      	movs	r3, #16
 800964c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:83

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f003 fa02 	bl	800ca58 <XMC_USIC_CH_Enable>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:85
  
  if(config->oversampling != 0U)
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	79db      	ldrb	r3, [r3, #7]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <XMC_UART_CH_Init+0x22>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:87
  {
    oversampling = (uint32_t)config->oversampling;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	79db      	ldrb	r3, [r3, #7]
 8009660:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:91
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	4619      	mov	r1, r3
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f003 fa54 	bl	800cb18 <XMC_USIC_CH_SetBaudrate>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:101
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	799b      	ldrb	r3, [r3, #6]
 8009674:	3b01      	subs	r3, #1
 8009676:	005a      	lsls	r2, r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:102
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	085b      	lsrs	r3, r3, #1
 800967c:	3301      	adds	r3, #1
 800967e:	021b      	lsls	r3, r3, #8
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:101
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8009680:	4313      	orrs	r3, r2
 8009682:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8009686:	f043 0301 	orr.w	r3, r3, #1
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	63d3      	str	r3, [r2, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:111
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	791b      	ldrb	r3, [r3, #4]
 8009692:	3b01      	subs	r3, #1
 8009694:	061b      	lsls	r3, r3, #24
 8009696:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	635a      	str	r2, [r3, #52]	; 0x34
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:114
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	795b      	ldrb	r3, [r3, #5]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d009      	beq.n	80096ba <XMC_UART_CH_Init+0x7a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:116
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	795b      	ldrb	r3, [r3, #5]
 80096ae:	3b01      	subs	r3, #1
 80096b0:	041b      	lsls	r3, r3, #16
 80096b2:	431a      	orrs	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	635a      	str	r2, [r3, #52]	; 0x34
 80096b8:	e008      	b.n	80096cc <XMC_UART_CH_Init+0x8c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:120
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	791b      	ldrb	r3, [r3, #4]
 80096c2:	3b01      	subs	r3, #1
 80096c4:	041b      	lsls	r3, r3, #16
 80096c6:	431a      	orrs	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	635a      	str	r2, [r3, #52]	; 0x34
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:124
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80096d2:	639a      	str	r2, [r3, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:128
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f04f 32ff 	mov.w	r2, #4294967295
 80096da:	64da      	str	r2, [r3, #76]	; 0x4c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:131

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	891b      	ldrh	r3, [r3, #8]
 80096e0:	461a      	mov	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	641a      	str	r2, [r3, #64]	; 0x40
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:132
}
 80096e6:	bf00      	nop
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop

080096f0 <XMC_UART_CH_SetBaudrate>:
XMC_UART_CH_SetBaudrate():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:135

XMC_UART_CH_STATUS_t XMC_UART_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b086      	sub	sp, #24
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:138
  XMC_UART_CH_STATUS_t status;
  
  status = XMC_UART_CH_STATUS_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:140
  
  if ((rate <= (XMC_SCU_CLOCK_GetPeripheralClockFrequency() >> 2U)) && (oversampling >= XMC_UART_CH_OVERSAMPLING_MIN_VAL))
 8009700:	f7f8 f9b6 	bl	8001a70 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8009704:	4603      	mov	r3, r0
 8009706:	089a      	lsrs	r2, r3, #2
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	429a      	cmp	r2, r3
 800970c:	d30c      	bcc.n	8009728 <XMC_UART_CH_SetBaudrate+0x38>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:140 (discriminator 1)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2b03      	cmp	r3, #3
 8009712:	d909      	bls.n	8009728 <XMC_UART_CH_SetBaudrate+0x38>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:142
  {
    if (XMC_USIC_CH_SetBaudrate(channel, rate, oversampling) == XMC_USIC_CH_STATUS_OK)
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	68b9      	ldr	r1, [r7, #8]
 8009718:	68f8      	ldr	r0, [r7, #12]
 800971a:	f003 f9fd 	bl	800cb18 <XMC_USIC_CH_SetBaudrate>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d101      	bne.n	8009728 <XMC_UART_CH_SetBaudrate+0x38>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:144
    {
      status = XMC_UART_CH_STATUS_OK;
 8009724:	2300      	movs	r3, #0
 8009726:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:147
    }
  } 
  return status;
 8009728:	7dfb      	ldrb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:148
}
 800972a:	4618      	mov	r0, r3
 800972c:	3718      	adds	r7, #24
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop

08009734 <XMC_UART_CH_Transmit>:
XMC_UART_CH_Transmit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:151

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	460b      	mov	r3, r1
 800973e:	807b      	strh	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:153
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009746:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800974a:	2b00      	cmp	r3, #0
 800974c:	d110      	bne.n	8009770 <XMC_UART_CH_Transmit+0x3c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:156
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800974e:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:156 (discriminator 1)
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f7ff ff37 	bl	80095c4 <XMC_USIC_CH_GetTransmitBufferStatus>
 8009756:	4603      	mov	r3, r0
 8009758:	2b80      	cmp	r3, #128	; 0x80
 800975a:	d0f9      	beq.n	8009750 <XMC_UART_CH_Transmit+0x1c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:161
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 800975c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f7ff ff5f 	bl	8009624 <XMC_UART_CH_ClearStatusFlag>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:164
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8009766:	887a      	ldrh	r2, [r7, #2]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:170
  }
  else
  {
    channel->IN[0U] = data;
  }
}
 800976e:	e003      	b.n	8009778 <XMC_UART_CH_Transmit+0x44>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:168
    /*Transmit data */
    channel->TBUF[0U] = data;
  }
  else
  {
    channel->IN[0U] = data;
 8009770:	887a      	ldrh	r2, [r7, #2]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:170
  }
}
 8009778:	bf00      	nop
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <XMC_UART_CH_GetReceivedData>:
XMC_UART_CH_GetReceivedData():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:173

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:177
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800978e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009792:	2b00      	cmp	r3, #0
 8009794:	d103      	bne.n	800979e <XMC_UART_CH_GetReceivedData+0x1e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:179
  {
    retval = (uint16_t)channel->RBUF;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800979a:	81fb      	strh	r3, [r7, #14]
 800979c:	e003      	b.n	80097a6 <XMC_UART_CH_GetReceivedData+0x26>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:183
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80097a4:	81fb      	strh	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:186
  }

  return retval;
 80097a6:	89fb      	ldrh	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:187
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3714      	adds	r7, #20
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bc80      	pop	{r7}
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop

080097b4 <XMC_UART_CH_Stop>:
XMC_UART_CH_Stop():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:190

XMC_UART_CH_STATUS_t XMC_UART_CH_Stop(XMC_USIC_CH_t *const channel)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:191
  XMC_UART_CH_STATUS_t status = XMC_UART_CH_STATUS_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:193

  if (((XMC_USIC_CH_GetTransmitBufferStatus(channel) & (uint32_t) XMC_USIC_CH_TBUF_STATUS_BUSY) != 0U) ||
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f7ff feff 	bl	80095c4 <XMC_USIC_CH_GetTransmitBufferStatus>
 80097c6:	4603      	mov	r3, r0
 80097c8:	b25b      	sxtb	r3, r3
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	db07      	blt.n	80097de <XMC_UART_CH_Stop+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:194 (discriminator 1)
      ((XMC_UART_CH_GetStatusFlag(channel) & XMC_UART_CH_STATUS_FLAG_TRANSFER_STATUS_BUSY) != 0))
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7ff ff1c 	bl	800960c <XMC_UART_CH_GetStatusFlag>
 80097d4:	4603      	mov	r3, r0
 80097d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:193 (discriminator 1)

XMC_UART_CH_STATUS_t XMC_UART_CH_Stop(XMC_USIC_CH_t *const channel)
{
  XMC_UART_CH_STATUS_t status = XMC_UART_CH_STATUS_OK;

  if (((XMC_USIC_CH_GetTransmitBufferStatus(channel) & (uint32_t) XMC_USIC_CH_TBUF_STATUS_BUSY) != 0U) ||
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d002      	beq.n	80097e4 <XMC_UART_CH_Stop+0x30>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:196
      ((XMC_UART_CH_GetStatusFlag(channel) & XMC_UART_CH_STATUS_FLAG_TRANSFER_STATUS_BUSY) != 0))
  {
    status = XMC_UART_CH_STATUS_BUSY;
 80097de:	2302      	movs	r3, #2
 80097e0:	73fb      	strb	r3, [r7, #15]
 80097e2:	e003      	b.n	80097ec <XMC_UART_CH_Stop+0x38>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:201
  }
  else
  {
    /* USIC channel in IDLE mode */
    XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_IDLE);
 80097e4:	2100      	movs	r1, #0
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f7ff fefc 	bl	80095e4 <XMC_USIC_CH_SetMode>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:203
  }
  return status;
 80097ec:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:204
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop

080097f8 <XMC_UART_CH_EnableEvent>:
XMC_UART_CH_EnableEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:207

void XMC_UART_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:208
  channel->CCR |= (event&0x1fc00U);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 800980c:	431a      	orrs	r2, r3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	641a      	str	r2, [r3, #64]	; 0x40
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:209
  channel->PCR_ASCMode |= (event&0xf8U);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800981c:	431a      	orrs	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	63da      	str	r2, [r3, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:210
}
 8009822:	bf00      	nop
 8009824:	370c      	adds	r7, #12
 8009826:	46bd      	mov	sp, r7
 8009828:	bc80      	pop	{r7}
 800982a:	4770      	bx	lr

0800982c <XMC_UART_CH_DisableEvent>:
XMC_UART_CH_DisableEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:213

void XMC_UART_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:214
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 8009840:	43db      	mvns	r3, r3
 8009842:	401a      	ands	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	641a      	str	r2, [r3, #64]	; 0x40
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:215
  channel->PCR_ASCMode &= (uint32_t)~(event&0xf8U);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8009852:	43db      	mvns	r3, r3
 8009854:	401a      	ands	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	63da      	str	r2, [r3, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_uart.c:216
}
 800985a:	bf00      	nop
 800985c:	370c      	adds	r7, #12
 800985e:	46bd      	mov	sp, r7
 8009860:	bc80      	pop	{r7}
 8009862:	4770      	bx	lr

08009864 <XMC_USBD_lDeviceActive>:
XMC_USBD_lDeviceActive():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:168
 * Therefore the endpoint inInUse flag are checked and if one endpoint is in use, 1 is returned,
 * else 0 is returned.
 * @return 1 if an endpoint is active else 0
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:170
  uint8_t i;
  uint8_t result = 0U;
 800986c:	2300      	movs	r3, #0
 800986e:	73bb      	strb	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:171
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8009870:	2300      	movs	r3, #0
 8009872:	73fb      	strb	r3, [r7, #15]
 8009874:	e01c      	b.n	80098b0 <XMC_USBD_lDeviceActive+0x4c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:173
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8009876:	7bfb      	ldrb	r3, [r7, #15]
 8009878:	4a13      	ldr	r2, [pc, #76]	; (80098c8 <XMC_USBD_lDeviceActive+0x64>)
 800987a:	2134      	movs	r1, #52	; 0x34
 800987c:	fb01 f303 	mul.w	r3, r1, r3
 8009880:	4413      	add	r3, r2
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b00      	cmp	r3, #0
 800988c:	d10b      	bne.n	80098a6 <XMC_USBD_lDeviceActive+0x42>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:173 (discriminator 1)
 800988e:	7bfb      	ldrb	r3, [r7, #15]
 8009890:	4a0d      	ldr	r2, [pc, #52]	; (80098c8 <XMC_USBD_lDeviceActive+0x64>)
 8009892:	2134      	movs	r1, #52	; 0x34
 8009894:	fb01 f303 	mul.w	r3, r1, r3
 8009898:	4413      	add	r3, r2
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d001      	beq.n	80098aa <XMC_USBD_lDeviceActive+0x46>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:175
    {
      result = 1U;
 80098a6:	2301      	movs	r3, #1
 80098a8:	73bb      	strb	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:171 (discriminator 2)
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 80098aa:	7bfb      	ldrb	r3, [r7, #15]
 80098ac:	3301      	adds	r3, #1
 80098ae:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:171 (discriminator 1)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	7b1b      	ldrb	r3, [r3, #12]
 80098b4:	7bfa      	ldrb	r2, [r7, #15]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d3dd      	bcc.n	8009876 <XMC_USBD_lDeviceActive+0x12>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:178
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
    {
      result = 1U;
    }
  }
  return result;
 80098ba:	7bbb      	ldrb	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:179
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3714      	adds	r7, #20
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bc80      	pop	{r7}
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	200001b0 	.word	0x200001b0

080098cc <XMC_USBD_lReadFifo>:
XMC_USBD_lReadFifo():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:193
 *
 * @arg ep_num the endpoint to read for
 * @arg byte_count the byte count to read
 */
static void XMC_USBD_lReadFifo(const uint32_t ep_num,const uint32_t byte_count) 
{
 80098cc:	b480      	push	{r7}
 80098ce:	b08b      	sub	sp, #44	; 0x2c
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:194
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num];
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2234      	movs	r2, #52	; 0x34
 80098da:	fb02 f303 	mul.w	r3, r2, r3
 80098de:	4a34      	ldr	r2, [pc, #208]	; (80099b0 <XMC_USBD_lReadFifo+0xe4>)
 80098e0:	4413      	add	r3, r2
 80098e2:	623b      	str	r3, [r7, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:198
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 80098e4:	4b32      	ldr	r3, [pc, #200]	; (80099b0 <XMC_USBD_lReadFifo+0xe4>)
 80098e6:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80098ea:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:201
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 80098ec:	4a30      	ldr	r2, [pc, #192]	; (80099b0 <XMC_USBD_lReadFifo+0xe4>)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	3370      	adds	r3, #112	; 0x70
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	4413      	add	r3, r2
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:202
  word_count = (byte_count >> 2U );
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	089b      	lsrs	r3, r3, #2
 8009900:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:203
  temp_word_count = (word_count << 2U);
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:205
  /* Check if ep is enabled and has buffer */
  if (!data.b.usbactep)
 8009908:	7b7b      	ldrb	r3, [r7, #13]
 800990a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800990e:	b2db      	uxtb	r3, r3
 8009910:	2b00      	cmp	r3, #0
 8009912:	d047      	beq.n	80099a4 <XMC_USBD_lReadFifo+0xd8>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:209
  {
    /*Do Nothing*/
  }
  else if (ep->xferBuffer == NULL)
 8009914:	6a3b      	ldr	r3, [r7, #32]
 8009916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009918:	2b00      	cmp	r3, #0
 800991a:	d043      	beq.n	80099a4 <XMC_USBD_lReadFifo+0xd8>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:216
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 800991c:	2300      	movs	r3, #0
 800991e:	627b      	str	r3, [r7, #36]	; 0x24
 8009920:	e00a      	b.n	8009938 <XMC_USBD_lReadFifo+0x6c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:218 (discriminator 3)
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
 8009922:	6a3b      	ldr	r3, [r7, #32]
 8009924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	4413      	add	r3, r2
 800992c:	69fa      	ldr	r2, [r7, #28]
 800992e:	6812      	ldr	r2, [r2, #0]
 8009930:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:216 (discriminator 3)
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 8009932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009934:	3301      	adds	r3, #1
 8009936:	627b      	str	r3, [r7, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:216 (discriminator 1)
 8009938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	429a      	cmp	r2, r3
 800993e:	d3f0      	bcc.n	8009922 <XMC_USBD_lReadFifo+0x56>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:221
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
 8009940:	683a      	ldr	r2, [r7, #0]
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	429a      	cmp	r2, r3
 8009946:	d021      	beq.n	800998c <XMC_USBD_lReadFifo+0xc0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:223
    {
      temp_data = *fifo;
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:224
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 800994e:	2300      	movs	r3, #0
 8009950:	627b      	str	r3, [r7, #36]	; 0x24
 8009952:	e015      	b.n	8009980 <XMC_USBD_lReadFifo+0xb4>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:226 (discriminator 3)
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 8009954:	6a3b      	ldr	r3, [r7, #32]
 8009956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	0099      	lsls	r1, r3, #2
 800995c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995e:	440b      	add	r3, r1
 8009960:	4413      	add	r3, r2
 8009962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009964:	00d2      	lsls	r2, r2, #3
 8009966:	21ff      	movs	r1, #255	; 0xff
 8009968:	4091      	lsls	r1, r2
 800996a:	693a      	ldr	r2, [r7, #16]
 800996c:	4011      	ands	r1, r2
 800996e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009970:	00d2      	lsls	r2, r2, #3
 8009972:	fa21 f202 	lsr.w	r2, r1, r2
 8009976:	b2d2      	uxtb	r2, r2
 8009978:	701a      	strb	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:224 (discriminator 3)
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
    {
      temp_data = *fifo;
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 800997a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997c:	3301      	adds	r3, #1
 800997e:	627b      	str	r3, [r7, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:224 (discriminator 1)
 8009980:	697a      	ldr	r2, [r7, #20]
 8009982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009984:	441a      	add	r2, r3
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	429a      	cmp	r2, r3
 800998a:	d3e3      	bcc.n	8009954 <XMC_USBD_lReadFifo+0x88>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:231
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 800998c:	6a3b      	ldr	r3, [r7, #32]
 800998e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	441a      	add	r2, r3
 8009994:	6a3b      	ldr	r3, [r7, #32]
 8009996:	62da      	str	r2, [r3, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:232
    ep->xferBuffer += byte_count;
 8009998:	6a3b      	ldr	r3, [r7, #32]
 800999a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	441a      	add	r2, r3
 80099a0:	6a3b      	ldr	r3, [r7, #32]
 80099a2:	625a      	str	r2, [r3, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:234
  }
}
 80099a4:	bf00      	nop
 80099a6:	372c      	adds	r7, #44	; 0x2c
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bc80      	pop	{r7}
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	200001b0 	.word	0x200001b0

080099b4 <XMC_USBD_lWriteFifo>:
XMC_USBD_lWriteFifo():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:246
 *
 * @arg[in] ep the endpoint to use
 * @return the number of bytes written to the fifo
 */
static uint32_t XMC_USBD_lWriteFifo(XMC_USBD_EP_t *const ep) 
{
 80099b4:	b480      	push	{r7}
 80099b6:	b089      	sub	sp, #36	; 0x24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:253
  volatile uint32_t *fifo;
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	4a23      	ldr	r2, [pc, #140]	; (8009a54 <XMC_USBD_lWriteFifo+0xa0>)
 80099c8:	3378      	adds	r3, #120	; 0x78
 80099ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099ce:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:254
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	4a1e      	ldr	r2, [pc, #120]	; (8009a54 <XMC_USBD_lWriteFifo+0xa0>)
 80099dc:	336a      	adds	r3, #106	; 0x6a
 80099de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099e2:	699b      	ldr	r3, [r3, #24]
 80099e4:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:256
  /* calculate the length and the amount of dwords to copy based on the fifo status */
  byte_count = ep->xferLength - ep->xferCount;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ee:	1ad3      	subs	r3, r2, r3
 80099f0:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:257
  if (!byte_count)
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d102      	bne.n	80099fe <XMC_USBD_lWriteFifo+0x4a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:259
  {
    result = 0U;
 80099f8:	2300      	movs	r3, #0
 80099fa:	617b      	str	r3, [r7, #20]
 80099fc:	e023      	b.n	8009a46 <XMC_USBD_lWriteFifo+0x92>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:264
  }
  else
  {
    /* add the unaligned bytes to the word count to compare with the fifo space */
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	3303      	adds	r3, #3
 8009a02:	089b      	lsrs	r3, r3, #2
 8009a04:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:265
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 8009a06:	893b      	ldrh	r3, [r7, #8]
 8009a08:	461a      	mov	r2, r3
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d204      	bcs.n	8009a1a <XMC_USBD_lWriteFifo+0x66>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:267
    {
      word_count = (uint32_t)freeSpace.b.txfspcavail;
 8009a10:	893b      	ldrh	r3, [r7, #8]
 8009a12:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:268
      byte_count = (uint32_t)word_count << (uint32_t)2U;
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:272
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	613b      	str	r3, [r7, #16]
 8009a1e:	e00c      	b.n	8009a3a <XMC_USBD_lWriteFifo+0x86>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:274 (discriminator 3)
    {
      *fifo = *(uint32_t*)ep->xferBuffer;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:275 (discriminator 3)
      i++;
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:272 (discriminator 3)
      word_count = (uint32_t)freeSpace.b.txfspcavail;
      byte_count = (uint32_t)word_count << (uint32_t)2U;
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a34:	1d1a      	adds	r2, r3, #4
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	625a      	str	r2, [r3, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:272 (discriminator 1)
 8009a3a:	693a      	ldr	r2, [r7, #16]
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d3ee      	bcc.n	8009a20 <XMC_USBD_lWriteFifo+0x6c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:277
    {
      *fifo = *(uint32_t*)ep->xferBuffer;
      i++;
    }
    result=byte_count;
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:279
  }
  return result;
 8009a46:	697b      	ldr	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:280
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3724      	adds	r7, #36	; 0x24
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bc80      	pop	{r7}
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	200001b0 	.word	0x200001b0

08009a58 <XMC_USBD_lFlushTXFifo>:
XMC_USBD_lFlushTXFifo():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:290
 * @param[in] fifo_num Fifo number to flush
 *
 * @note Use 0x10 as parameter to flush all tx fifos.
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	4603      	mov	r3, r0
 8009a60:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:293
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 8009a62:	2300      	movs	r3, #0
 8009a64:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:295
  /*flush fifo */
  data.b.txfflsh = 1U;
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	f043 0320 	orr.w	r3, r3, #32
 8009a6c:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:296
  data.b.txfnum = fifo_num;
 8009a6e:	79fb      	ldrb	r3, [r7, #7]
 8009a70:	f003 031f 	and.w	r3, r3, #31
 8009a74:	b2da      	uxtb	r2, r3
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	f362 138a 	bfi	r3, r2, #6, #5
 8009a7c:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:297
  xmc_device.global_register->grstctl = data.d32;
 8009a7e:	4b14      	ldr	r3, [pc, #80]	; (8009ad0 <XMC_USBD_lFlushTXFifo+0x78>)
 8009a80:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8009a84:	68ba      	ldr	r2, [r7, #8]
 8009a86:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:298
  for (count = 0U;count < 1000U; count++){}
 8009a88:	2300      	movs	r3, #0
 8009a8a:	60fb      	str	r3, [r7, #12]
 8009a8c:	e002      	b.n	8009a94 <XMC_USBD_lFlushTXFifo+0x3c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:298 (discriminator 3)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	3301      	adds	r3, #1
 8009a92:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:298 (discriminator 1)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a9a:	d3f8      	bcc.n	8009a8e <XMC_USBD_lFlushTXFifo+0x36>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:301 (discriminator 1)
  do
  {
   data.d32 = xmc_device.global_register->grstctl;
 8009a9c:	4b0c      	ldr	r3, [pc, #48]	; (8009ad0 <XMC_USBD_lFlushTXFifo+0x78>)
 8009a9e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:302 (discriminator 1)
  } while (data.b.txfflsh);
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1f4      	bne.n	8009a9c <XMC_USBD_lFlushTXFifo+0x44>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:303
    count = 0U;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:304
  while (count++ < 1000U)
 8009ab6:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:304 (discriminator 1)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	1c5a      	adds	r2, r3, #1
 8009abc:	60fa      	str	r2, [r7, #12]
 8009abe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ac2:	d3f9      	bcc.n	8009ab8 <XMC_USBD_lFlushTXFifo+0x60>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:308
  {
    /* wait 3 phy clocks */
  }
}
 8009ac4:	bf00      	nop
 8009ac6:	3714      	adds	r7, #20
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bc80      	pop	{r7}
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	200001b0 	.word	0x200001b0

08009ad4 <XMC_USBD_lFlushRXFifo>:
XMC_USBD_lFlushRXFifo():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:314

/**
 * @brief Flush the rx fifo
 */
static void XMC_USBD_lFlushRXFifo(void) 
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:318
  volatile grstctl_t data;  
  uint32_t count;
	
	data.d32 = 0U;
 8009ada:	2300      	movs	r3, #0
 8009adc:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:319
  data.b.rxfflsh = 1U;
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	f043 0310 	orr.w	r3, r3, #16
 8009ae4:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:321
  /* flush FIFO */
  xmc_device.global_register->grstctl = data.d32;
 8009ae6:	4b14      	ldr	r3, [pc, #80]	; (8009b38 <XMC_USBD_lFlushRXFifo+0x64>)
 8009ae8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8009aec:	683a      	ldr	r2, [r7, #0]
 8009aee:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:324
  do
  {
    for (count = 0U; count < 1000U; count++){}
 8009af0:	2300      	movs	r3, #0
 8009af2:	607b      	str	r3, [r7, #4]
 8009af4:	e002      	b.n	8009afc <XMC_USBD_lFlushRXFifo+0x28>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:324 (discriminator 3)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	3301      	adds	r3, #1
 8009afa:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:324 (discriminator 1)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b02:	d3f8      	bcc.n	8009af6 <XMC_USBD_lFlushRXFifo+0x22>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:325
    data.d32 = xmc_device.global_register->grstctl;
 8009b04:	4b0c      	ldr	r3, [pc, #48]	; (8009b38 <XMC_USBD_lFlushRXFifo+0x64>)
 8009b06:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:326
  } while (data.b.rxfflsh);
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1ea      	bne.n	8009af0 <XMC_USBD_lFlushRXFifo+0x1c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:327
  count = 0U;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:328
  while (count++ < 1000U)
 8009b1e:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:328 (discriminator 1)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	1c5a      	adds	r2, r3, #1
 8009b24:	607a      	str	r2, [r7, #4]
 8009b26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b2a:	d3f9      	bcc.n	8009b20 <XMC_USBD_lFlushRXFifo+0x4c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:332
  {
    /* wait 3 phy clocks */
  }
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bc80      	pop	{r7}
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	200001b0 	.word	0x200001b0

08009b3c <XMC_USBD_lAssignTXFifo>:
XMC_USBD_lAssignTXFifo():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:346
 * A free tx fifo will be searched and the number will be returned.
 *
 * @return Fifo number for a free fifo
 */
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:347
  uint16_t mask = 1U;
 8009b42:	2301      	movs	r3, #1
 8009b44:	80fb      	strh	r3, [r7, #6]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:348
  uint8_t i = 0U;
 8009b46:	2300      	movs	r3, #0
 8009b48:	717b      	strb	r3, [r7, #5]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:349
  uint8_t result = 0U;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	713b      	strb	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:350
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8009b4e:	e005      	b.n	8009b5c <XMC_USBD_lAssignTXFifo+0x20>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:352
  {
    mask = (uint16_t)(mask << 1U);
 8009b50:	88fb      	ldrh	r3, [r7, #6]
 8009b52:	005b      	lsls	r3, r3, #1
 8009b54:	80fb      	strh	r3, [r7, #6]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:353
    i++;
 8009b56:	797b      	ldrb	r3, [r7, #5]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	717b      	strb	r3, [r7, #5]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:350
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8009b5c:	797b      	ldrb	r3, [r7, #5]
 8009b5e:	2b06      	cmp	r3, #6
 8009b60:	d807      	bhi.n	8009b72 <XMC_USBD_lAssignTXFifo+0x36>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:350 (discriminator 1)
 8009b62:	4b10      	ldr	r3, [pc, #64]	; (8009ba4 <XMC_USBD_lAssignTXFifo+0x68>)
 8009b64:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8009b68:	88fb      	ldrh	r3, [r7, #6]
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d1ee      	bne.n	8009b50 <XMC_USBD_lAssignTXFifo+0x14>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:355
  {
    mask = (uint16_t)(mask << 1U);
    i++;
  }
  if ((xmc_device.txfifomsk & mask) == 0U)
 8009b72:	4b0c      	ldr	r3, [pc, #48]	; (8009ba4 <XMC_USBD_lAssignTXFifo+0x68>)
 8009b74:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8009b78:	88fb      	ldrh	r3, [r7, #6]
 8009b7a:	4013      	ands	r3, r2
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d10a      	bne.n	8009b98 <XMC_USBD_lAssignTXFifo+0x5c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:357
  {
    xmc_device.txfifomsk |= mask;
 8009b82:	4b08      	ldr	r3, [pc, #32]	; (8009ba4 <XMC_USBD_lAssignTXFifo+0x68>)
 8009b84:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8009b88:	88fb      	ldrh	r3, [r7, #6]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	4b05      	ldr	r3, [pc, #20]	; (8009ba4 <XMC_USBD_lAssignTXFifo+0x68>)
 8009b90:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:358
    result=i;
 8009b94:	797b      	ldrb	r3, [r7, #5]
 8009b96:	713b      	strb	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:360
  }
  return result;
 8009b98:	793b      	ldrb	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:361
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	370c      	adds	r7, #12
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bc80      	pop	{r7}
 8009ba2:	4770      	bx	lr
 8009ba4:	200001b0 	.word	0x200001b0

08009ba8 <XMC_USBD_lUnassignFifo>:
XMC_USBD_lUnassignFifo():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:370
 *
 * Mark an used tx fifo as free.
 * @param[in] fifo_nr Fifo number to free
 */
static void XMC_USBD_lUnassignFifo(const uint8_t fifo_nr) 
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	4603      	mov	r3, r0
 8009bb0:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:371
  xmc_device.txfifomsk = (uint16_t)((uint32_t)xmc_device.txfifomsk & (uint32_t)(~((uint32_t)((uint32_t)1U << fifo_nr))));
 8009bb2:	4b0a      	ldr	r3, [pc, #40]	; (8009bdc <XMC_USBD_lUnassignFifo+0x34>)
 8009bb4:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8009bb8:	79fb      	ldrb	r3, [r7, #7]
 8009bba:	2101      	movs	r1, #1
 8009bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	43db      	mvns	r3, r3
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	b29a      	uxth	r2, r3
 8009bca:	4b04      	ldr	r3, [pc, #16]	; (8009bdc <XMC_USBD_lUnassignFifo+0x34>)
 8009bcc:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:372
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bc80      	pop	{r7}
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	200001b0 	.word	0x200001b0

08009be0 <XMC_USBD_lStartReadXfer>:
XMC_USBD_lStartReadXfer():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:386
 * that the transfer values are reasonable (e.g. buffer size is not exceeded).
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartReadXfer(XMC_USBD_EP_t *const ep) 
{
 8009be0:	b480      	push	{r7}
 8009be2:	b087      	sub	sp, #28
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:390
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
 8009be8:	2300      	movs	r3, #0
 8009bea:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:391
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf4:	1ad3      	subs	r3, r2, r3
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	6892      	ldr	r2, [r2, #8]
 8009bfa:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d909      	bls.n	8009c16 <XMC_USBD_lStartReadXfer+0x36>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:393
  {
    ep->xferLength += ep->maxTransferSize;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	6892      	ldr	r2, [r2, #8]
 8009c0a:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8009c0e:	441a      	add	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	629a      	str	r2, [r3, #40]	; 0x28
 8009c14:	e003      	b.n	8009c1e <XMC_USBD_lStartReadXfer+0x3e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:397
  }
  else
  {
    ep->xferLength = ep->xferTotal;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	629a      	str	r2, [r3, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:399
  }
  if (ep->address_u.address_st.number == 0U)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	f003 030f 	and.w	r3, r3, #15
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d119      	bne.n	8009c60 <XMC_USBD_lStartReadXfer+0x80>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:403
  {
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
 8009c2c:	f107 0310 	add.w	r3, r7, #16
 8009c30:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:404
    ep0_data->b.pktcnt = 0x1U;
 8009c32:	697a      	ldr	r2, [r7, #20]
 8009c34:	7893      	ldrb	r3, [r2, #2]
 8009c36:	2101      	movs	r1, #1
 8009c38:	f361 03c4 	bfi	r3, r1, #3, #2
 8009c3c:	7093      	strb	r3, [r2, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:405
    ep0_data->b.supcnt = 0x3U;
 8009c3e:	697a      	ldr	r2, [r7, #20]
 8009c40:	78d3      	ldrb	r3, [r2, #3]
 8009c42:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009c46:	70d3      	strb	r3, [r2, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:406
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c52:	b2d9      	uxtb	r1, r3
 8009c54:	697a      	ldr	r2, [r7, #20]
 8009c56:	7813      	ldrb	r3, [r2, #0]
 8009c58:	f361 0306 	bfi	r3, r1, #0, #7
 8009c5c:	7013      	strb	r3, [r2, #0]
 8009c5e:	e033      	b.n	8009cc8 <XMC_USBD_lStartReadXfer+0xe8>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:411
  }
  else
  {
    /* If requested length is zero, just receive one zero length packet */
    if (ep->xferLength == 0U)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d109      	bne.n	8009c7c <XMC_USBD_lStartReadXfer+0x9c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:413
    {
      data.b.xfersize = 0U;
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	f36f 0312 	bfc	r3, #0, #19
 8009c6e:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:414
      data.b.pktcnt = 1U;
 8009c70:	8a7b      	ldrh	r3, [r7, #18]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f362 03cc 	bfi	r3, r2, #3, #10
 8009c78:	827b      	strh	r3, [r7, #18]
 8009c7a:	e025      	b.n	8009cc8 <XMC_USBD_lStartReadXfer+0xe8>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:419
    }
    else
    {
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c84:	1ad3      	subs	r3, r2, r3
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	6852      	ldr	r2, [r2, #4]
 8009c8a:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8009c8e:	b2d2      	uxtb	r2, r2
 8009c90:	4413      	add	r3, r2
 8009c92:	3b01      	subs	r3, #1
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	6852      	ldr	r2, [r2, #4]
 8009c98:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8009c9c:	b2d2      	uxtb	r2, r2
 8009c9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ca8:	b29a      	uxth	r2, r3
 8009caa:	8a7b      	ldrh	r3, [r7, #18]
 8009cac:	f362 03cc 	bfi	r3, r2, #3, #10
 8009cb0:	827b      	strh	r3, [r7, #18]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:420
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cba:	1ad3      	subs	r3, r2, r3
 8009cbc:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	f362 0312 	bfi	r3, r2, #0, #19
 8009cc6:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:423
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8009cc8:	4b21      	ldr	r3, [pc, #132]	; (8009d50 <XMC_USBD_lStartReadXfer+0x170>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	7b5b      	ldrb	r3, [r3, #13]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d10c      	bne.n	8009cec <XMC_USBD_lStartReadXfer+0x10c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:426
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	4a1d      	ldr	r2, [pc, #116]	; (8009d54 <XMC_USBD_lStartReadXfer+0x174>)
 8009cde:	3370      	adds	r3, #112	; 0x70
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	4413      	add	r3, r2
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009cea:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:429
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	4a17      	ldr	r2, [pc, #92]	; (8009d54 <XMC_USBD_lStartReadXfer+0x174>)
 8009cf8:	3370      	adds	r3, #112	; 0x70
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	4413      	add	r3, r2
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	693a      	ldr	r2, [r7, #16]
 8009d02:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:431
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	4a11      	ldr	r2, [pc, #68]	; (8009d54 <XMC_USBD_lStartReadXfer+0x174>)
 8009d10:	3370      	adds	r3, #112	; 0x70
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4413      	add	r3, r2
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:432
  epctl.b.cnak = 1U;
 8009d1c:	7bfb      	ldrb	r3, [r7, #15]
 8009d1e:	f043 0304 	orr.w	r3, r3, #4
 8009d22:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:433
  epctl.b.epena = 1U;
 8009d24:	7bfb      	ldrb	r3, [r7, #15]
 8009d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d2a:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:434
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	4a07      	ldr	r2, [pc, #28]	; (8009d54 <XMC_USBD_lStartReadXfer+0x174>)
 8009d38:	3370      	adds	r3, #112	; 0x70
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	4413      	add	r3, r2
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:435
}
 8009d44:	bf00      	nop
 8009d46:	371c      	adds	r7, #28
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bc80      	pop	{r7}
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	200001ac 	.word	0x200001ac
 8009d54:	200001b0 	.word	0x200001b0

08009d58 <XMC_USBD_lStartWriteXfer>:
XMC_USBD_lStartWriteXfer():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:446
 * to start a new in transfer
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartWriteXfer(XMC_USBD_EP_t *const ep) 
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:450
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
 8009d60:	2300      	movs	r3, #0
 8009d62:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:451
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	4a5d      	ldr	r2, [pc, #372]	; (8009ee4 <XMC_USBD_lStartWriteXfer+0x18c>)
 8009d70:	336a      	adds	r3, #106	; 0x6a
 8009d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:453

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	6892      	ldr	r2, [r2, #8]
 8009d88:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d204      	bcs.n	8009d9a <XMC_USBD_lStartWriteXfer+0x42>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:455
  {
    ep->xferLength = ep->xferTotal;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	629a      	str	r2, [r3, #40]	; 0x28
 8009d98:	e008      	b.n	8009dac <XMC_USBD_lStartWriteXfer+0x54>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:459
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	6892      	ldr	r2, [r2, #8]
 8009da2:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8009da6:	441a      	add	r2, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	629a      	str	r2, [r3, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:461
  }
  if (ep->xferLength == 0U)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d109      	bne.n	8009dc8 <XMC_USBD_lStartWriteXfer+0x70>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:463
  {
    size.b.xfersize = 0U;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f36f 0312 	bfc	r3, #0, #19
 8009dba:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:464
    size.b.pktcnt = 1U;
 8009dbc:	89fb      	ldrh	r3, [r7, #14]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f362 03cc 	bfi	r3, r2, #3, #10
 8009dc4:	81fb      	strh	r3, [r7, #14]
 8009dc6:	e06a      	b.n	8009e9e <XMC_USBD_lStartWriteXfer+0x146>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:468
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	f003 030f 	and.w	r3, r3, #15
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d110      	bne.n	8009df8 <XMC_USBD_lStartWriteXfer+0xa0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:470
    {
      size.b.pktcnt = 1U;
 8009dd6:	89fb      	ldrh	r3, [r7, #14]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f362 03cc 	bfi	r3, r2, #3, #10
 8009dde:	81fb      	strh	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:472
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f362 0312 	bfi	r3, r2, #0, #19
 8009df4:	60fb      	str	r3, [r7, #12]
 8009df6:	e02b      	b.n	8009e50 <XMC_USBD_lStartWriteXfer+0xf8>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:476
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e00:	1ad3      	subs	r3, r2, r3
 8009e02:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f362 0312 	bfi	r3, r2, #0, #19
 8009e0c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:477
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e12:	b29a      	uxth	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	461a      	mov	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	f3c3 23c6 	ubfx	r3, r3, #11, #7
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	4413      	add	r3, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:478
    		 ep->maxPacketSize);
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	6852      	ldr	r2, [r2, #4]
 8009e36:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8009e3a:	b2d2      	uxtb	r2, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:477
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8009e3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e46:	b29a      	uxth	r2, r3
 8009e48:	89fb      	ldrh	r3, [r7, #14]
 8009e4a:	f362 03cc 	bfi	r3, r2, #3, #10
 8009e4e:	81fb      	strh	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:480
    		 ep->maxPacketSize);
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8009e50:	4b25      	ldr	r3, [pc, #148]	; (8009ee8 <XMC_USBD_lStartWriteXfer+0x190>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	7b5b      	ldrb	r3, [r3, #13]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d10b      	bne.n	8009e72 <XMC_USBD_lStartWriteXfer+0x11a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:483
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	4a1f      	ldr	r2, [pc, #124]	; (8009ee4 <XMC_USBD_lStartWriteXfer+0x18c>)
 8009e66:	336a      	adds	r3, #106	; 0x6a
 8009e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009e70:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:485
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8009e72:	4b1d      	ldr	r3, [pc, #116]	; (8009ee8 <XMC_USBD_lStartWriteXfer+0x190>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	7b5b      	ldrb	r3, [r3, #13]
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d110      	bne.n	8009e9e <XMC_USBD_lStartWriteXfer+0x146>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:488
    {
      /* enable fifo empty interrupt */
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8009e7c:	4b19      	ldr	r3, [pc, #100]	; (8009ee4 <XMC_USBD_lStartWriteXfer+0x18c>)
 8009e7e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8009e82:	4a18      	ldr	r2, [pc, #96]	; (8009ee4 <XMC_USBD_lStartWriteXfer+0x18c>)
 8009e84:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8009e88:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	7812      	ldrb	r2, [r2, #0]
 8009e8e:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8009e92:	b2d2      	uxtb	r2, r2
 8009e94:	4610      	mov	r0, r2
 8009e96:	2201      	movs	r2, #1
 8009e98:	4082      	lsls	r2, r0
 8009e9a:	430a      	orrs	r2, r1
 8009e9c:	635a      	str	r2, [r3, #52]	; 0x34
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:493
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	4a0e      	ldr	r2, [pc, #56]	; (8009ee4 <XMC_USBD_lStartWriteXfer+0x18c>)
 8009eaa:	336a      	adds	r3, #106	; 0x6a
 8009eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:494
  ctl.b.epena = 1U;
 8009eb4:	7afb      	ldrb	r3, [r7, #11]
 8009eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eba:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:495
  ctl.b.cnak = 1U;
 8009ebc:	7afb      	ldrb	r3, [r7, #11]
 8009ebe:	f043 0304 	orr.w	r3, r3, #4
 8009ec2:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:496
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	4a05      	ldr	r2, [pc, #20]	; (8009ee4 <XMC_USBD_lStartWriteXfer+0x18c>)
 8009ed0:	336a      	adds	r3, #106	; 0x6a
 8009ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ed6:	68ba      	ldr	r2, [r7, #8]
 8009ed8:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:497
}
 8009eda:	bf00      	nop
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bc80      	pop	{r7}
 8009ee2:	4770      	bx	lr
 8009ee4:	200001b0 	.word	0x200001b0
 8009ee8:	200001ac 	.word	0x200001ac

08009eec <XMC_USBD_lHandleUSBReset>:
XMC_USBD_lHandleUSBReset():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:508
 * When ever the host sets the bus into reset condition the usb otg_core generates
 * an interrupt, which is handled by this function. It resets the complete otg_core
 * into the default state.
 */
static void XMC_USBD_lHandleUSBReset(const XMC_USBD_t *const obj) 
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b088      	sub	sp, #32
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:517
  fifosize_data_t gnptxfsiz;
  daint_data_t daint;
  dcfg_data_t dcfg;
	
  /* Clear the Remote Wakeup Signaling */
  dctl.d32 = xmc_device.device_register->dctl;
 8009ef4:	4b50      	ldr	r3, [pc, #320]	; (800a038 <XMC_USBD_lHandleUSBReset+0x14c>)
 8009ef6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:518
  dctl.b.rmtwkupsig = 1U;
 8009efe:	7d3b      	ldrb	r3, [r7, #20]
 8009f00:	f043 0301 	orr.w	r3, r3, #1
 8009f04:	753b      	strb	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:519
  xmc_device.device_register->dctl = dctl.d32;
 8009f06:	4b4c      	ldr	r3, [pc, #304]	; (800a038 <XMC_USBD_lHandleUSBReset+0x14c>)
 8009f08:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8009f0c:	697a      	ldr	r2, [r7, #20]
 8009f0e:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:522

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 8009f10:	2300      	movs	r3, #0
 8009f12:	61fb      	str	r3, [r7, #28]
 8009f14:	e01a      	b.n	8009f4c <XMC_USBD_lHandleUSBReset+0x60>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:524 (discriminator 3)
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8009f16:	4a48      	ldr	r2, [pc, #288]	; (800a038 <XMC_USBD_lHandleUSBReset+0x14c>)
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	3370      	adds	r3, #112	; 0x70
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	4413      	add	r3, r2
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:525 (discriminator 3)
		epctl.b.snak = 1U;
 8009f26:	7efb      	ldrb	r3, [r7, #27]
 8009f28:	f043 0308 	orr.w	r3, r3, #8
 8009f2c:	76fb      	strb	r3, [r7, #27]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:526 (discriminator 3)
		epctl.b.stall = 0U;
 8009f2e:	7ebb      	ldrb	r3, [r7, #26]
 8009f30:	f36f 1345 	bfc	r3, #5, #1
 8009f34:	76bb      	strb	r3, [r7, #26]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:527 (discriminator 3)
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8009f36:	4a40      	ldr	r2, [pc, #256]	; (800a038 <XMC_USBD_lHandleUSBReset+0x14c>)
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	3370      	adds	r3, #112	; 0x70
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	69ba      	ldr	r2, [r7, #24]
 8009f44:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:522 (discriminator 3)
  dctl.d32 = xmc_device.device_register->dctl;
  dctl.b.rmtwkupsig = 1U;
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:522 (discriminator 1)
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	2b06      	cmp	r3, #6
 8009f50:	d9e1      	bls.n	8009f16 <XMC_USBD_lHandleUSBReset+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:532
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
  }

  /* Configure fifos */
  /* Calculate the size of the rx fifo */
  xmc_device.global_register->grxfsiz = 64U;
 8009f52:	4b39      	ldr	r3, [pc, #228]	; (800a038 <XMC_USBD_lHandleUSBReset+0x14c>)
 8009f54:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8009f58:	2240      	movs	r2, #64	; 0x40
 8009f5a:	625a      	str	r2, [r3, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:534
  /* Calculate the size of the tx fifo for ep 0 */  
  gnptxfsiz.d32 = 0U;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:535
  gnptxfsiz.b.depth = 16U;
 8009f60:	2310      	movs	r3, #16
 8009f62:	827b      	strh	r3, [r7, #18]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:536
  gnptxfsiz.b.startaddr = 64U;
 8009f64:	2340      	movs	r3, #64	; 0x40
 8009f66:	823b      	strh	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:537
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
 8009f68:	4b33      	ldr	r3, [pc, #204]	; (800a038 <XMC_USBD_lHandleUSBReset+0x14c>)
 8009f6a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8009f6e:	693a      	ldr	r2, [r7, #16]
 8009f70:	629a      	str	r2, [r3, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:539
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8009f72:	2301      	movs	r3, #1
 8009f74:	61fb      	str	r3, [r7, #28]
 8009f76:	e011      	b.n	8009f9c <XMC_USBD_lHandleUSBReset+0xb0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:541 (discriminator 3)
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8009f78:	4b2f      	ldr	r3, [pc, #188]	; (800a038 <XMC_USBD_lHandleUSBReset+0x14c>)
 8009f7a:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	3b01      	subs	r3, #1
 8009f82:	69fa      	ldr	r2, [r7, #28]
 8009f84:	3204      	adds	r2, #4
 8009f86:	0192      	lsls	r2, r2, #6
 8009f88:	0892      	lsrs	r2, r2, #2
 8009f8a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009f8e:	3340      	adds	r3, #64	; 0x40
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	440b      	add	r3, r1
 8009f94:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:539 (discriminator 3)
  gnptxfsiz.d32 = 0U;
  gnptxfsiz.b.depth = 16U;
  gnptxfsiz.b.startaddr = 64U;
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:539 (discriminator 1)
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	2b06      	cmp	r3, #6
 8009fa0:	d9ea      	bls.n	8009f78 <XMC_USBD_lHandleUSBReset+0x8c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:545
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
  }

  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo(0x10U); /* 0x10 == all fifos, see doc */
 8009fa2:	2010      	movs	r0, #16
 8009fa4:	f7ff fd58 	bl	8009a58 <XMC_USBD_lFlushTXFifo>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:546
  XMC_USBD_lFlushTXFifo(0x0U);
 8009fa8:	2000      	movs	r0, #0
 8009faa:	f7ff fd55 	bl	8009a58 <XMC_USBD_lFlushTXFifo>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:547
  XMC_USBD_lFlushRXFifo();
 8009fae:	f7ff fd91 	bl	8009ad4 <XMC_USBD_lFlushRXFifo>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:550
  /* Flush learning queue not needed due to fifo config */
  /* enable ep0 interrupts */  
  daint.d32 = 0U;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:551
  daint.b.inep0 = 1U;
 8009fb6:	7b3b      	ldrb	r3, [r7, #12]
 8009fb8:	f043 0301 	orr.w	r3, r3, #1
 8009fbc:	733b      	strb	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:552
  daint.b.outep0 = 1U;
 8009fbe:	7bbb      	ldrb	r3, [r7, #14]
 8009fc0:	f043 0301 	orr.w	r3, r3, #1
 8009fc4:	73bb      	strb	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:553
  xmc_device.device_register->daintmsk = daint.d32;
 8009fc6:	4b1c      	ldr	r3, [pc, #112]	; (800a038 <XMC_USBD_lHandleUSBReset+0x14c>)
 8009fc8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	61da      	str	r2, [r3, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:557

  /* enable endpoint interrupts */
  /* out ep interrupts */
  XMC_USBD_EnableEventOUTEP(((uint32_t)XMC_USBD_EVENT_OUT_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_OUT_EP_DISABLED |
 8009fd0:	200f      	movs	r0, #15
 8009fd2:	f000 fbf7 	bl	800a7c4 <XMC_USBD_EnableEventOUTEP>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:561
		  	  	  	  	  	  (uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP | (uint32_t)XMC_USBD_EVENT_OUT_EP_AHB_ERROR));

  /*in ep interrupts */
  XMC_USBD_EnableEventINEP(((uint32_t)XMC_USBD_EVENT_IN_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_IN_EP_DISABLED |
 8009fd6:	200f      	movs	r0, #15
 8009fd8:	f000 fc0c 	bl	800a7f4 <XMC_USBD_EnableEventINEP>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:566
		  (uint32_t)XMC_USBD_EVENT_IN_EP_AHB_ERROR | (uint32_t)XMC_USBD_EVENT_IN_EP_TIMEOUT));


  /* Clear device Address */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 8009fdc:	4b16      	ldr	r3, [pc, #88]	; (800a038 <XMC_USBD_lHandleUSBReset+0x14c>)
 8009fde:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:567
  dcfg.b.devaddr = 0U;
 8009fe6:	893b      	ldrh	r3, [r7, #8]
 8009fe8:	f36f 130a 	bfc	r3, #4, #7
 8009fec:	813b      	strh	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:568
  xmc_device.device_register->dcfg = dcfg.d32;
 8009fee:	4b12      	ldr	r3, [pc, #72]	; (800a038 <XMC_USBD_lHandleUSBReset+0x14c>)
 8009ff0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8009ff4:	68ba      	ldr	r2, [r7, #8]
 8009ff6:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:570

  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	7b5b      	ldrb	r3, [r3, #13]
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d104      	bne.n	800a00a <XMC_USBD_lHandleUSBReset+0x11e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:573
  {
    /* Clear Empty interrupt */
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
 800a000:	4b0d      	ldr	r3, [pc, #52]	; (800a038 <XMC_USBD_lHandleUSBReset+0x14c>)
 800a002:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800a006:	2200      	movs	r2, #0
 800a008:	635a      	str	r2, [r3, #52]	; 0x34
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:576
  }

  xmc_device.ep[0U].outInUse = 0U;
 800a00a:	4a0b      	ldr	r2, [pc, #44]	; (800a038 <XMC_USBD_lHandleUSBReset+0x14c>)
 800a00c:	6853      	ldr	r3, [r2, #4]
 800a00e:	f36f 1304 	bfc	r3, #4, #1
 800a012:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:577
  xmc_device.ep[0U].inInUse = 0U;
 800a014:	4a08      	ldr	r2, [pc, #32]	; (800a038 <XMC_USBD_lHandleUSBReset+0x14c>)
 800a016:	6853      	ldr	r3, [r2, #4]
 800a018:	f36f 03c3 	bfc	r3, #3, #1
 800a01c:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:579

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 800a01e:	4b06      	ldr	r3, [pc, #24]	; (800a038 <XMC_USBD_lHandleUSBReset+0x14c>)
 800a020:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a024:	2004      	movs	r0, #4
 800a026:	4798      	blx	r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:582

  /* clear reset intr */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_RESET);
 800a028:	2004      	movs	r0, #4
 800a02a:	f000 fb25 	bl	800a678 <XMC_USBD_ClearEvent>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:583
}
 800a02e:	bf00      	nop
 800a030:	3720      	adds	r7, #32
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	200001b0 	.word	0x200001b0

0800a03c <XMC_USBD_lHandleOTGInt>:
XMC_USBD_lHandleOTGInt():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:591
* @brief Handle OTG Interrupt
*
* It detects especially connect and disconnect events.
*/
static void XMC_USBD_lHandleOTGInt(void) 
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:593
  gotgint_data_t data;
  data.d32 = xmc_device.global_register->gotgint;
 800a042:	4b0f      	ldr	r3, [pc, #60]	; (800a080 <XMC_USBD_lHandleOTGInt+0x44>)
 800a044:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:594
  if (data.b.sesenddet)
 800a04c:	793b      	ldrb	r3, [r7, #4]
 800a04e:	f003 0304 	and.w	r3, r3, #4
 800a052:	b2db      	uxtb	r3, r3
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00b      	beq.n	800a070 <XMC_USBD_lHandleOTGInt+0x34>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:596
  {
		xmc_device.IsPowered = 0U;
 800a058:	4a09      	ldr	r2, [pc, #36]	; (800a080 <XMC_USBD_lHandleOTGInt+0x44>)
 800a05a:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 800a05e:	f36f 0382 	bfc	r3, #2, #1
 800a062:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:597
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 800a066:	4b06      	ldr	r3, [pc, #24]	; (800a080 <XMC_USBD_lHandleOTGInt+0x44>)
 800a068:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a06c:	2001      	movs	r0, #1
 800a06e:	4798      	blx	r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:599
  }
  XMC_USBD_lClearEventOTG(data.d32);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4618      	mov	r0, r3
 800a074:	f000 fb64 	bl	800a740 <XMC_USBD_lClearEventOTG>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:601

}
 800a078:	bf00      	nop
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	200001b0 	.word	0x200001b0

0800a084 <XMC_USBD_lHandleEnumDone>:
XMC_USBD_lHandleEnumDone():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:609
 * @brief Interrupt handler for device enumeration done.
 *
 * Handles the enumeration done from dwc_otg, when the host has enumerated the device.
 */
static void XMC_USBD_lHandleEnumDone(void) 
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:615
  /* Normaly we need to check dctl
   * We are always fullspeed, so max it up. */
  depctl_data_t epctl;
  gusbcfg_data_t gusbcfg;
	
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 800a08a:	4b1b      	ldr	r3, [pc, #108]	; (800a0f8 <XMC_USBD_lHandleEnumDone+0x74>)
 800a08c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:616
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
 800a094:	88bb      	ldrh	r3, [r7, #4]
 800a096:	f36f 030a 	bfc	r3, #0, #11
 800a09a:	80bb      	strh	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:617
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;
 800a09c:	4b16      	ldr	r3, [pc, #88]	; (800a0f8 <XMC_USBD_lHandleEnumDone+0x74>)
 800a09e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:620

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
 800a0a6:	4a14      	ldr	r2, [pc, #80]	; (800a0f8 <XMC_USBD_lHandleEnumDone+0x74>)
 800a0a8:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 800a0ac:	f043 0301 	orr.w	r3, r3, #1
 800a0b0:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:621
  xmc_device.IsPowered = 1U;
 800a0b4:	4a10      	ldr	r2, [pc, #64]	; (800a0f8 <XMC_USBD_lHandleEnumDone+0x74>)
 800a0b6:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 800a0ba:	f043 0304 	orr.w	r3, r3, #4
 800a0be:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:623

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 800a0c2:	4b0d      	ldr	r3, [pc, #52]	; (800a0f8 <XMC_USBD_lHandleEnumDone+0x74>)
 800a0c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a0c8:	2002      	movs	r0, #2
 800a0ca:	4798      	blx	r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:626

  /* Set Trim */  
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 800a0cc:	4b0a      	ldr	r3, [pc, #40]	; (800a0f8 <XMC_USBD_lHandleEnumDone+0x74>)
 800a0ce:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:627
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
 800a0d6:	787b      	ldrb	r3, [r7, #1]
 800a0d8:	2209      	movs	r2, #9
 800a0da:	f362 0385 	bfi	r3, r2, #2, #4
 800a0de:	707b      	strb	r3, [r7, #1]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:628
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 800a0e0:	4b05      	ldr	r3, [pc, #20]	; (800a0f8 <XMC_USBD_lHandleEnumDone+0x74>)
 800a0e2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800a0e6:	683a      	ldr	r2, [r7, #0]
 800a0e8:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:631

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_ENUMDONE);
 800a0ea:	200b      	movs	r0, #11
 800a0ec:	f000 fac4 	bl	800a678 <XMC_USBD_ClearEvent>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:632
}
 800a0f0:	bf00      	nop
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	200001b0 	.word	0x200001b0

0800a0fc <XMC_USBD_lHandleOEPInt>:
XMC_USBD_lHandleOEPInt():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:642
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleOEPInt(const XMC_USBD_t *const obj) 
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b08c      	sub	sp, #48	; 0x30
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:654
  uint16_t temp;
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
	
  daint.d32 = xmc_device.device_register->daint;
 800a104:	4b6b      	ldr	r3, [pc, #428]	; (800a2b4 <XMC_USBD_lHandleOEPInt+0x1b8>)
 800a106:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800a10a:	699b      	ldr	r3, [r3, #24]
 800a10c:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:656
  
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 800a10e:	4b69      	ldr	r3, [pc, #420]	; (800a2b4 <XMC_USBD_lHandleOEPInt+0x1b8>)
 800a110:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800a114:	69db      	ldr	r3, [r3, #28]
 800a116:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:658
  
  doepmsk.d32 = xmc_device.device_register->doepmsk;  
 800a118:	4b66      	ldr	r3, [pc, #408]	; (800a2b4 <XMC_USBD_lHandleOEPInt+0x1b8>)
 800a11a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800a11e:	695b      	ldr	r3, [r3, #20]
 800a120:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:660
  
  mask = daint.ep.out & daintmsk.ep.out;
 800a122:	8bfa      	ldrh	r2, [r7, #30]
 800a124:	8b7b      	ldrh	r3, [r7, #26]
 800a126:	4013      	ands	r3, r2
 800a128:	85bb      	strh	r3, [r7, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:661
  ep_num = 0U;
 800a12a:	2300      	movs	r3, #0
 800a12c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:662
  doeptsiz.d32 = 0U;
 800a130:	2300      	movs	r3, #0
 800a132:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:664
 
  while ((uint16_t)mask >> ep_num)
 800a134:	e0ae      	b.n	800a294 <XMC_USBD_lHandleOEPInt+0x198>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:666
  {
    temp1 = (mask >> (uint16_t)ep_num);
 800a136:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a138:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a13c:	fa42 f303 	asr.w	r3, r2, r3
 800a140:	857b      	strh	r3, [r7, #42]	; 0x2a
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:667
    temp = temp1 & 0x1U;
 800a142:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a144:	f003 0301 	and.w	r3, r3, #1
 800a148:	853b      	strh	r3, [r7, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:668
    if (temp)
 800a14a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f000 809c 	beq.w	800a28a <XMC_USBD_lHandleOEPInt+0x18e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:671
    {
      /* load register data for endpoint */
      ep = &xmc_device.ep[ep_num];
 800a152:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a156:	2234      	movs	r2, #52	; 0x34
 800a158:	fb02 f303 	mul.w	r3, r2, r3
 800a15c:	4a55      	ldr	r2, [pc, #340]	; (800a2b4 <XMC_USBD_lHandleOEPInt+0x1b8>)
 800a15e:	4413      	add	r3, r2
 800a160:	627b      	str	r3, [r7, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:672
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 800a162:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a166:	4a53      	ldr	r2, [pc, #332]	; (800a2b4 <XMC_USBD_lHandleOEPInt+0x1b8>)
 800a168:	3370      	adds	r3, #112	; 0x70
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	4413      	add	r3, r2
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	689a      	ldr	r2, [r3, #8]
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	4013      	ands	r3, r2
 800a176:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:673
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	7b5b      	ldrb	r3, [r3, #13]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d108      	bne.n	800a192 <XMC_USBD_lHandleOEPInt+0x96>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:675
      {
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
 800a180:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a184:	4a4b      	ldr	r2, [pc, #300]	; (800a2b4 <XMC_USBD_lHandleOEPInt+0x1b8>)
 800a186:	3370      	adds	r3, #112	; 0x70
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	4413      	add	r3, r2
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:678
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
 800a192:	7c3b      	ldrb	r3, [r7, #16]
 800a194:	f003 0308 	and.w	r3, r3, #8
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d033      	beq.n	800a206 <XMC_USBD_lHandleOEPInt+0x10a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:681
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 800a19e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1a0:	7913      	ldrb	r3, [r2, #4]
 800a1a2:	f36f 1345 	bfc	r3, #5, #1
 800a1a6:	7113      	strb	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:682
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	7b5b      	ldrb	r3, [r3, #13]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10e      	bne.n	800a1ce <XMC_USBD_lHandleOEPInt+0xd2>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:686
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
 800a1b0:	f107 030c 	add.w	r3, r7, #12
 800a1b4:	78db      	ldrb	r3, [r3, #3]
 800a1b6:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	461a      	mov	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:685
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 800a1be:	4613      	mov	r3, r2
 800a1c0:	075b      	lsls	r3, r3, #29
 800a1c2:	1a9b      	subs	r3, r3, r2
 800a1c4:	00db      	lsls	r3, r3, #3
 800a1c6:	f103 0218 	add.w	r2, r3, #24
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:688
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
        }
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	7b5b      	ldrb	r3, [r3, #13]
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d106      	bne.n	800a1e4 <XMC_USBD_lHandleOEPInt+0xe8>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:690
		{
			ep->outBytesAvailable += ep->xferCount;
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d8:	691a      	ldr	r2, [r3, #16]
 800a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1de:	441a      	add	r2, r3
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e2:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:692
		}
		ep->outInUse = 0U;
 800a1e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1e6:	6853      	ldr	r3, [r2, #4]
 800a1e8:	f36f 1304 	bfc	r3, #4, #1
 800a1ec:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:693
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 800a1ee:	4b31      	ldr	r3, [pc, #196]	; (800a2b4 <XMC_USBD_lHandleOEPInt+0x1b8>)
 800a1f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	2000      	movs	r0, #0
 800a1f8:	4798      	blx	r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:695
				/* clear the interrupt */
		XMC_USBD_ClearEventOUTEP((uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP,ep_num);
 800a1fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1fe:	4619      	mov	r1, r3
 800a200:	2008      	movs	r0, #8
 800a202:	f000 fac7 	bl	800a794 <XMC_USBD_ClearEventOUTEP>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:697
      }
      if (doepint.b.xfercompl)
 800a206:	7c3b      	ldrb	r3, [r7, #16]
 800a208:	f003 0301 	and.w	r3, r3, #1
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d034      	beq.n	800a27c <XMC_USBD_lHandleOEPInt+0x180>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:699
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	7b5b      	ldrb	r3, [r3, #13]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d115      	bne.n	800a246 <XMC_USBD_lHandleOEPInt+0x14a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:701
        {
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
 800a21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a222:	1ad3      	subs	r3, r2, r3
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800a22a:	1a9b      	subs	r3, r3, r2
 800a22c:	623b      	str	r3, [r7, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:702
          ep->xferCount += bytes;
 800a22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a232:	6a3b      	ldr	r3, [r7, #32]
 800a234:	441a      	add	r2, r3
 800a236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a238:	62da      	str	r2, [r3, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:703
          ep->xferBuffer += bytes;
 800a23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a23e:	6a3b      	ldr	r3, [r7, #32]
 800a240:	441a      	add	r2, r3
 800a242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a244:	625a      	str	r2, [r3, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:705
				}
        if (ep->xferTotal == ep->xferLength)
 800a246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a24e:	429a      	cmp	r2, r3
 800a250:	d111      	bne.n	800a276 <XMC_USBD_lHandleOEPInt+0x17a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:707
        {
          ep->outBytesAvailable = ep->xferCount;
 800a252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a258:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:708
          ep->outInUse = 0U;
 800a25a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a25c:	6853      	ldr	r3, [r2, #4]
 800a25e:	f36f 1304 	bfc	r3, #4, #1
 800a262:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:709
          xmc_device.EndpointEvent_cb(ep_num,XMC_USBD_EP_EVENT_OUT);
 800a264:	4b13      	ldr	r3, [pc, #76]	; (800a2b4 <XMC_USBD_lHandleOEPInt+0x1b8>)
 800a266:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a26a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a26e:	2101      	movs	r1, #1
 800a270:	4610      	mov	r0, r2
 800a272:	4798      	blx	r3
 800a274:	e002      	b.n	800a27c <XMC_USBD_lHandleOEPInt+0x180>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:713
        }
        else
        {
          XMC_USBD_lStartReadXfer(ep);
 800a276:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a278:	f7ff fcb2 	bl	8009be0 <XMC_USBD_lStartReadXfer>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:718
        }

      }

      XMC_USBD_ClearEventOUTEP(doepint.d32,ep_num);
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a282:	4611      	mov	r1, r2
 800a284:	4618      	mov	r0, r3
 800a286:	f000 fa85 	bl	800a794 <XMC_USBD_ClearEventOUTEP>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:720
    }
    ep_num++;
 800a28a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a28e:	3301      	adds	r3, #1
 800a290:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:664
  
  mask = daint.ep.out & daintmsk.ep.out;
  ep_num = 0U;
  doeptsiz.d32 = 0U;
 
  while ((uint16_t)mask >> ep_num)
 800a294:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a296:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a29a:	fa42 f303 	asr.w	r3, r2, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	f47f af49 	bne.w	800a136 <XMC_USBD_lHandleOEPInt+0x3a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:724
    }
    ep_num++;
  }

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_OUTEP);
 800a2a4:	200d      	movs	r0, #13
 800a2a6:	f000 f9e7 	bl	800a678 <XMC_USBD_ClearEvent>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:725
}
 800a2aa:	bf00      	nop
 800a2ac:	3730      	adds	r7, #48	; 0x30
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	200001b0 	.word	0x200001b0

0800a2b8 <XMC_USBD_lHandleIEPInt>:
XMC_USBD_lHandleIEPInt():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:734
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleIEPInt(const XMC_USBD_t *const obj) 
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b08c      	sub	sp, #48	; 0x30
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:746
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
  uint32_t inepint;
	
  daint.d32 = xmc_device.device_register->daint;
 800a2c0:	4b6b      	ldr	r3, [pc, #428]	; (800a470 <XMC_USBD_lHandleIEPInt+0x1b8>)
 800a2c2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800a2c6:	699b      	ldr	r3, [r3, #24]
 800a2c8:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:748
  
  diepmsk.d32 = xmc_device.device_register->diepmsk;
 800a2ca:	4b69      	ldr	r3, [pc, #420]	; (800a470 <XMC_USBD_lHandleIEPInt+0x1b8>)
 800a2cc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800a2d0:	691b      	ldr	r3, [r3, #16]
 800a2d2:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:750
  
  dieptsiz.d32 = 0U;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:751
  mask = daint.ep.in;
 800a2d8:	8abb      	ldrh	r3, [r7, #20]
 800a2da:	85bb      	strh	r3, [r7, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:752
  ep_num = 0U;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:754
  
  while ((uint16_t)mask >> ep_num)
 800a2e2:	e0b6      	b.n	800a452 <XMC_USBD_lHandleIEPInt+0x19a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:756
  {
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
 800a2e4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a2e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a2ea:	fa42 f303 	asr.w	r3, r2, r3
 800a2ee:	857b      	strh	r3, [r7, #42]	; 0x2a
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:757
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
 800a2f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a2f2:	f003 0301 	and.w	r3, r3, #1
 800a2f6:	853b      	strh	r3, [r7, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:758
    if ((uint16_t)temp)
 800a2f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f000 80a4 	beq.w	800a448 <XMC_USBD_lHandleIEPInt+0x190>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:760
    {
      ep = &xmc_device.ep[ep_num];
 800a300:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a304:	2234      	movs	r2, #52	; 0x34
 800a306:	fb02 f303 	mul.w	r3, r2, r3
 800a30a:	4a59      	ldr	r2, [pc, #356]	; (800a470 <XMC_USBD_lHandleIEPInt+0x1b8>)
 800a30c:	4413      	add	r3, r2
 800a30e:	627b      	str	r3, [r7, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:761
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 800a310:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a314:	4a56      	ldr	r2, [pc, #344]	; (800a470 <XMC_USBD_lHandleIEPInt+0x1b8>)
 800a316:	336a      	adds	r3, #106	; 0x6a
 800a318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	623b      	str	r3, [r7, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:763
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 800a320:	4b53      	ldr	r3, [pc, #332]	; (800a470 <XMC_USBD_lHandleIEPInt+0x1b8>)
 800a322:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800a326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a32a:	7812      	ldrb	r2, [r2, #0]
 800a32c:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800a330:	b2d2      	uxtb	r2, r2
 800a332:	40d3      	lsrs	r3, r2
 800a334:	f003 0301 	and.w	r3, r3, #1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:764
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
 800a338:	01da      	lsls	r2, r3, #7
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:762
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
    if ((uint16_t)temp)
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
      diepint.d32 = inepint &
 800a33e:	6a3b      	ldr	r3, [r7, #32]
 800a340:	4013      	ands	r3, r2
 800a342:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:765
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	7b5b      	ldrb	r3, [r3, #13]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d107      	bne.n	800a35c <XMC_USBD_lHandleIEPInt+0xa4>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:767
      {
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
 800a34c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a350:	4a47      	ldr	r2, [pc, #284]	; (800a470 <XMC_USBD_lHandleIEPInt+0x1b8>)
 800a352:	336a      	adds	r3, #106	; 0x6a
 800a354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a358:	691b      	ldr	r3, [r3, #16]
 800a35a:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:769
      }
      if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	7b5b      	ldrb	r3, [r3, #13]
 800a360:	2b01      	cmp	r3, #1
 800a362:	d115      	bne.n	800a390 <XMC_USBD_lHandleIEPInt+0xd8>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:771
      {
        if (diepint.b.emptyintr)
 800a364:	7b3b      	ldrb	r3, [r7, #12]
 800a366:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d00f      	beq.n	800a390 <XMC_USBD_lHandleIEPInt+0xd8>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:774
        {
          uint32_t bytes;
          bytes = XMC_USBD_lWriteFifo(ep);
 800a370:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a372:	f7ff fb1f 	bl	80099b4 <XMC_USBD_lWriteFifo>
 800a376:	61f8      	str	r0, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:775
          ep->xferCount += bytes;
 800a378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	441a      	add	r2, r3
 800a380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a382:	62da      	str	r2, [r3, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:776
          ep->xferBuffer += bytes;
 800a384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	441a      	add	r2, r3
 800a38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38e:	625a      	str	r2, [r3, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:779
        }
      }
      if (diepint.b.xfercompl)
 800a390:	7b3b      	ldrb	r3, [r7, #12]
 800a392:	f003 0301 	and.w	r3, r3, #1
 800a396:	b2db      	uxtb	r3, r3
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d04e      	beq.n	800a43a <XMC_USBD_lHandleIEPInt+0x182>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:781
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	7b5b      	ldrb	r3, [r3, #13]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d11d      	bne.n	800a3e0 <XMC_USBD_lHandleIEPInt+0x128>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:784
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
 800a3a4:	897a      	ldrh	r2, [r7, #10]
 800a3a6:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 800a3aa:	4013      	ands	r3, r2
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d116      	bne.n	800a3e0 <XMC_USBD_lHandleIEPInt+0x128>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:784 (discriminator 1)
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d111      	bne.n	800a3e0 <XMC_USBD_lHandleIEPInt+0x128>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:786
          {
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c4:	1ad3      	subs	r3, r2, r3
 800a3c6:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:787
            ep->xferCount += Bytes;
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	441a      	add	r2, r3
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d2:	62da      	str	r2, [r3, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:788
            ep->xferBuffer += Bytes;
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3d8:	69bb      	ldr	r3, [r7, #24]
 800a3da:	441a      	add	r2, r3
 800a3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3de:	625a      	str	r2, [r3, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:791
          }
        }
        if (ep->xferTotal==ep->xferLength)
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d123      	bne.n	800a434 <XMC_USBD_lHandleIEPInt+0x17c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:793
        {
          ep->inInUse = 0U;
 800a3ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ee:	6853      	ldr	r3, [r2, #4]
 800a3f0:	f36f 03c3 	bfc	r3, #3, #1
 800a3f4:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:794
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	7b5b      	ldrb	r3, [r3, #13]
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d10e      	bne.n	800a41c <XMC_USBD_lHandleIEPInt+0x164>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:797
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 800a3fe:	4b1c      	ldr	r3, [pc, #112]	; (800a470 <XMC_USBD_lHandleIEPInt+0x1b8>)
 800a400:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:798
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 800a404:	4a1a      	ldr	r2, [pc, #104]	; (800a470 <XMC_USBD_lHandleIEPInt+0x1b8>)
 800a406:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 800a40a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800a40c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a410:	2001      	movs	r0, #1
 800a412:	fa00 f202 	lsl.w	r2, r0, r2
 800a416:	43d2      	mvns	r2, r2
 800a418:	400a      	ands	r2, r1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:797
        {
          ep->inInUse = 0U;
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 800a41a:	635a      	str	r2, [r3, #52]	; 0x34
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:800
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
          }
          xmc_device.EndpointEvent_cb(0x80U | ep_num,XMC_USBD_EP_EVENT_IN);
 800a41c:	4b14      	ldr	r3, [pc, #80]	; (800a470 <XMC_USBD_lHandleIEPInt+0x1b8>)
 800a41e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a422:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a426:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a42a:	b2d2      	uxtb	r2, r2
 800a42c:	2102      	movs	r1, #2
 800a42e:	4610      	mov	r0, r2
 800a430:	4798      	blx	r3
 800a432:	e002      	b.n	800a43a <XMC_USBD_lHandleIEPInt+0x182>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:805
        }
        else
        {
          /* start next step of transfer */
          XMC_USBD_lStartWriteXfer(ep);
 800a434:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a436:	f7ff fc8f 	bl	8009d58 <XMC_USBD_lStartWriteXfer>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:810
        }

      }

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32,ep_num);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a440:	4611      	mov	r1, r2
 800a442:	4618      	mov	r0, r3
 800a444:	f000 f990 	bl	800a768 <XMC_USBD_ClearEventINEP>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:812
    }
    ep_num++;
 800a448:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a44c:	3301      	adds	r3, #1
 800a44e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:754
  
  dieptsiz.d32 = 0U;
  mask = daint.ep.in;
  ep_num = 0U;
  
  while ((uint16_t)mask >> ep_num)
 800a452:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a454:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a458:	fa42 f303 	asr.w	r3, r2, r3
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f47f af41 	bne.w	800a2e4 <XMC_USBD_lHandleIEPInt+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:814

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32,ep_num);
    }
    ep_num++;
  }
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_INEP);
 800a462:	200e      	movs	r0, #14
 800a464:	f000 f908 	bl	800a678 <XMC_USBD_ClearEvent>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:815
}
 800a468:	bf00      	nop
 800a46a:	3730      	adds	r7, #48	; 0x30
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	200001b0 	.word	0x200001b0

0800a474 <XMC_USBD_lHandleRxFLvl>:
XMC_USBD_lHandleRxFLvl():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:823
 * @brief RX Fifo interrupt handler
 *
 * This function handles the interrupt, when the rx fifo is not empty anymore.
 */
static void XMC_USBD_lHandleRxFLvl(void) 
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:825
  device_grxsts_data_t data;	
  data.d32 = xmc_device.global_register->grxstsp;
 800a47a:	4b1e      	ldr	r3, [pc, #120]	; (800a4f4 <XMC_USBD_lHandleRxFLvl+0x80>)
 800a47c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800a480:	6a1b      	ldr	r3, [r3, #32]
 800a482:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:827

  switch (data.b.pktsts)
 800a484:	79bb      	ldrb	r3, [r7, #6]
 800a486:	f3c3 0343 	ubfx	r3, r3, #1, #4
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	3b01      	subs	r3, #1
 800a48e:	2b05      	cmp	r3, #5
 800a490:	d82a      	bhi.n	800a4e8 <XMC_USBD_lHandleRxFLvl+0x74>
 800a492:	a201      	add	r2, pc, #4	; (adr r2, 800a498 <XMC_USBD_lHandleRxFLvl+0x24>)
 800a494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a498:	0800a4e9 	.word	0x0800a4e9
 800a49c:	0800a4b1 	.word	0x0800a4b1
 800a4a0:	0800a4e9 	.word	0x0800a4e9
 800a4a4:	0800a4e9 	.word	0x0800a4e9
 800a4a8:	0800a4e9 	.word	0x0800a4e9
 800a4ac:	0800a4cd 	.word	0x0800a4cd
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:834
    case XMC_USBD_GRXSTS_PKTSTS_GOUTNAK:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTCMPL:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTDATA:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 800a4b0:	793b      	ldrb	r3, [r7, #4]
 800a4b2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	88bb      	ldrh	r3, [r7, #4]
 800a4bc:	f3c3 130a 	ubfx	r3, r3, #4, #11
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	4610      	mov	r0, r2
 800a4c6:	f7ff fa01 	bl	80098cc <XMC_USBD_lReadFifo>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:835
      break;
 800a4ca:	e00e      	b.n	800a4ea <XMC_USBD_lHandleRxFLvl+0x76>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:837
    case XMC_USBD_GRXSTS_PKTSTS_SETUP:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 800a4cc:	793b      	ldrb	r3, [r7, #4]
 800a4ce:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	88bb      	ldrh	r3, [r7, #4]
 800a4d8:	f3c3 130a 	ubfx	r3, r3, #4, #11
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	4619      	mov	r1, r3
 800a4e0:	4610      	mov	r0, r2
 800a4e2:	f7ff f9f3 	bl	80098cc <XMC_USBD_lReadFifo>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:838
      break;
 800a4e6:	e000      	b.n	800a4ea <XMC_USBD_lHandleRxFLvl+0x76>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:842
    case XMC_USBD_GRXSTS_PKTSTS_SETUPCMPL:
      break;
    default:
      break;
 800a4e8:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:845 (discriminator 1)
	}
  /* no need to clear */
}
 800a4ea:	bf00      	nop
 800a4ec:	3708      	adds	r7, #8
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	200001b0 	.word	0x200001b0

0800a4f8 <XMC_USBD_IRQHandler>:
XMC_USBD_IRQHandler():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:854
 *
 * The handler first checks, which global interrupt has caused the interrupt
 * and then dispatches interrupt to the corresponding sub-handler.
 */
void XMC_USBD_IRQHandler(const XMC_USBD_t *const obj) 
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:858
  gintmsk_data_t gintmsk;
  gintsts_data_t data;
	
  gintmsk.d32 = xmc_device.global_register->gintmsk;
 800a500:	4b50      	ldr	r3, [pc, #320]	; (800a644 <XMC_USBD_IRQHandler+0x14c>)
 800a502:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800a506:	699b      	ldr	r3, [r3, #24]
 800a508:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:859
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 800a50a:	4b4e      	ldr	r3, [pc, #312]	; (800a644 <XMC_USBD_IRQHandler+0x14c>)
 800a50c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800a510:	695a      	ldr	r2, [r3, #20]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	4013      	ands	r3, r2
 800a516:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:861
	
  if (data.b.sofintr)
 800a518:	7a3b      	ldrb	r3, [r7, #8]
 800a51a:	f003 0308 	and.w	r3, r3, #8
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	2b00      	cmp	r3, #0
 800a522:	d007      	beq.n	800a534 <XMC_USBD_IRQHandler+0x3c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:863
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
 800a524:	4b47      	ldr	r3, [pc, #284]	; (800a644 <XMC_USBD_IRQHandler+0x14c>)
 800a526:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a52a:	2009      	movs	r0, #9
 800a52c:	4798      	blx	r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:864
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SOF);
 800a52e:	2009      	movs	r0, #9
 800a530:	f000 f8a2 	bl	800a678 <XMC_USBD_ClearEvent>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:866
  }
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	7b5b      	ldrb	r3, [r3, #13]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d119      	bne.n	800a570 <XMC_USBD_IRQHandler+0x78>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:868
  {
    if (data.b.rxstsqlvl)
 800a53c:	7a3b      	ldrb	r3, [r7, #8]
 800a53e:	f003 0310 	and.w	r3, r3, #16
 800a542:	b2db      	uxtb	r3, r3
 800a544:	2b00      	cmp	r3, #0
 800a546:	d013      	beq.n	800a570 <XMC_USBD_IRQHandler+0x78>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:871
    {
      /* Masked that interrupt so its only done once */
      gintmsk.b.rxstsqlvl = 0U;
 800a548:	7b3b      	ldrb	r3, [r7, #12]
 800a54a:	f36f 1304 	bfc	r3, #4, #1
 800a54e:	733b      	strb	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:872
      xmc_device.global_register->gintmsk = gintmsk.d32;
 800a550:	4b3c      	ldr	r3, [pc, #240]	; (800a644 <XMC_USBD_IRQHandler+0x14c>)
 800a552:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800a556:	68fa      	ldr	r2, [r7, #12]
 800a558:	619a      	str	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:873
      XMC_USBD_lHandleRxFLvl(); /* handle the interrupt */
 800a55a:	f7ff ff8b 	bl	800a474 <XMC_USBD_lHandleRxFLvl>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:874
      gintmsk.b.rxstsqlvl = 1U;
 800a55e:	7b3b      	ldrb	r3, [r7, #12]
 800a560:	f043 0310 	orr.w	r3, r3, #16
 800a564:	733b      	strb	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:875
      xmc_device.global_register->gintmsk = gintmsk.d32;
 800a566:	4b37      	ldr	r3, [pc, #220]	; (800a644 <XMC_USBD_IRQHandler+0x14c>)
 800a568:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800a56c:	68fa      	ldr	r2, [r7, #12]
 800a56e:	619a      	str	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:878
    }
  }
  if (data.b.erlysuspend)
 800a570:	7a7b      	ldrb	r3, [r7, #9]
 800a572:	f003 0304 	and.w	r3, r3, #4
 800a576:	b2db      	uxtb	r3, r3
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d002      	beq.n	800a582 <XMC_USBD_IRQHandler+0x8a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:880
  {
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_EARLYSUSPEND);
 800a57c:	200a      	movs	r0, #10
 800a57e:	f000 f87b 	bl	800a678 <XMC_USBD_ClearEvent>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:882
  }
  if (data.b.usbsuspend)
 800a582:	7a7b      	ldrb	r3, [r7, #9]
 800a584:	f003 0308 	and.w	r3, r3, #8
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d007      	beq.n	800a59e <XMC_USBD_IRQHandler+0xa6>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:884
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
 800a58e:	4b2d      	ldr	r3, [pc, #180]	; (800a644 <XMC_USBD_IRQHandler+0x14c>)
 800a590:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a594:	2006      	movs	r0, #6
 800a596:	4798      	blx	r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:885
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SUSPEND);
 800a598:	2006      	movs	r0, #6
 800a59a:	f000 f86d 	bl	800a678 <XMC_USBD_ClearEvent>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:887
  }
  if (data.b.wkupintr)
 800a59e:	7afb      	ldrb	r3, [r7, #11]
 800a5a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d007      	beq.n	800a5ba <XMC_USBD_IRQHandler+0xc2>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:889
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
 800a5aa:	4b26      	ldr	r3, [pc, #152]	; (800a644 <XMC_USBD_IRQHandler+0x14c>)
 800a5ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5b0:	2008      	movs	r0, #8
 800a5b2:	4798      	blx	r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:890
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
 800a5b4:	2008      	movs	r0, #8
 800a5b6:	f000 f85f 	bl	800a678 <XMC_USBD_ClearEvent>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:892
  }
  if (data.b.sessreqintr)
 800a5ba:	7afb      	ldrb	r3, [r7, #11]
 800a5bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5c0:	b2db      	uxtb	r3, r3
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d00e      	beq.n	800a5e4 <XMC_USBD_IRQHandler+0xec>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:894
  {
    xmc_device.IsPowered = 1U;
 800a5c6:	4a1f      	ldr	r2, [pc, #124]	; (800a644 <XMC_USBD_IRQHandler+0x14c>)
 800a5c8:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 800a5cc:	f043 0304 	orr.w	r3, r3, #4
 800a5d0:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:895
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 800a5d4:	4b1b      	ldr	r3, [pc, #108]	; (800a644 <XMC_USBD_IRQHandler+0x14c>)
 800a5d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5da:	2000      	movs	r0, #0
 800a5dc:	4798      	blx	r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:896
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_POWER_ON);
 800a5de:	2000      	movs	r0, #0
 800a5e0:	f000 f84a 	bl	800a678 <XMC_USBD_ClearEvent>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:898
  }
  if (data.b.usbreset)
 800a5e4:	7a7b      	ldrb	r3, [r7, #9]
 800a5e6:	f003 0310 	and.w	r3, r3, #16
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d002      	beq.n	800a5f6 <XMC_USBD_IRQHandler+0xfe>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:900
  {
    XMC_USBD_lHandleUSBReset(obj);
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f7ff fc7b 	bl	8009eec <XMC_USBD_lHandleUSBReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:902
  }
  if (data.b.enumdone)
 800a5f6:	7a7b      	ldrb	r3, [r7, #9]
 800a5f8:	f003 0320 	and.w	r3, r3, #32
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d001      	beq.n	800a606 <XMC_USBD_IRQHandler+0x10e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:904
  {
    XMC_USBD_lHandleEnumDone();
 800a602:	f7ff fd3f 	bl	800a084 <XMC_USBD_lHandleEnumDone>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:906
  }
  if (data.b.inepint)
 800a606:	7abb      	ldrb	r3, [r7, #10]
 800a608:	f003 0304 	and.w	r3, r3, #4
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d002      	beq.n	800a618 <XMC_USBD_IRQHandler+0x120>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:908
  {
    XMC_USBD_lHandleIEPInt(obj);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f7ff fe50 	bl	800a2b8 <XMC_USBD_lHandleIEPInt>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:910
  }
  if (data.b.outepintr)
 800a618:	7abb      	ldrb	r3, [r7, #10]
 800a61a:	f003 0308 	and.w	r3, r3, #8
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	2b00      	cmp	r3, #0
 800a622:	d002      	beq.n	800a62a <XMC_USBD_IRQHandler+0x132>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:912
  {
		XMC_USBD_lHandleOEPInt(obj);
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f7ff fd69 	bl	800a0fc <XMC_USBD_lHandleOEPInt>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:914
  }
	if (data.b.otgintr)
 800a62a:	7a3b      	ldrb	r3, [r7, #8]
 800a62c:	f003 0304 	and.w	r3, r3, #4
 800a630:	b2db      	uxtb	r3, r3
 800a632:	2b00      	cmp	r3, #0
 800a634:	d001      	beq.n	800a63a <XMC_USBD_IRQHandler+0x142>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:916
  {
	  XMC_USBD_lHandleOTGInt();
 800a636:	f7ff fd01 	bl	800a03c <XMC_USBD_lHandleOTGInt>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:919
  }

}
 800a63a:	bf00      	nop
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	200001b0 	.word	0x200001b0

0800a648 <XMC_USBD_Enable>:
XMC_USBD_Enable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:929
 *******************************************************************************/
/**
 * Enables the USB0 module
 **/
void XMC_USBD_Enable(void) 
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:934
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  /* Reset and power up */
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 800a64c:	4803      	ldr	r0, [pc, #12]	; (800a65c <XMC_USBD_Enable+0x14>)
 800a64e:	f7f7 f89d 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:935
  XMC_SCU_POWER_EnableUsb();
 800a652:	f7f7 fc5b 	bl	8001f0c <XMC_SCU_POWER_EnableUsb>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:936
}
 800a656:	bf00      	nop
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	20000080 	.word	0x20000080

0800a660 <XMC_USBD_Disable>:
XMC_USBD_Disable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:942

/**
 * Disables the USB0 module
 **/
void XMC_USBD_Disable(void) 
{
 800a660:	b580      	push	{r7, lr}
 800a662:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:944
  /* Clear Reset and power up */
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 800a664:	4803      	ldr	r0, [pc, #12]	; (800a674 <XMC_USBD_Disable+0x14>)
 800a666:	f7f7 f875 	bl	8001754 <XMC_SCU_RESET_AssertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:948
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  XMC_SCU_POWER_DisableUsb();
 800a66a:	f7f7 fc5b 	bl	8001f24 <XMC_SCU_POWER_DisableUsb>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:949
}
 800a66e:	bf00      	nop
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	20000080 	.word	0x20000080

0800a678 <XMC_USBD_ClearEvent>:
XMC_USBD_ClearEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:955

/**
 * Clear the USB device event
 **/
void XMC_USBD_ClearEvent(const XMC_USBD_EVENT_t event) 
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	4603      	mov	r3, r0
 800a680:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:957
  gintsts_data_t clear;
  clear.d32 = 0U;
 800a682:	2300      	movs	r3, #0
 800a684:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:958
  switch(event)
 800a686:	79fb      	ldrb	r3, [r7, #7]
 800a688:	2b0d      	cmp	r3, #13
 800a68a:	d84c      	bhi.n	800a726 <XMC_USBD_ClearEvent+0xae>
 800a68c:	a201      	add	r2, pc, #4	; (adr r2, 800a694 <XMC_USBD_ClearEvent+0x1c>)
 800a68e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a692:	bf00      	nop
 800a694:	0800a6cd 	.word	0x0800a6cd
 800a698:	0800a727 	.word	0x0800a727
 800a69c:	0800a727 	.word	0x0800a727
 800a6a0:	0800a727 	.word	0x0800a727
 800a6a4:	0800a6d7 	.word	0x0800a6d7
 800a6a8:	0800a727 	.word	0x0800a727
 800a6ac:	0800a6e1 	.word	0x0800a6e1
 800a6b0:	0800a6eb 	.word	0x0800a6eb
 800a6b4:	0800a6f5 	.word	0x0800a6f5
 800a6b8:	0800a6ff 	.word	0x0800a6ff
 800a6bc:	0800a709 	.word	0x0800a709
 800a6c0:	0800a713 	.word	0x0800a713
 800a6c4:	0800a727 	.word	0x0800a727
 800a6c8:	0800a71d 	.word	0x0800a71d
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:961
  {
    case (XMC_USBD_EVENT_POWER_ON):
	  clear.b.sessreqintr = 1U;
 800a6cc:	7bfb      	ldrb	r3, [r7, #15]
 800a6ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6d2:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:962
	  break;
 800a6d4:	e028      	b.n	800a728 <XMC_USBD_ClearEvent+0xb0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:964
    case (XMC_USBD_EVENT_RESET):
	  clear.b.usbreset = 1U;
 800a6d6:	7b7b      	ldrb	r3, [r7, #13]
 800a6d8:	f043 0310 	orr.w	r3, r3, #16
 800a6dc:	737b      	strb	r3, [r7, #13]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:965
	  break;
 800a6de:	e023      	b.n	800a728 <XMC_USBD_ClearEvent+0xb0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:967
    case (XMC_USBD_EVENT_SUSPEND):
	  clear.b.usbsuspend = 1U;
 800a6e0:	7b7b      	ldrb	r3, [r7, #13]
 800a6e2:	f043 0308 	orr.w	r3, r3, #8
 800a6e6:	737b      	strb	r3, [r7, #13]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:968
	  break;
 800a6e8:	e01e      	b.n	800a728 <XMC_USBD_ClearEvent+0xb0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:970
    case (XMC_USBD_EVENT_RESUME):
	  clear.b.wkupintr = 1U;
 800a6ea:	7bfb      	ldrb	r3, [r7, #15]
 800a6ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6f0:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:971
	  break;
 800a6f2:	e019      	b.n	800a728 <XMC_USBD_ClearEvent+0xb0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:973
    case (XMC_USBD_EVENT_REMOTE_WAKEUP):
	  clear.b.wkupintr = 1U;
 800a6f4:	7bfb      	ldrb	r3, [r7, #15]
 800a6f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6fa:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:974
	  break;
 800a6fc:	e014      	b.n	800a728 <XMC_USBD_ClearEvent+0xb0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:976
    case (XMC_USBD_EVENT_SOF):
	  clear.b.sofintr = 1U;
 800a6fe:	7b3b      	ldrb	r3, [r7, #12]
 800a700:	f043 0308 	orr.w	r3, r3, #8
 800a704:	733b      	strb	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:977
	  break;
 800a706:	e00f      	b.n	800a728 <XMC_USBD_ClearEvent+0xb0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:979
    case (XMC_USBD_EVENT_EARLYSUSPEND):
	  clear.b.erlysuspend = 1U;
 800a708:	7b7b      	ldrb	r3, [r7, #13]
 800a70a:	f043 0304 	orr.w	r3, r3, #4
 800a70e:	737b      	strb	r3, [r7, #13]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:980
	  break;
 800a710:	e00a      	b.n	800a728 <XMC_USBD_ClearEvent+0xb0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:982
    case (XMC_USBD_EVENT_ENUMDONE):
	  clear.b.enumdone = 1U;
 800a712:	7b7b      	ldrb	r3, [r7, #13]
 800a714:	f043 0320 	orr.w	r3, r3, #32
 800a718:	737b      	strb	r3, [r7, #13]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:983
	  break;
 800a71a:	e005      	b.n	800a728 <XMC_USBD_ClearEvent+0xb0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:985
    case (XMC_USBD_EVENT_OUTEP):
	  clear.b.outepintr = 1U;
 800a71c:	7bbb      	ldrb	r3, [r7, #14]
 800a71e:	f043 0308 	orr.w	r3, r3, #8
 800a722:	73bb      	strb	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:986
	  break;
 800a724:	e000      	b.n	800a728 <XMC_USBD_ClearEvent+0xb0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:988
		default:
		break;
 800a726:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:990
	}
	xmc_device.global_register->gintsts = clear.d32;
 800a728:	4b04      	ldr	r3, [pc, #16]	; (800a73c <XMC_USBD_ClearEvent+0xc4>)
 800a72a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:991
}
 800a732:	bf00      	nop
 800a734:	3714      	adds	r7, #20
 800a736:	46bd      	mov	sp, r7
 800a738:	bc80      	pop	{r7}
 800a73a:	4770      	bx	lr
 800a73c:	200001b0 	.word	0x200001b0

0800a740 <XMC_USBD_lClearEventOTG>:
XMC_USBD_lClearEventOTG():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:997

/**
 * Clear the USB OTG events
 **/
static void XMC_USBD_lClearEventOTG(uint32_t event)
{
 800a740:	b480      	push	{r7}
 800a742:	b085      	sub	sp, #20
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:998
  gotgint_data_t clear = { .d32 = 0U};
 800a748:	2300      	movs	r3, #0
 800a74a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:999
  clear.d32 = event;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1000
  xmc_device.global_register->gotgint = clear.d32;
 800a750:	4b04      	ldr	r3, [pc, #16]	; (800a764 <XMC_USBD_lClearEventOTG+0x24>)
 800a752:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800a756:	68fa      	ldr	r2, [r7, #12]
 800a758:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1001
}
 800a75a:	bf00      	nop
 800a75c:	3714      	adds	r7, #20
 800a75e:	46bd      	mov	sp, r7
 800a760:	bc80      	pop	{r7}
 800a762:	4770      	bx	lr
 800a764:	200001b0 	.word	0x200001b0

0800a768 <XMC_USBD_ClearEventINEP>:
XMC_USBD_ClearEventINEP():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1007

/**
 * Clear the USB IN EP events
 **/
void XMC_USBD_ClearEventINEP(uint32_t event,const uint8_t ep_num)
{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	460b      	mov	r3, r1
 800a772:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1009
  diepint_data_t clear;
  clear.d32 = event;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1010
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 800a778:	78fb      	ldrb	r3, [r7, #3]
 800a77a:	4a05      	ldr	r2, [pc, #20]	; (800a790 <XMC_USBD_ClearEventINEP+0x28>)
 800a77c:	336a      	adds	r3, #106	; 0x6a
 800a77e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1011
}
 800a786:	bf00      	nop
 800a788:	3714      	adds	r7, #20
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bc80      	pop	{r7}
 800a78e:	4770      	bx	lr
 800a790:	200001b0 	.word	0x200001b0

0800a794 <XMC_USBD_ClearEventOUTEP>:
XMC_USBD_ClearEventOUTEP():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1017

/**
 * Clear the USB OUT EP events
 **/
void XMC_USBD_ClearEventOUTEP(uint32_t event,const uint8_t ep_num)
{
 800a794:	b480      	push	{r7}
 800a796:	b085      	sub	sp, #20
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	460b      	mov	r3, r1
 800a79e:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1019
  doepint_data_t clear;
  clear.d32 = event;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1020
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 800a7a4:	78fb      	ldrb	r3, [r7, #3]
 800a7a6:	4a06      	ldr	r2, [pc, #24]	; (800a7c0 <XMC_USBD_ClearEventOUTEP+0x2c>)
 800a7a8:	3370      	adds	r3, #112	; 0x70
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	4413      	add	r3, r2
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	68fa      	ldr	r2, [r7, #12]
 800a7b2:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1021
}
 800a7b4:	bf00      	nop
 800a7b6:	3714      	adds	r7, #20
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bc80      	pop	{r7}
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	200001b0 	.word	0x200001b0

0800a7c4 <XMC_USBD_EnableEventOUTEP>:
XMC_USBD_EnableEventOUTEP():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1027

/**
 * Enable the USB OUT EP events
 **/
void XMC_USBD_EnableEventOUTEP(uint32_t event)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1029
	doepint_data_t doepint;
	doepint.d32 = event;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1030
	xmc_device.device_register->doepmsk |= doepint.d32;
 800a7d0:	4b07      	ldr	r3, [pc, #28]	; (800a7f0 <XMC_USBD_EnableEventOUTEP+0x2c>)
 800a7d2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800a7d6:	4a06      	ldr	r2, [pc, #24]	; (800a7f0 <XMC_USBD_EnableEventOUTEP+0x2c>)
 800a7d8:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 800a7dc:	6951      	ldr	r1, [r2, #20]
 800a7de:	68fa      	ldr	r2, [r7, #12]
 800a7e0:	430a      	orrs	r2, r1
 800a7e2:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1031
}
 800a7e4:	bf00      	nop
 800a7e6:	3714      	adds	r7, #20
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bc80      	pop	{r7}
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	200001b0 	.word	0x200001b0

0800a7f4 <XMC_USBD_EnableEventINEP>:
XMC_USBD_EnableEventINEP():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1037

/**
 * Enable the USB IN EP events
 **/
void XMC_USBD_EnableEventINEP(uint32_t event)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1039
	diepint_data_t diepint;
	diepint.d32 = event;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1040
	xmc_device.device_register->diepmsk |= diepint.d32;
 800a800:	4b07      	ldr	r3, [pc, #28]	; (800a820 <XMC_USBD_EnableEventINEP+0x2c>)
 800a802:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800a806:	4a06      	ldr	r2, [pc, #24]	; (800a820 <XMC_USBD_EnableEventINEP+0x2c>)
 800a808:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 800a80c:	6911      	ldr	r1, [r2, #16]
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	430a      	orrs	r2, r1
 800a812:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1041
}
 800a814:	bf00      	nop
 800a816:	3714      	adds	r7, #20
 800a818:	46bd      	mov	sp, r7
 800a81a:	bc80      	pop	{r7}
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	200001b0 	.word	0x200001b0

0800a824 <XMC_USBD_GetCapabilities>:
XMC_USBD_GetCapabilities():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1047

/**
 * Gets the USB device capabilities
 **/
XMC_USBD_CAPABILITIES_t XMC_USBD_GetCapabilities()
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1048
  XMC_USBD_CAPABILITIES_t cap={0U};
 800a82a:	2300      	movs	r3, #0
 800a82c:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1049
  cap.event_connect = 1U;
 800a82e:	793b      	ldrb	r3, [r7, #4]
 800a830:	f043 0304 	orr.w	r3, r3, #4
 800a834:	713b      	strb	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1050
  cap.event_disconnect = 1U;
 800a836:	793b      	ldrb	r3, [r7, #4]
 800a838:	f043 0308 	orr.w	r3, r3, #8
 800a83c:	713b      	strb	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1052
#if UC_SERIES == 45
  cap.event_power_off = 1U;
 800a83e:	793b      	ldrb	r3, [r7, #4]
 800a840:	f043 0302 	orr.w	r3, r3, #2
 800a844:	713b      	strb	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1053
  cap.event_power_on = 1U;
 800a846:	793b      	ldrb	r3, [r7, #4]
 800a848:	f043 0301 	orr.w	r3, r3, #1
 800a84c:	713b      	strb	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1058
#else
  cap.event_power_off = 0U;
  cap.event_power_on = 0U;
#endif
  cap.event_high_speed = 0U;
 800a84e:	793b      	ldrb	r3, [r7, #4]
 800a850:	f36f 1345 	bfc	r3, #5, #1
 800a854:	713b      	strb	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1059
  cap.event_remote_wakeup = 1U;
 800a856:	797b      	ldrb	r3, [r7, #5]
 800a858:	f043 0301 	orr.w	r3, r3, #1
 800a85c:	717b      	strb	r3, [r7, #5]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1060
  cap.event_reset = 1U;
 800a85e:	793b      	ldrb	r3, [r7, #4]
 800a860:	f043 0310 	orr.w	r3, r3, #16
 800a864:	713b      	strb	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1061
  cap.event_resume = 1U;
 800a866:	793b      	ldrb	r3, [r7, #4]
 800a868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a86c:	713b      	strb	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1062
  cap.event_suspend = 1U;
 800a86e:	793b      	ldrb	r3, [r7, #4]
 800a870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a874:	713b      	strb	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1063
  cap.reserved = 0U;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f36f 235f 	bfc	r3, #9, #23
 800a87c:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1064
  return cap;
 800a87e:	687b      	ldr	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1065
}
 800a880:	4618      	mov	r0, r3
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	bc80      	pop	{r7}
 800a888:	4770      	bx	lr
 800a88a:	bf00      	nop

0800a88c <XMC_USBD_Init>:
XMC_USBD_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1071

/**
 * Initializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Init(XMC_USBD_t *obj)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b08a      	sub	sp, #40	; 0x28
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1083
  gintmsk_data_t gintmsk;

  XMC_ASSERT("XMC_USBD_Init: obj.usbd_max_num_eps not of type XMC_USBD_MAX_NUM_EPS_t",
 		      XMC_USBD_CHECK_INPUT_MAX_NUM_EPS(obj->usbd_max_num_eps))
  
  XMC_USBD_Enable();
 800a894:	f7ff fed8 	bl	800a648 <XMC_USBD_Enable>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1085
  
  usbd_init = obj;
 800a898:	4a87      	ldr	r2, [pc, #540]	; (800aab8 <XMC_USBD_Init+0x22c>)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6013      	str	r3, [r2, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1088

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 800a89e:	2300      	movs	r3, #0
 800a8a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a8a2:	e00c      	b.n	800a8be <XMC_USBD_Init+0x32>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1090 (discriminator 3)
  {
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 800a8a4:	4a85      	ldr	r2, [pc, #532]	; (800aabc <XMC_USBD_Init+0x230>)
 800a8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a8:	2140      	movs	r1, #64	; 0x40
 800a8aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1091 (discriminator 3)
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 800a8ae:	4a84      	ldr	r2, [pc, #528]	; (800aac0 <XMC_USBD_Init+0x234>)
 800a8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b2:	2140      	movs	r1, #64	; 0x40
 800a8b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1088 (discriminator 3)
  XMC_USBD_Enable();
  
  usbd_init = obj;

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 800a8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	627b      	str	r3, [r7, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1088 (discriminator 1)
 800a8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c0:	2b06      	cmp	r3, #6
 800a8c2:	d9ef      	bls.n	800a8a4 <XMC_USBD_Init+0x18>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1095
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
  }

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 800a8c4:	f44f 7202 	mov.w	r2, #520	; 0x208
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	487e      	ldr	r0, [pc, #504]	; (800aac4 <XMC_USBD_Init+0x238>)
 800a8cc:	f004 faef 	bl	800eeae <memset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1098

  /* assign callbacks */
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	4a7b      	ldr	r2, [pc, #492]	; (800aac4 <XMC_USBD_Init+0x238>)
 800a8d6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1099
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	4a79      	ldr	r2, [pc, #484]	; (800aac4 <XMC_USBD_Init+0x238>)
 800a8e0:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1100
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	623b      	str	r3, [r7, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1102
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a75      	ldr	r2, [pc, #468]	; (800aac4 <XMC_USBD_Init+0x238>)
 800a8f0:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1103
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 800a8f4:	6a3b      	ldr	r3, [r7, #32]
 800a8f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8fa:	4a72      	ldr	r2, [pc, #456]	; (800aac4 <XMC_USBD_Init+0x238>)
 800a8fc:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1104
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 800a900:	2300      	movs	r3, #0
 800a902:	627b      	str	r3, [r7, #36]	; 0x24
 800a904:	e00c      	b.n	800a920 <XMC_USBD_Init+0x94>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1106 (discriminator 3)
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 800a906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a908:	3348      	adds	r3, #72	; 0x48
 800a90a:	015b      	lsls	r3, r3, #5
 800a90c:	6a3a      	ldr	r2, [r7, #32]
 800a90e:	441a      	add	r2, r3
 800a910:	496c      	ldr	r1, [pc, #432]	; (800aac4 <XMC_USBD_Init+0x238>)
 800a912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a914:	336a      	adds	r3, #106	; 0x6a
 800a916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1104 (discriminator 3)
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 800a91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91c:	3301      	adds	r3, #1
 800a91e:	627b      	str	r3, [r7, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1104 (discriminator 1)
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	2b06      	cmp	r3, #6
 800a924:	d9ef      	bls.n	800a906 <XMC_USBD_Init+0x7a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1109
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 800a926:	2300      	movs	r3, #0
 800a928:	627b      	str	r3, [r7, #36]	; 0x24
 800a92a:	e00d      	b.n	800a948 <XMC_USBD_Init+0xbc>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1112 (discriminator 3)
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
 800a92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92e:	3358      	adds	r3, #88	; 0x58
 800a930:	015b      	lsls	r3, r3, #5
 800a932:	6a3a      	ldr	r2, [r7, #32]
 800a934:	441a      	add	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1111 (discriminator 3)
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
 800a936:	4963      	ldr	r1, [pc, #396]	; (800aac4 <XMC_USBD_Init+0x238>)
 800a938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93a:	3370      	adds	r3, #112	; 0x70
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	440b      	add	r3, r1
 800a940:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1109 (discriminator 3)
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 800a942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a944:	3301      	adds	r3, #1
 800a946:	627b      	str	r3, [r7, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1109 (discriminator 1)
 800a948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94a:	2b06      	cmp	r3, #6
 800a94c:	d9ee      	bls.n	800a92c <XMC_USBD_Init+0xa0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1115
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 800a94e:	2300      	movs	r3, #0
 800a950:	627b      	str	r3, [r7, #36]	; 0x24
 800a952:	e00c      	b.n	800a96e <XMC_USBD_Init+0xe2>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1118 (discriminator 3)
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
    						XMC_USBD_TX_FIFO_REG_OFFSET +
 800a954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a956:	3301      	adds	r3, #1
 800a958:	031b      	lsls	r3, r3, #12
 800a95a:	6a3a      	ldr	r2, [r7, #32]
 800a95c:	441a      	add	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1117 (discriminator 3)
    									  DWC_DEV_OUT_EP_REG_OFFSET +
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
 800a95e:	4959      	ldr	r1, [pc, #356]	; (800aac4 <XMC_USBD_Init+0x238>)
 800a960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a962:	3378      	adds	r3, #120	; 0x78
 800a964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1115 (discriminator 3)
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 800a968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96a:	3301      	adds	r3, #1
 800a96c:	627b      	str	r3, [r7, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1115 (discriminator 1)
 800a96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a970:	2b06      	cmp	r3, #6
 800a972:	d9ef      	bls.n	800a954 <XMC_USBD_Init+0xc8>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1124
    						(i * XMC_USBD_TX_FIFO_OFFSET));
  }
  /* obj data structure for endpoint 0 */
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
 800a974:	4b53      	ldr	r3, [pc, #332]	; (800aac4 <XMC_USBD_Init+0x238>)
 800a976:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1125
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
 800a97e:	7f3b      	ldrb	r3, [r7, #28]
 800a980:	f043 0301 	orr.w	r3, r3, #1
 800a984:	773b      	strb	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1126
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
 800a986:	7f3b      	ldrb	r3, [r7, #28]
 800a988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a98c:	773b      	strb	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1127
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	7b5b      	ldrb	r3, [r3, #13]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d104      	bne.n	800a9a0 <XMC_USBD_Init+0x114>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1130
  {
    /* Enable dma if needed */
    gahbcfg.b.dmaenable = 1U; /* enable dma if needed */
 800a996:	7f3b      	ldrb	r3, [r7, #28]
 800a998:	f043 0320 	orr.w	r3, r3, #32
 800a99c:	773b      	strb	r3, [r7, #28]
 800a99e:	e003      	b.n	800a9a8 <XMC_USBD_Init+0x11c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1134
  }
  else
  {
    gahbcfg.b.dmaenable = 0U;
 800a9a0:	7f3b      	ldrb	r3, [r7, #28]
 800a9a2:	f36f 1345 	bfc	r3, #5, #1
 800a9a6:	773b      	strb	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1136
  }
  xmc_device.global_register->gahbcfg = gahbcfg.d32;
 800a9a8:	4b46      	ldr	r3, [pc, #280]	; (800aac4 <XMC_USBD_Init+0x238>)
 800a9aa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800a9ae:	69fa      	ldr	r2, [r7, #28]
 800a9b0:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1138
  /* configure usb details */  
  gusbcfg.d32= xmc_device.global_register->gusbcfg;
 800a9b2:	4b44      	ldr	r3, [pc, #272]	; (800aac4 <XMC_USBD_Init+0x238>)
 800a9b4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800a9b8:	68db      	ldr	r3, [r3, #12]
 800a9ba:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1139
  gusbcfg.b.force_dev_mode = 1U; /* force us into device mode */
 800a9bc:	7efb      	ldrb	r3, [r7, #27]
 800a9be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9c2:	76fb      	strb	r3, [r7, #27]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1140
  gusbcfg.b.srpcap = 1U; /* enable session request protocoll */
 800a9c4:	7e7b      	ldrb	r3, [r7, #25]
 800a9c6:	f043 0301 	orr.w	r3, r3, #1
 800a9ca:	767b      	strb	r3, [r7, #25]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1141
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 800a9cc:	4b3d      	ldr	r3, [pc, #244]	; (800aac4 <XMC_USBD_Init+0x238>)
 800a9ce:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800a9d2:	69ba      	ldr	r2, [r7, #24]
 800a9d4:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1145

  /* Device init */
  /* configure device speed */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 800a9d6:	4b3b      	ldr	r3, [pc, #236]	; (800aac4 <XMC_USBD_Init+0x238>)
 800a9d8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1146
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
 800a9e0:	7d3b      	ldrb	r3, [r7, #20]
 800a9e2:	f043 0303 	orr.w	r3, r3, #3
 800a9e6:	753b      	strb	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1147
  dcfg.b.descdma = 0U;
 800a9e8:	7dbb      	ldrb	r3, [r7, #22]
 800a9ea:	f36f 13c7 	bfc	r3, #7, #1
 800a9ee:	75bb      	strb	r3, [r7, #22]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1148
  xmc_device.device_register->dcfg = dcfg.d32;
 800a9f0:	4b34      	ldr	r3, [pc, #208]	; (800aac4 <XMC_USBD_Init+0x238>)
 800a9f2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800a9f6:	697a      	ldr	r2, [r7, #20]
 800a9f8:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1150
  /* configure device functions */  
  dctl.d32 = xmc_device.device_register->dctl;
 800a9fa:	4b32      	ldr	r3, [pc, #200]	; (800aac4 <XMC_USBD_Init+0x238>)
 800a9fc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1151
  dctl.b.sftdiscon = 1U; /* disconnect the device until its connected by the user */
 800aa04:	7c3b      	ldrb	r3, [r7, #16]
 800aa06:	f043 0302 	orr.w	r3, r3, #2
 800aa0a:	743b      	strb	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1153
  /* all other config is done by default register value */
  xmc_device.device_register->dctl = dctl.d32;
 800aa0c:	4b2d      	ldr	r3, [pc, #180]	; (800aac4 <XMC_USBD_Init+0x238>)
 800aa0e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800aa12:	693a      	ldr	r2, [r7, #16]
 800aa14:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1155
  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
 800aa16:	2010      	movs	r0, #16
 800aa18:	f7ff f81e 	bl	8009a58 <XMC_USBD_lFlushTXFifo>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1156
  XMC_USBD_lFlushRXFifo();
 800aa1c:	f7ff f85a 	bl	8009ad4 <XMC_USBD_lFlushRXFifo>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1159
  /* Enable Global Interrupts */
  /* clear interrupt status bits prior to unmasking */
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 800aa20:	4b28      	ldr	r3, [pc, #160]	; (800aac4 <XMC_USBD_Init+0x238>)
 800aa22:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800aa26:	2200      	movs	r2, #0
 800aa28:	619a      	str	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1160
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 800aa2a:	4b26      	ldr	r3, [pc, #152]	; (800aac4 <XMC_USBD_Init+0x238>)
 800aa2c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800aa30:	f04f 32ff 	mov.w	r2, #4294967295
 800aa34:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1162
 
  gintmsk.d32 = 0U;
 800aa36:	2300      	movs	r3, #0
 800aa38:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1164
  /* enable common interrupts */
  gintmsk.b.modemismatch = 1U;
 800aa3a:	7b3b      	ldrb	r3, [r7, #12]
 800aa3c:	f043 0302 	orr.w	r3, r3, #2
 800aa40:	733b      	strb	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1165
  gintmsk.b.otgintr = 1U;
 800aa42:	7b3b      	ldrb	r3, [r7, #12]
 800aa44:	f043 0304 	orr.w	r3, r3, #4
 800aa48:	733b      	strb	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1166
  gintmsk.b.sessreqintr = 1U;
 800aa4a:	7bfb      	ldrb	r3, [r7, #15]
 800aa4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa50:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1168
  /* enable device interrupts */
  gintmsk.b.usbreset = 1U;
 800aa52:	7b7b      	ldrb	r3, [r7, #13]
 800aa54:	f043 0310 	orr.w	r3, r3, #16
 800aa58:	737b      	strb	r3, [r7, #13]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1169
  gintmsk.b.enumdone = 1U;
 800aa5a:	7b7b      	ldrb	r3, [r7, #13]
 800aa5c:	f043 0320 	orr.w	r3, r3, #32
 800aa60:	737b      	strb	r3, [r7, #13]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1170
  gintmsk.b.erlysuspend = 1U;
 800aa62:	7b7b      	ldrb	r3, [r7, #13]
 800aa64:	f043 0304 	orr.w	r3, r3, #4
 800aa68:	737b      	strb	r3, [r7, #13]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1171
  gintmsk.b.usbsuspend = 1U;
 800aa6a:	7b7b      	ldrb	r3, [r7, #13]
 800aa6c:	f043 0308 	orr.w	r3, r3, #8
 800aa70:	737b      	strb	r3, [r7, #13]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1172
  gintmsk.b.wkupintr = 1U;
 800aa72:	7bfb      	ldrb	r3, [r7, #15]
 800aa74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa78:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1173
  gintmsk.b.sofintr = 1U;
 800aa7a:	7b3b      	ldrb	r3, [r7, #12]
 800aa7c:	f043 0308 	orr.w	r3, r3, #8
 800aa80:	733b      	strb	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1174
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	7b5b      	ldrb	r3, [r3, #13]
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d103      	bne.n	800aa92 <XMC_USBD_Init+0x206>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1176
  {
    gintmsk.b.rxstsqlvl = 1U;
 800aa8a:	7b3b      	ldrb	r3, [r7, #12]
 800aa8c:	f043 0310 	orr.w	r3, r3, #16
 800aa90:	733b      	strb	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1178
  }
  gintmsk.b.outepintr = 1U;
 800aa92:	7bbb      	ldrb	r3, [r7, #14]
 800aa94:	f043 0308 	orr.w	r3, r3, #8
 800aa98:	73bb      	strb	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1179
  gintmsk.b.inepintr = 1U;
 800aa9a:	7bbb      	ldrb	r3, [r7, #14]
 800aa9c:	f043 0304 	orr.w	r3, r3, #4
 800aaa0:	73bb      	strb	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1180
  xmc_device.global_register->gintmsk = gintmsk.d32;
 800aaa2:	4b08      	ldr	r3, [pc, #32]	; (800aac4 <XMC_USBD_Init+0x238>)
 800aaa4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800aaa8:	68fa      	ldr	r2, [r7, #12]
 800aaaa:	619a      	str	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1181
  return XMC_USBD_STATUS_OK;
 800aaac:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1182
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3728      	adds	r7, #40	; 0x28
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	200001ac 	.word	0x200001ac
 800aabc:	20000080 	.word	0x20000080
 800aac0:	2000009c 	.word	0x2000009c
 800aac4:	200001b0 	.word	0x200001b0

0800aac8 <XMC_USBD_Uninitialize>:
XMC_USBD_Uninitialize():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1188

/**
 * Uninitializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Uninitialize() 
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1191
  /* Disconnect the device */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 800aace:	4b0c      	ldr	r3, [pc, #48]	; (800ab00 <XMC_USBD_Uninitialize+0x38>)
 800aad0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1192
  dctl.b.sftdiscon = 1U;
 800aad8:	793b      	ldrb	r3, [r7, #4]
 800aada:	f043 0302 	orr.w	r3, r3, #2
 800aade:	713b      	strb	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1193
  xmc_device.device_register->dctl = dctl.d32;
 800aae0:	4b07      	ldr	r3, [pc, #28]	; (800ab00 <XMC_USBD_Uninitialize+0x38>)
 800aae2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1195
  /* clean up */
  memset((void*)&xmc_device,0U,sizeof(xmc_device));
 800aaea:	f44f 7202 	mov.w	r2, #520	; 0x208
 800aaee:	2100      	movs	r1, #0
 800aaf0:	4803      	ldr	r0, [pc, #12]	; (800ab00 <XMC_USBD_Uninitialize+0x38>)
 800aaf2:	f004 f9dc 	bl	800eeae <memset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1196
  return XMC_USBD_STATUS_OK;
 800aaf6:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1197
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3708      	adds	r7, #8
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	200001b0 	.word	0x200001b0

0800ab04 <XMC_USBD_DeviceConnect>:
XMC_USBD_DeviceConnect():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1203

/**
 * Connects the USB device to host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceConnect() 
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1206
  /* Just disable softdisconnect */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 800ab0a:	4b0a      	ldr	r3, [pc, #40]	; (800ab34 <XMC_USBD_DeviceConnect+0x30>)
 800ab0c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1207
  dctl.b.sftdiscon = 0U;
 800ab14:	793b      	ldrb	r3, [r7, #4]
 800ab16:	f36f 0341 	bfc	r3, #1, #1
 800ab1a:	713b      	strb	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1208
  xmc_device.device_register->dctl = dctl.d32;
 800ab1c:	4b05      	ldr	r3, [pc, #20]	; (800ab34 <XMC_USBD_DeviceConnect+0x30>)
 800ab1e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1209
  return XMC_USBD_STATUS_OK;
 800ab26:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1210
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bc80      	pop	{r7}
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	200001b0 	.word	0x200001b0

0800ab38 <XMC_USBD_DeviceDisconnect>:
XMC_USBD_DeviceDisconnect():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1216

/**
 * Disconnects the USB device from host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceDisconnect() 
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1218
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 800ab3e:	4b0a      	ldr	r3, [pc, #40]	; (800ab68 <XMC_USBD_DeviceDisconnect+0x30>)
 800ab40:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1219
  dctl.b.sftdiscon = 1U;
 800ab48:	793b      	ldrb	r3, [r7, #4]
 800ab4a:	f043 0302 	orr.w	r3, r3, #2
 800ab4e:	713b      	strb	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1220
  xmc_device.device_register->dctl = dctl.d32;
 800ab50:	4b05      	ldr	r3, [pc, #20]	; (800ab68 <XMC_USBD_DeviceDisconnect+0x30>)
 800ab52:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1221
  return XMC_USBD_STATUS_OK;
 800ab5a:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1222
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bc80      	pop	{r7}
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	200001b0 	.word	0x200001b0

0800ab6c <XMC_USBD_DeviceGetState>:
XMC_USBD_DeviceGetState():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1228

/**
 * Gets the USB device state.
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj) 
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1229
  XMC_USBD_STATE_t state={0U};
 800ab74:	2300      	movs	r3, #0
 800ab76:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1230
  state.speed = XMC_USBD_SPEED_FULL;
 800ab78:	7b3b      	ldrb	r3, [r7, #12]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	f362 03c4 	bfi	r3, r2, #3, #2
 800ab80:	733b      	strb	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1231
  state.connected = xmc_device.IsConnected;
 800ab82:	4b12      	ldr	r3, [pc, #72]	; (800abcc <XMC_USBD_DeviceGetState+0x60>)
 800ab84:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800ab88:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ab8c:	b2da      	uxtb	r2, r3
 800ab8e:	7b3b      	ldrb	r3, [r7, #12]
 800ab90:	f362 0341 	bfi	r3, r2, #1, #1
 800ab94:	733b      	strb	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1232
  state.active = XMC_USBD_lDeviceActive(obj);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f7fe fe64 	bl	8009864 <XMC_USBD_lDeviceActive>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	f003 0301 	and.w	r3, r3, #1
 800aba2:	b2da      	uxtb	r2, r3
 800aba4:	7b3b      	ldrb	r3, [r7, #12]
 800aba6:	f362 0382 	bfi	r3, r2, #2, #1
 800abaa:	733b      	strb	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1233
  state.powered = xmc_device.IsPowered;
 800abac:	4b07      	ldr	r3, [pc, #28]	; (800abcc <XMC_USBD_DeviceGetState+0x60>)
 800abae:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800abb2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800abb6:	b2da      	uxtb	r2, r3
 800abb8:	7b3b      	ldrb	r3, [r7, #12]
 800abba:	f362 0300 	bfi	r3, r2, #0, #1
 800abbe:	733b      	strb	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1234
  return state;
 800abc0:	68fb      	ldr	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1235
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	200001b0 	.word	0x200001b0

0800abd0 <XMC_USBD_EndpointReadStart>:
XMC_USBD_EndpointReadStart():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1241

/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size) 
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	4603      	mov	r3, r0
 800abd8:	6039      	str	r1, [r7, #0]
 800abda:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1242
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
 800abdc:	79fb      	ldrb	r3, [r7, #7]
 800abde:	f003 030f 	and.w	r3, r3, #15
 800abe2:	2234      	movs	r2, #52	; 0x34
 800abe4:	fb02 f303 	mul.w	r3, r2, r3
 800abe8:	4a1a      	ldr	r2, [pc, #104]	; (800ac54 <XMC_USBD_EndpointReadStart+0x84>)
 800abea:	4413      	add	r3, r2
 800abec:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1245
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d106      	bne.n	800ac0a <XMC_USBD_EndpointReadStart+0x3a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1245 (discriminator 1)
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	791b      	ldrb	r3, [r3, #4]
 800ac00:	f003 0304 	and.w	r3, r3, #4
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d102      	bne.n	800ac10 <XMC_USBD_EndpointReadStart+0x40>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1247
  {
    result = XMC_USBD_STATUS_ERROR;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	73fb      	strb	r3, [r7, #15]
 800ac0e:	e01c      	b.n	800ac4a <XMC_USBD_EndpointReadStart+0x7a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1252
  }
  else
  {
    /* short the length to buffer size if needed */
    if (size > ep->outBufferSize)
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	695a      	ldr	r2, [r3, #20]
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d202      	bcs.n	800ac20 <XMC_USBD_EndpointReadStart+0x50>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1254
    {
      size = ep->outBufferSize;
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	695b      	ldr	r3, [r3, #20]
 800ac1e:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1257
    }
    /* set ep values */
    ep->xferTotal = size;
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	683a      	ldr	r2, [r7, #0]
 800ac24:	631a      	str	r2, [r3, #48]	; 0x30
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1258
    ep->xferCount = 0U;
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	62da      	str	r2, [r3, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1259
    ep->xferLength = 0U;
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	629a      	str	r2, [r3, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1260
    ep->xferBuffer = ep->outBuffer;
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	68da      	ldr	r2, [r3, #12]
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	625a      	str	r2, [r3, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1261
    ep->outBytesAvailable = 0U;
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1262
    XMC_USBD_lStartReadXfer(ep);
 800ac40:	68b8      	ldr	r0, [r7, #8]
 800ac42:	f7fe ffcd 	bl	8009be0 <XMC_USBD_lStartReadXfer>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1263
    result= XMC_USBD_STATUS_OK;
 800ac46:	2300      	movs	r3, #0
 800ac48:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1265
  }
  return result;
 800ac4a:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1266
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3710      	adds	r7, #16
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	200001b0 	.word	0x200001b0

0800ac58 <XMC_USBD_EndpointRead>:
XMC_USBD_EndpointRead():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1272

/**
 * Reads the number of bytes from the USB OUT endpoint
 **/
int32_t XMC_USBD_EndpointRead(const uint8_t ep_num,uint8_t * buffer,uint32_t length) 
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b086      	sub	sp, #24
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	4603      	mov	r3, r0
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]
 800ac64:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1273
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num];
 800ac66:	7bfb      	ldrb	r3, [r7, #15]
 800ac68:	2234      	movs	r2, #52	; 0x34
 800ac6a:	fb02 f303 	mul.w	r3, r2, r3
 800ac6e:	4a17      	ldr	r2, [pc, #92]	; (800accc <XMC_USBD_EndpointRead+0x74>)
 800ac70:	4413      	add	r3, r2
 800ac72:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1274
  if (length > ep->outBytesAvailable)
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	691a      	ldr	r2, [r3, #16]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d202      	bcs.n	800ac84 <XMC_USBD_EndpointRead+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1276
  {
    length = ep->outBytesAvailable;
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	691b      	ldr	r3, [r3, #16]
 800ac82:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1278
  }
  memcpy(buffer,&ep->outBuffer[ep->outOffset],length);
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	68da      	ldr	r2, [r3, #12]
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	699b      	ldr	r3, [r3, #24]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	4619      	mov	r1, r3
 800ac92:	68b8      	ldr	r0, [r7, #8]
 800ac94:	f004 f900 	bl	800ee98 <memcpy>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1279
  ep->outBytesAvailable -= length;
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	691a      	ldr	r2, [r3, #16]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	1ad2      	subs	r2, r2, r3
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1280
  if (ep->outBytesAvailable)
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	691b      	ldr	r3, [r3, #16]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d006      	beq.n	800acba <XMC_USBD_EndpointRead+0x62>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1282
  {
    ep->outOffset += length;
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	699a      	ldr	r2, [r3, #24]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	441a      	add	r2, r3
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	619a      	str	r2, [r3, #24]
 800acb8:	e002      	b.n	800acc0 <XMC_USBD_EndpointRead+0x68>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1286
  }
  else
  {
    ep->outOffset = 0U;
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	2200      	movs	r2, #0
 800acbe:	619a      	str	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1288
  }
  return (int32_t)length;
 800acc0:	687b      	ldr	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1289
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3718      	adds	r7, #24
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	200001b0 	.word	0x200001b0

0800acd0 <XMC_USBD_EndpointWrite>:
XMC_USBD_EndpointWrite():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1295

/**
 * Writes number of bytes in to the USB IN endpoint.
 **/
int32_t XMC_USBD_EndpointWrite(const uint8_t ep_num,const uint8_t * buffer,uint32_t length) 
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b086      	sub	sp, #24
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	4603      	mov	r3, r0
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]
 800acdc:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1296
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
 800acde:	7bfb      	ldrb	r3, [r7, #15]
 800ace0:	f003 030f 	and.w	r3, r3, #15
 800ace4:	2234      	movs	r2, #52	; 0x34
 800ace6:	fb02 f303 	mul.w	r3, r2, r3
 800acea:	4a21      	ldr	r2, [pc, #132]	; (800ad70 <XMC_USBD_EndpointWrite+0xa0>)
 800acec:	4413      	add	r3, r2
 800acee:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1298
  int32_t result;
  if (!ep->isConfigured)
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	791b      	ldrb	r3, [r3, #4]
 800acf4:	f003 0304 	and.w	r3, r3, #4
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d102      	bne.n	800ad04 <XMC_USBD_EndpointWrite+0x34>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1300
  {
    result = (int32_t)XMC_USBD_STATUS_ERROR;
 800acfe:	2301      	movs	r3, #1
 800ad00:	617b      	str	r3, [r7, #20]
 800ad02:	e030      	b.n	800ad66 <XMC_USBD_EndpointWrite+0x96>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1302
  }
  else if (ep->inInUse == 1U)
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d102      	bne.n	800ad18 <XMC_USBD_EndpointWrite+0x48>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1304
  {
    result=(int32_t)0;
 800ad12:	2300      	movs	r3, #0
 800ad14:	617b      	str	r3, [r7, #20]
 800ad16:	e026      	b.n	800ad66 <XMC_USBD_EndpointWrite+0x96>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1308
  }
  else
  {
    if (length > ep->inBufferSize)
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	6a1a      	ldr	r2, [r3, #32]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d202      	bcs.n	800ad28 <XMC_USBD_EndpointWrite+0x58>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1310
    {
      length = ep->inBufferSize;
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	6a1b      	ldr	r3, [r3, #32]
 800ad26:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1313
    }
    /* copy data into input buffer for DMA and FIFO mode */
		memcpy(ep->inBuffer,(const void *)buffer,length);
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	69db      	ldr	r3, [r3, #28]
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	68b9      	ldr	r1, [r7, #8]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f004 f8b1 	bl	800ee98 <memcpy>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1314
		ep->xferBuffer = ep->inBuffer;
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	69da      	ldr	r2, [r3, #28]
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	625a      	str	r2, [r3, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1315
    ep->xferTotal = length;
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	631a      	str	r2, [r3, #48]	; 0x30
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1317
    /* set transfer values */
    ep->xferLength = 0U;
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	2200      	movs	r2, #0
 800ad48:	629a      	str	r2, [r3, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1318
    ep->xferCount = 0U;
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	62da      	str	r2, [r3, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1319
    ep->inInUse = 1U;
 800ad50:	693a      	ldr	r2, [r7, #16]
 800ad52:	6853      	ldr	r3, [r2, #4]
 800ad54:	f043 0308 	orr.w	r3, r3, #8
 800ad58:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1321
    /* start the transfer */
    XMC_USBD_lStartWriteXfer(ep);
 800ad5a:	6938      	ldr	r0, [r7, #16]
 800ad5c:	f7fe fffc 	bl	8009d58 <XMC_USBD_lStartWriteXfer>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1322
    result=(int32_t)ep->xferTotal;
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad64:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1324
  }
  return result;
 800ad66:	697b      	ldr	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1325
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3718      	adds	r7, #24
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	200001b0 	.word	0x200001b0

0800ad74 <XMC_USBD_DeviceSetAddress>:
XMC_USBD_DeviceSetAddress():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1331

/**
 * Sets the USB device address.
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceSetAddress(const uint8_t address,const XMC_USBD_SET_ADDRESS_STAGE_t stage) 
{
 800ad74:	b480      	push	{r7}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	460a      	mov	r2, r1
 800ad7e:	71fb      	strb	r3, [r7, #7]
 800ad80:	4613      	mov	r3, r2
 800ad82:	71bb      	strb	r3, [r7, #6]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1333
  dcfg_data_t data;
  data.d32 = xmc_device.device_register->dcfg;
 800ad84:	4b0d      	ldr	r3, [pc, #52]	; (800adbc <XMC_USBD_DeviceSetAddress+0x48>)
 800ad86:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1334
  if (stage == XMC_USBD_SET_ADDRESS_STAGE_SETUP)
 800ad8e:	79bb      	ldrb	r3, [r7, #6]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10c      	bne.n	800adae <XMC_USBD_DeviceSetAddress+0x3a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1336
  {
    data.b.devaddr = address;
 800ad94:	79fb      	ldrb	r3, [r7, #7]
 800ad96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad9a:	b2da      	uxtb	r2, r3
 800ad9c:	89bb      	ldrh	r3, [r7, #12]
 800ad9e:	f362 130a 	bfi	r3, r2, #4, #7
 800ada2:	81bb      	strh	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1337
    xmc_device.device_register->dcfg = data.d32;
 800ada4:	4b05      	ldr	r3, [pc, #20]	; (800adbc <XMC_USBD_DeviceSetAddress+0x48>)
 800ada6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800adaa:	68fa      	ldr	r2, [r7, #12]
 800adac:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1339
  }
	return XMC_USBD_STATUS_OK;
 800adae:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1340
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3714      	adds	r7, #20
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bc80      	pop	{r7}
 800adb8:	4770      	bx	lr
 800adba:	bf00      	nop
 800adbc:	200001b0 	.word	0x200001b0

0800adc0 <XMC_USBD_EndpointStall>:
XMC_USBD_EndpointStall():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1346

/**
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall) 
{
 800adc0:	b480      	push	{r7}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	4603      	mov	r3, r0
 800adc8:	460a      	mov	r2, r1
 800adca:	71fb      	strb	r3, [r7, #7]
 800adcc:	4613      	mov	r3, r2
 800adce:	71bb      	strb	r3, [r7, #6]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1348
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
 800add0:	79fb      	ldrb	r3, [r7, #7]
 800add2:	f003 030f 	and.w	r3, r3, #15
 800add6:	2234      	movs	r2, #52	; 0x34
 800add8:	fb02 f303 	mul.w	r3, r2, r3
 800addc:	4a4a      	ldr	r2, [pc, #296]	; (800af08 <XMC_USBD_EndpointStall+0x148>)
 800adde:	4413      	add	r3, r2
 800ade0:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1349
  if (stall)
 800ade2:	79bb      	ldrb	r3, [r7, #6]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d040      	beq.n	800ae6a <XMC_USBD_EndpointStall+0xaa>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1351
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 800ade8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adec:	2b00      	cmp	r3, #0
 800adee:	da1a      	bge.n	800ae26 <XMC_USBD_EndpointStall+0x66>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1354
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	4a43      	ldr	r2, [pc, #268]	; (800af08 <XMC_USBD_EndpointStall+0x148>)
 800adfc:	336a      	adds	r3, #106	; 0x6a
 800adfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1355
      data.b.stall = 1U;
 800ae06:	7abb      	ldrb	r3, [r7, #10]
 800ae08:	f043 0320 	orr.w	r3, r3, #32
 800ae0c:	72bb      	strb	r3, [r7, #10]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1356
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	4a3b      	ldr	r2, [pc, #236]	; (800af08 <XMC_USBD_EndpointStall+0x148>)
 800ae1a:	336a      	adds	r3, #106	; 0x6a
 800ae1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae20:	68ba      	ldr	r2, [r7, #8]
 800ae22:	601a      	str	r2, [r3, #0]
 800ae24:	e01b      	b.n	800ae5e <XMC_USBD_EndpointStall+0x9e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1361
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	4a35      	ldr	r2, [pc, #212]	; (800af08 <XMC_USBD_EndpointStall+0x148>)
 800ae32:	3370      	adds	r3, #112	; 0x70
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	4413      	add	r3, r2
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1362
      data.b.stall = 1U;
 800ae3e:	7abb      	ldrb	r3, [r7, #10]
 800ae40:	f043 0320 	orr.w	r3, r3, #32
 800ae44:	72bb      	strb	r3, [r7, #10]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1363
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	4a2d      	ldr	r2, [pc, #180]	; (800af08 <XMC_USBD_EndpointStall+0x148>)
 800ae52:	3370      	adds	r3, #112	; 0x70
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	4413      	add	r3, r2
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1365
    }
    ep->isStalled = 1U;
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	7913      	ldrb	r3, [r2, #4]
 800ae62:	f043 0320 	orr.w	r3, r3, #32
 800ae66:	7113      	strb	r3, [r2, #4]
 800ae68:	e047      	b.n	800aefa <XMC_USBD_EndpointStall+0x13a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1370
  }
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 800ae6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	da1e      	bge.n	800aeb0 <XMC_USBD_EndpointStall+0xf0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1372
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	4a22      	ldr	r2, [pc, #136]	; (800af08 <XMC_USBD_EndpointStall+0x148>)
 800ae7e:	336a      	adds	r3, #106	; 0x6a
 800ae80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1373
			data.b.stall = 0U;
 800ae88:	7abb      	ldrb	r3, [r7, #10]
 800ae8a:	f36f 1345 	bfc	r3, #5, #1
 800ae8e:	72bb      	strb	r3, [r7, #10]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1374
			data.b.setd0pid = 1U; /* reset pid to 0 */
 800ae90:	7afb      	ldrb	r3, [r7, #11]
 800ae92:	f043 0310 	orr.w	r3, r3, #16
 800ae96:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1375
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800aea0:	b2db      	uxtb	r3, r3
 800aea2:	4a19      	ldr	r2, [pc, #100]	; (800af08 <XMC_USBD_EndpointStall+0x148>)
 800aea4:	336a      	adds	r3, #106	; 0x6a
 800aea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aeaa:	68ba      	ldr	r2, [r7, #8]
 800aeac:	601a      	str	r2, [r3, #0]
 800aeae:	e01f      	b.n	800aef0 <XMC_USBD_EndpointStall+0x130>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1379
		}
		else
		{
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	4a13      	ldr	r2, [pc, #76]	; (800af08 <XMC_USBD_EndpointStall+0x148>)
 800aebc:	3370      	adds	r3, #112	; 0x70
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	4413      	add	r3, r2
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1380
			data.b.stall = 0U;
 800aec8:	7abb      	ldrb	r3, [r7, #10]
 800aeca:	f36f 1345 	bfc	r3, #5, #1
 800aece:	72bb      	strb	r3, [r7, #10]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1381
			data.b.setd0pid = 1U; /* reset pid to 0 */
 800aed0:	7afb      	ldrb	r3, [r7, #11]
 800aed2:	f043 0310 	orr.w	r3, r3, #16
 800aed6:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1382
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	4a09      	ldr	r2, [pc, #36]	; (800af08 <XMC_USBD_EndpointStall+0x148>)
 800aee4:	3370      	adds	r3, #112	; 0x70
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	4413      	add	r3, r2
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	68ba      	ldr	r2, [r7, #8]
 800aeee:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1384
		}
		ep->isStalled = 0U;
 800aef0:	68fa      	ldr	r2, [r7, #12]
 800aef2:	7913      	ldrb	r3, [r2, #4]
 800aef4:	f36f 1345 	bfc	r3, #5, #1
 800aef8:	7113      	strb	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1386
	}
	return XMC_USBD_STATUS_OK;
 800aefa:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1387
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3714      	adds	r7, #20
 800af00:	46bd      	mov	sp, r7
 800af02:	bc80      	pop	{r7}
 800af04:	4770      	bx	lr
 800af06:	bf00      	nop
 800af08:	200001b0 	.word	0x200001b0

0800af0c <XMC_USBD_EndpointAbort>:
XMC_USBD_EndpointAbort():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1392

/**
 * Aborts the data transfer on the selected endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr) {
 800af0c:	b480      	push	{r7}
 800af0e:	b085      	sub	sp, #20
 800af10:	af00      	add	r7, sp, #0
 800af12:	4603      	mov	r3, r0
 800af14:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1393
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 800af16:	79fb      	ldrb	r3, [r7, #7]
 800af18:	f003 030f 	and.w	r3, r3, #15
 800af1c:	2234      	movs	r2, #52	; 0x34
 800af1e:	fb02 f303 	mul.w	r3, r2, r3
 800af22:	4a1a      	ldr	r2, [pc, #104]	; (800af8c <XMC_USBD_EndpointAbort+0x80>)
 800af24:	4413      	add	r3, r2
 800af26:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1394
  if (ep->address_u.address_st.direction)
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af30:	b2db      	uxtb	r3, r3
 800af32:	2b00      	cmp	r3, #0
 800af34:	d004      	beq.n	800af40 <XMC_USBD_EndpointAbort+0x34>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1396
  {
    ep->inInUse = 0U;
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	6853      	ldr	r3, [r2, #4]
 800af3a:	f36f 03c3 	bfc	r3, #3, #1
 800af3e:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1398
  }
  if (!ep->address_u.address_st.direction)
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d104      	bne.n	800af58 <XMC_USBD_EndpointAbort+0x4c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1400
  {
    ep->outInUse = 0U;
 800af4e:	68fa      	ldr	r2, [r7, #12]
 800af50:	6853      	ldr	r3, [r2, #4]
 800af52:	f36f 1304 	bfc	r3, #4, #1
 800af56:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1402
  }
  ep->isStalled = 0U;
 800af58:	68fa      	ldr	r2, [r7, #12]
 800af5a:	7913      	ldrb	r3, [r2, #4]
 800af5c:	f36f 1345 	bfc	r3, #5, #1
 800af60:	7113      	strb	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1403
  ep->outBytesAvailable = 0U;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2200      	movs	r2, #0
 800af66:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1404
  ep->outOffset = 0U;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2200      	movs	r2, #0
 800af6c:	619a      	str	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1405
  ep->xferLength = 0U;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2200      	movs	r2, #0
 800af72:	629a      	str	r2, [r3, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1406
  ep->xferCount = 0U;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2200      	movs	r2, #0
 800af78:	62da      	str	r2, [r3, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1407
  ep->xferTotal = 0U;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2200      	movs	r2, #0
 800af7e:	631a      	str	r2, [r3, #48]	; 0x30
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1409

  return XMC_USBD_STATUS_OK;
 800af80:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1410
}
 800af82:	4618      	mov	r0, r3
 800af84:	3714      	adds	r7, #20
 800af86:	46bd      	mov	sp, r7
 800af88:	bc80      	pop	{r7}
 800af8a:	4770      	bx	lr
 800af8c:	200001b0 	.word	0x200001b0

0800af90 <XMC_USBD_EndpointConfigure>:
XMC_USBD_EndpointConfigure():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1418
 * Configures the given endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointConfigure(const uint8_t ep_addr,
		                                     const XMC_USBD_ENDPOINT_TYPE_t ep_type,
		                                     const uint16_t ep_max_packet_size) 
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af00      	add	r7, sp, #0
 800af96:	4603      	mov	r3, r0
 800af98:	71fb      	strb	r3, [r7, #7]
 800af9a:	460b      	mov	r3, r1
 800af9c:	71bb      	strb	r3, [r7, #6]
 800af9e:	4613      	mov	r3, r2
 800afa0:	80bb      	strh	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1421
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 800afa2:	4b98      	ldr	r3, [pc, #608]	; (800b204 <XMC_USBD_EndpointConfigure+0x274>)
 800afa4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800afa8:	69db      	ldr	r3, [r3, #28]
 800afaa:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1422
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 800afac:	79fb      	ldrb	r3, [r7, #7]
 800afae:	f003 030f 	and.w	r3, r3, #15
 800afb2:	2234      	movs	r2, #52	; 0x34
 800afb4:	fb02 f303 	mul.w	r3, r2, r3
 800afb8:	4a92      	ldr	r2, [pc, #584]	; (800b204 <XMC_USBD_EndpointConfigure+0x274>)
 800afba:	4413      	add	r3, r2
 800afbc:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1423
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 800afbe:	2234      	movs	r2, #52	; 0x34
 800afc0:	2100      	movs	r1, #0
 800afc2:	6978      	ldr	r0, [r7, #20]
 800afc4:	f003 ff73 	bl	800eeae <memset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1425
  /* do ep configuration */
  ep->address_u.address = ep_addr;
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	79fa      	ldrb	r2, [r7, #7]
 800afcc:	701a      	strb	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1426
  ep->isConfigured = 1U;
 800afce:	697a      	ldr	r2, [r7, #20]
 800afd0:	7913      	ldrb	r3, [r2, #4]
 800afd2:	f043 0304 	orr.w	r3, r3, #4
 800afd6:	7113      	strb	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1427
  ep->maxPacketSize = (uint8_t)ep_max_packet_size;
 800afd8:	88bb      	ldrh	r3, [r7, #4]
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afe0:	b2d9      	uxtb	r1, r3
 800afe2:	697a      	ldr	r2, [r7, #20]
 800afe4:	6853      	ldr	r3, [r2, #4]
 800afe6:	f361 23d1 	bfi	r3, r1, #11, #7
 800afea:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1428
  if (ep->address_u.address != 0U)
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d007      	beq.n	800b004 <XMC_USBD_EndpointConfigure+0x74>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1430
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE;
 800aff4:	697a      	ldr	r2, [r7, #20]
 800aff6:	6893      	ldr	r3, [r2, #8]
 800aff8:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 800affc:	f361 0312 	bfi	r3, r1, #0, #19
 800b000:	6093      	str	r3, [r2, #8]
 800b002:	e005      	b.n	800b010 <XMC_USBD_EndpointConfigure+0x80>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1434
  }
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
 800b004:	697a      	ldr	r2, [r7, #20]
 800b006:	6893      	ldr	r3, [r2, #8]
 800b008:	2140      	movs	r1, #64	; 0x40
 800b00a:	f361 0312 	bfi	r3, r1, #0, #19
 800b00e:	6093      	str	r3, [r2, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1437
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	021b      	lsls	r3, r3, #8
 800b01c:	4a7a      	ldr	r2, [pc, #488]	; (800b208 <XMC_USBD_EndpointConfigure+0x278>)
 800b01e:	441a      	add	r2, r3
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	61da      	str	r2, [r3, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1438
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	021b      	lsls	r3, r3, #8
 800b030:	4a76      	ldr	r2, [pc, #472]	; (800b20c <XMC_USBD_EndpointConfigure+0x27c>)
 800b032:	441a      	add	r2, r3
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1440
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b040:	b2db      	uxtb	r3, r3
 800b042:	461a      	mov	r2, r3
 800b044:	4b72      	ldr	r3, [pc, #456]	; (800b210 <XMC_USBD_EndpointConfigure+0x280>)
 800b046:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	621a      	str	r2, [r3, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1441
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b056:	b2db      	uxtb	r3, r3
 800b058:	461a      	mov	r2, r3
 800b05a:	4b6e      	ldr	r3, [pc, #440]	; (800b214 <XMC_USBD_EndpointConfigure+0x284>)
 800b05c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1443
  /* is in */
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d102      	bne.n	800b078 <XMC_USBD_EndpointConfigure+0xe8>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1443 (discriminator 1)
 800b072:	79bb      	ldrb	r3, [r7, #6]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d17b      	bne.n	800b170 <XMC_USBD_EndpointConfigure+0x1e0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1446
  {
    depctl_data_t data;
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b080:	b2db      	uxtb	r3, r3
 800b082:	4a60      	ldr	r2, [pc, #384]	; (800b204 <XMC_USBD_EndpointConfigure+0x274>)
 800b084:	336a      	adds	r3, #106	; 0x6a
 800b086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1448
		/*enable endpoint */
		data.b.usbactep = 1U;
 800b08e:	7b7b      	ldrb	r3, [r7, #13]
 800b090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b094:	737b      	strb	r3, [r7, #13]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1450
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 800b096:	79bb      	ldrb	r3, [r7, #6]
 800b098:	f003 0303 	and.w	r3, r3, #3
 800b09c:	b2da      	uxtb	r2, r3
 800b09e:	7bbb      	ldrb	r3, [r7, #14]
 800b0a0:	f362 0383 	bfi	r3, r2, #2, #2
 800b0a4:	73bb      	strb	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1452
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 800b0a6:	79bb      	ldrb	r3, [r7, #6]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d123      	bne.n	800b0f4 <XMC_USBD_EndpointConfigure+0x164>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1454
    {
			switch(ep_max_packet_size)
 800b0ac:	88bb      	ldrh	r3, [r7, #4]
 800b0ae:	2b10      	cmp	r3, #16
 800b0b0:	d014      	beq.n	800b0dc <XMC_USBD_EndpointConfigure+0x14c>
 800b0b2:	2b10      	cmp	r3, #16
 800b0b4:	dc02      	bgt.n	800b0bc <XMC_USBD_EndpointConfigure+0x12c>
 800b0b6:	2b08      	cmp	r3, #8
 800b0b8:	d016      	beq.n	800b0e8 <XMC_USBD_EndpointConfigure+0x158>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1469
				break;
				case (8U):
				data.b.mps = 0x3U;
				break;
				default:
				break;
 800b0ba:	e023      	b.n	800b104 <XMC_USBD_EndpointConfigure+0x174>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1454
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
    {
			switch(ep_max_packet_size)
 800b0bc:	2b20      	cmp	r3, #32
 800b0be:	d007      	beq.n	800b0d0 <XMC_USBD_EndpointConfigure+0x140>
 800b0c0:	2b40      	cmp	r3, #64	; 0x40
 800b0c2:	d000      	beq.n	800b0c6 <XMC_USBD_EndpointConfigure+0x136>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1469
				break;
				case (8U):
				data.b.mps = 0x3U;
				break;
				default:
				break;
 800b0c4:	e01e      	b.n	800b104 <XMC_USBD_EndpointConfigure+0x174>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1457
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
    {
			switch(ep_max_packet_size)
			{
				case (64U):
				data.b.mps = 0x0U;
 800b0c6:	89bb      	ldrh	r3, [r7, #12]
 800b0c8:	f36f 030a 	bfc	r3, #0, #11
 800b0cc:	81bb      	strh	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1458
				break;
 800b0ce:	e019      	b.n	800b104 <XMC_USBD_EndpointConfigure+0x174>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1460
				case (32U):
				data.b.mps = 0x1U;
 800b0d0:	89bb      	ldrh	r3, [r7, #12]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	f362 030a 	bfi	r3, r2, #0, #11
 800b0d8:	81bb      	strh	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1461
				break;
 800b0da:	e013      	b.n	800b104 <XMC_USBD_EndpointConfigure+0x174>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1463
				case (16U):
				data.b.mps = 0x2U;
 800b0dc:	89bb      	ldrh	r3, [r7, #12]
 800b0de:	2202      	movs	r2, #2
 800b0e0:	f362 030a 	bfi	r3, r2, #0, #11
 800b0e4:	81bb      	strh	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1464
				break;
 800b0e6:	e00d      	b.n	800b104 <XMC_USBD_EndpointConfigure+0x174>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1466
				case (8U):
				data.b.mps = 0x3U;
 800b0e8:	89bb      	ldrh	r3, [r7, #12]
 800b0ea:	2203      	movs	r2, #3
 800b0ec:	f362 030a 	bfi	r3, r2, #0, #11
 800b0f0:	81bb      	strh	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1467
				break;
 800b0f2:	e007      	b.n	800b104 <XMC_USBD_EndpointConfigure+0x174>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1474
				break;
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 800b0f4:	88bb      	ldrh	r3, [r7, #4]
 800b0f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	89bb      	ldrh	r3, [r7, #12]
 800b0fe:	f362 030a 	bfi	r3, r2, #0, #11
 800b102:	81bb      	strh	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1477 (discriminator 2)
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 800b104:	7bfb      	ldrb	r3, [r7, #15]
 800b106:	f043 0310 	orr.w	r3, r3, #16
 800b10a:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1479 (discriminator 2)
		/* clear stall */
		data.b.stall = 0U;
 800b10c:	7bbb      	ldrb	r3, [r7, #14]
 800b10e:	f36f 1345 	bfc	r3, #5, #1
 800b112:	73bb      	strb	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1481 (discriminator 2)
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 800b114:	f7fe fd12 	bl	8009b3c <XMC_USBD_lAssignTXFifo>
 800b118:	4603      	mov	r3, r0
 800b11a:	f003 030f 	and.w	r3, r3, #15
 800b11e:	b2d9      	uxtb	r1, r3
 800b120:	697a      	ldr	r2, [r7, #20]
 800b122:	8893      	ldrh	r3, [r2, #4]
 800b124:	f361 1389 	bfi	r3, r1, #6, #4
 800b128:	8093      	strh	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1482 (discriminator 2)
		data.b.txfnum = ep->txFifoNum;
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	889b      	ldrh	r3, [r3, #4]
 800b12e:	f3c3 1383 	ubfx	r3, r3, #6, #4
 800b132:	b2da      	uxtb	r2, r3
 800b134:	89fb      	ldrh	r3, [r7, #14]
 800b136:	f362 1389 	bfi	r3, r2, #6, #4
 800b13a:	81fb      	strh	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1483 (discriminator 2)
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b144:	b2db      	uxtb	r3, r3
 800b146:	4a2f      	ldr	r2, [pc, #188]	; (800b204 <XMC_USBD_EndpointConfigure+0x274>)
 800b148:	336a      	adds	r3, #106	; 0x6a
 800b14a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b14e:	68fa      	ldr	r2, [r7, #12]
 800b150:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1484 (discriminator 2)
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 800b152:	8a3b      	ldrh	r3, [r7, #16]
 800b154:	b21a      	sxth	r2, r3
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	4619      	mov	r1, r3
 800b162:	2301      	movs	r3, #1
 800b164:	408b      	lsls	r3, r1
 800b166:	b21b      	sxth	r3, r3
 800b168:	4313      	orrs	r3, r2
 800b16a:	b21b      	sxth	r3, r3
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	823b      	strh	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1486
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d002      	beq.n	800b184 <XMC_USBD_EndpointConfigure+0x1f4>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1486 (discriminator 1)
 800b17e:	79bb      	ldrb	r3, [r7, #6]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d174      	bne.n	800b26e <XMC_USBD_EndpointConfigure+0x2de>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1490
  {
    /* is out */
		depctl_data_t data;
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b18c:	b2db      	uxtb	r3, r3
 800b18e:	4a1d      	ldr	r2, [pc, #116]	; (800b204 <XMC_USBD_EndpointConfigure+0x274>)
 800b190:	3370      	adds	r3, #112	; 0x70
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4413      	add	r3, r2
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1492
		/*enable endpoint */
		data.b.usbactep = 1U;
 800b19c:	7a7b      	ldrb	r3, [r7, #9]
 800b19e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1a2:	727b      	strb	r3, [r7, #9]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1494
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 800b1a4:	79bb      	ldrb	r3, [r7, #6]
 800b1a6:	f003 0303 	and.w	r3, r3, #3
 800b1aa:	b2da      	uxtb	r2, r3
 800b1ac:	7abb      	ldrb	r3, [r7, #10]
 800b1ae:	f362 0383 	bfi	r3, r2, #2, #2
 800b1b2:	72bb      	strb	r3, [r7, #10]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1496
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 800b1b4:	79bb      	ldrb	r3, [r7, #6]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d12e      	bne.n	800b218 <XMC_USBD_EndpointConfigure+0x288>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1498
		{
			switch(ep_max_packet_size)
 800b1ba:	88bb      	ldrh	r3, [r7, #4]
 800b1bc:	2b10      	cmp	r3, #16
 800b1be:	d014      	beq.n	800b1ea <XMC_USBD_EndpointConfigure+0x25a>
 800b1c0:	2b10      	cmp	r3, #16
 800b1c2:	dc02      	bgt.n	800b1ca <XMC_USBD_EndpointConfigure+0x23a>
 800b1c4:	2b08      	cmp	r3, #8
 800b1c6:	d016      	beq.n	800b1f6 <XMC_USBD_EndpointConfigure+0x266>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1513
					break;
				case (8U):
					data.b.mps = 0x3U;
					break;
				default:
					break;
 800b1c8:	e02e      	b.n	800b228 <XMC_USBD_EndpointConfigure+0x298>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1498
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
		{
			switch(ep_max_packet_size)
 800b1ca:	2b20      	cmp	r3, #32
 800b1cc:	d007      	beq.n	800b1de <XMC_USBD_EndpointConfigure+0x24e>
 800b1ce:	2b40      	cmp	r3, #64	; 0x40
 800b1d0:	d000      	beq.n	800b1d4 <XMC_USBD_EndpointConfigure+0x244>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1513
					break;
				case (8U):
					data.b.mps = 0x3U;
					break;
				default:
					break;
 800b1d2:	e029      	b.n	800b228 <XMC_USBD_EndpointConfigure+0x298>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1501
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
		{
			switch(ep_max_packet_size)
			{
				case (64U):
					data.b.mps = 0x0U;
 800b1d4:	893b      	ldrh	r3, [r7, #8]
 800b1d6:	f36f 030a 	bfc	r3, #0, #11
 800b1da:	813b      	strh	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1502
					break;
 800b1dc:	e024      	b.n	800b228 <XMC_USBD_EndpointConfigure+0x298>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1504
				case (32U):
					data.b.mps = 0x1U;
 800b1de:	893b      	ldrh	r3, [r7, #8]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	f362 030a 	bfi	r3, r2, #0, #11
 800b1e6:	813b      	strh	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1505
					break;
 800b1e8:	e01e      	b.n	800b228 <XMC_USBD_EndpointConfigure+0x298>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1507
				case (16U):
					data.b.mps = 0x2U;
 800b1ea:	893b      	ldrh	r3, [r7, #8]
 800b1ec:	2202      	movs	r2, #2
 800b1ee:	f362 030a 	bfi	r3, r2, #0, #11
 800b1f2:	813b      	strh	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1508
					break;
 800b1f4:	e018      	b.n	800b228 <XMC_USBD_EndpointConfigure+0x298>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1510
				case (8U):
					data.b.mps = 0x3U;
 800b1f6:	893b      	ldrh	r3, [r7, #8]
 800b1f8:	2203      	movs	r2, #3
 800b1fa:	f362 030a 	bfi	r3, r2, #0, #11
 800b1fe:	813b      	strh	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1511
					break;
 800b200:	e012      	b.n	800b228 <XMC_USBD_EndpointConfigure+0x298>
 800b202:	bf00      	nop
 800b204:	200001b0 	.word	0x200001b0
 800b208:	30000700 	.word	0x30000700
 800b20c:	30000000 	.word	0x30000000
 800b210:	2000009c 	.word	0x2000009c
 800b214:	20000080 	.word	0x20000080
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1518
					break;
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 800b218:	88bb      	ldrh	r3, [r7, #4]
 800b21a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b21e:	b29a      	uxth	r2, r3
 800b220:	893b      	ldrh	r3, [r7, #8]
 800b222:	f362 030a 	bfi	r3, r2, #0, #11
 800b226:	813b      	strh	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1521 (discriminator 4)
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 800b228:	7afb      	ldrb	r3, [r7, #11]
 800b22a:	f043 0310 	orr.w	r3, r3, #16
 800b22e:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1523 (discriminator 4)
		/* clear stall */
		data.b.stall =(uint8_t) 0U;
 800b230:	7abb      	ldrb	r3, [r7, #10]
 800b232:	f36f 1345 	bfc	r3, #5, #1
 800b236:	72bb      	strb	r3, [r7, #10]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1524 (discriminator 4)
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b240:	b2db      	uxtb	r3, r3
 800b242:	4a10      	ldr	r2, [pc, #64]	; (800b284 <XMC_USBD_EndpointConfigure+0x2f4>)
 800b244:	3370      	adds	r3, #112	; 0x70
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	4413      	add	r3, r2
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	68ba      	ldr	r2, [r7, #8]
 800b24e:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1525 (discriminator 4)
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 800b250:	8a7b      	ldrh	r3, [r7, #18]
 800b252:	b21a      	sxth	r2, r3
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	4619      	mov	r1, r3
 800b260:	2301      	movs	r3, #1
 800b262:	408b      	lsls	r3, r1
 800b264:	b21b      	sxth	r3, r3
 800b266:	4313      	orrs	r3, r2
 800b268:	b21b      	sxth	r3, r3
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	827b      	strh	r3, [r7, #18]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1527
  }
  xmc_device.device_register->daintmsk = daintmsk.d32;
 800b26e:	4b05      	ldr	r3, [pc, #20]	; (800b284 <XMC_USBD_EndpointConfigure+0x2f4>)
 800b270:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800b274:	693a      	ldr	r2, [r7, #16]
 800b276:	61da      	str	r2, [r3, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1528
  return XMC_USBD_STATUS_OK;
 800b278:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1529
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3718      	adds	r7, #24
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	200001b0 	.word	0x200001b0

0800b288 <XMC_USBD_EndpointUnconfigure>:
XMC_USBD_EndpointUnconfigure():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1535

/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr) 
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b088      	sub	sp, #32
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	4603      	mov	r3, r0
 800b290:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1536
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 800b292:	79fb      	ldrb	r3, [r7, #7]
 800b294:	f003 030f 	and.w	r3, r3, #15
 800b298:	2234      	movs	r2, #52	; 0x34
 800b29a:	fb02 f303 	mul.w	r3, r2, r3
 800b29e:	4a54      	ldr	r2, [pc, #336]	; (800b3f0 <XMC_USBD_EndpointUnconfigure+0x168>)
 800b2a0:	4413      	add	r3, r2
 800b2a2:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1541
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1542
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 800b2a8:	4b51      	ldr	r3, [pc, #324]	; (800b3f0 <XMC_USBD_EndpointUnconfigure+0x168>)
 800b2aa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800b2ae:	69db      	ldr	r3, [r3, #28]
 800b2b0:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1543
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	461a      	mov	r2, r3
 800b2be:	2301      	movs	r3, #1
 800b2c0:	4093      	lsls	r3, r2
 800b2c2:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1545
  /* if not configured return an error */
  if (!ep->isConfigured)
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	791b      	ldrb	r3, [r3, #4]
 800b2c8:	f003 0304 	and.w	r3, r3, #4
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d102      	bne.n	800b2d8 <XMC_USBD_EndpointUnconfigure+0x50>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1547
  {
     result = XMC_USBD_STATUS_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	77fb      	strb	r3, [r7, #31]
 800b2d6:	e085      	b.n	800b3e4 <XMC_USBD_EndpointUnconfigure+0x15c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1552
  }
  else
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
 800b2d8:	7c7b      	ldrb	r3, [r7, #17]
 800b2da:	f36f 13c7 	bfc	r3, #7, #1
 800b2de:	747b      	strb	r3, [r7, #17]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1553
    data.b.epdis =  1U;
 800b2e0:	7cfb      	ldrb	r3, [r7, #19]
 800b2e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2e6:	74fb      	strb	r3, [r7, #19]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1554
    data.b.snak =  1U;
 800b2e8:	7cfb      	ldrb	r3, [r7, #19]
 800b2ea:	f043 0308 	orr.w	r3, r3, #8
 800b2ee:	74fb      	strb	r3, [r7, #19]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1555
    data.b.stall =  0U;
 800b2f0:	7cbb      	ldrb	r3, [r7, #18]
 800b2f2:	f36f 1345 	bfc	r3, #5, #1
 800b2f6:	74bb      	strb	r3, [r7, #18]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1556
    ep->isConfigured =  0U;
 800b2f8:	69ba      	ldr	r2, [r7, #24]
 800b2fa:	7913      	ldrb	r3, [r2, #4]
 800b2fc:	f36f 0382 	bfc	r3, #2, #1
 800b300:	7113      	strb	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1557
    ep->isStalled =  0U;
 800b302:	69ba      	ldr	r2, [r7, #24]
 800b304:	7913      	ldrb	r3, [r2, #4]
 800b306:	f36f 1345 	bfc	r3, #5, #1
 800b30a:	7113      	strb	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1558
    ep->outInUse =  0U;
 800b30c:	69ba      	ldr	r2, [r7, #24]
 800b30e:	6853      	ldr	r3, [r2, #4]
 800b310:	f36f 1304 	bfc	r3, #4, #1
 800b314:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1559
    ep->inInUse =  0U;
 800b316:	69ba      	ldr	r2, [r7, #24]
 800b318:	6853      	ldr	r3, [r2, #4]
 800b31a:	f36f 03c3 	bfc	r3, #3, #1
 800b31e:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1561
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d106      	bne.n	800b33c <XMC_USBD_EndpointUnconfigure+0xb4>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1561 (discriminator 1)
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	791b      	ldrb	r3, [r3, #4]
 800b332:	f003 0303 	and.w	r3, r3, #3
 800b336:	b2db      	uxtb	r3, r3
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d112      	bne.n	800b362 <XMC_USBD_EndpointUnconfigure+0xda>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1564
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 800b33c:	69bb      	ldr	r3, [r7, #24]
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b344:	b2db      	uxtb	r3, r3
 800b346:	4a2a      	ldr	r2, [pc, #168]	; (800b3f0 <XMC_USBD_EndpointUnconfigure+0x168>)
 800b348:	336a      	adds	r3, #106	; 0x6a
 800b34a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b34e:	693a      	ldr	r2, [r7, #16]
 800b350:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1566
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 800b352:	89ba      	ldrh	r2, [r7, #12]
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	b29b      	uxth	r3, r3
 800b358:	43db      	mvns	r3, r3
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	4013      	ands	r3, r2
 800b35e:	b29b      	uxth	r3, r3
 800b360:	81bb      	strh	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1568
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800b362:	69bb      	ldr	r3, [r7, #24]
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d006      	beq.n	800b37e <XMC_USBD_EndpointUnconfigure+0xf6>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1568 (discriminator 1)
 800b370:	69bb      	ldr	r3, [r7, #24]
 800b372:	791b      	ldrb	r3, [r3, #4]
 800b374:	f003 0303 	and.w	r3, r3, #3
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d123      	bne.n	800b3c6 <XMC_USBD_EndpointUnconfigure+0x13e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1570
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b386:	b2db      	uxtb	r3, r3
 800b388:	4a19      	ldr	r2, [pc, #100]	; (800b3f0 <XMC_USBD_EndpointUnconfigure+0x168>)
 800b38a:	3370      	adds	r3, #112	; 0x70
 800b38c:	009b      	lsls	r3, r3, #2
 800b38e:	4413      	add	r3, r2
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	693a      	ldr	r2, [r7, #16]
 800b394:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1571
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 800b396:	89fa      	ldrh	r2, [r7, #14]
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	43db      	mvns	r3, r3
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	4013      	ands	r3, r2
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	81fb      	strh	r3, [r7, #14]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1572
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800b3a6:	4b13      	ldr	r3, [pc, #76]	; (800b3f4 <XMC_USBD_EndpointUnconfigure+0x16c>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	7b5b      	ldrb	r3, [r3, #13]
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d10a      	bne.n	800b3c6 <XMC_USBD_EndpointUnconfigure+0x13e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1574
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
 800b3b0:	4b0f      	ldr	r3, [pc, #60]	; (800b3f0 <XMC_USBD_EndpointUnconfigure+0x168>)
 800b3b2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800b3b6:	4a0e      	ldr	r2, [pc, #56]	; (800b3f0 <XMC_USBD_EndpointUnconfigure+0x168>)
 800b3b8:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 800b3bc:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800b3be:	697a      	ldr	r2, [r7, #20]
 800b3c0:	43d2      	mvns	r2, r2
 800b3c2:	400a      	ands	r2, r1
 800b3c4:	635a      	str	r2, [r3, #52]	; 0x34
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1577
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
 800b3c6:	4b0a      	ldr	r3, [pc, #40]	; (800b3f0 <XMC_USBD_EndpointUnconfigure+0x168>)
 800b3c8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800b3cc:	68fa      	ldr	r2, [r7, #12]
 800b3ce:	61da      	str	r2, [r3, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1578
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 800b3d0:	69bb      	ldr	r3, [r7, #24]
 800b3d2:	889b      	ldrh	r3, [r3, #4]
 800b3d4:	f3c3 1383 	ubfx	r3, r3, #6, #4
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7fe fbe4 	bl	8009ba8 <XMC_USBD_lUnassignFifo>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1579
    result = XMC_USBD_STATUS_OK;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	77fb      	strb	r3, [r7, #31]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1581
  }
  return result;
 800b3e4:	7ffb      	ldrb	r3, [r7, #31]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1582
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3720      	adds	r7, #32
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	200001b0 	.word	0x200001b0
 800b3f4:	200001ac 	.word	0x200001ac

0800b3f8 <XMC_USBD_GetFrameNumber>:
XMC_USBD_GetFrameNumber():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1588

/**
 * Gets the current USB frame number
 **/
uint16_t XMC_USBD_GetFrameNumber(void) 
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1591
  uint16_t result;
  dsts_data_t dsts;
  dsts.d32 = xmc_device.device_register->dsts;
 800b3fe:	4b08      	ldr	r3, [pc, #32]	; (800b420 <XMC_USBD_GetFrameNumber+0x28>)
 800b400:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800b404:	689b      	ldr	r3, [r3, #8]
 800b406:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1592
  result = (uint16_t)dsts.b.soffn;
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800b40e:	b29b      	uxth	r3, r3
 800b410:	80fb      	strh	r3, [r7, #6]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1593
  return result;
 800b412:	88fb      	ldrh	r3, [r7, #6]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1594
}
 800b414:	4618      	mov	r0, r3
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	bc80      	pop	{r7}
 800b41c:	4770      	bx	lr
 800b41e:	bf00      	nop
 800b420:	200001b0 	.word	0x200001b0

0800b424 <XMC_USBD_IsEnumDone>:
XMC_USBD_IsEnumDone():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1602
 * Gets the USB speed enumeration completion status.
 * This should not be used for the actual USB enumeration completion status. For the actual USB enumeration status,
 * the application layer should check for the completion of USB standard request Set configuration.
 **/
uint32_t XMC_USBD_IsEnumDone(void)
{
 800b424:	b480      	push	{r7}
 800b426:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1603
  return (uint32_t)((uint8_t)xmc_device.IsConnected && (uint8_t)xmc_device.IsPowered);
 800b428:	4b0b      	ldr	r3, [pc, #44]	; (800b458 <XMC_USBD_IsEnumDone+0x34>)
 800b42a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800b42e:	f003 0301 	and.w	r3, r3, #1
 800b432:	b2db      	uxtb	r3, r3
 800b434:	2b00      	cmp	r3, #0
 800b436:	d009      	beq.n	800b44c <XMC_USBD_IsEnumDone+0x28>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1603 (discriminator 1)
 800b438:	4b07      	ldr	r3, [pc, #28]	; (800b458 <XMC_USBD_IsEnumDone+0x34>)
 800b43a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800b43e:	f003 0304 	and.w	r3, r3, #4
 800b442:	b2db      	uxtb	r3, r3
 800b444:	2b00      	cmp	r3, #0
 800b446:	d001      	beq.n	800b44c <XMC_USBD_IsEnumDone+0x28>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1603 (discriminator 3)
 800b448:	2301      	movs	r3, #1
 800b44a:	e000      	b.n	800b44e <XMC_USBD_IsEnumDone+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1603 (discriminator 4)
 800b44c:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbd.c:1604 (discriminator 6)
}
 800b44e:	4618      	mov	r0, r3
 800b450:	46bd      	mov	sp, r7
 800b452:	bc80      	pop	{r7}
 800b454:	4770      	bx	lr
 800b456:	bf00      	nop
 800b458:	200001b0 	.word	0x200001b0

0800b45c <NVIC_EnableIRQ>:
NVIC_EnableIRQ():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1627
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	4603      	mov	r3, r0
 800b464:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1628
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800b466:	4908      	ldr	r1, [pc, #32]	; (800b488 <NVIC_EnableIRQ+0x2c>)
 800b468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b46c:	095b      	lsrs	r3, r3, #5
 800b46e:	79fa      	ldrb	r2, [r7, #7]
 800b470:	f002 021f 	and.w	r2, r2, #31
 800b474:	2001      	movs	r0, #1
 800b476:	fa00 f202 	lsl.w	r2, r0, r2
 800b47a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1629
}
 800b47e:	bf00      	nop
 800b480:	370c      	adds	r7, #12
 800b482:	46bd      	mov	sp, r7
 800b484:	bc80      	pop	{r7}
 800b486:	4770      	bx	lr
 800b488:	e000e100 	.word	0xe000e100

0800b48c <NVIC_DisableIRQ>:
NVIC_DisableIRQ():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1638
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	4603      	mov	r3, r0
 800b494:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1639
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800b496:	4909      	ldr	r1, [pc, #36]	; (800b4bc <NVIC_DisableIRQ+0x30>)
 800b498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b49c:	095b      	lsrs	r3, r3, #5
 800b49e:	79fa      	ldrb	r2, [r7, #7]
 800b4a0:	f002 021f 	and.w	r2, r2, #31
 800b4a4:	2001      	movs	r0, #1
 800b4a6:	fa00 f202 	lsl.w	r2, r0, r2
 800b4aa:	3320      	adds	r3, #32
 800b4ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1640
}
 800b4b0:	bf00      	nop
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bc80      	pop	{r7}
 800b4b8:	4770      	bx	lr
 800b4ba:	bf00      	nop
 800b4bc:	e000e100 	.word	0xe000e100

0800b4c0 <NVIC_ClearPendingIRQ>:
NVIC_ClearPendingIRQ():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1673
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b083      	sub	sp, #12
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1674
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800b4ca:	4909      	ldr	r1, [pc, #36]	; (800b4f0 <NVIC_ClearPendingIRQ+0x30>)
 800b4cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4d0:	095b      	lsrs	r3, r3, #5
 800b4d2:	79fa      	ldrb	r2, [r7, #7]
 800b4d4:	f002 021f 	and.w	r2, r2, #31
 800b4d8:	2001      	movs	r0, #1
 800b4da:	fa00 f202 	lsl.w	r2, r0, r2
 800b4de:	3360      	adds	r3, #96	; 0x60
 800b4e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1675
}
 800b4e4:	bf00      	nop
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bc80      	pop	{r7}
 800b4ec:	4770      	bx	lr
 800b4ee:	bf00      	nop
 800b4f0:	e000e100 	.word	0xe000e100

0800b4f4 <NVIC_SetPriority>:
NVIC_SetPriority():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1699
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	6039      	str	r1, [r7, #0]
 800b4fe:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1700
  if ((int32_t)(IRQn) < 0)
 800b500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b504:	2b00      	cmp	r3, #0
 800b506:	da0b      	bge.n	800b520 <NVIC_SetPriority+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1702
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b508:	490d      	ldr	r1, [pc, #52]	; (800b540 <NVIC_SetPriority+0x4c>)
 800b50a:	79fb      	ldrb	r3, [r7, #7]
 800b50c:	f003 030f 	and.w	r3, r3, #15
 800b510:	3b04      	subs	r3, #4
 800b512:	683a      	ldr	r2, [r7, #0]
 800b514:	b2d2      	uxtb	r2, r2
 800b516:	0092      	lsls	r2, r2, #2
 800b518:	b2d2      	uxtb	r2, r2
 800b51a:	440b      	add	r3, r1
 800b51c:	761a      	strb	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1708
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b51e:	e009      	b.n	800b534 <NVIC_SetPriority+0x40>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1706
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b520:	4908      	ldr	r1, [pc, #32]	; (800b544 <NVIC_SetPriority+0x50>)
 800b522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	b2d2      	uxtb	r2, r2
 800b52a:	0092      	lsls	r2, r2, #2
 800b52c:	b2d2      	uxtb	r2, r2
 800b52e:	440b      	add	r3, r1
 800b530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1708
  }
}
 800b534:	bf00      	nop
 800b536:	370c      	adds	r7, #12
 800b538:	46bd      	mov	sp, r7
 800b53a:	bc80      	pop	{r7}
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	e000ed00 	.word	0xe000ed00
 800b544:	e000e100 	.word	0xe000e100

0800b548 <XMC_lClockGating>:
XMC_lClockGating():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:120
 * @return  None
 * \par<b>Description:</b><br>
 * Enable/disable clock gating depending if feature is supported.
*/
__INLINE static void XMC_lClockGating(uint8_t enable)
{
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	4603      	mov	r3, r0
 800b550:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:127
if (enable == XMC_USBH_CLOCK_GATING_ENABLE)
    XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
   if (enable == XMC_USBH_CLOCK_GATING_DISABLE)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  return;
 800b552:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:128
}
 800b554:	370c      	adds	r7, #12
 800b556:	46bd      	mov	sp, r7
 800b558:	bc80      	pop	{r7}
 800b55a:	4770      	bx	lr

0800b55c <XMC_lTriggerHaltChannel>:
XMC_lTriggerHaltChannel():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:137
 * @return  None
 * \par<b>Description:</b><br>
 * Triggers halt of a channel.
*/
__INLINE static void XMC_lTriggerHaltChannel(USB0_CH_TypeDef *ptr_ch)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:138
  ptr_ch->HCINTMSK = USB_CH_HCINT_ChHltd_Msk; /* Enable halt interrupt */
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2202      	movs	r2, #2
 800b568:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:139
  ptr_ch->HCCHAR  |= (uint32_t)(USB_CH_HCCHAR_ChEna_Msk | USB_CH_HCCHAR_ChDis_Msk);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:140
  return;
 800b576:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:141
}
 800b578:	370c      	adds	r7, #12
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bc80      	pop	{r7}
 800b57e:	4770      	bx	lr

0800b580 <XMC_lStartTransfer>:
XMC_lStartTransfer():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:153
 *          false = fail
 * \par<b>Description:</b><br>
 * Start transfer on Pipe. The function uses transfer complete interrupts to transfer data more than maximum
 * packet size. It takes care of updating data toggle information in subsequent packets related to the same data transfer.
*/
static bool XMC_lStartTransfer (XMC_USBH0_pipe_t *ptr_pipe, USB0_CH_TypeDef *ptr_ch) {
 800b580:	b580      	push	{r7, lr}
 800b582:	b090      	sub	sp, #64	; 0x40
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:160
  uint32_t  hctsiz;
  uint32_t  hcintmsk;
  uint32_t  num_remaining_transfer;
  uint32_t  num_remaining_fifo;
  uint32_t  num_remaining_queue;
  uint32_t  txsts = 0U;
 800b58a:	2300      	movs	r3, #0
 800b58c:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:163
  uint32_t  pckt_num;
  uint32_t  max_pckt_size;
  uint8_t   *ptr_src = ptr_pipe->data;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	627b      	str	r3, [r7, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:164
  uint32_t  *ptr_dest = NULL;
 800b594:	2300      	movs	r3, #0
 800b596:	623b      	str	r3, [r7, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:169
  uint16_t  cnt;
  uint32_t loc_index;
  bool status;

  if (!(XMC_USBH0_device.global_register->HPRT & USB_HPRT_PrtConnSts_Msk))
 800b598:	4b92      	ldr	r3, [pc, #584]	; (800b7e4 <XMC_lStartTransfer+0x264>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 800b5a0:	f003 0301 	and.w	r3, r3, #1
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d102      	bne.n	800b5ae <XMC_lStartTransfer+0x2e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:171
  {
    status = false;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	777b      	strb	r3, [r7, #29]
 800b5ac:	e114      	b.n	800b7d8 <XMC_lStartTransfer+0x258>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:176
  }
  else
  {
    /* Save channel characteristic register to local variable */
    hcchar   = ptr_ch->HCCHAR;
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:178
    /* Save transfer size register to local variable */
    hctsiz   = ptr_ch->HCTSIZ_BUFFERMODE;
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	691b      	ldr	r3, [r3, #16]
 800b5b8:	63bb      	str	r3, [r7, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:179
    hcintmsk = 0U;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	637b      	str	r3, [r7, #52]	; 0x34
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:180
    cnt      = 0U;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	83fb      	strh	r3, [r7, #30]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:184

    /* Prepare transfer */
    /* Reset EPDir (transfer direction = output) and enable channel */
    hcchar &= (uint32_t)(~(uint32_t)(USB_CH_HCCHAR_EPDir_Msk | USB_CH_HCCHAR_ChDis_Msk));
 800b5c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b5c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:185
    hcchar |= (uint32_t)USB_CH_HCCHAR_ChEna_Msk;
 800b5ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:188

    /* Enable default interrupts needed for all transfers */
    hcintmsk  = (USB_CH_HCINTMSK_XactErrMsk_Msk  |
 800b5d6:	2399      	movs	r3, #153	; 0x99
 800b5d8:	637b      	str	r3, [r7, #52]	; 0x34
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:193
                 USB_CH_HCINTMSK_XferComplMsk_Msk |
                 USB_CH_HCINTMSK_NakMsk_Msk    |
                 USB_CH_HCINTMSK_StallMsk_Msk)  ;
    /* Keep PID */
    hctsiz &=  (uint32_t)USB_CH_HCTSIZ_BUFFERMODE_Pid_Msk;
 800b5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5dc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800b5e0:	63bb      	str	r3, [r7, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:196

    /* Packet specific setup */
    switch (ptr_pipe->packet & XMC_USBH_PACKET_TOKEN_Msk) {
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f003 030f 	and.w	r3, r3, #15
 800b5ea:	2b02      	cmp	r3, #2
 800b5ec:	d016      	beq.n	800b61c <XMC_lStartTransfer+0x9c>
 800b5ee:	2b03      	cmp	r3, #3
 800b5f0:	d002      	beq.n	800b5f8 <XMC_lStartTransfer+0x78>
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d009      	beq.n	800b60a <XMC_lStartTransfer+0x8a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:213
      case XMC_USBH_PACKET_SETUP:
        hctsiz   &= (uint32_t)~USB_CH_HCTSIZ_BUFFERMODE_Pid_Msk  ;
        hctsiz   |= (uint32_t)USB_CH_HCTSIZx_DPID_MDATA;
        break;
      default:
        break;
 800b5f6:	e012      	b.n	800b61e <XMC_lStartTransfer+0x9e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:199

    /* Packet specific setup */
    switch (ptr_pipe->packet & XMC_USBH_PACKET_TOKEN_Msk) {
      case XMC_USBH_PACKET_IN:
        /* set transfer direction to input */
        hcchar   |=  (uint32_t)USB_CH_HCCHAR_EPDir_Msk;
 800b5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:201
        /* Enable IN transfer specific interrupts */
        hcintmsk  |= (uint32_t)( USB_CH_HCINTMSK_DataTglErrMsk_Msk  |
 800b600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b602:	f443 63a6 	orr.w	r3, r3, #1328	; 0x530
 800b606:	637b      	str	r3, [r7, #52]	; 0x34
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:205
                       USB_CH_HCINTMSK_BblErrMsk_Msk |
                       USB_CH_HCINTMSK_AckMsk_Msk    |
                       USB_CH_HCINTMSK_NakMsk_Msk )  ;
        break;
 800b608:	e009      	b.n	800b61e <XMC_lStartTransfer+0x9e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:209
      case XMC_USBH_PACKET_OUT:
        break;
      case XMC_USBH_PACKET_SETUP:
        hctsiz   &= (uint32_t)~USB_CH_HCTSIZ_BUFFERMODE_Pid_Msk  ;
 800b60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b60c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b610:	63bb      	str	r3, [r7, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:210
        hctsiz   |= (uint32_t)USB_CH_HCTSIZx_DPID_MDATA;
 800b612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b614:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b618:	63bb      	str	r3, [r7, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:211
        break;
 800b61a:	e000      	b.n	800b61e <XMC_lStartTransfer+0x9e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:207
                       USB_CH_HCINTMSK_BblErrMsk_Msk |
                       USB_CH_HCINTMSK_AckMsk_Msk    |
                       USB_CH_HCINTMSK_NakMsk_Msk )  ;
        break;
      case XMC_USBH_PACKET_OUT:
        break;
 800b61c:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:216
        break;
      default:
        break;
    }
    /* Prepare PID */
    switch (ptr_pipe->packet & XMC_USBH_PACKET_DATA_Msk) {
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b626:	2b10      	cmp	r3, #16
 800b628:	d002      	beq.n	800b630 <XMC_lStartTransfer+0xb0>
 800b62a:	2b20      	cmp	r3, #32
 800b62c:	d005      	beq.n	800b63a <XMC_lStartTransfer+0xba>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:226
      case XMC_USBH_PACKET_DATA1:
        hctsiz   &= (uint32_t)~USB_CH_HCTSIZ_BUFFERMODE_Pid_Msk;
        hctsiz   |= (uint32_t)USB_CH_HCTSIZx_DPID_DATA1;
        break;
      default:
        break;
 800b62e:	e00d      	b.n	800b64c <XMC_lStartTransfer+0xcc>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:218
        break;
    }
    /* Prepare PID */
    switch (ptr_pipe->packet & XMC_USBH_PACKET_DATA_Msk) {
      case XMC_USBH_PACKET_DATA0:
        hctsiz   &= (uint32_t)~USB_CH_HCTSIZ_BUFFERMODE_Pid_Msk;
 800b630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b632:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b636:	63bb      	str	r3, [r7, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:220
        hctsiz   |= (uint32_t)USB_CH_HCTSIZx_DPID_DATA0;
        break;
 800b638:	e008      	b.n	800b64c <XMC_lStartTransfer+0xcc>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:222
      case XMC_USBH_PACKET_DATA1:
        hctsiz   &= (uint32_t)~USB_CH_HCTSIZ_BUFFERMODE_Pid_Msk;
 800b63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b640:	63bb      	str	r3, [r7, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:223
        hctsiz   |= (uint32_t)USB_CH_HCTSIZx_DPID_DATA1;
 800b642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b644:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b648:	63bb      	str	r3, [r7, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:224
        break;
 800b64a:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:230
      default:
        break;
    }

    /* Prepare odd/even frame */
    if ((XMC_USBH0_device.global_register->HFNUM & 1U) != 0U) {
 800b64c:	4b65      	ldr	r3, [pc, #404]	; (800b7e4 <XMC_lStartTransfer+0x264>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b654:	f003 0301 	and.w	r3, r3, #1
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d004      	beq.n	800b666 <XMC_lStartTransfer+0xe6>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:231
      hcchar &= (uint32_t)~USB_CH_HCCHAR_OddFrm_Msk;
 800b65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b65e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b662:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b664:	e003      	b.n	800b66e <XMC_lStartTransfer+0xee>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:233
    } else {
      hcchar |= (uint32_t)USB_CH_HCCHAR_OddFrm_Msk;
 800b666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b668:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b66c:	63fb      	str	r3, [r7, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:237
    }
  
    /* Get transfer type specific status */
    switch (ptr_pipe->ep_type) {
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	7e9b      	ldrb	r3, [r3, #26]
 800b672:	2b03      	cmp	r3, #3
 800b674:	d81f      	bhi.n	800b6b6 <XMC_lStartTransfer+0x136>
 800b676:	a201      	add	r2, pc, #4	; (adr r2, 800b67c <XMC_lStartTransfer+0xfc>)
 800b678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b67c:	0800b68d 	.word	0x0800b68d
 800b680:	0800b6a1 	.word	0x0800b6a1
 800b684:	0800b68d 	.word	0x0800b68d
 800b688:	0800b6a1 	.word	0x0800b6a1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:240
      case XMC_USBH_ENDPOINT_CONTROL:
      case XMC_USBH_ENDPOINT_BULK:
        if (!(hcchar & USB_CH_HCCHAR_EPDir_Msk)) {
 800b68c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b68e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b692:	2b00      	cmp	r3, #0
 800b694:	d111      	bne.n	800b6ba <XMC_lStartTransfer+0x13a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:241
          txsts = XMC_USBH0_device.global_register->GNPTXSTS;
 800b696:	4b53      	ldr	r3, [pc, #332]	; (800b7e4 <XMC_lStartTransfer+0x264>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b69c:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:243
        }
        break;
 800b69e:	e00c      	b.n	800b6ba <XMC_lStartTransfer+0x13a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:246
      case XMC_USBH_ENDPOINT_ISOCHRONOUS:
      case XMC_USBH_ENDPOINT_INTERRUPT:
        if (!(hcchar & USB_CH_HCCHAR_EPDir_Msk)) {
 800b6a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d109      	bne.n	800b6be <XMC_lStartTransfer+0x13e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:247
          txsts = XMC_USBH0_device.global_register->HPTXSTS;
 800b6aa:	4b4e      	ldr	r3, [pc, #312]	; (800b7e4 <XMC_lStartTransfer+0x264>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800b6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:249
        }
        break;
 800b6b4:	e003      	b.n	800b6be <XMC_lStartTransfer+0x13e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:251
      default:
        break;
 800b6b6:	bf00      	nop
 800b6b8:	e002      	b.n	800b6c0 <XMC_lStartTransfer+0x140>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:243
      case XMC_USBH_ENDPOINT_CONTROL:
      case XMC_USBH_ENDPOINT_BULK:
        if (!(hcchar & USB_CH_HCCHAR_EPDir_Msk)) {
          txsts = XMC_USBH0_device.global_register->GNPTXSTS;
        }
        break;
 800b6ba:	bf00      	nop
 800b6bc:	e000      	b.n	800b6c0 <XMC_lStartTransfer+0x140>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:249
      case XMC_USBH_ENDPOINT_ISOCHRONOUS:
      case XMC_USBH_ENDPOINT_INTERRUPT:
        if (!(hcchar & USB_CH_HCCHAR_EPDir_Msk)) {
          txsts = XMC_USBH0_device.global_register->HPTXSTS;
        }
        break;
 800b6be:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:255
      default:
        break;
    }
  
    /* Calculate remaining transfer size */
    num_remaining_transfer = ptr_pipe->num - ptr_pipe->num_transferred_total;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	689a      	ldr	r2, [r3, #8]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	633b      	str	r3, [r7, #48]	; 0x30
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:257
    /* Limit transfer to available space inside fifo/queue if OUT transaction */
    if ((uint32_t)(hcchar & USB_CH_HCCHAR_EPDir_Msk) == 0U) {
 800b6cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d144      	bne.n	800b760 <XMC_lStartTransfer+0x1e0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:258
      max_pckt_size =  ptr_pipe->ep_max_packet_size;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	8a9b      	ldrh	r3, [r3, #20]
 800b6da:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:259
      num_remaining_fifo = (uint32_t)((uint32_t)(txsts & 0x0000FFFFU) <<  2);
 800b6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6de:	009a      	lsls	r2, r3, #2
 800b6e0:	4b41      	ldr	r3, [pc, #260]	; (800b7e8 <XMC_lStartTransfer+0x268>)
 800b6e2:	4013      	ands	r3, r2
 800b6e4:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:260
      num_remaining_queue  = (uint32_t)((uint32_t)(txsts & 0x00FF0000U) >> 16);
 800b6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e8:	0c1b      	lsrs	r3, r3, #16
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:261
      if (num_remaining_transfer > num_remaining_fifo) {
 800b6ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d901      	bls.n	800b6fa <XMC_lStartTransfer+0x17a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:262
        num_remaining_transfer = num_remaining_fifo;
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	633b      	str	r3, [r7, #48]	; 0x30
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:264
      }
      pckt_num = (uint32_t)((num_remaining_transfer + (max_pckt_size - 1U)) / max_pckt_size);
 800b6fa:	69ba      	ldr	r2, [r7, #24]
 800b6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fe:	4413      	add	r3, r2
 800b700:	1e5a      	subs	r2, r3, #1
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	fbb2 f3f3 	udiv	r3, r2, r3
 800b708:	62bb      	str	r3, [r7, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:265
      if (pckt_num > num_remaining_queue) {
 800b70a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d901      	bls.n	800b716 <XMC_lStartTransfer+0x196>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:266
        pckt_num = num_remaining_queue;
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	62bb      	str	r3, [r7, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:268
      }
      if (num_remaining_transfer > (pckt_num * max_pckt_size)) {
 800b716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b718:	69ba      	ldr	r2, [r7, #24]
 800b71a:	fb02 f203 	mul.w	r2, r2, r3
 800b71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b720:	429a      	cmp	r2, r3
 800b722:	d204      	bcs.n	800b72e <XMC_lStartTransfer+0x1ae>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:269
        num_remaining_transfer = pckt_num * max_pckt_size;
 800b724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b726:	69ba      	ldr	r2, [r7, #24]
 800b728:	fb02 f303 	mul.w	r3, r2, r3
 800b72c:	633b      	str	r3, [r7, #48]	; 0x30
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:271
      }
      cnt = (uint16_t)((num_remaining_transfer + 3U) / 4U);
 800b72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b730:	3303      	adds	r3, #3
 800b732:	089b      	lsrs	r3, r3, #2
 800b734:	83fb      	strh	r3, [r7, #30]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:272
      ptr_src  = ptr_pipe->data + ptr_pipe->num_transferred_total;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	685a      	ldr	r2, [r3, #4]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	4413      	add	r3, r2
 800b740:	627b      	str	r3, [r7, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:273
      loc_index = ((USB0_CH_TypeDef *)ptr_ch - (USB0_CH_TypeDef *)(XMC_USBH0_device.host_channel_registers));
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	4a27      	ldr	r2, [pc, #156]	; (800b7e4 <XMC_lStartTransfer+0x264>)
 800b746:	6852      	ldr	r2, [r2, #4]
 800b748:	1a9b      	subs	r3, r3, r2
 800b74a:	115b      	asrs	r3, r3, #5
 800b74c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:274
      ptr_dest = (uint32_t *)XMC_USBH0_dfifo_ptr[loc_index];
 800b74e:	4a27      	ldr	r2, [pc, #156]	; (800b7ec <XMC_lStartTransfer+0x26c>)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b756:	623b      	str	r3, [r7, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:276
      /* For OUT/SETUP transfer num_transferring represents num of bytes to be sent */
      ptr_pipe->num_transferring = num_remaining_transfer;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b75c:	611a      	str	r2, [r3, #16]
 800b75e:	e002      	b.n	800b766 <XMC_lStartTransfer+0x1e6>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:280
    }
    else {
      /* For IN transfer num_transferring is zero */
      ptr_pipe->num_transferring = 0U;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:283
    }
    /* Set packet count and transfer size */
    if (num_remaining_transfer != 0U) {
 800b766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d012      	beq.n	800b792 <XMC_lStartTransfer+0x212>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:284
      hctsiz |= (((num_remaining_transfer + ptr_pipe->ep_max_packet_size) - 1U) / ptr_pipe->ep_max_packet_size) << 19U;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	8a9b      	ldrh	r3, [r3, #20]
 800b770:	461a      	mov	r2, r3
 800b772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b774:	4413      	add	r3, r2
 800b776:	3b01      	subs	r3, #1
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	8a92      	ldrh	r2, [r2, #20]
 800b77c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b780:	04db      	lsls	r3, r3, #19
 800b782:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b784:	4313      	orrs	r3, r2
 800b786:	63bb      	str	r3, [r7, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:285
      hctsiz |=   num_remaining_transfer;
 800b788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78c:	4313      	orrs	r3, r2
 800b78e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b790:	e003      	b.n	800b79a <XMC_lStartTransfer+0x21a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:287
    } else {                                                 /* Zero length packet */
      hctsiz |= ((uint32_t)1U << USB_CH_HCTSIZ_BUFFERMODE_PktCnt_Pos); /* Packet count = 1 */
 800b792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b794:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b798:	63bb      	str	r3, [r7, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:290
      hctsiz |= 0U;                                        /* Transfer size = 0 */
    }
    NVIC_DisableIRQ (USB0_0_IRQn);
 800b79a:	206b      	movs	r0, #107	; 0x6b
 800b79c:	f7ff fe76 	bl	800b48c <NVIC_DisableIRQ>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:291
    ptr_ch->HCINTMSK = hcintmsk;                  /* Enable channel interrupts */
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7a4:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:292
    ptr_ch->HCTSIZ_BUFFERMODE = hctsiz;           /* Write ch transfer size */
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7aa:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:293
    ptr_ch->HCCHAR = hcchar;                      /* Write ch characteristics */
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b7b0:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:294
    while (cnt != 0U) {                           /* Load data */
 800b7b2:	e009      	b.n	800b7c8 <XMC_lStartTransfer+0x248>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:298
#if defined __TASKING__/*tasking*/
      *ptr_dest = *((__unaligned uint32_t *)ptr_src);
#else/* defined (__GNUC__) || defined (__CC_ARM) || defined (__ICCARM__)*/
      *ptr_dest = *((__packed uint32_t *)ptr_src);
 800b7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	6a3b      	ldr	r3, [r7, #32]
 800b7ba:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:300
#endif
      ptr_src  += 4U;
 800b7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7be:	3304      	adds	r3, #4
 800b7c0:	627b      	str	r3, [r7, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:301
      cnt--;
 800b7c2:	8bfb      	ldrh	r3, [r7, #30]
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	83fb      	strh	r3, [r7, #30]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:294
    }
    NVIC_DisableIRQ (USB0_0_IRQn);
    ptr_ch->HCINTMSK = hcintmsk;                  /* Enable channel interrupts */
    ptr_ch->HCTSIZ_BUFFERMODE = hctsiz;           /* Write ch transfer size */
    ptr_ch->HCCHAR = hcchar;                      /* Write ch characteristics */
    while (cnt != 0U) {                           /* Load data */
 800b7c8:	8bfb      	ldrh	r3, [r7, #30]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d1f2      	bne.n	800b7b4 <XMC_lStartTransfer+0x234>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:303
      *ptr_dest = *((__packed uint32_t *)ptr_src);
#endif
      ptr_src  += 4U;
      cnt--;
    }
    NVIC_EnableIRQ  (USB0_0_IRQn);                /* Enable OTG interrupt */
 800b7ce:	206b      	movs	r0, #107	; 0x6b
 800b7d0:	f7ff fe44 	bl	800b45c <NVIC_EnableIRQ>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:304
    status = true;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	777b      	strb	r3, [r7, #29]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:306
  }
  return status;
 800b7d8:	7f7b      	ldrb	r3, [r7, #29]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:307
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3740      	adds	r7, #64	; 0x40
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	20000008 	.word	0x20000008
 800b7e8:	0003fffc 	.word	0x0003fffc
 800b7ec:	200000b8 	.word	0x200000b8

0800b7f0 <XMC_USBH_GetVersion>:
XMC_USBH_GetVersion():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:315
/**
 * @return      \ref XMC_USBH_DRIVER_VERSION_t
 * \par<b>Description:</b><br>
 * Get driver version.
*/
static XMC_USBH_DRIVER_VERSION_t XMC_USBH_GetVersion (void) { return xmc_usbh_driver_version; }
 800b7f0:	b480      	push	{r7}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	4b07      	ldr	r3, [pc, #28]	; (800b814 <XMC_USBH_GetVersion+0x24>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	607b      	str	r3, [r7, #4]
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	88ba      	ldrh	r2, [r7, #4]
 800b800:	f362 030f 	bfi	r3, r2, #0, #16
 800b804:	88fa      	ldrh	r2, [r7, #6]
 800b806:	f362 431f 	bfi	r3, r2, #16, #16
 800b80a:	4618      	mov	r0, r3
 800b80c:	370c      	adds	r7, #12
 800b80e:	46bd      	mov	sp, r7
 800b810:	bc80      	pop	{r7}
 800b812:	4770      	bx	lr
 800b814:	0800ef00 	.word	0x0800ef00

0800b818 <XMC_USBH_GetCapabilities>:
XMC_USBH_GetCapabilities():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:322
/**
 * @return  \ref XMC_USBH_CAPABILITIES_t
 * \par<b>Description:</b><br>
 * Get driver capabilities.
*/
static XMC_USBH_CAPABILITIES_t XMC_USBH_GetCapabilities (void) { return xmc_usbh_driver_capabilities; }
 800b818:	b480      	push	{r7}
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	2201      	movs	r2, #1
 800b81e:	f362 030e 	bfi	r3, r2, #0, #15
 800b822:	f36f 33cf 	bfc	r3, #15, #1
 800b826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b82a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b82e:	f36f 4392 	bfc	r3, #18, #1
 800b832:	4618      	mov	r0, r3
 800b834:	46bd      	mov	sp, r7
 800b836:	bc80      	pop	{r7}
 800b838:	4770      	bx	lr
 800b83a:	bf00      	nop

0800b83c <XMC_USBH_Initialize>:
XMC_USBH_Initialize():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:337
 *
 *  \par<b>Related APIs:</b><BR>
 *  XMC_USBH_Select_VBUS(), XMC_USBH_Uninitialize() \n
*/
static int32_t XMC_USBH_Initialize (XMC_USBH_SignalPortEvent_t cb_port_event,
                                XMC_USBH_SignalPipeEvent_t cb_pipe_event) {
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:340

  uint32_t channel;
  int32_t status = XMC_USBH_DRIVER_OK;
 800b846:	2300      	movs	r3, #0
 800b848:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:341
  if (XMC_USBH0_device.init_done == true)
 800b84a:	4b17      	ldr	r3, [pc, #92]	; (800b8a8 <XMC_USBH_Initialize+0x6c>)
 800b84c:	7c1b      	ldrb	r3, [r3, #16]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d124      	bne.n	800b89c <XMC_USBH_Initialize+0x60>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:348
    /*return ok since initialized*/
  }
  else
  {
    /* assign callbacks */
    XMC_USBH0_device.SignalPortEvent_cb = cb_port_event;
 800b852:	4a15      	ldr	r2, [pc, #84]	; (800b8a8 <XMC_USBH_Initialize+0x6c>)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6093      	str	r3, [r2, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:349
    XMC_USBH0_device.SignalPipeEvent_cb = cb_pipe_event;
 800b858:	4a13      	ldr	r2, [pc, #76]	; (800b8a8 <XMC_USBH_Initialize+0x6c>)
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	60d3      	str	r3, [r2, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:352

    /* assign fifo start addresses */
    for (channel = 0U; channel < USBH0_MAX_PIPE_NUM; channel++) {
 800b85e:	2300      	movs	r3, #0
 800b860:	60fb      	str	r3, [r7, #12]
 800b862:	e00c      	b.n	800b87e <XMC_USBH_Initialize+0x42>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:353 (discriminator 3)
      XMC_USBH0_dfifo_ptr[channel] = (uint32_t *)((uint32_t)USB0_BASE + ((channel + 1U) * 0x01000U));
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 800b86a:	3341      	adds	r3, #65	; 0x41
 800b86c:	031b      	lsls	r3, r3, #12
 800b86e:	4619      	mov	r1, r3
 800b870:	4a0e      	ldr	r2, [pc, #56]	; (800b8ac <XMC_USBH_Initialize+0x70>)
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:352 (discriminator 3)
    /* assign callbacks */
    XMC_USBH0_device.SignalPortEvent_cb = cb_port_event;
    XMC_USBH0_device.SignalPipeEvent_cb = cb_pipe_event;

    /* assign fifo start addresses */
    for (channel = 0U; channel < USBH0_MAX_PIPE_NUM; channel++) {
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	3301      	adds	r3, #1
 800b87c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:352 (discriminator 1)
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2b0d      	cmp	r3, #13
 800b882:	d9ef      	bls.n	800b864 <XMC_USBH_Initialize+0x28>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:356
      XMC_USBH0_dfifo_ptr[channel] = (uint32_t *)((uint32_t)USB0_BASE + ((channel + 1U) * 0x01000U));
    }

    XMC_GPIO_SetMode(VBUS_port, (uint8_t)VBUS_pin, XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1);
 800b884:	4b0a      	ldr	r3, [pc, #40]	; (800b8b0 <XMC_USBH_Initialize+0x74>)
 800b886:	6818      	ldr	r0, [r3, #0]
 800b888:	4b0a      	ldr	r3, [pc, #40]	; (800b8b4 <XMC_USBH_Initialize+0x78>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	2288      	movs	r2, #136	; 0x88
 800b890:	4619      	mov	r1, r3
 800b892:	f7fc f9cf 	bl	8007c34 <XMC_GPIO_SetMode>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:358
  
    XMC_USBH0_device.init_done = true;
 800b896:	4b04      	ldr	r3, [pc, #16]	; (800b8a8 <XMC_USBH_Initialize+0x6c>)
 800b898:	2201      	movs	r2, #1
 800b89a:	741a      	strb	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:360
  }
  return status;
 800b89c:	68bb      	ldr	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:361
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	20000008 	.word	0x20000008
 800b8ac:	200000b8 	.word	0x200000b8
 800b8b0:	20000000 	.word	0x20000000
 800b8b4:	20000004 	.word	0x20000004

0800b8b8 <XMC_USBH_Uninitialize>:
XMC_USBH_Uninitialize():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:371
 * De-initialize USB Host Interface. Sets the driver power state as powered off. Disables VBUS.\n
 *
 * \par<b>Related APIs:</b><BR>
 *  XMC_USBH_Select_VBUS(), XMC_USBH_Initialize(), XMC_USBH_PortVbusOnOff() \n
*/
static int32_t XMC_USBH_Uninitialize (void) {
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:372
  XMC_USBH0_device.init_done = false;
 800b8bc:	4b04      	ldr	r3, [pc, #16]	; (800b8d0 <XMC_USBH_Uninitialize+0x18>)
 800b8be:	2200      	movs	r2, #0
 800b8c0:	741a      	strb	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:373
  (void)XMC_USBH_PowerControl(XMC_USBH_POWER_OFF);
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	f000 f806 	bl	800b8d4 <XMC_USBH_PowerControl>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:374
  return XMC_USBH_DRIVER_OK;
 800b8c8:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:375
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	20000008 	.word	0x20000008

0800b8d4 <XMC_USBH_PowerControl>:
XMC_USBH_PowerControl():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:388
 * disables the peripheral and the VBUS.\n
 *
 * \par<b>Related APIs:</b><BR>
 *  XMC_USBH_Select_VBUS(), XMC_USBH_Initialize(), XMC_USBH_PortVbusOnOff(), XMC_USBH_Uninitialize() \n
*/
static int32_t XMC_USBH_PowerControl (XMC_USBH_POWER_STATE_t state) {
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	4603      	mov	r3, r0
 800b8dc:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:389
  int32_t status = XMC_USBH_DRIVER_OK;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:391
  uint32_t loc_value;
  switch (state) {
 800b8e2:	79fb      	ldrb	r3, [r7, #7]
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d004      	beq.n	800b8f2 <XMC_USBH_PowerControl+0x1e>
 800b8e8:	2b02      	cmp	r3, #2
 800b8ea:	d033      	beq.n	800b954 <XMC_USBH_PowerControl+0x80>
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d004      	beq.n	800b8fa <XMC_USBH_PowerControl+0x26>
 800b8f0:	e0dd      	b.n	800baae <XMC_USBH_PowerControl+0x1da>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:393
    case XMC_USBH_POWER_LOW:
      status = XMC_USBH_DRIVER_ERROR_UNSUPPORTED;
 800b8f2:	f06f 0303 	mvn.w	r3, #3
 800b8f6:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:394
      break;
 800b8f8:	e0dc      	b.n	800bab4 <XMC_USBH_PowerControl+0x1e0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:396
    case XMC_USBH_POWER_OFF:
      NVIC_DisableIRQ  (USB0_0_IRQn);
 800b8fa:	206b      	movs	r0, #107	; 0x6b
 800b8fc:	f7ff fdc6 	bl	800b48c <NVIC_DisableIRQ>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:397
      NVIC_ClearPendingIRQ (USB0_0_IRQn); /* Clear pending interrupt */
 800b900:	206b      	movs	r0, #107	; 0x6b
 800b902:	f7ff fddd 	bl	800b4c0 <NVIC_ClearPendingIRQ>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:398
      XMC_USBH0_device.power_state =  state; /* Clear powered flag */
 800b906:	4a6e      	ldr	r2, [pc, #440]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800b908:	79fb      	ldrb	r3, [r7, #7]
 800b90a:	7453      	strb	r3, [r2, #17]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:399
      XMC_USBH0_device.global_register->GAHBCFG  &= (uint32_t)(~USB_GAHBCFG_GlblIntrMsk_Msk); /* Disable USB interrupts */
 800b90c:	4b6c      	ldr	r3, [pc, #432]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a6b      	ldr	r2, [pc, #428]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800b912:	6812      	ldr	r2, [r2, #0]
 800b914:	6892      	ldr	r2, [r2, #8]
 800b916:	f022 0201 	bic.w	r2, r2, #1
 800b91a:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:400
      XMC_lClockGating((uint8_t)XMC_USBH_CLOCK_GATING_ENABLE); /* Enable Clock Gating */
 800b91c:	2001      	movs	r0, #1
 800b91e:	f7ff fe13 	bl	800b548 <XMC_lClockGating>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:401
      XMC_USBH0_device.global_register->PCGCCTL  |=  (uint32_t)USB_PCGCCTL_StopPclk_Msk; /* Stop PHY clock */
 800b922:	4b67      	ldr	r3, [pc, #412]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4a66      	ldr	r2, [pc, #408]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800b928:	6812      	ldr	r2, [r2, #0]
 800b92a:	f8d2 2e00 	ldr.w	r2, [r2, #3584]	; 0xe00
 800b92e:	f042 0201 	orr.w	r2, r2, #1
 800b932:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:402
      XMC_SCU_POWER_DisableUsb(); /* Disable Power USB */
 800b936:	f7f6 faf5 	bl	8001f24 <XMC_SCU_POWER_DisableUsb>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:403
      XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0); /* reset USB */
 800b93a:	4862      	ldr	r0, [pc, #392]	; (800bac4 <XMC_USBH_PowerControl+0x1f0>)
 800b93c:	f7f5 ff0a 	bl	8001754 <XMC_SCU_RESET_AssertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:404
      XMC_USBH0_device.port_reset_active =  false; /* Reset variables */
 800b940:	4b5f      	ldr	r3, [pc, #380]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800b942:	2200      	movs	r2, #0
 800b944:	749a      	strb	r2, [r3, #18]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:405
      memset((void *)(pipe), 0, (USBH0_MAX_PIPE_NUM * sizeof(XMC_USBH0_pipe_t)));
 800b946:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800b94a:	2100      	movs	r1, #0
 800b94c:	485e      	ldr	r0, [pc, #376]	; (800bac8 <XMC_USBH_PowerControl+0x1f4>)
 800b94e:	f003 faae 	bl	800eeae <memset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:406
      break;
 800b952:	e0af      	b.n	800bab4 <XMC_USBH_PowerControl+0x1e0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:408
    case XMC_USBH_POWER_FULL:
      if (XMC_USBH0_device.init_done == false)
 800b954:	4b5a      	ldr	r3, [pc, #360]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800b956:	7c1b      	ldrb	r3, [r3, #16]
 800b958:	f083 0301 	eor.w	r3, r3, #1
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d003      	beq.n	800b96a <XMC_USBH_PowerControl+0x96>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:410
      {
        status = XMC_USBH_DRIVER_ERROR;
 800b962:	f04f 33ff 	mov.w	r3, #4294967295
 800b966:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:411
        break;
 800b968:	e0a4      	b.n	800bab4 <XMC_USBH_PowerControl+0x1e0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:413
      } /* not initialized */
      if (XMC_USBH0_device.power_state == XMC_USBH_POWER_FULL)
 800b96a:	4b55      	ldr	r3, [pc, #340]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800b96c:	7c5b      	ldrb	r3, [r3, #17]
 800b96e:	2b02      	cmp	r3, #2
 800b970:	d102      	bne.n	800b978 <XMC_USBH_PowerControl+0xa4>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:415
      {
        status = XMC_USBH_DRIVER_OK;
 800b972:	2300      	movs	r3, #0
 800b974:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:416
        break;
 800b976:	e09d      	b.n	800bab4 <XMC_USBH_PowerControl+0x1e0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:418
      } /* already powered */
      XMC_lClockGating((uint8_t)XMC_USBH_CLOCK_GATING_DISABLE); /* disable clock gating */
 800b978:	2000      	movs	r0, #0
 800b97a:	f7ff fde5 	bl	800b548 <XMC_lClockGating>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:419
      (void)XMC_USBH_osDelay(2U);
 800b97e:	2002      	movs	r0, #2
 800b980:	f001 f832 	bl	800c9e8 <XMC_USBH_osDelay>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:420
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0); /* deassert reset USB */
 800b984:	484f      	ldr	r0, [pc, #316]	; (800bac4 <XMC_USBH_PowerControl+0x1f0>)
 800b986:	f7f5 ff01 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:421
      (void)XMC_USBH_osDelay(2U);
 800b98a:	2002      	movs	r0, #2
 800b98c:	f001 f82c 	bl	800c9e8 <XMC_USBH_osDelay>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:422
      (void)XMC_USBH_osDelay(100U);
 800b990:	2064      	movs	r0, #100	; 0x64
 800b992:	f001 f829 	bl	800c9e8 <XMC_USBH_osDelay>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:423
      XMC_SCU_POWER_EnableUsb(); /* Enable Power USB */
 800b996:	f7f6 fab9 	bl	8001f0c <XMC_SCU_POWER_EnableUsb>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:426

      /* On-chip Full-speed PHY */
      XMC_USBH0_device.global_register->PCGCCTL  &=  (uint32_t)~USB_PCGCCTL_StopPclk_Msk;  /* Start PHY clock */
 800b99a:	4b49      	ldr	r3, [pc, #292]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4a48      	ldr	r2, [pc, #288]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800b9a0:	6812      	ldr	r2, [r2, #0]
 800b9a2:	f8d2 2e00 	ldr.w	r2, [r2, #3584]	; 0xe00
 800b9a6:	f022 0201 	bic.w	r2, r2, #1
 800b9aa:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:427
      XMC_USBH0_device.global_register->GUSBCFG  |=  (uint32_t)USB_GUSBCFG_PHYSel_Msk;    /* Full-speed transceiver */
 800b9ae:	4b44      	ldr	r3, [pc, #272]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4a43      	ldr	r2, [pc, #268]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800b9b4:	6812      	ldr	r2, [r2, #0]
 800b9b6:	68d2      	ldr	r2, [r2, #12]
 800b9b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b9bc:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:429

      while ((XMC_USBH0_device.global_register->GRSTCTL & USB_GRSTCTL_AHBIdle_Msk) == 0U) /* wait until AHB master state machine is idle */
 800b9be:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:429 (discriminator 1)
 800b9c0:	4b3f      	ldr	r3, [pc, #252]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	691b      	ldr	r3, [r3, #16]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	dafa      	bge.n	800b9c0 <XMC_USBH_PowerControl+0xec>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:434
      {
        /*Wait*/
      }

      XMC_USBH0_device.global_register->GRSTCTL |=  (uint32_t)USB_GRSTCTL_CSftRst_Msk; /* Core soft reset */
 800b9ca:	4b3d      	ldr	r3, [pc, #244]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4a3c      	ldr	r2, [pc, #240]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800b9d0:	6812      	ldr	r2, [r2, #0]
 800b9d2:	6912      	ldr	r2, [r2, #16]
 800b9d4:	f042 0201 	orr.w	r2, r2, #1
 800b9d8:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:436

      while ((XMC_USBH0_device.global_register->GRSTCTL & USB_GRSTCTL_CSftRst_Msk)  != 0U) /* wait soft reset confirmation */
 800b9da:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:436 (discriminator 1)
 800b9dc:	4b38      	ldr	r3, [pc, #224]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	f003 0301 	and.w	r3, r3, #1
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d1f8      	bne.n	800b9dc <XMC_USBH_PowerControl+0x108>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:440
      {
        /*Wait*/
      }
      (void)XMC_USBH_osDelay(100U);
 800b9ea:	2064      	movs	r0, #100	; 0x64
 800b9ec:	f000 fffc 	bl	800c9e8 <XMC_USBH_osDelay>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:442

      XMC_USBH0_device.port_reset_active =  false; /* Reset variables */
 800b9f0:	4b33      	ldr	r3, [pc, #204]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	749a      	strb	r2, [r3, #18]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:443
      memset((void *)(pipe), 0, (USBH0_MAX_PIPE_NUM * sizeof(XMC_USBH0_pipe_t)));
 800b9f6:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	4832      	ldr	r0, [pc, #200]	; (800bac8 <XMC_USBH_PowerControl+0x1f4>)
 800b9fe:	f003 fa56 	bl	800eeae <memset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:446

      /*Created local copy of GUSBCFG to avoid side effects*/
      loc_value = XMC_USBH0_device.global_register->GUSBCFG;
 800ba02:	4b2f      	ldr	r3, [pc, #188]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:447
      if (((loc_value & USB_GUSBCFG_ForceHstMode_Msk) == 0U) || \
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d004      	beq.n	800ba1e <XMC_USBH_PowerControl+0x14a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:448 (discriminator 1)
          ((loc_value & USB_GUSBCFG_ForceDevMode_Msk) != 0U))
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:447 (discriminator 1)
      XMC_USBH0_device.port_reset_active =  false; /* Reset variables */
      memset((void *)(pipe), 0, (USBH0_MAX_PIPE_NUM * sizeof(XMC_USBH0_pipe_t)));

      /*Created local copy of GUSBCFG to avoid side effects*/
      loc_value = XMC_USBH0_device.global_register->GUSBCFG;
      if (((loc_value & USB_GUSBCFG_ForceHstMode_Msk) == 0U) || \
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d012      	beq.n	800ba44 <XMC_USBH_PowerControl+0x170>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:450
          ((loc_value & USB_GUSBCFG_ForceDevMode_Msk) != 0U))
      {
        XMC_USBH0_device.global_register->GUSBCFG &= (uint32_t)~USB_GUSBCFG_ForceDevMode_Msk;          /* Clear force device mode */
 800ba1e:	4b28      	ldr	r3, [pc, #160]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4a27      	ldr	r2, [pc, #156]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800ba24:	6812      	ldr	r2, [r2, #0]
 800ba26:	68d2      	ldr	r2, [r2, #12]
 800ba28:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800ba2c:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:451
        XMC_USBH0_device.global_register->GUSBCFG |=  (uint32_t)USB_GUSBCFG_ForceHstMode_Msk;          /* Force host mode */
 800ba2e:	4b24      	ldr	r3, [pc, #144]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4a23      	ldr	r2, [pc, #140]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800ba34:	6812      	ldr	r2, [r2, #0]
 800ba36:	68d2      	ldr	r2, [r2, #12]
 800ba38:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800ba3c:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:452
        (void)XMC_USBH_osDelay(100U);
 800ba3e:	2064      	movs	r0, #100	; 0x64
 800ba40:	f000 ffd2 	bl	800c9e8 <XMC_USBH_osDelay>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:456
      }

      /* FS only, even if HS is supported */
      XMC_USBH0_device.global_register->HCFG     |=  (uint32_t)(0x200U | USB_CH_HCFG_FSLSSUP(1));
 800ba44:	4b1e      	ldr	r3, [pc, #120]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4a1d      	ldr	r2, [pc, #116]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800ba4a:	6812      	ldr	r2, [r2, #0]
 800ba4c:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800ba50:	f442 7201 	orr.w	r2, r2, #516	; 0x204
 800ba54:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:459

      /* Rx FIFO setting */
      XMC_USBH0_device.global_register->GRXFSIZ   = (RX_FIFO_SIZE/4U);
 800ba58:	4b19      	ldr	r3, [pc, #100]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f44f 728d 	mov.w	r2, #282	; 0x11a
 800ba60:	625a      	str	r2, [r3, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:461
      /* Non-periodic Tx FIFO setting */
      XMC_USBH0_device.global_register->GNPTXFSIZ_HOSTMODE = (((uint32_t)(TX_FIFO_SIZE_NON_PERI/4U) << 16) |  (RX_FIFO_SIZE / 4U));
 800ba62:	4b17      	ldr	r3, [pc, #92]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a19      	ldr	r2, [pc, #100]	; (800bacc <XMC_USBH_PowerControl+0x1f8>)
 800ba68:	629a      	str	r2, [r3, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:463
      /* Periodic Tx FIFO setting */
      XMC_USBH0_device.global_register->HPTXFSIZ  = ((uint32_t)(TX_FIFO_SIZE_PERI / 4U) << 16U) | ((RX_FIFO_SIZE + TX_FIFO_SIZE_NON_PERI) / 4U);
 800ba6a:	4b15      	ldr	r3, [pc, #84]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a18      	ldr	r2, [pc, #96]	; (800bad0 <XMC_USBH_PowerControl+0x1fc>)
 800ba70:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:465
      /* Enable channel interrupts */
      XMC_USBH0_device.global_register->HAINTMSK  = ((uint32_t)1U << USBH0_MAX_PIPE_NUM) - 1U;
 800ba74:	4b12      	ldr	r3, [pc, #72]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800ba7c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:467
      /* Unmask interrupts */
      XMC_USBH0_device.global_register->GINTMSK_HOSTMODE   = (
 800ba80:	4b0f      	ldr	r3, [pc, #60]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a13      	ldr	r2, [pc, #76]	; (800bad4 <XMC_USBH_PowerControl+0x200>)
 800ba86:	619a      	str	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:476
                        USB_GINTMSK_HOSTMODE_RxFLvlMsk_Msk |
                        USB_GINTMSK_HOSTMODE_SofMsk_Msk  |
                        USB_GINTMSK_HOSTMODE_WkUpIntMsk_Msk
                       )   ;
      /* Set powered state */
      XMC_USBH0_device.power_state = state;
 800ba88:	4a0d      	ldr	r2, [pc, #52]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800ba8a:	79fb      	ldrb	r3, [r7, #7]
 800ba8c:	7453      	strb	r3, [r2, #17]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:478
      /* Enable interrupts */
      XMC_USBH0_device.global_register->GAHBCFG  |=  (uint32_t)USB_GAHBCFG_GlblIntrMsk_Msk;
 800ba8e:	4b0c      	ldr	r3, [pc, #48]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	4a0b      	ldr	r2, [pc, #44]	; (800bac0 <XMC_USBH_PowerControl+0x1ec>)
 800ba94:	6812      	ldr	r2, [r2, #0]
 800ba96:	6892      	ldr	r2, [r2, #8]
 800ba98:	f042 0201 	orr.w	r2, r2, #1
 800ba9c:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:480
      /* Set highest interrupt priority */
      NVIC_SetPriority (USB0_0_IRQn, 0U);
 800ba9e:	2100      	movs	r1, #0
 800baa0:	206b      	movs	r0, #107	; 0x6b
 800baa2:	f7ff fd27 	bl	800b4f4 <NVIC_SetPriority>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:481
      NVIC_EnableIRQ   (USB0_0_IRQn);
 800baa6:	206b      	movs	r0, #107	; 0x6b
 800baa8:	f7ff fcd8 	bl	800b45c <NVIC_EnableIRQ>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:482
      break;
 800baac:	e002      	b.n	800bab4 <XMC_USBH_PowerControl+0x1e0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:484
    default:
      status = XMC_USBH_DRIVER_ERROR_UNSUPPORTED;
 800baae:	f06f 0303 	mvn.w	r3, #3
 800bab2:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:486
  }
  return status;
 800bab4:	68fb      	ldr	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:487
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	20000008 	.word	0x20000008
 800bac4:	20000080 	.word	0x20000080
 800bac8:	200003b8 	.word	0x200003b8
 800bacc:	0010011a 	.word	0x0010011a
 800bad0:	0100012a 	.word	0x0100012a
 800bad4:	a3000018 	.word	0xa3000018

0800bad8 <XMC_USBH_PortVbusOnOff>:
XMC_USBH_PortVbusOnOff():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:499
 * @return int32_t \ref Execution_status. Returns 0 if successful.
 *
 * \par<b>Description:</b><br>
 * Set USB port VBUS on/off.
*/
static int32_t XMC_USBH_PortVbusOnOff (uint8_t port, bool vbus) {
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	4603      	mov	r3, r0
 800bae0:	460a      	mov	r2, r1
 800bae2:	71fb      	strb	r3, [r7, #7]
 800bae4:	4613      	mov	r3, r2
 800bae6:	71bb      	strb	r3, [r7, #6]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:500
  int32_t status = XMC_USBH_DRIVER_OK;
 800bae8:	2300      	movs	r3, #0
 800baea:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:501
  if (XMC_USBH0_device.power_state == XMC_USBH_POWER_OFF)
 800baec:	4b1e      	ldr	r3, [pc, #120]	; (800bb68 <XMC_USBH_PortVbusOnOff+0x90>)
 800baee:	7c5b      	ldrb	r3, [r3, #17]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d103      	bne.n	800bafc <XMC_USBH_PortVbusOnOff+0x24>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:503
  {
    status = XMC_USBH_DRIVER_ERROR;
 800baf4:	f04f 33ff 	mov.w	r3, #4294967295
 800baf8:	60fb      	str	r3, [r7, #12]
 800bafa:	e030      	b.n	800bb5e <XMC_USBH_PortVbusOnOff+0x86>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:507
  }
  else
  {
    if (port != 0U)
 800bafc:	79fb      	ldrb	r3, [r7, #7]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d003      	beq.n	800bb0a <XMC_USBH_PortVbusOnOff+0x32>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:509
    {
      status = XMC_USBH_DRIVER_ERROR_PARAMETER;
 800bb02:	f06f 0304 	mvn.w	r3, #4
 800bb06:	60fb      	str	r3, [r7, #12]
 800bb08:	e029      	b.n	800bb5e <XMC_USBH_PortVbusOnOff+0x86>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:513
    }
    else
    {
      if (vbus != 0U) {
 800bb0a:	79bb      	ldrb	r3, [r7, #6]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d013      	beq.n	800bb38 <XMC_USBH_PortVbusOnOff+0x60>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:515
        /* Port power on */
        XMC_USBH0_device.global_register->HPRT |=  (uint32_t)USB_HPRT_PrtPwr_Msk;
 800bb10:	4b15      	ldr	r3, [pc, #84]	; (800bb68 <XMC_USBH_PortVbusOnOff+0x90>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a14      	ldr	r2, [pc, #80]	; (800bb68 <XMC_USBH_PortVbusOnOff+0x90>)
 800bb16:	6812      	ldr	r2, [r2, #0]
 800bb18:	f8d2 2440 	ldr.w	r2, [r2, #1088]	; 0x440
 800bb1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bb20:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:516
        XMC_GPIO_SetMode(VBUS_port, (uint8_t)VBUS_pin, XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1);
 800bb24:	4b11      	ldr	r3, [pc, #68]	; (800bb6c <XMC_USBH_PortVbusOnOff+0x94>)
 800bb26:	6818      	ldr	r0, [r3, #0]
 800bb28:	4b11      	ldr	r3, [pc, #68]	; (800bb70 <XMC_USBH_PortVbusOnOff+0x98>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	2288      	movs	r2, #136	; 0x88
 800bb30:	4619      	mov	r1, r3
 800bb32:	f7fc f87f 	bl	8007c34 <XMC_GPIO_SetMode>
 800bb36:	e012      	b.n	800bb5e <XMC_USBH_PortVbusOnOff+0x86>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:519
      } else {
        /* Port power off */
        XMC_USBH0_device.global_register->HPRT &= (uint32_t)~USB_HPRT_PrtPwr_Msk;
 800bb38:	4b0b      	ldr	r3, [pc, #44]	; (800bb68 <XMC_USBH_PortVbusOnOff+0x90>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a0a      	ldr	r2, [pc, #40]	; (800bb68 <XMC_USBH_PortVbusOnOff+0x90>)
 800bb3e:	6812      	ldr	r2, [r2, #0]
 800bb40:	f8d2 2440 	ldr.w	r2, [r2, #1088]	; 0x440
 800bb44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bb48:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:520
        XMC_GPIO_SetMode(VBUS_port, (uint8_t)VBUS_pin, XMC_GPIO_MODE_INPUT_TRISTATE);
 800bb4c:	4b07      	ldr	r3, [pc, #28]	; (800bb6c <XMC_USBH_PortVbusOnOff+0x94>)
 800bb4e:	6818      	ldr	r0, [r3, #0]
 800bb50:	4b07      	ldr	r3, [pc, #28]	; (800bb70 <XMC_USBH_PortVbusOnOff+0x98>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	2200      	movs	r2, #0
 800bb58:	4619      	mov	r1, r3
 800bb5a:	f7fc f86b 	bl	8007c34 <XMC_GPIO_SetMode>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:524
      }
    }
  }
  return status;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:525
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3710      	adds	r7, #16
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	20000008 	.word	0x20000008
 800bb6c:	20000000 	.word	0x20000000
 800bb70:	20000004 	.word	0x20000004

0800bb74 <XMC_USBH_PortReset>:
XMC_USBH_PortReset():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:535
 * \par<b>Description:</b><br>
 * Do USB port reset. Port reset should honor the requirement of 50ms delay before enabling.
 * The function depends on implementation of XMC_USBH_osDelay() for 1ms delay to achieve required delay.
 *
*/
static int32_t XMC_USBH_PortReset (uint8_t port) {
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:537
  uint32_t hprt;
  int32_t status = XMC_USBH_DRIVER_OK;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:538
  if (XMC_USBH0_device.power_state == XMC_USBH_POWER_OFF)
 800bb82:	4b25      	ldr	r3, [pc, #148]	; (800bc18 <XMC_USBH_PortReset+0xa4>)
 800bb84:	7c5b      	ldrb	r3, [r3, #17]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d103      	bne.n	800bb92 <XMC_USBH_PortReset+0x1e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:540
  {
    status = XMC_USBH_DRIVER_ERROR;
 800bb8a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb8e:	60fb      	str	r3, [r7, #12]
 800bb90:	e03c      	b.n	800bc0c <XMC_USBH_PortReset+0x98>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:544
  }
  else
  {
    if (port != 0U)
 800bb92:	79fb      	ldrb	r3, [r7, #7]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d002      	beq.n	800bb9e <XMC_USBH_PortReset+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:546
    {
      status = XMC_USBH_DRIVER_ERROR_PARAMETER;
 800bb98:	f06f 0304 	mvn.w	r3, #4
 800bb9c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:549
    }

    XMC_USBH0_device.port_reset_active = true;
 800bb9e:	4b1e      	ldr	r3, [pc, #120]	; (800bc18 <XMC_USBH_PortReset+0xa4>)
 800bba0:	2201      	movs	r2, #1
 800bba2:	749a      	strb	r2, [r3, #18]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:550
    hprt  =  XMC_USBH0_device.global_register->HPRT;
 800bba4:	4b1c      	ldr	r3, [pc, #112]	; (800bc18 <XMC_USBH_PortReset+0xa4>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 800bbac:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:551
    hprt &= (uint32_t)~USB_HPRT_PrtEna_Msk;                            /* Disable port */
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	f023 0304 	bic.w	r3, r3, #4
 800bbb4:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:552
    hprt |= (uint32_t)USB_HPRT_PrtRst_Msk;                            /* Port reset */
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbbc:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:553
    XMC_USBH0_device.global_register->HPRT = hprt;
 800bbbe:	4b16      	ldr	r3, [pc, #88]	; (800bc18 <XMC_USBH_PortReset+0xa4>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	68ba      	ldr	r2, [r7, #8]
 800bbc4:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:554
    (void)XMC_USBH_osDelay(50U);                                            /* wait at least 50ms */
 800bbc8:	2032      	movs	r0, #50	; 0x32
 800bbca:	f000 ff0d 	bl	800c9e8 <XMC_USBH_osDelay>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:555
    hprt &= (uint32_t)~USB_HPRT_PrtRst_Msk;                            /* Clear port reset */
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbd4:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:556
    XMC_USBH0_device.global_register->HPRT = hprt;
 800bbd6:	4b10      	ldr	r3, [pc, #64]	; (800bc18 <XMC_USBH_PortReset+0xa4>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	68ba      	ldr	r2, [r7, #8]
 800bbdc:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:557
    (void)XMC_USBH_osDelay(50U);                                            /* wait for ISR */
 800bbe0:	2032      	movs	r0, #50	; 0x32
 800bbe2:	f000 ff01 	bl	800c9e8 <XMC_USBH_osDelay>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:560

    /*Wait for the port to be enabled*/
    while ((XMC_USBH0_device.global_register->HPRT & USB_HPRT_PrtEna_Msk) == 0U)
 800bbe6:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:560 (discriminator 1)
 800bbe8:	4b0b      	ldr	r3, [pc, #44]	; (800bc18 <XMC_USBH_PortReset+0xa4>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 800bbf0:	f003 0304 	and.w	r3, r3, #4
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d0f7      	beq.n	800bbe8 <XMC_USBH_PortReset+0x74>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:565
    {
      /*wait*/
    }

    if (XMC_USBH0_device.port_reset_active == true)
 800bbf8:	4b07      	ldr	r3, [pc, #28]	; (800bc18 <XMC_USBH_PortReset+0xa4>)
 800bbfa:	7c9b      	ldrb	r3, [r3, #18]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d005      	beq.n	800bc0c <XMC_USBH_PortReset+0x98>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:567
    {
      XMC_USBH0_device.port_reset_active = false;
 800bc00:	4b05      	ldr	r3, [pc, #20]	; (800bc18 <XMC_USBH_PortReset+0xa4>)
 800bc02:	2200      	movs	r2, #0
 800bc04:	749a      	strb	r2, [r3, #18]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:568
      status = XMC_USBH_DRIVER_ERROR;                               /* reset not confirmed inside ISR */
 800bc06:	f04f 33ff 	mov.w	r3, #4294967295
 800bc0a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:572
    }
  }

  return status;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:573
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3710      	adds	r7, #16
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	20000008 	.word	0x20000008

0800bc1c <XMC_USBH_PortSuspend>:
XMC_USBH_PortSuspend():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:585
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USBH_PortResume() \n
*/
static int32_t XMC_USBH_PortSuspend (uint8_t port)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b085      	sub	sp, #20
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	4603      	mov	r3, r0
 800bc24:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:586
  int32_t status = XMC_USBH_DRIVER_OK;
 800bc26:	2300      	movs	r3, #0
 800bc28:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:588
  uint32_t hprt;
  if (XMC_USBH0_device.power_state == XMC_USBH_POWER_OFF)
 800bc2a:	4b18      	ldr	r3, [pc, #96]	; (800bc8c <XMC_USBH_PortSuspend+0x70>)
 800bc2c:	7c5b      	ldrb	r3, [r3, #17]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d103      	bne.n	800bc3a <XMC_USBH_PortSuspend+0x1e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:590
  {
    status = XMC_USBH_DRIVER_ERROR;
 800bc32:	f04f 33ff 	mov.w	r3, #4294967295
 800bc36:	60fb      	str	r3, [r7, #12]
 800bc38:	e022      	b.n	800bc80 <XMC_USBH_PortSuspend+0x64>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:594
  }
  else
  {
    if (port != 0U)
 800bc3a:	79fb      	ldrb	r3, [r7, #7]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d003      	beq.n	800bc48 <XMC_USBH_PortSuspend+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:596
    {
      status = XMC_USBH_DRIVER_ERROR_PARAMETER;
 800bc40:	f06f 0304 	mvn.w	r3, #4
 800bc44:	60fb      	str	r3, [r7, #12]
 800bc46:	e01b      	b.n	800bc80 <XMC_USBH_PortSuspend+0x64>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:600
    }
    else
    {
      hprt = XMC_USBH0_device.global_register->HPRT;
 800bc48:	4b10      	ldr	r3, [pc, #64]	; (800bc8c <XMC_USBH_PortSuspend+0x70>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 800bc50:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:601
      hprt &= (uint32_t)~(USB_HPRT_PrtEna_Msk);
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	f023 0304 	bic.w	r3, r3, #4
 800bc58:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:602
      hprt |= (uint32_t)USB_HPRT_PrtSusp_Msk;
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc60:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:603
      XMC_USBH0_device.global_register->HPRT = hprt;
 800bc62:	4b0a      	ldr	r3, [pc, #40]	; (800bc8c <XMC_USBH_PortSuspend+0x70>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	68ba      	ldr	r2, [r7, #8]
 800bc68:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:605
      /* Stop PHY clock after suspending the bus*/
      XMC_USBH0_device.global_register->PCGCCTL |= XMC_USBH_PHY_CLK_STOP;
 800bc6c:	4b07      	ldr	r3, [pc, #28]	; (800bc8c <XMC_USBH_PortSuspend+0x70>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a06      	ldr	r2, [pc, #24]	; (800bc8c <XMC_USBH_PortSuspend+0x70>)
 800bc72:	6812      	ldr	r2, [r2, #0]
 800bc74:	f8d2 2e00 	ldr.w	r2, [r2, #3584]	; 0xe00
 800bc78:	f042 0203 	orr.w	r2, r2, #3
 800bc7c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:609

    }
  }
  return status;
 800bc80:	68fb      	ldr	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:610
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3714      	adds	r7, #20
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bc80      	pop	{r7}
 800bc8a:	4770      	bx	lr
 800bc8c:	20000008 	.word	0x20000008

0800bc90 <XMC_USBH_PortResume>:
XMC_USBH_PortResume():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:622
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USBH_PortSuspend() \n
*/
static int32_t XMC_USBH_PortResume (uint8_t port)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b084      	sub	sp, #16
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	4603      	mov	r3, r0
 800bc98:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:623
  int32_t status = XMC_USBH_DRIVER_OK;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:625
  uint32_t hprt;
  if (XMC_USBH0_device.power_state == XMC_USBH_POWER_OFF)
 800bc9e:	4b20      	ldr	r3, [pc, #128]	; (800bd20 <XMC_USBH_PortResume+0x90>)
 800bca0:	7c5b      	ldrb	r3, [r3, #17]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d103      	bne.n	800bcae <XMC_USBH_PortResume+0x1e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:627
  {
    status = XMC_USBH_DRIVER_ERROR;
 800bca6:	f04f 33ff 	mov.w	r3, #4294967295
 800bcaa:	60fb      	str	r3, [r7, #12]
 800bcac:	e033      	b.n	800bd16 <XMC_USBH_PortResume+0x86>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:631
  }
  else
  {
    if (port != 0U)
 800bcae:	79fb      	ldrb	r3, [r7, #7]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d003      	beq.n	800bcbc <XMC_USBH_PortResume+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:633
    {
      status = XMC_USBH_DRIVER_ERROR_PARAMETER;
 800bcb4:	f06f 0304 	mvn.w	r3, #4
 800bcb8:	60fb      	str	r3, [r7, #12]
 800bcba:	e02c      	b.n	800bd16 <XMC_USBH_PortResume+0x86>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:638
    }
    else
    {
      /*Ungate PHY clock*/
      XMC_USBH0_device.global_register->PCGCCTL = XMC_USBH_PHY_CLK_UNGATE;
 800bcbc:	4b18      	ldr	r3, [pc, #96]	; (800bd20 <XMC_USBH_PortResume+0x90>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bcc4:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:640
      /*Set resume bit*/
      hprt = XMC_USBH0_device.global_register->HPRT;
 800bcc8:	4b15      	ldr	r3, [pc, #84]	; (800bd20 <XMC_USBH_PortResume+0x90>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 800bcd0:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:641
      hprt &= (uint32_t)~(USB_HPRT_PrtEna_Msk);
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	f023 0304 	bic.w	r3, r3, #4
 800bcd8:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:642
      hprt |= (uint32_t)USB_HPRT_PrtRes_Msk;
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bce0:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:643
      XMC_USBH0_device.global_register->HPRT = hprt;
 800bce2:	4b0f      	ldr	r3, [pc, #60]	; (800bd20 <XMC_USBH_PortResume+0x90>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	68ba      	ldr	r2, [r7, #8]
 800bce8:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:645

      (void)XMC_USBH_osDelay(20U);
 800bcec:	2014      	movs	r0, #20
 800bcee:	f000 fe7b 	bl	800c9e8 <XMC_USBH_osDelay>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:647

      hprt = XMC_USBH0_device.global_register->HPRT;
 800bcf2:	4b0b      	ldr	r3, [pc, #44]	; (800bd20 <XMC_USBH_PortResume+0x90>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 800bcfa:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:648
      hprt &= (uint32_t)~(USB_HPRT_PrtEna_Msk);
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	f023 0304 	bic.w	r3, r3, #4
 800bd02:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:649
      hprt &= (uint32_t)~((uint32_t)USB_HPRT_PrtRes_Msk);
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd0a:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:650
      XMC_USBH0_device.global_register->HPRT = hprt;
 800bd0c:	4b04      	ldr	r3, [pc, #16]	; (800bd20 <XMC_USBH_PortResume+0x90>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	68ba      	ldr	r2, [r7, #8]
 800bd12:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:654
    }
  }
  
  return status;
 800bd16:	68fb      	ldr	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:655
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3710      	adds	r7, #16
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	20000008 	.word	0x20000008

0800bd24 <XMC_USBH_PortGetState>:
XMC_USBH_PortGetState():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:666
 * \par<b>Description:</b><br>
 * Get current USB port state. The state indicates if the port is connected, port speed
 * and port overcurrent status.
*/
static XMC_USBH_PORT_STATE_t XMC_USBH_PortGetState (uint8_t port)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b085      	sub	sp, #20
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:667
  XMC_USBH_PORT_STATE_t port_state = { 0U, 0U, 0U };
 800bd2e:	7a3b      	ldrb	r3, [r7, #8]
 800bd30:	f36f 0300 	bfc	r3, #0, #1
 800bd34:	723b      	strb	r3, [r7, #8]
 800bd36:	7a3b      	ldrb	r3, [r7, #8]
 800bd38:	f36f 0341 	bfc	r3, #1, #1
 800bd3c:	723b      	strb	r3, [r7, #8]
 800bd3e:	7a3b      	ldrb	r3, [r7, #8]
 800bd40:	f36f 0383 	bfc	r3, #2, #2
 800bd44:	723b      	strb	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:670
  uint32_t hprt;
  
  if (XMC_USBH0_device.power_state == XMC_USBH_POWER_OFF)
 800bd46:	4b18      	ldr	r3, [pc, #96]	; (800bda8 <XMC_USBH_PortGetState+0x84>)
 800bd48:	7c5b      	ldrb	r3, [r3, #17]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d026      	beq.n	800bd9c <XMC_USBH_PortGetState+0x78>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:676
  {
    /*Do not update the port state*/
  }
  else
  {
    if (port != 0U)
 800bd4e:	79fb      	ldrb	r3, [r7, #7]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d123      	bne.n	800bd9c <XMC_USBH_PortGetState+0x78>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:682
    {
      /*Do not update the port state*/
    }
    else
    {
      hprt = XMC_USBH0_device.global_register->HPRT;
 800bd54:	4b14      	ldr	r3, [pc, #80]	; (800bda8 <XMC_USBH_PortGetState+0x84>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 800bd5c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:683
      if(((hprt & USB_HPRT_PrtConnSts_Msk) != 0U))
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f003 0301 	and.w	r3, r3, #1
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d004      	beq.n	800bd72 <XMC_USBH_PortGetState+0x4e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:685
      {
        port_state.connected   = 1U;
 800bd68:	7a3b      	ldrb	r3, [r7, #8]
 800bd6a:	f043 0301 	orr.w	r3, r3, #1
 800bd6e:	723b      	strb	r3, [r7, #8]
 800bd70:	e003      	b.n	800bd7a <XMC_USBH_PortGetState+0x56>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:689
      }
      else
      {
        port_state.connected   = 0U;
 800bd72:	7a3b      	ldrb	r3, [r7, #8]
 800bd74:	f36f 0300 	bfc	r3, #0, #1
 800bd78:	723b      	strb	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:691
      }
      port_state.overcurrent = 0U;
 800bd7a:	7a3b      	ldrb	r3, [r7, #8]
 800bd7c:	f36f 0341 	bfc	r3, #1, #1
 800bd80:	723b      	strb	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:693

      switch ((uint32_t)((uint32_t)(hprt & USB_HPRT_PrtSpd_Msk) >> USB_HPRT_PrtSpd_Pos)) {
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	0c5b      	lsrs	r3, r3, #17
 800bd86:	f003 0303 	and.w	r3, r3, #3
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d000      	beq.n	800bd90 <XMC_USBH_PortGetState+0x6c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:698
        case 1U: /* Full speed */
         port_state.speed = XMC_USBH_SPEED_FULL;
         break;
        default:
         break;
 800bd8e:	e005      	b.n	800bd9c <XMC_USBH_PortGetState+0x78>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:695
      }
      port_state.overcurrent = 0U;

      switch ((uint32_t)((uint32_t)(hprt & USB_HPRT_PrtSpd_Msk) >> USB_HPRT_PrtSpd_Pos)) {
        case 1U: /* Full speed */
         port_state.speed = XMC_USBH_SPEED_FULL;
 800bd90:	7a3b      	ldrb	r3, [r7, #8]
 800bd92:	2201      	movs	r2, #1
 800bd94:	f362 0383 	bfi	r3, r2, #2, #2
 800bd98:	723b      	strb	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:696
         break;
 800bd9a:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:702
        default:
         break;
      }
    }
  }
  return port_state;
 800bd9c:	68bb      	ldr	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:703
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3714      	adds	r7, #20
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bc80      	pop	{r7}
 800bda6:	4770      	bx	lr
 800bda8:	20000008 	.word	0x20000008

0800bdac <XMC_USBH_PipeCreate>:
XMC_USBH_PipeCreate():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:724
 * Create/allocate a pipe configured with input parameters. The function looks for an unused pipe and configures with input parameters.
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USBH_PipeModify(), XMC_USBH_PipeDelete(), XMC_USBH_PipeReset(), XMC_USBH_PipeTransfer() \n
*/
static XMC_USBH_PIPE_HANDLE XMC_USBH_PipeCreate (uint8_t dev_addr, uint8_t dev_speed, uint8_t hub_addr, uint8_t hub_port, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_max_packet_size, uint8_t  ep_interval) {
 800bdac:	b590      	push	{r4, r7, lr}
 800bdae:	b087      	sub	sp, #28
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	4608      	mov	r0, r1
 800bdb6:	4611      	mov	r1, r2
 800bdb8:	461a      	mov	r2, r3
 800bdba:	4623      	mov	r3, r4
 800bdbc:	71fb      	strb	r3, [r7, #7]
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	71bb      	strb	r3, [r7, #6]
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	717b      	strb	r3, [r7, #5]
 800bdc6:	4613      	mov	r3, r2
 800bdc8:	713b      	strb	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:730
  XMC_USBH0_pipe_t    *ptr_pipe;
  USB0_CH_TypeDef *ptr_ch;
  uint32_t         i;
  uint32_t loc_val;
  
  if (XMC_USBH0_device.power_state == XMC_USBH_POWER_OFF)
 800bdca:	4b48      	ldr	r3, [pc, #288]	; (800beec <XMC_USBH_PipeCreate+0x140>)
 800bdcc:	7c5b      	ldrb	r3, [r3, #17]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d102      	bne.n	800bdd8 <XMC_USBH_PipeCreate+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:732
  {
    ptr_ch = (USB0_CH_TypeDef *)NULL;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	617b      	str	r3, [r7, #20]
 800bdd6:	e084      	b.n	800bee2 <XMC_USBH_PipeCreate+0x136>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:737
  }
  else
  {
   /* get first free pipe available */
    ptr_ch = (USB0_CH_TypeDef *)(XMC_USBH0_device.host_channel_registers);
 800bdd8:	4b44      	ldr	r3, [pc, #272]	; (800beec <XMC_USBH_PipeCreate+0x140>)
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:739

    for (i = 0U; i < USBH0_MAX_PIPE_NUM; i++) {
 800bdde:	2300      	movs	r3, #0
 800bde0:	613b      	str	r3, [r7, #16]
 800bde2:	e00b      	b.n	800bdfc <XMC_USBH_PipeCreate+0x50>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:740
      if ((ptr_ch->HCCHAR & 0x3FFFFFFFU) == 0U)
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d009      	beq.n	800be04 <XMC_USBH_PipeCreate+0x58>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:744 (discriminator 2)
      {
        break;
      }
      ptr_ch++;
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	3320      	adds	r3, #32
 800bdf4:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:739 (discriminator 2)
  else
  {
   /* get first free pipe available */
    ptr_ch = (USB0_CH_TypeDef *)(XMC_USBH0_device.host_channel_registers);

    for (i = 0U; i < USBH0_MAX_PIPE_NUM; i++) {
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:739 (discriminator 1)
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	2b0d      	cmp	r3, #13
 800be00:	d9f0      	bls.n	800bde4 <XMC_USBH_PipeCreate+0x38>
 800be02:	e000      	b.n	800be06 <XMC_USBH_PipeCreate+0x5a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:742
      if ((ptr_ch->HCCHAR & 0x3FFFFFFFU) == 0U)
      {
        break;
 800be04:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:748
      }
      ptr_ch++;
    }
  
    /* free pipe found? */
    if (i == USBH0_MAX_PIPE_NUM)
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	2b0e      	cmp	r3, #14
 800be0a:	d102      	bne.n	800be12 <XMC_USBH_PipeCreate+0x66>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:750
    { 
      ptr_ch = (USB0_CH_TypeDef *)NULL;
 800be0c:	2300      	movs	r3, #0
 800be0e:	617b      	str	r3, [r7, #20]
 800be10:	e067      	b.n	800bee2 <XMC_USBH_PipeCreate+0x136>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:754
    }
    else
    {
      ptr_pipe = (XMC_USBH0_pipe_t *)(&pipe[(ptr_ch - (USB0_CH_TypeDef *)(XMC_USBH0_device.host_channel_registers))]);
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	4a35      	ldr	r2, [pc, #212]	; (800beec <XMC_USBH_PipeCreate+0x140>)
 800be16:	6852      	ldr	r2, [r2, #4]
 800be18:	1a9b      	subs	r3, r3, r2
 800be1a:	115b      	asrs	r3, r3, #5
 800be1c:	015b      	lsls	r3, r3, #5
 800be1e:	4a34      	ldr	r2, [pc, #208]	; (800bef0 <XMC_USBH_PipeCreate+0x144>)
 800be20:	4413      	add	r3, r2
 800be22:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:756

      memset((void *)ptr_pipe, 0, sizeof(XMC_USBH0_pipe_t));  /* Initialize pipe structure */
 800be24:	2220      	movs	r2, #32
 800be26:	2100      	movs	r1, #0
 800be28:	68b8      	ldr	r0, [r7, #8]
 800be2a:	f003 f840 	bl	800eeae <memset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:760

      /* Fill in all fields of Endpoint Descriptor */
      /*Get the end point direction from the MSB of address*/
      loc_val = 0U;
 800be2e:	2300      	movs	r3, #0
 800be30:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:761
      if (((ep_addr >> 7U) & 0x1U) == 0U)
 800be32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800be36:	09db      	lsrs	r3, r3, #7
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	f003 0301 	and.w	r3, r3, #1
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d101      	bne.n	800be46 <XMC_USBH_PipeCreate+0x9a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:763
      {
        loc_val = 1U;
 800be42:	2301      	movs	r3, #1
 800be44:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:765
      }
      ptr_ch->HCCHAR = ((uint32_t)(USB_CH_HCCHARx_MPS(ep_max_packet_size))|
 800be46:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800be48:	f3c3 020a 	ubfx	r2, r3, #0, #11
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:766
                       USB_CH_HCCHARx_EPNUM(ep_addr)) |
 800be4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800be50:	02db      	lsls	r3, r3, #11
 800be52:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:765
      loc_val = 0U;
      if (((ep_addr >> 7U) & 0x1U) == 0U)
      {
        loc_val = 1U;
      }
      ptr_ch->HCCHAR = ((uint32_t)(USB_CH_HCCHARx_MPS(ep_max_packet_size))|
 800be56:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:767
                       USB_CH_HCCHARx_EPNUM(ep_addr)) |
                       (uint32_t)(USB_CH_HCCHAR_EPDir_Msk * loc_val) |
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	03db      	lsls	r3, r3, #15
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:766
      if (((ep_addr >> 7U) & 0x1U) == 0U)
      {
        loc_val = 1U;
      }
      ptr_ch->HCCHAR = ((uint32_t)(USB_CH_HCCHARx_MPS(ep_max_packet_size))|
                       USB_CH_HCCHARx_EPNUM(ep_addr)) |
 800be5c:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:768
                       (uint32_t)(USB_CH_HCCHAR_EPDir_Msk * loc_val) |
                       (USB_CH_HCCHARx_EPTYPE (ep_type) ) |
 800be5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800be62:	049b      	lsls	r3, r3, #18
 800be64:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:767
      {
        loc_val = 1U;
      }
      ptr_ch->HCCHAR = ((uint32_t)(USB_CH_HCCHARx_MPS(ep_max_packet_size))|
                       USB_CH_HCCHARx_EPNUM(ep_addr)) |
                       (uint32_t)(USB_CH_HCCHAR_EPDir_Msk * loc_val) |
 800be68:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:769
                       (USB_CH_HCCHARx_EPTYPE (ep_type) ) |
                       (USB_CH_HCCHARx_DEVADDR (dev_addr) ) ;
 800be6a:	79fb      	ldrb	r3, [r7, #7]
 800be6c:	059b      	lsls	r3, r3, #22
 800be6e:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:768
        loc_val = 1U;
      }
      ptr_ch->HCCHAR = ((uint32_t)(USB_CH_HCCHARx_MPS(ep_max_packet_size))|
                       USB_CH_HCCHARx_EPNUM(ep_addr)) |
                       (uint32_t)(USB_CH_HCCHAR_EPDir_Msk * loc_val) |
                       (USB_CH_HCCHARx_EPTYPE (ep_type) ) |
 800be72:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:765
      loc_val = 0U;
      if (((ep_addr >> 7U) & 0x1U) == 0U)
      {
        loc_val = 1U;
      }
      ptr_ch->HCCHAR = ((uint32_t)(USB_CH_HCCHARx_MPS(ep_max_packet_size))|
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:771
                       USB_CH_HCCHARx_EPNUM(ep_addr)) |
                       (uint32_t)(USB_CH_HCCHAR_EPDir_Msk * loc_val) |
                       (USB_CH_HCCHARx_EPTYPE (ep_type) ) |
                       (USB_CH_HCCHARx_DEVADDR (dev_addr) ) ;
      /* Store Pipe settings */
      ptr_pipe->ep_max_packet_size = ep_max_packet_size;
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800be7c:	829a      	strh	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:772
      ptr_pipe->ep_type            = ep_type;
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800be84:	769a      	strb	r2, [r3, #26]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:773
      switch (ep_type) {
 800be86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800be8a:	2b03      	cmp	r3, #3
 800be8c:	d828      	bhi.n	800bee0 <XMC_USBH_PipeCreate+0x134>
 800be8e:	a201      	add	r2, pc, #4	; (adr r2, 800be94 <XMC_USBH_PipeCreate+0xe8>)
 800be90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be94:	0800bee1 	.word	0x0800bee1
 800be98:	0800bea5 	.word	0x0800bea5
 800be9c:	0800bee1 	.word	0x0800bee1
 800bea0:	0800bea5 	.word	0x0800bea5
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:779
        case XMC_USBH_ENDPOINT_CONTROL:
        case XMC_USBH_ENDPOINT_BULK:
          break;
        case XMC_USBH_ENDPOINT_ISOCHRONOUS:
        case XMC_USBH_ENDPOINT_INTERRUPT:
          if (ep_interval > 0U) {
 800bea4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d004      	beq.n	800beb6 <XMC_USBH_PipeCreate+0x10a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:780
            ptr_pipe->interval_reload = ep_interval;
 800beac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800beb0:	b29a      	uxth	r2, r3
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	82da      	strh	r2, [r3, #22]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:782
          }
          ptr_pipe->interval = ptr_pipe->interval_reload;
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	8ada      	ldrh	r2, [r3, #22]
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	831a      	strh	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:783
          loc_val = ((((uint32_t)ep_max_packet_size >> 11U) + 1U) & 3U);
 800bebe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bec0:	0adb      	lsrs	r3, r3, #11
 800bec2:	b29b      	uxth	r3, r3
 800bec4:	3301      	adds	r3, #1
 800bec6:	f003 0303 	and.w	r3, r3, #3
 800beca:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:784
          ptr_ch->HCCHAR |= (uint32_t)USB_CH_HCCHARx_MCEC(loc_val);
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	051b      	lsls	r3, r3, #20
 800bed4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800bed8:	431a      	orrs	r2, r3
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:785
          break;
 800bede:	e000      	b.n	800bee2 <XMC_USBH_PipeCreate+0x136>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:787
        default:
          break;
 800bee0:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:791
      }
    }
  }
  return ((XMC_USBH_EP_HANDLE)ptr_ch);
 800bee2:	697b      	ldr	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:792
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	371c      	adds	r7, #28
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd90      	pop	{r4, r7, pc}
 800beec:	20000008 	.word	0x20000008
 800bef0:	200003b8 	.word	0x200003b8

0800bef4 <XMC_USBH_PipeModify>:
XMC_USBH_PipeModify():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:809
 * Modify an existing pipe with input parameters. It can be used to configure the pipe after receiving configuration details from the device.
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USBH_PipeCreate(), XMC_USBH_PipeDelete(), XMC_USBH_PipeReset(), XMC_USBH_PipeTransfer() \n
*/
static int32_t XMC_USBH_PipeModify (XMC_USBH_PIPE_HANDLE pipe_hndl, uint8_t dev_addr, uint8_t dev_speed, uint8_t hub_addr, uint8_t hub_port, uint16_t ep_max_packet_size) {
 800bef4:	b480      	push	{r7}
 800bef6:	b087      	sub	sp, #28
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	4608      	mov	r0, r1
 800befe:	4611      	mov	r1, r2
 800bf00:	461a      	mov	r2, r3
 800bf02:	4603      	mov	r3, r0
 800bf04:	70fb      	strb	r3, [r7, #3]
 800bf06:	460b      	mov	r3, r1
 800bf08:	70bb      	strb	r3, [r7, #2]
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	707b      	strb	r3, [r7, #1]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:813
  XMC_USBH0_pipe_t    *ptr_pipe;
  USB0_CH_TypeDef *ptr_ch;
  uint32_t   hcchar;
  int32_t status = XMC_USBH_DRIVER_OK;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:815

  if (XMC_USBH0_device.power_state == XMC_USBH_POWER_OFF)
 800bf12:	4b20      	ldr	r3, [pc, #128]	; (800bf94 <XMC_USBH_PipeModify+0xa0>)
 800bf14:	7c5b      	ldrb	r3, [r3, #17]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d103      	bne.n	800bf22 <XMC_USBH_PipeModify+0x2e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:817
  {
    status = XMC_USBH_DRIVER_ERROR;
 800bf1a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf1e:	617b      	str	r3, [r7, #20]
 800bf20:	e031      	b.n	800bf86 <XMC_USBH_PipeModify+0x92>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:821
  }
  else
  {
    if (pipe_hndl  == 0U)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d103      	bne.n	800bf30 <XMC_USBH_PipeModify+0x3c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:823
    {
      status = XMC_USBH_DRIVER_ERROR_PARAMETER;
 800bf28:	f06f 0304 	mvn.w	r3, #4
 800bf2c:	617b      	str	r3, [r7, #20]
 800bf2e:	e02a      	b.n	800bf86 <XMC_USBH_PipeModify+0x92>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:827
    }
    else
    {
      ptr_ch   = (USB0_CH_TypeDef *)(pipe_hndl);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:828
      ptr_pipe = (XMC_USBH0_pipe_t *)(&pipe[(ptr_ch - (USB0_CH_TypeDef *)(XMC_USBH0_device.host_channel_registers))]);
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	4a17      	ldr	r2, [pc, #92]	; (800bf94 <XMC_USBH_PipeModify+0xa0>)
 800bf38:	6852      	ldr	r2, [r2, #4]
 800bf3a:	1a9b      	subs	r3, r3, r2
 800bf3c:	115b      	asrs	r3, r3, #5
 800bf3e:	015b      	lsls	r3, r3, #5
 800bf40:	4a15      	ldr	r2, [pc, #84]	; (800bf98 <XMC_USBH_PipeModify+0xa4>)
 800bf42:	4413      	add	r3, r2
 800bf44:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:829
      if (ptr_pipe->in_use != 0U)
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	7edb      	ldrb	r3, [r3, #27]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d003      	beq.n	800bf56 <XMC_USBH_PipeModify+0x62>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:831
      {
        status = XMC_USBH_DRIVER_ERROR_BUSY;
 800bf4e:	f06f 0301 	mvn.w	r3, #1
 800bf52:	617b      	str	r3, [r7, #20]
 800bf54:	e017      	b.n	800bf86 <XMC_USBH_PipeModify+0x92>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:836
      }
      else
      {
        /* Fill in all fields of channel */
        hcchar  =   ptr_ch->HCCHAR;
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:838
        /* Clear fields */
        hcchar &= (uint32_t)~(USB_CH_HCCHAR_MPS_Msk | USB_CH_HCCHAR_DevAddr_Msk)  ;
 800bf5c:	68ba      	ldr	r2, [r7, #8]
 800bf5e:	4b0f      	ldr	r3, [pc, #60]	; (800bf9c <XMC_USBH_PipeModify+0xa8>)
 800bf60:	4013      	ands	r3, r2
 800bf62:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:840
        /* Set fields */
        hcchar |= (uint32_t)(USB_CH_HCCHARx_MPS(ep_max_packet_size) | (USB_CH_HCCHARx_DEVADDR(dev_addr)));
 800bf64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf66:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800bf6a:	78fb      	ldrb	r3, [r7, #3]
 800bf6c:	059b      	lsls	r3, r3, #22
 800bf6e:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
 800bf72:	4313      	orrs	r3, r2
 800bf74:	68ba      	ldr	r2, [r7, #8]
 800bf76:	4313      	orrs	r3, r2
 800bf78:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:841
        ptr_ch->HCCHAR = hcchar;
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:843

        ptr_pipe->ep_max_packet_size = ep_max_packet_size;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bf84:	829a      	strh	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:848
      }
    }
  }
  
  return status;
 800bf86:	697b      	ldr	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:849
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	371c      	adds	r7, #28
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bc80      	pop	{r7}
 800bf90:	4770      	bx	lr
 800bf92:	bf00      	nop
 800bf94:	20000008 	.word	0x20000008
 800bf98:	200003b8 	.word	0x200003b8
 800bf9c:	e03ff800 	.word	0xe03ff800

0800bfa0 <XMC_USBH_PipeDelete>:
XMC_USBH_PipeDelete():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:861
 * Delete pipe from active pipes list. After it is deleted, it can be assigned to new pipe request.
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USBH_PipeCreate(), XMC_USBH_PipeModify(), XMC_USBH_PipeReset(), XMC_USBH_PipeTransfer() \n
*/
static int32_t XMC_USBH_PipeDelete (XMC_USBH_PIPE_HANDLE pipe_hndl) {
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b086      	sub	sp, #24
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:864
  XMC_USBH0_pipe_t    *ptr_pipe;
  USB0_CH_TypeDef *ptr_ch;
  int32_t status = XMC_USBH_DRIVER_OK;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:866

  if (XMC_USBH0_device.power_state == XMC_USBH_POWER_OFF)
 800bfac:	4b1b      	ldr	r3, [pc, #108]	; (800c01c <XMC_USBH_PipeDelete+0x7c>)
 800bfae:	7c5b      	ldrb	r3, [r3, #17]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d103      	bne.n	800bfbc <XMC_USBH_PipeDelete+0x1c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:868
  {
    status = XMC_USBH_DRIVER_ERROR;
 800bfb4:	f04f 33ff 	mov.w	r3, #4294967295
 800bfb8:	617b      	str	r3, [r7, #20]
 800bfba:	e02a      	b.n	800c012 <XMC_USBH_PipeDelete+0x72>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:872
  }
  else
  {
    if (pipe_hndl == 0U)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d103      	bne.n	800bfca <XMC_USBH_PipeDelete+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:874
    {
      status = XMC_USBH_DRIVER_ERROR_PARAMETER;
 800bfc2:	f06f 0304 	mvn.w	r3, #4
 800bfc6:	617b      	str	r3, [r7, #20]
 800bfc8:	e023      	b.n	800c012 <XMC_USBH_PipeDelete+0x72>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:878
    }
    else
    {
      ptr_ch   = (USB0_CH_TypeDef *)(pipe_hndl);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:879
      ptr_pipe = (XMC_USBH0_pipe_t    *)(&pipe[(ptr_ch - (USB0_CH_TypeDef *)(XMC_USBH0_device.host_channel_registers))]);
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	4a12      	ldr	r2, [pc, #72]	; (800c01c <XMC_USBH_PipeDelete+0x7c>)
 800bfd2:	6852      	ldr	r2, [r2, #4]
 800bfd4:	1a9b      	subs	r3, r3, r2
 800bfd6:	115b      	asrs	r3, r3, #5
 800bfd8:	015b      	lsls	r3, r3, #5
 800bfda:	4a11      	ldr	r2, [pc, #68]	; (800c020 <XMC_USBH_PipeDelete+0x80>)
 800bfdc:	4413      	add	r3, r2
 800bfde:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:880
      if (ptr_pipe->in_use != 0U)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	7edb      	ldrb	r3, [r3, #27]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d003      	beq.n	800bff0 <XMC_USBH_PipeDelete+0x50>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:882
      {
        status = XMC_USBH_DRIVER_ERROR_BUSY;
 800bfe8:	f06f 0301 	mvn.w	r3, #1
 800bfec:	617b      	str	r3, [r7, #20]
 800bfee:	e010      	b.n	800c012 <XMC_USBH_PipeDelete+0x72>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:886
      }
      else
      {
        ptr_ch->HCCHAR            = 0U;
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	2200      	movs	r2, #0
 800bff4:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:887
        ptr_ch->HCINT             = 0U;
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	2200      	movs	r2, #0
 800bffa:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:888
        ptr_ch->HCINTMSK          = 0U;
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	2200      	movs	r2, #0
 800c000:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:889
        ptr_ch->HCTSIZ_BUFFERMODE = 0U;
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	2200      	movs	r2, #0
 800c006:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:891

        memset((void *)ptr_pipe, 0, sizeof(XMC_USBH0_pipe_t));
 800c008:	2220      	movs	r2, #32
 800c00a:	2100      	movs	r1, #0
 800c00c:	68f8      	ldr	r0, [r7, #12]
 800c00e:	f002 ff4e 	bl	800eeae <memset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:896
      }
    }
  }

  return status;
 800c012:	697b      	ldr	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:897
}
 800c014:	4618      	mov	r0, r3
 800c016:	3718      	adds	r7, #24
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	20000008 	.word	0x20000008
 800c020:	200003b8 	.word	0x200003b8

0800c024 <XMC_USBH_PipeReset>:
XMC_USBH_PipeReset():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:908
 * Reset pipe by clearing the interrupt mask and resetting the transfer control register.\n
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USBH_PipeCreate(), XMC_USBH_PipeModify(), XMC_USBH_PipeDelete(), XMC_USBH_PipeTransfer() \n
*/
static int32_t XMC_USBH_PipeReset (XMC_USBH_PIPE_HANDLE pipe_hndl) {
 800c024:	b480      	push	{r7}
 800c026:	b087      	sub	sp, #28
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:911
  XMC_USBH0_pipe_t    *ptr_pipe;
  USB0_CH_TypeDef *ptr_ch;
  int32_t status = XMC_USBH_DRIVER_OK;
 800c02c:	2300      	movs	r3, #0
 800c02e:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:913

  if (XMC_USBH0_device.power_state == XMC_USBH_POWER_OFF)
 800c030:	4b18      	ldr	r3, [pc, #96]	; (800c094 <XMC_USBH_PipeReset+0x70>)
 800c032:	7c5b      	ldrb	r3, [r3, #17]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d103      	bne.n	800c040 <XMC_USBH_PipeReset+0x1c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:915
  {
    status = XMC_USBH_DRIVER_ERROR;
 800c038:	f04f 33ff 	mov.w	r3, #4294967295
 800c03c:	617b      	str	r3, [r7, #20]
 800c03e:	e022      	b.n	800c086 <XMC_USBH_PipeReset+0x62>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:919
  }
  else
  {
    if (pipe_hndl  == 0U)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d103      	bne.n	800c04e <XMC_USBH_PipeReset+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:921
    {
      status = XMC_USBH_DRIVER_ERROR_PARAMETER;
 800c046:	f06f 0304 	mvn.w	r3, #4
 800c04a:	617b      	str	r3, [r7, #20]
 800c04c:	e01b      	b.n	800c086 <XMC_USBH_PipeReset+0x62>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:925
    }
    else
    {
      ptr_ch   = (USB0_CH_TypeDef *)(pipe_hndl);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:926
      ptr_pipe = (XMC_USBH0_pipe_t    *)(&pipe[(ptr_ch - (USB0_CH_TypeDef *)(XMC_USBH0_device.host_channel_registers))]);
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	4a0f      	ldr	r2, [pc, #60]	; (800c094 <XMC_USBH_PipeReset+0x70>)
 800c056:	6852      	ldr	r2, [r2, #4]
 800c058:	1a9b      	subs	r3, r3, r2
 800c05a:	115b      	asrs	r3, r3, #5
 800c05c:	015b      	lsls	r3, r3, #5
 800c05e:	4a0e      	ldr	r2, [pc, #56]	; (800c098 <XMC_USBH_PipeReset+0x74>)
 800c060:	4413      	add	r3, r2
 800c062:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:927
      if (ptr_pipe->in_use != 0U)
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	7edb      	ldrb	r3, [r3, #27]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d003      	beq.n	800c074 <XMC_USBH_PipeReset+0x50>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:929
      {
        status = XMC_USBH_DRIVER_ERROR_BUSY;
 800c06c:	f06f 0301 	mvn.w	r3, #1
 800c070:	617b      	str	r3, [r7, #20]
 800c072:	e008      	b.n	800c086 <XMC_USBH_PipeReset+0x62>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:933
      }
      else
      {
        ptr_ch->HCINT    = 0U;
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	2200      	movs	r2, #0
 800c078:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:934
        ptr_ch->HCINTMSK = 0U;
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	2200      	movs	r2, #0
 800c07e:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:935
        ptr_ch->HCTSIZ_BUFFERMODE   = 0U;
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	2200      	movs	r2, #0
 800c084:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:939
      }
    }
  }
  return status;
 800c086:	697b      	ldr	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:940
}
 800c088:	4618      	mov	r0, r3
 800c08a:	371c      	adds	r7, #28
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bc80      	pop	{r7}
 800c090:	4770      	bx	lr
 800c092:	bf00      	nop
 800c094:	20000008 	.word	0x20000008
 800c098:	200003b8 	.word	0x200003b8

0800c09c <XMC_USBH_PipeTransfer>:
XMC_USBH_PipeTransfer():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:958
 *  The pipe event callback function will be called when the transfer is completed.\n
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USBH_PipeCreate(), XMC_USBH_PipeModify(), XMC_USBH_PipeDelete(), XMC_USBH_PipeReset() \n
*/
static int32_t XMC_USBH_PipeTransfer (XMC_USBH_PIPE_HANDLE pipe_hndl, uint32_t packet, uint8_t *data, uint32_t num) {
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b086      	sub	sp, #24
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	607a      	str	r2, [r7, #4]
 800c0a8:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:960
  XMC_USBH0_pipe_t *ptr_pipe;
  int32_t status = XMC_USBH_DRIVER_OK;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:962

  if (XMC_USBH0_device.power_state == XMC_USBH_POWER_OFF)
 800c0ae:	4b3f      	ldr	r3, [pc, #252]	; (800c1ac <XMC_USBH_PipeTransfer+0x110>)
 800c0b0:	7c5b      	ldrb	r3, [r3, #17]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d103      	bne.n	800c0be <XMC_USBH_PipeTransfer+0x22>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:964
  { 
    status = XMC_USBH_DRIVER_ERROR;
 800c0b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ba:	617b      	str	r3, [r7, #20]
 800c0bc:	e071      	b.n	800c1a2 <XMC_USBH_PipeTransfer+0x106>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:969
  }
  else
  {

    if(!(((((packet & XMC_USBH_PACKET_TOKEN_Msk) == XMC_USBH_PACKET_OUT) ||
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	f003 030f 	and.w	r3, r3, #15
 800c0c4:	2b02      	cmp	r3, #2
 800c0c6:	d00d      	beq.n	800c0e4 <XMC_USBH_PipeTransfer+0x48>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:970 (discriminator 1)
        ((packet & XMC_USBH_PACKET_TOKEN_Msk) == XMC_USBH_PACKET_IN))) ||
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	f003 030f 	and.w	r3, r3, #15
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:969 (discriminator 1)
    status = XMC_USBH_DRIVER_ERROR;
  }
  else
  {

    if(!(((((packet & XMC_USBH_PACKET_TOKEN_Msk) == XMC_USBH_PACKET_OUT) ||
 800c0ce:	2b03      	cmp	r3, #3
 800c0d0:	d008      	beq.n	800c0e4 <XMC_USBH_PipeTransfer+0x48>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:971 (discriminator 2)
        ((packet & XMC_USBH_PACKET_TOKEN_Msk) == XMC_USBH_PACKET_IN))) ||
        ((packet & XMC_USBH_PACKET_TOKEN_Msk) == XMC_USBH_PACKET_SETUP )))
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	f003 030f 	and.w	r3, r3, #15
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:969 (discriminator 2)
    status = XMC_USBH_DRIVER_ERROR;
  }
  else
  {

    if(!(((((packet & XMC_USBH_PACKET_TOKEN_Msk) == XMC_USBH_PACKET_OUT) ||
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d003      	beq.n	800c0e4 <XMC_USBH_PipeTransfer+0x48>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:973
        ((packet & XMC_USBH_PACKET_TOKEN_Msk) == XMC_USBH_PACKET_IN))) ||
        ((packet & XMC_USBH_PACKET_TOKEN_Msk) == XMC_USBH_PACKET_SETUP )))
    {
      status = XMC_USBH_DRIVER_ERROR_PARAMETER;
 800c0dc:	f06f 0304 	mvn.w	r3, #4
 800c0e0:	617b      	str	r3, [r7, #20]
 800c0e2:	e05e      	b.n	800c1a2 <XMC_USBH_PipeTransfer+0x106>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:977
    }
    else
    {
      if (pipe_hndl  == 0U)
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d103      	bne.n	800c0f2 <XMC_USBH_PipeTransfer+0x56>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:979
      {
        status = XMC_USBH_DRIVER_ERROR_PARAMETER;
 800c0ea:	f06f 0304 	mvn.w	r3, #4
 800c0ee:	617b      	str	r3, [r7, #20]
 800c0f0:	e057      	b.n	800c1a2 <XMC_USBH_PipeTransfer+0x106>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:983
      }
      else
      {
        if ((XMC_USBH0_device.global_register->HPRT & USB_HPRT_PrtConnSts_Msk) == 0U)
 800c0f2:	4b2e      	ldr	r3, [pc, #184]	; (800c1ac <XMC_USBH_PipeTransfer+0x110>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 800c0fa:	f003 0301 	and.w	r3, r3, #1
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d103      	bne.n	800c10a <XMC_USBH_PipeTransfer+0x6e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:985
        {
          status = XMC_USBH_DRIVER_ERROR;
 800c102:	f04f 33ff 	mov.w	r3, #4294967295
 800c106:	617b      	str	r3, [r7, #20]
 800c108:	e04b      	b.n	800c1a2 <XMC_USBH_PipeTransfer+0x106>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:989
        }
        else
        {
          ptr_pipe = (XMC_USBH0_pipe_t *)(&pipe[((USB0_CH_TypeDef *)pipe_hndl - (USB0_CH_TypeDef *)(XMC_USBH0_device.host_channel_registers))]);
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	4a27      	ldr	r2, [pc, #156]	; (800c1ac <XMC_USBH_PipeTransfer+0x110>)
 800c10e:	6852      	ldr	r2, [r2, #4]
 800c110:	1a9b      	subs	r3, r3, r2
 800c112:	115b      	asrs	r3, r3, #5
 800c114:	015b      	lsls	r3, r3, #5
 800c116:	4a26      	ldr	r2, [pc, #152]	; (800c1b0 <XMC_USBH_PipeTransfer+0x114>)
 800c118:	4413      	add	r3, r2
 800c11a:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:990
          if (ptr_pipe->in_use != 0U)
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	7edb      	ldrb	r3, [r3, #27]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d003      	beq.n	800c12c <XMC_USBH_PipeTransfer+0x90>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:992
          {
            status = XMC_USBH_DRIVER_ERROR_BUSY;
 800c124:	f06f 0301 	mvn.w	r3, #1
 800c128:	617b      	str	r3, [r7, #20]
 800c12a:	e03a      	b.n	800c1a2 <XMC_USBH_PipeTransfer+0x106>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:997
          }
          else
          {
            /* Prepare transfer information */
            ptr_pipe->packet                = packet;
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	68ba      	ldr	r2, [r7, #8]
 800c130:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:998
            ptr_pipe->data                  = data;
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	687a      	ldr	r2, [r7, #4]
 800c136:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:999
            ptr_pipe->num                   = num;
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	683a      	ldr	r2, [r7, #0]
 800c13c:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1000
            ptr_pipe->num_transferred_total = 0U;
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	2200      	movs	r2, #0
 800c142:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1001
            ptr_pipe->num_transferring      = 0U;
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	2200      	movs	r2, #0
 800c148:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1002
            ptr_pipe->in_use                = 0U;
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	2200      	movs	r2, #0
 800c14e:	76da      	strb	r2, [r3, #27]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1003
            ptr_pipe->transfer_active       = 0U;
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	2200      	movs	r2, #0
 800c154:	771a      	strb	r2, [r3, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1004
            ptr_pipe->interrupt_triggered   = 0U;
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	2200      	movs	r2, #0
 800c15a:	775a      	strb	r2, [r3, #29]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1005
            ptr_pipe->event                 = 0U;
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	2200      	movs	r2, #0
 800c160:	779a      	strb	r2, [r3, #30]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1007

            if ((ptr_pipe->ep_type == (uint8_t)XMC_USBH_ENDPOINT_INTERRUPT) && (ptr_pipe->interval != 0U)) {
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	7e9b      	ldrb	r3, [r3, #26]
 800c166:	2b03      	cmp	r3, #3
 800c168:	d107      	bne.n	800c17a <XMC_USBH_PipeTransfer+0xde>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1007 (discriminator 1)
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	8b1b      	ldrh	r3, [r3, #24]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d003      	beq.n	800c17a <XMC_USBH_PipeTransfer+0xde>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1008
              ptr_pipe->in_use              = 1U; /* transfer will be started inside interrupt (SOF) */
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	2201      	movs	r2, #1
 800c176:	76da      	strb	r2, [r3, #27]
 800c178:	e013      	b.n	800c1a2 <XMC_USBH_PipeTransfer+0x106>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1010
            } else {
              ptr_pipe->transfer_active     = 1U;
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	2201      	movs	r2, #1
 800c17e:	771a      	strb	r2, [r3, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1011
              ptr_pipe->in_use              = 1U;
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	2201      	movs	r2, #1
 800c184:	76da      	strb	r2, [r3, #27]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1012
              if(XMC_lStartTransfer (ptr_pipe, (USB0_CH_TypeDef *)pipe_hndl) == false)
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	4619      	mov	r1, r3
 800c18a:	6938      	ldr	r0, [r7, #16]
 800c18c:	f7ff f9f8 	bl	800b580 <XMC_lStartTransfer>
 800c190:	4603      	mov	r3, r0
 800c192:	f083 0301 	eor.w	r3, r3, #1
 800c196:	b2db      	uxtb	r3, r3
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d002      	beq.n	800c1a2 <XMC_USBH_PipeTransfer+0x106>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1014
              {
                status = XMC_USBH_DRIVER_ERROR;
 800c19c:	f04f 33ff 	mov.w	r3, #4294967295
 800c1a0:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1022
          }
        }
      }
    }
  }
  return status;
 800c1a2:	697b      	ldr	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1023
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3718      	adds	r7, #24
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}
 800c1ac:	20000008 	.word	0x20000008
 800c1b0:	200003b8 	.word	0x200003b8

0800c1b4 <XMC_USBH_PipeTransferGetResult>:
XMC_USBH_PipeTransferGetResult():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1035
 *  Get result of USB Pipe transfer.
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USBH_PipeCreate(), XMC_USBH_PipeModify(), XMC_USBH_PipeDelete(), XMC_USBH_PipeTransfer() \n
*/
static uint32_t XMC_USBH_PipeTransferGetResult (XMC_USBH_PIPE_HANDLE pipe_hndl) {
 800c1b4:	b480      	push	{r7}
 800c1b6:	b085      	sub	sp, #20
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1037
  uint32_t status;
  if (pipe_hndl == 0U)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d102      	bne.n	800c1c8 <XMC_USBH_PipeTransferGetResult+0x14>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1039
  {
    status = 0U;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	60fb      	str	r3, [r7, #12]
 800c1c6:	e00a      	b.n	800c1de <XMC_USBH_PipeTransferGetResult+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1043
  }
  else
  {
    status = (pipe[((USB0_CH_TypeDef *)pipe_hndl - (USB0_CH_TypeDef *)(XMC_USBH0_device.host_channel_registers))].num_transferred_total);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	4a08      	ldr	r2, [pc, #32]	; (800c1ec <XMC_USBH_PipeTransferGetResult+0x38>)
 800c1cc:	6852      	ldr	r2, [r2, #4]
 800c1ce:	1a9b      	subs	r3, r3, r2
 800c1d0:	115b      	asrs	r3, r3, #5
 800c1d2:	4a07      	ldr	r2, [pc, #28]	; (800c1f0 <XMC_USBH_PipeTransferGetResult+0x3c>)
 800c1d4:	015b      	lsls	r3, r3, #5
 800c1d6:	4413      	add	r3, r2
 800c1d8:	330c      	adds	r3, #12
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1045
  }
  return status;
 800c1de:	68fb      	ldr	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1046
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3714      	adds	r7, #20
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bc80      	pop	{r7}
 800c1e8:	4770      	bx	lr
 800c1ea:	bf00      	nop
 800c1ec:	20000008 	.word	0x20000008
 800c1f0:	200003b8 	.word	0x200003b8

0800c1f4 <XMC_USBH_PipeTransferAbort>:
XMC_USBH_PipeTransferAbort():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1058
 * Abort current USB Pipe transfer.\n
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USBH_PipeCreate(), XMC_USBH_PipeModify(), XMC_USBH_PipeDelete(), XMC_USBH_PipeTransfer() \n
*/
static int32_t XMC_USBH_PipeTransferAbort (XMC_USBH_PIPE_HANDLE pipe_hndl) {
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b086      	sub	sp, #24
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1062
  XMC_USBH0_pipe_t *ptr_pipe;
  USB0_CH_TypeDef *ptr_ch;
  uint32_t timeout;
  int32_t status = XMC_USBH_DRIVER_ERROR;
 800c1fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c200:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1064
  
  ptr_ch = (USB0_CH_TypeDef *) pipe_hndl;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1066
  
  if (XMC_USBH0_device.power_state == XMC_USBH_POWER_OFF)
 800c206:	4b2f      	ldr	r3, [pc, #188]	; (800c2c4 <XMC_USBH_PipeTransferAbort+0xd0>)
 800c208:	7c5b      	ldrb	r3, [r3, #17]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d054      	beq.n	800c2b8 <XMC_USBH_PipeTransferAbort+0xc4>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1072
  {
    /*Error in power state*/
  }
  else
  {
    if (pipe_hndl  == 0U)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d103      	bne.n	800c21c <XMC_USBH_PipeTransferAbort+0x28>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1074
    {
      status = XMC_USBH_DRIVER_ERROR_PARAMETER;
 800c214:	f06f 0304 	mvn.w	r3, #4
 800c218:	613b      	str	r3, [r7, #16]
 800c21a:	e04d      	b.n	800c2b8 <XMC_USBH_PipeTransferAbort+0xc4>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1078
    }
    else
    {
      ptr_pipe = (XMC_USBH0_pipe_t *)(&pipe[(ptr_ch - (USB0_CH_TypeDef *)(XMC_USBH0_device.host_channel_registers))]);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	4a29      	ldr	r2, [pc, #164]	; (800c2c4 <XMC_USBH_PipeTransferAbort+0xd0>)
 800c220:	6852      	ldr	r2, [r2, #4]
 800c222:	1a9b      	subs	r3, r3, r2
 800c224:	115b      	asrs	r3, r3, #5
 800c226:	015b      	lsls	r3, r3, #5
 800c228:	4a27      	ldr	r2, [pc, #156]	; (800c2c8 <XMC_USBH_PipeTransferAbort+0xd4>)
 800c22a:	4413      	add	r3, r2
 800c22c:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1080

      if (ptr_pipe->in_use != 0U) {
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	7edb      	ldrb	r3, [r3, #27]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d040      	beq.n	800c2b8 <XMC_USBH_PipeTransferAbort+0xc4>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1081
        ptr_pipe->in_use = 0U;
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	2200      	movs	r2, #0
 800c23a:	76da      	strb	r2, [r3, #27]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1083
        /* Disable channel if not yet halted */
        if ((ptr_ch->HCINT & USB_CH_HCINT_ChHltd_Msk) == 0U)
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	f003 0302 	and.w	r3, r3, #2
 800c244:	2b00      	cmp	r3, #0
 800c246:	d137      	bne.n	800c2b8 <XMC_USBH_PipeTransferAbort+0xc4>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1085
        {
          if (ptr_ch->HCCHAR & USB_CH_HCCHAR_ChEna_Msk)
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	da33      	bge.n	800c2b8 <XMC_USBH_PipeTransferAbort+0xc4>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1087
          {
            ptr_ch->HCINTMSK = 0U;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2200      	movs	r2, #0
 800c254:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1088
            (void)XMC_USBH_osDelay(1U);
 800c256:	2001      	movs	r0, #1
 800c258:	f000 fbc6 	bl	800c9e8 <XMC_USBH_osDelay>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1089
            if (ptr_ch->HCINT & USB_CH_HCINT_NAK_Msk) {
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	689b      	ldr	r3, [r3, #8]
 800c260:	f003 0310 	and.w	r3, r3, #16
 800c264:	2b00      	cmp	r3, #0
 800c266:	d006      	beq.n	800c276 <XMC_USBH_PipeTransferAbort+0x82>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1090
              ptr_ch->HCINT  =  USB_CH_HCINTx_ALL;    /* Clear all interrupts */
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f240 72bb 	movw	r2, #1979	; 0x7bb
 800c26e:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1091
              status = XMC_USBH_DRIVER_OK;
 800c270:	2300      	movs	r3, #0
 800c272:	613b      	str	r3, [r7, #16]
 800c274:	e020      	b.n	800c2b8 <XMC_USBH_PipeTransferAbort+0xc4>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1095
            }
            else
            {
              ptr_ch->HCINT  =  USB_CH_HCINTx_ALL;      /* Clear all interrupts */
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	f240 72bb 	movw	r2, #1979	; 0x7bb
 800c27c:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1096
              ptr_ch->HCCHAR =  (uint32_t)(ptr_ch->HCCHAR | USB_CH_HCCHAR_ChEna_Msk | USB_CH_HCCHAR_ChDis_Msk);
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1099

              /* wait until channel is halted */
              for (timeout = 0U; timeout < 5000U; timeout++) {
 800c28a:	2300      	movs	r3, #0
 800c28c:	617b      	str	r3, [r7, #20]
 800c28e:	e00e      	b.n	800c2ae <XMC_USBH_PipeTransferAbort+0xba>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1100
                if (ptr_ch->HCINT & USB_CH_HCINT_ChHltd_Msk) {
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	689b      	ldr	r3, [r3, #8]
 800c294:	f003 0302 	and.w	r3, r3, #2
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d005      	beq.n	800c2a8 <XMC_USBH_PipeTransferAbort+0xb4>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1101
                  ptr_ch->HCINT = USB_CH_HCINTx_ALL;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f240 72bb 	movw	r2, #1979	; 0x7bb
 800c2a2:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1102
                  status = XMC_USBH_DRIVER_OK;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1099 (discriminator 2)
            {
              ptr_ch->HCINT  =  USB_CH_HCINTx_ALL;      /* Clear all interrupts */
              ptr_ch->HCCHAR =  (uint32_t)(ptr_ch->HCCHAR | USB_CH_HCCHAR_ChEna_Msk | USB_CH_HCCHAR_ChDis_Msk);

              /* wait until channel is halted */
              for (timeout = 0U; timeout < 5000U; timeout++) {
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1099 (discriminator 1)
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	f241 3287 	movw	r2, #4999	; 0x1387
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d9eb      	bls.n	800c290 <XMC_USBH_PipeTransferAbort+0x9c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1112
        }
      }
    }
  }

  return status;
 800c2b8:	693b      	ldr	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1113
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3718      	adds	r7, #24
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	20000008 	.word	0x20000008
 800c2c8:	200003b8 	.word	0x200003b8

0800c2cc <XMC_USBH_GetFrameNumber>:
XMC_USBH_GetFrameNumber():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1122
 *
 * \par<b>Description:</b><BR>
 * Get current USB Frame Number.
*/
static uint16_t XMC_USBH_GetFrameNumber (void)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1125
  uint16_t status;
  
  if (XMC_USBH0_device.power_state == XMC_USBH_POWER_OFF)
 800c2d2:	4b0a      	ldr	r3, [pc, #40]	; (800c2fc <XMC_USBH_GetFrameNumber+0x30>)
 800c2d4:	7c5b      	ldrb	r3, [r3, #17]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d102      	bne.n	800c2e0 <XMC_USBH_GetFrameNumber+0x14>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1127
  {
    status = 0U;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	80fb      	strh	r3, [r7, #6]
 800c2de:	e007      	b.n	800c2f0 <XMC_USBH_GetFrameNumber+0x24>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1131
  }
  else
  {
    status = (uint16_t)((XMC_USBH0_device.global_register->HFNUM) & 0xFFFU);
 800c2e0:	4b06      	ldr	r3, [pc, #24]	; (800c2fc <XMC_USBH_GetFrameNumber+0x30>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800c2e8:	b29b      	uxth	r3, r3
 800c2ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c2ee:	80fb      	strh	r3, [r7, #6]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1133
  }
  return status;
 800c2f0:	88fb      	ldrh	r3, [r7, #6]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1134
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	370c      	adds	r7, #12
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bc80      	pop	{r7}
 800c2fa:	4770      	bx	lr
 800c2fc:	20000008 	.word	0x20000008

0800c300 <XMC_USBH_HandleIrq>:
XMC_USBH_HandleIrq():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1148
 * to be transmitted on the same pipe and continues transmission until data is available. A pipe event is also propagated
 * to the user provided pipe event callback function. A transfer complete event will be propagated only when all the data
 * is transmitted for an OUT transaction.
 *
*/
void XMC_USBH_HandleIrq (uint32_t gintsts) {
 800c300:	b580      	push	{r7, lr}
 800c302:	b092      	sub	sp, #72	; 0x48
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1158
  uint8_t *ptr_data;
  uint32_t *dfifo;
  uint32_t grxsts, bcnt, dat, len, len_rest;
  
  /* Host port interrupt */
  if ((gintsts & USB_GINTSTS_HOSTMODE_PrtInt_Msk) != 0U) {
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d038      	beq.n	800c384 <XMC_USBH_HandleIrq+0x84>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1159
    hprt = XMC_USBH0_device.global_register->HPRT;
 800c312:	4b87      	ldr	r3, [pc, #540]	; (800c530 <XMC_USBH_HandleIrq+0x230>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 800c31a:	623b      	str	r3, [r7, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1161
    /* Clear port enable */
    XMC_USBH0_device.global_register->HPRT = hprt & (uint32_t)(~USB_HPRT_PrtEna_Msk);
 800c31c:	4b84      	ldr	r3, [pc, #528]	; (800c530 <XMC_USBH_HandleIrq+0x230>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	6a3a      	ldr	r2, [r7, #32]
 800c322:	f022 0204 	bic.w	r2, r2, #4
 800c326:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1162
    if ((hprt & USB_HPRT_PrtConnDet_Msk) != 0U) {
 800c32a:	6a3b      	ldr	r3, [r7, #32]
 800c32c:	f003 0302 	and.w	r3, r3, #2
 800c330:	2b00      	cmp	r3, #0
 800c332:	d011      	beq.n	800c358 <XMC_USBH_HandleIrq+0x58>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1163
      XMC_USBH0_device.global_register->HCFG =  (0x200U | (USB_CH_HCFG_FSLSPCS(1) |
 800c334:	4b7e      	ldr	r3, [pc, #504]	; (800c530 <XMC_USBH_HandleIrq+0x230>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f240 2205 	movw	r2, #517	; 0x205
 800c33c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1166
                                                    USB_CH_HCFG_FSLSSUP(1)));
      /* Ignore connect under reset */
      if (XMC_USBH0_device.port_reset_active == false) {
 800c340:	4b7b      	ldr	r3, [pc, #492]	; (800c530 <XMC_USBH_HandleIrq+0x230>)
 800c342:	7c9b      	ldrb	r3, [r3, #18]
 800c344:	f083 0301 	eor.w	r3, r3, #1
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d004      	beq.n	800c358 <XMC_USBH_HandleIrq+0x58>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1167
        XMC_USBH0_device.SignalPortEvent_cb(0U, XMC_USBH_EVENT_CONNECT);
 800c34e:	4b78      	ldr	r3, [pc, #480]	; (800c530 <XMC_USBH_HandleIrq+0x230>)
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	2101      	movs	r1, #1
 800c354:	2000      	movs	r0, #0
 800c356:	4798      	blx	r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1170
      }
    }
    if ((hprt & USB_HPRT_PrtEnChng_Msk) != 0U) { /* If port enable changed */
 800c358:	6a3b      	ldr	r3, [r7, #32]
 800c35a:	f003 0308 	and.w	r3, r3, #8
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d010      	beq.n	800c384 <XMC_USBH_HandleIrq+0x84>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1171
      if ((hprt & USB_HPRT_PrtEna_Msk) != 0U) {  /* If device connected */
 800c362:	6a3b      	ldr	r3, [r7, #32]
 800c364:	f003 0304 	and.w	r3, r3, #4
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d00b      	beq.n	800c384 <XMC_USBH_HandleIrq+0x84>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1172
        if (XMC_USBH0_device.port_reset_active == true) {
 800c36c:	4b70      	ldr	r3, [pc, #448]	; (800c530 <XMC_USBH_HandleIrq+0x230>)
 800c36e:	7c9b      	ldrb	r3, [r3, #18]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d007      	beq.n	800c384 <XMC_USBH_HandleIrq+0x84>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1173
          XMC_USBH0_device.port_reset_active = false;
 800c374:	4b6e      	ldr	r3, [pc, #440]	; (800c530 <XMC_USBH_HandleIrq+0x230>)
 800c376:	2200      	movs	r2, #0
 800c378:	749a      	strb	r2, [r3, #18]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1174
          XMC_USBH0_device.SignalPortEvent_cb(0U, XMC_USBH_EVENT_RESET);
 800c37a:	4b6d      	ldr	r3, [pc, #436]	; (800c530 <XMC_USBH_HandleIrq+0x230>)
 800c37c:	689b      	ldr	r3, [r3, #8]
 800c37e:	2108      	movs	r1, #8
 800c380:	2000      	movs	r0, #0
 800c382:	4798      	blx	r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1181
      }
    }
  }
  
  /* Disconnect interrupt */
  if ((gintsts & USB_GINTSTS_HOSTMODE_DisconnInt_Msk) != 0U) {
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d03e      	beq.n	800c40c <XMC_USBH_HandleIrq+0x10c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1182
    XMC_USBH0_device.global_register->GINTSTS_HOSTMODE = USB_GINTSTS_HOSTMODE_DisconnInt_Msk; /* Clear disconnect interrupt */
 800c38e:	4b68      	ldr	r3, [pc, #416]	; (800c530 <XMC_USBH_HandleIrq+0x230>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c396:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1184
    /* Ignore disconnect under reset */
    if ( XMC_USBH0_device.port_reset_active == false) {
 800c398:	4b65      	ldr	r3, [pc, #404]	; (800c530 <XMC_USBH_HandleIrq+0x230>)
 800c39a:	7c9b      	ldrb	r3, [r3, #18]
 800c39c:	f083 0301 	eor.w	r3, r3, #1
 800c3a0:	b2db      	uxtb	r3, r3
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d032      	beq.n	800c40c <XMC_USBH_HandleIrq+0x10c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1185
      ptr_ch   = (USB0_CH_TypeDef *)(XMC_USBH0_device.host_channel_registers);
 800c3a6:	4b62      	ldr	r3, [pc, #392]	; (800c530 <XMC_USBH_HandleIrq+0x230>)
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	643b      	str	r3, [r7, #64]	; 0x40
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1186
      ptr_pipe = (XMC_USBH0_pipe_t    *)(pipe);
 800c3ac:	4b61      	ldr	r3, [pc, #388]	; (800c534 <XMC_USBH_HandleIrq+0x234>)
 800c3ae:	647b      	str	r3, [r7, #68]	; 0x44
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1187
      for (ch = 0U; ch < USBH0_MAX_PIPE_NUM; ch++) {
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	637b      	str	r3, [r7, #52]	; 0x34
 800c3b4:	e022      	b.n	800c3fc <XMC_USBH_HandleIrq+0xfc>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1188
        if (ptr_pipe->in_use != 0U) {
 800c3b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3b8:	7edb      	ldrb	r3, [r3, #27]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d015      	beq.n	800c3ea <XMC_USBH_HandleIrq+0xea>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1189
          ptr_pipe->in_use = 0U;
 800c3be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	76da      	strb	r2, [r3, #27]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1190
          ptr_ch->HCINT    = USB_CH_HCINTx_ALL;                                            /* Clear all interrupts */
 800c3c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3c6:	f240 72bb 	movw	r2, #1979	; 0x7bb
 800c3ca:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1191
          ptr_ch->HCINTMSK = USB_CH_HCINT_ChHltd_Msk;                           /* Enable halt interrupt */
 800c3cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3ce:	2202      	movs	r2, #2
 800c3d0:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1192
          ptr_ch->HCCHAR  |= (uint32_t)(USB_CH_HCCHAR_ChEna_Msk | USB_CH_HCCHAR_ChDis_Msk); /* Activate Halt */
 800c3d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
 800c3da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3dc:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1193
          XMC_USBH0_device.SignalPipeEvent_cb((XMC_USBH_EP_HANDLE)ptr_ch, XMC_USBH_EVENT_BUS_ERROR);
 800c3de:	4b54      	ldr	r3, [pc, #336]	; (800c530 <XMC_USBH_HandleIrq+0x230>)
 800c3e0:	68db      	ldr	r3, [r3, #12]
 800c3e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3e4:	2140      	movs	r1, #64	; 0x40
 800c3e6:	4610      	mov	r0, r2
 800c3e8:	4798      	blx	r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1195 (discriminator 2)
        }
        ptr_ch++;
 800c3ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3ec:	3320      	adds	r3, #32
 800c3ee:	643b      	str	r3, [r7, #64]	; 0x40
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1196 (discriminator 2)
        ptr_pipe++;
 800c3f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3f2:	3320      	adds	r3, #32
 800c3f4:	647b      	str	r3, [r7, #68]	; 0x44
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1187 (discriminator 2)
    XMC_USBH0_device.global_register->GINTSTS_HOSTMODE = USB_GINTSTS_HOSTMODE_DisconnInt_Msk; /* Clear disconnect interrupt */
    /* Ignore disconnect under reset */
    if ( XMC_USBH0_device.port_reset_active == false) {
      ptr_ch   = (USB0_CH_TypeDef *)(XMC_USBH0_device.host_channel_registers);
      ptr_pipe = (XMC_USBH0_pipe_t    *)(pipe);
      for (ch = 0U; ch < USBH0_MAX_PIPE_NUM; ch++) {
 800c3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	637b      	str	r3, [r7, #52]	; 0x34
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1187 (discriminator 1)
 800c3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3fe:	2b0d      	cmp	r3, #13
 800c400:	d9d9      	bls.n	800c3b6 <XMC_USBH_HandleIrq+0xb6>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1198
          XMC_USBH0_device.SignalPipeEvent_cb((XMC_USBH_EP_HANDLE)ptr_ch, XMC_USBH_EVENT_BUS_ERROR);
        }
        ptr_ch++;
        ptr_pipe++;
      }
      XMC_USBH0_device.SignalPortEvent_cb(0U, XMC_USBH_EVENT_DISCONNECT);
 800c402:	4b4b      	ldr	r3, [pc, #300]	; (800c530 <XMC_USBH_HandleIrq+0x230>)
 800c404:	689b      	ldr	r3, [r3, #8]
 800c406:	2102      	movs	r1, #2
 800c408:	2000      	movs	r0, #0
 800c40a:	4798      	blx	r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1202
    }
  }
  /* Handle receive fifo not-empty interrupt */
  if ((gintsts & USB_GINTSTS_HOSTMODE_RxFLvl_Msk) != 0U) {
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f003 0310 	and.w	r3, r3, #16
 800c412:	2b00      	cmp	r3, #0
 800c414:	d07d      	beq.n	800c512 <XMC_USBH_HandleIrq+0x212>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1203
    XMC_USBH0_device.global_register->GINTMSK_HOSTMODE &= (uint32_t)~USB_GINTMSK_HOSTMODE_RxFLvlMsk_Msk;
 800c416:	4b46      	ldr	r3, [pc, #280]	; (800c530 <XMC_USBH_HandleIrq+0x230>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4a45      	ldr	r2, [pc, #276]	; (800c530 <XMC_USBH_HandleIrq+0x230>)
 800c41c:	6812      	ldr	r2, [r2, #0]
 800c41e:	6992      	ldr	r2, [r2, #24]
 800c420:	f022 0210 	bic.w	r2, r2, #16
 800c424:	619a      	str	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1204
    grxsts     = (XMC_USBH0_device.global_register->GRXSTSP_HOSTMODE);    
 800c426:	4b42      	ldr	r3, [pc, #264]	; (800c530 <XMC_USBH_HandleIrq+0x230>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	6a1b      	ldr	r3, [r3, #32]
 800c42c:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1206
    /* IN Data Packet received ? */
    if ((uint32_t)((grxsts >> 17U) & 0x0FU) == (uint32_t)USB_GRXSTSR_HOSTMODE_PktSts_IN_DATA_PKT) {
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	0c5b      	lsrs	r3, r3, #17
 800c432:	f003 030f 	and.w	r3, r3, #15
 800c436:	2b02      	cmp	r3, #2
 800c438:	d163      	bne.n	800c502 <XMC_USBH_HandleIrq+0x202>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1207
      ch         = (uint32_t)(grxsts & USB_GRXSTSR_DEVICEMODE_EPNum_Msk);
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	f003 030f 	and.w	r3, r3, #15
 800c440:	637b      	str	r3, [r7, #52]	; 0x34
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1208
      bcnt       = ((uint32_t)(grxsts & USB_GRXSTSR_DEVICEMODE_BCnt_Msk) >> USB_GRXSTSR_DEVICEMODE_BCnt_Pos);
 800c442:	69fb      	ldr	r3, [r7, #28]
 800c444:	091b      	lsrs	r3, r3, #4
 800c446:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c44a:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1209
      dfifo      = (uint32_t *)XMC_USBH0_dfifo_ptr[ch];
 800c44c:	4a3a      	ldr	r2, [pc, #232]	; (800c538 <XMC_USBH_HandleIrq+0x238>)
 800c44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c454:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1210
      ptr_data   =  pipe[ch].data + pipe[ch].num_transferred_total;
 800c456:	4a37      	ldr	r2, [pc, #220]	; (800c534 <XMC_USBH_HandleIrq+0x234>)
 800c458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c45a:	015b      	lsls	r3, r3, #5
 800c45c:	4413      	add	r3, r2
 800c45e:	3304      	adds	r3, #4
 800c460:	681a      	ldr	r2, [r3, #0]
 800c462:	4934      	ldr	r1, [pc, #208]	; (800c534 <XMC_USBH_HandleIrq+0x234>)
 800c464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c466:	015b      	lsls	r3, r3, #5
 800c468:	440b      	add	r3, r1
 800c46a:	330c      	adds	r3, #12
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4413      	add	r3, r2
 800c470:	633b      	str	r3, [r7, #48]	; 0x30
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1211
      len        =  bcnt / 4U; /* Received number of 32-bit data */
 800c472:	69bb      	ldr	r3, [r7, #24]
 800c474:	089b      	lsrs	r3, r3, #2
 800c476:	62bb      	str	r3, [r7, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1212
      len_rest   =  bcnt & 3U; /* Number of bytes left */
 800c478:	69bb      	ldr	r3, [r7, #24]
 800c47a:	f003 0303 	and.w	r3, r3, #3
 800c47e:	627b      	str	r3, [r7, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1215
      /* Read data from fifo */
      /* Read 32 bit sized  data */
      while (len != 0U) {
 800c480:	e009      	b.n	800c496 <XMC_USBH_HandleIrq+0x196>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1219
#if defined __TASKING__/*tasking*/
        *((__unaligned uint32_t *)ptr_data) = *dfifo;
#else /* defined (__GNUC__) || defined (__CC_ARM) || defined (__ICCARM__)*/
        *((__packed uint32_t *)ptr_data) = *dfifo;
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c488:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1222
#endif

        ptr_data += 4U;
 800c48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c48c:	3304      	adds	r3, #4
 800c48e:	633b      	str	r3, [r7, #48]	; 0x30
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1223
        len--;
 800c490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c492:	3b01      	subs	r3, #1
 800c494:	62bb      	str	r3, [r7, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1215
      ptr_data   =  pipe[ch].data + pipe[ch].num_transferred_total;
      len        =  bcnt / 4U; /* Received number of 32-bit data */
      len_rest   =  bcnt & 3U; /* Number of bytes left */
      /* Read data from fifo */
      /* Read 32 bit sized  data */
      while (len != 0U) {
 800c496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d1f2      	bne.n	800c482 <XMC_USBH_HandleIrq+0x182>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1226

        ptr_data += 4U;
        len--;
      }
      /* Read 8 bit sized data */
      if (len_rest != 0U) {
 800c49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d013      	beq.n	800c4ca <XMC_USBH_HandleIrq+0x1ca>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1230
#if defined __TASKING__/*tasking*/
        dat = *((__unaligned uint32_t *)dfifo);
#else /* defined (__GNUC__) || defined (__CC_ARM) || defined (__ICCARM__)*/
        dat = *((__packed uint32_t *)dfifo);
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1232
#endif
        while (len_rest != 0U) {
 800c4a8:	e00c      	b.n	800c4c4 <XMC_USBH_HandleIrq+0x1c4>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1233
          *ptr_data = (uint8_t)dat;
 800c4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ac:	b2da      	uxtb	r2, r3
 800c4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b0:	701a      	strb	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1234
          ptr_data++;
 800c4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	633b      	str	r3, [r7, #48]	; 0x30
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1235
          dat >>= 8;
 800c4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ba:	0a1b      	lsrs	r3, r3, #8
 800c4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1236
          len_rest--;
 800c4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	627b      	str	r3, [r7, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1232
#if defined __TASKING__/*tasking*/
        dat = *((__unaligned uint32_t *)dfifo);
#else /* defined (__GNUC__) || defined (__CC_ARM) || defined (__ICCARM__)*/
        dat = *((__packed uint32_t *)dfifo);
#endif
        while (len_rest != 0U) {
 800c4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d1ef      	bne.n	800c4aa <XMC_USBH_HandleIrq+0x1aa>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1239
          ptr_data++;
          dat >>= 8;
          len_rest--;
        }
      }
      pipe[ch].num_transferring      += bcnt;
 800c4ca:	4a1a      	ldr	r2, [pc, #104]	; (800c534 <XMC_USBH_HandleIrq+0x234>)
 800c4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ce:	015b      	lsls	r3, r3, #5
 800c4d0:	4413      	add	r3, r2
 800c4d2:	3310      	adds	r3, #16
 800c4d4:	681a      	ldr	r2, [r3, #0]
 800c4d6:	69bb      	ldr	r3, [r7, #24]
 800c4d8:	441a      	add	r2, r3
 800c4da:	4916      	ldr	r1, [pc, #88]	; (800c534 <XMC_USBH_HandleIrq+0x234>)
 800c4dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4de:	015b      	lsls	r3, r3, #5
 800c4e0:	440b      	add	r3, r1
 800c4e2:	3310      	adds	r3, #16
 800c4e4:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1240
      pipe[ch].num_transferred_total += bcnt;
 800c4e6:	4a13      	ldr	r2, [pc, #76]	; (800c534 <XMC_USBH_HandleIrq+0x234>)
 800c4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ea:	015b      	lsls	r3, r3, #5
 800c4ec:	4413      	add	r3, r2
 800c4ee:	330c      	adds	r3, #12
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	69bb      	ldr	r3, [r7, #24]
 800c4f4:	441a      	add	r2, r3
 800c4f6:	490f      	ldr	r1, [pc, #60]	; (800c534 <XMC_USBH_HandleIrq+0x234>)
 800c4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4fa:	015b      	lsls	r3, r3, #5
 800c4fc:	440b      	add	r3, r1
 800c4fe:	330c      	adds	r3, #12
 800c500:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1242
    }
    XMC_USBH0_device.global_register->GINTMSK_HOSTMODE |= (uint32_t)USB_GINTMSK_HOSTMODE_RxFLvlMsk_Msk;
 800c502:	4b0b      	ldr	r3, [pc, #44]	; (800c530 <XMC_USBH_HandleIrq+0x230>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a0a      	ldr	r2, [pc, #40]	; (800c530 <XMC_USBH_HandleIrq+0x230>)
 800c508:	6812      	ldr	r2, [r2, #0]
 800c50a:	6992      	ldr	r2, [r2, #24]
 800c50c:	f042 0210 	orr.w	r2, r2, #16
 800c510:	619a      	str	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1246
  }

  /* Handle sof interrupt */
  if ((gintsts & USB_GINTSTS_HOSTMODE_Sof_Msk) != 0U) { /* If start of frame interrupt */
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f003 0308 	and.w	r3, r3, #8
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d035      	beq.n	800c588 <XMC_USBH_HandleIrq+0x288>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1247
    XMC_USBH0_device.global_register->GINTSTS_HOSTMODE =  USB_GINTSTS_HOSTMODE_Sof_Msk; /* Clear SOF interrupt */
 800c51c:	4b04      	ldr	r3, [pc, #16]	; (800c530 <XMC_USBH_HandleIrq+0x230>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	2208      	movs	r2, #8
 800c522:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1248
    ptr_pipe = (XMC_USBH0_pipe_t *)(pipe);
 800c524:	4b03      	ldr	r3, [pc, #12]	; (800c534 <XMC_USBH_HandleIrq+0x234>)
 800c526:	647b      	str	r3, [r7, #68]	; 0x44
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1249
    for (ch = 0U; ch < USBH0_MAX_PIPE_NUM; ch++) {
 800c528:	2300      	movs	r3, #0
 800c52a:	637b      	str	r3, [r7, #52]	; 0x34
 800c52c:	e029      	b.n	800c582 <XMC_USBH_HandleIrq+0x282>
 800c52e:	bf00      	nop
 800c530:	20000008 	.word	0x20000008
 800c534:	200003b8 	.word	0x200003b8
 800c538:	200000b8 	.word	0x200000b8
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1251
      /* If interrupt transfer is active handle period (interval) */
      if ((ptr_pipe->ep_type == (uint8_t)XMC_USBH_ENDPOINT_INTERRUPT) && (ptr_pipe->in_use == 1U)) {
 800c53c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c53e:	7e9b      	ldrb	r3, [r3, #26]
 800c540:	2b03      	cmp	r3, #3
 800c542:	d118      	bne.n	800c576 <XMC_USBH_HandleIrq+0x276>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1251 (discriminator 1)
 800c544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c546:	7edb      	ldrb	r3, [r3, #27]
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d114      	bne.n	800c576 <XMC_USBH_HandleIrq+0x276>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1252
        if (ptr_pipe->interval != 0U)
 800c54c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c54e:	8b1b      	ldrh	r3, [r3, #24]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d010      	beq.n	800c576 <XMC_USBH_HandleIrq+0x276>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1254
        {
          ptr_pipe->interval--;
 800c554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c556:	8b1b      	ldrh	r3, [r3, #24]
 800c558:	3b01      	subs	r3, #1
 800c55a:	b29a      	uxth	r2, r3
 800c55c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c55e:	831a      	strh	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1255
          if (ptr_pipe->interval == 0U)
 800c560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c562:	8b1b      	ldrh	r3, [r3, #24]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d106      	bne.n	800c576 <XMC_USBH_HandleIrq+0x276>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1257
          {
            ptr_pipe->interval = ptr_pipe->interval_reload;
 800c568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c56a:	8ada      	ldrh	r2, [r3, #22]
 800c56c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c56e:	831a      	strh	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1258
            ptr_pipe->interrupt_triggered = 1U;
 800c570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c572:	2201      	movs	r2, #1
 800c574:	775a      	strb	r2, [r3, #29]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1262 (discriminator 2)
          }
        }
      }
      ptr_pipe++;
 800c576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c578:	3320      	adds	r3, #32
 800c57a:	647b      	str	r3, [r7, #68]	; 0x44
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1249 (discriminator 2)

  /* Handle sof interrupt */
  if ((gintsts & USB_GINTSTS_HOSTMODE_Sof_Msk) != 0U) { /* If start of frame interrupt */
    XMC_USBH0_device.global_register->GINTSTS_HOSTMODE =  USB_GINTSTS_HOSTMODE_Sof_Msk; /* Clear SOF interrupt */
    ptr_pipe = (XMC_USBH0_pipe_t *)(pipe);
    for (ch = 0U; ch < USBH0_MAX_PIPE_NUM; ch++) {
 800c57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c57e:	3301      	adds	r3, #1
 800c580:	637b      	str	r3, [r7, #52]	; 0x34
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1249 (discriminator 1)
 800c582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c584:	2b0d      	cmp	r3, #13
 800c586:	d9d9      	bls.n	800c53c <XMC_USBH_HandleIrq+0x23c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1267
      ptr_pipe++;
    }
  }
  
  /* Handle host ctrl interrupt */
  if ((gintsts & USB_GINTSTS_HOSTMODE_HChInt_Msk) != 0U) {
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c58e:	2b00      	cmp	r3, #0
 800c590:	f000 8163 	beq.w	800c85a <XMC_USBH_HandleIrq+0x55a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1268
    haint = XMC_USBH0_device.global_register->HAINT;
 800c594:	4b82      	ldr	r3, [pc, #520]	; (800c7a0 <XMC_USBH_HandleIrq+0x4a0>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800c59c:	63fb      	str	r3, [r7, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1269
    for (ch = 0U; ch < USBH0_MAX_PIPE_NUM; ch++) {
 800c59e:	2300      	movs	r3, #0
 800c5a0:	637b      	str	r3, [r7, #52]	; 0x34
 800c5a2:	e156      	b.n	800c852 <XMC_USBH_HandleIrq+0x552>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1271
      /* Check for interrupt of all channels */
      if ((haint & (uint32_t)((uint32_t)1U << ch)) != 0U) {
 800c5a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c5a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5a8:	fa22 f303 	lsr.w	r3, r2, r3
 800c5ac:	f003 0301 	and.w	r3, r3, #1
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	f000 814b 	beq.w	800c84c <XMC_USBH_HandleIrq+0x54c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1272
        haint     &= (uint32_t)~((uint32_t)1U << ch);
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c5be:	43db      	mvns	r3, r3
 800c5c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c5c2:	4013      	ands	r3, r2
 800c5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1273
        ptr_ch     =  (USB0_CH_TypeDef *)(XMC_USBH0_device.host_channel_registers) + ch;
 800c5c6:	4b76      	ldr	r3, [pc, #472]	; (800c7a0 <XMC_USBH_HandleIrq+0x4a0>)
 800c5c8:	685a      	ldr	r2, [r3, #4]
 800c5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5cc:	015b      	lsls	r3, r3, #5
 800c5ce:	4413      	add	r3, r2
 800c5d0:	643b      	str	r3, [r7, #64]	; 0x40
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1274
        ptr_pipe   =  (XMC_USBH0_pipe_t    *)(&pipe[ch]);
 800c5d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d4:	015b      	lsls	r3, r3, #5
 800c5d6:	4a73      	ldr	r2, [pc, #460]	; (800c7a4 <XMC_USBH_HandleIrq+0x4a4>)
 800c5d8:	4413      	add	r3, r2
 800c5da:	647b      	str	r3, [r7, #68]	; 0x44
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1276
        /*Local variable for HCINT*/
        dat = ptr_ch->HCINT;
 800c5dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5de:	689b      	ldr	r3, [r3, #8]
 800c5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1277
        hcint      =  (uint32_t)(dat & ptr_ch->HCINTMSK);
 800c5e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5e4:	68da      	ldr	r2, [r3, #12]
 800c5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e8:	4013      	ands	r3, r2
 800c5ea:	63bb      	str	r3, [r7, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1278
        if ((hcint & USB_CH_HCINT_ChHltd_Msk) != 0U) {                                  /* channel halted ? */
 800c5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ee:	f003 0302 	and.w	r3, r3, #2
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d00b      	beq.n	800c60e <XMC_USBH_HandleIrq+0x30e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1279
          ptr_ch->HCINTMSK = 0U;                                                        /*  disable all channel interrupts */
 800c5f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1280
          ptr_ch->HCINT    = USB_CH_HCINTx_ALL;                                                    /*  clear all interrupts */
 800c5fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5fe:	f240 72bb 	movw	r2, #1979	; 0x7bb
 800c602:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1281
          ptr_pipe->transfer_active = 0U;                                               /*  set status transfer not active */
 800c604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c606:	2200      	movs	r2, #0
 800c608:	771a      	strb	r2, [r3, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1282
          hcint = 0U;
 800c60a:	2300      	movs	r3, #0
 800c60c:	63bb      	str	r3, [r7, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1284
        }
        if ((hcint & USB_CH_HCINT_XferCompl_Msk) != 0U) {                               /* data transfer finished ? */
 800c60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c610:	f003 0301 	and.w	r3, r3, #1
 800c614:	2b00      	cmp	r3, #0
 800c616:	d036      	beq.n	800c686 <XMC_USBH_HandleIrq+0x386>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1285
          ptr_ch->HCINT   = USB_CH_HCINTx_ALL;                                                     /*  clear all interrupts */
 800c618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c61a:	f240 72bb 	movw	r2, #1979	; 0x7bb
 800c61e:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1286
          if ((ptr_ch->HCCHAR & USB_CH_HCCHAR_EPDir_Msk) == 0U) {                       /*  endpoint OUT ? */
 800c620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d11d      	bne.n	800c668 <XMC_USBH_HandleIrq+0x368>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1287
            ptr_ch->HCINTMSK = 0U;                                                      /*   disable all channel interrupts */
 800c62c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c62e:	2200      	movs	r2, #0
 800c630:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1288
            ptr_pipe->transfer_active = 0U;                                             /*   transfer not in progress */
 800c632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c634:	2200      	movs	r2, #0
 800c636:	771a      	strb	r2, [r3, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1289
            ptr_pipe->num_transferred_total += ptr_pipe->num_transferring;              /*   admin OUT transfer status */
 800c638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c63a:	68da      	ldr	r2, [r3, #12]
 800c63c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c63e:	691b      	ldr	r3, [r3, #16]
 800c640:	441a      	add	r2, r3
 800c642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c644:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1290
            ptr_pipe->num_transferring       = 0U;                                      /*   admin OUT transfer status */
 800c646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c648:	2200      	movs	r2, #0
 800c64a:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1291
            if (ptr_pipe->num_transferred_total == ptr_pipe->num) {                     /*   all bytes transferred ? */
 800c64c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c64e:	68da      	ldr	r2, [r3, #12]
 800c650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	429a      	cmp	r2, r3
 800c656:	d105      	bne.n	800c664 <XMC_USBH_HandleIrq+0x364>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1292
              ptr_pipe->in_use = 0U;                                                    /*    release pipe */
 800c658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c65a:	2200      	movs	r2, #0
 800c65c:	76da      	strb	r2, [r3, #27]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1293
              ptr_pipe->event = (uint8_t)XMC_USBH_EVENT_TRANSFER_COMPLETE;                       /*    prepare event notification */
 800c65e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c660:	2201      	movs	r2, #1
 800c662:	779a      	strb	r2, [r3, #30]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1295
            }                                                                           
            hcint = 0U;                                                                 
 800c664:	2300      	movs	r3, #0
 800c666:	63bb      	str	r3, [r7, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1297
          }                                                                             
          if ((ptr_ch->HCCHAR & USB_CH_HCCHAR_EPDir_Msk) != 0U) {                       /*  endpoint IN ? */
 800c668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c670:	2b00      	cmp	r3, #0
 800c672:	d008      	beq.n	800c686 <XMC_USBH_HandleIrq+0x386>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1298
            ptr_pipe->in_use = 0U;                                                      /*   release pipe */
 800c674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c676:	2200      	movs	r2, #0
 800c678:	76da      	strb	r2, [r3, #27]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1299
            ptr_pipe->event = (uint8_t)XMC_USBH_EVENT_TRANSFER_COMPLETE;                         /*   prepare event notification */
 800c67a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c67c:	2201      	movs	r2, #1
 800c67e:	779a      	strb	r2, [r3, #30]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1300
            XMC_lTriggerHaltChannel(ptr_ch);                                            /*   trigger channel halt */
 800c680:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c682:	f7fe ff6b 	bl	800b55c <XMC_lTriggerHaltChannel>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1303
          }
        }
        if ((hcint & USB_CH_HCINTMSK_AckMsk_Msk) != 0U) {                                /* ACK received ? */
 800c686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c688:	f003 0320 	and.w	r3, r3, #32
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d02e      	beq.n	800c6ee <XMC_USBH_HandleIrq+0x3ee>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1304
          ptr_ch->HCINT = USB_CH_HCINTMSK_AckMsk_Msk;                                    /*  clear ACK interrupt */
 800c690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c692:	2220      	movs	r2, #32
 800c694:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1305
          is_nack[ch] = false;
 800c696:	4a44      	ldr	r2, [pc, #272]	; (800c7a8 <XMC_USBH_HandleIrq+0x4a8>)
 800c698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c69a:	4413      	add	r3, r2
 800c69c:	2200      	movs	r2, #0
 800c69e:	701a      	strb	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1306
          if ((ptr_ch->HCCHAR & USB_CH_HCCHAR_EPDir_Msk) != 0U) {                        /*  endpoint IN ? */
 800c6a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d01b      	beq.n	800c6e4 <XMC_USBH_HandleIrq+0x3e4>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1307
            if ((ptr_pipe->num != ptr_pipe->num_transferred_total) &&                    /*   if all data was not transferred */
 800c6ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6ae:	689a      	ldr	r2, [r3, #8]
 800c6b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6b2:	68db      	ldr	r3, [r3, #12]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d018      	beq.n	800c6ea <XMC_USBH_HandleIrq+0x3ea>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1308 (discriminator 1)
                (ptr_pipe->num_transferring != 0U)                 &&                    /*   if zero-length packet was not received */
 800c6b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6ba:	691b      	ldr	r3, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1307 (discriminator 1)
        }
        if ((hcint & USB_CH_HCINTMSK_AckMsk_Msk) != 0U) {                                /* ACK received ? */
          ptr_ch->HCINT = USB_CH_HCINTMSK_AckMsk_Msk;                                    /*  clear ACK interrupt */
          is_nack[ch] = false;
          if ((ptr_ch->HCCHAR & USB_CH_HCCHAR_EPDir_Msk) != 0U) {                        /*  endpoint IN ? */
            if ((ptr_pipe->num != ptr_pipe->num_transferred_total) &&                    /*   if all data was not transferred */
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d014      	beq.n	800c6ea <XMC_USBH_HandleIrq+0x3ea>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1309
                (ptr_pipe->num_transferring != 0U)                 &&                    /*   if zero-length packet was not received */
               ((ptr_pipe->num_transferred_total%ptr_pipe->ep_max_packet_size) == 0U)){  /*   if short packet was not received */
 800c6c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6c6:	8a92      	ldrh	r2, [r2, #20]
 800c6c8:	fbb3 f1f2 	udiv	r1, r3, r2
 800c6cc:	fb02 f201 	mul.w	r2, r2, r1
 800c6d0:	1a9b      	subs	r3, r3, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1308
        if ((hcint & USB_CH_HCINTMSK_AckMsk_Msk) != 0U) {                                /* ACK received ? */
          ptr_ch->HCINT = USB_CH_HCINTMSK_AckMsk_Msk;                                    /*  clear ACK interrupt */
          is_nack[ch] = false;
          if ((ptr_ch->HCCHAR & USB_CH_HCCHAR_EPDir_Msk) != 0U) {                        /*  endpoint IN ? */
            if ((ptr_pipe->num != ptr_pipe->num_transferred_total) &&                    /*   if all data was not transferred */
                (ptr_pipe->num_transferring != 0U)                 &&                    /*   if zero-length packet was not received */
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d109      	bne.n	800c6ea <XMC_USBH_HandleIrq+0x3ea>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1310
               ((ptr_pipe->num_transferred_total%ptr_pipe->ep_max_packet_size) == 0U)){  /*   if short packet was not received */
               ptr_ch->HCCHAR |= (uint32_t)USB_CH_HCCHAR_ChEna_Msk;                                /*    trigger next transfer */
 800c6d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c6de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6e0:	601a      	str	r2, [r3, #0]
 800c6e2:	e002      	b.n	800c6ea <XMC_USBH_HandleIrq+0x3ea>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1313
            }
          } else {                                                                        /* endpoint OUT */
            XMC_lTriggerHaltChannel(ptr_ch);                                              /*  trigger channel halt */
 800c6e4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c6e6:	f7fe ff39 	bl	800b55c <XMC_lTriggerHaltChannel>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1315
          } 
          hcint = 0U;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	63bb      	str	r3, [r7, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1318
        }
        /*local variable for HCCHAR*/
        dat = ptr_ch->HCCHAR;
 800c6ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1319
        if (((hcint & (USB_CH_HCINTMSK_StallMsk_Msk |                                    /* STALL */
 800c6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f6:	f403 63f3 	and.w	r3, r3, #1944	; 0x798
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d026      	beq.n	800c74c <XMC_USBH_HandleIrq+0x44c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1322
                      USB_CH_HCINTMSK_NakMsk_Msk   |                                     /* or NAK */
                      USB_CH_HCINTx_ERRORS )) != 0U) &&                                  /* or transaction error */
            ((dat & USB_CH_HCCHAR_EPDir_Msk) == 0U))
 800c6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1321
        }
        /*local variable for HCCHAR*/
        dat = ptr_ch->HCCHAR;
        if (((hcint & (USB_CH_HCINTMSK_StallMsk_Msk |                                    /* STALL */
                      USB_CH_HCINTMSK_NakMsk_Msk   |                                     /* or NAK */
                      USB_CH_HCINTx_ERRORS )) != 0U) &&                                  /* or transaction error */
 800c704:	2b00      	cmp	r3, #0
 800c706:	d121      	bne.n	800c74c <XMC_USBH_HandleIrq+0x44c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1325
            ((dat & USB_CH_HCCHAR_EPDir_Msk) == 0U))
        {                        /* and endpoint OUT */

            pktcnt = (uint32_t)((ptr_ch->HCTSIZ_BUFFERMODE & USB_CH_HCTSIZ_BUFFERMODE_PktCnt_Msk)  /*  administrate OUT transfer status */
 800c708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c70a:	691a      	ldr	r2, [r3, #16]
 800c70c:	4b27      	ldr	r3, [pc, #156]	; (800c7ac <XMC_USBH_HandleIrq+0x4ac>)
 800c70e:	4013      	ands	r3, r2
 800c710:	0cdb      	lsrs	r3, r3, #19
 800c712:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1327
                      >> USB_CH_HCTSIZ_BUFFERMODE_PktCnt_Pos);   
            mpsiz  = (ptr_ch->HCCHAR      ) & 0x000007FFU;
 800c714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c71c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1328
            if ((ptr_pipe->num_transferring >= mpsiz) && (pktcnt > 0U)) {
 800c71e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c720:	691a      	ldr	r2, [r3, #16]
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	429a      	cmp	r2, r3
 800c726:	d30e      	bcc.n	800c746 <XMC_USBH_HandleIrq+0x446>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1328 (discriminator 1)
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d00b      	beq.n	800c746 <XMC_USBH_HandleIrq+0x446>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1329
              ptr_pipe->num_transferred_total += (uint32_t)(ptr_pipe->num_transferring - (mpsiz * pktcnt));
 800c72e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c730:	68da      	ldr	r2, [r3, #12]
 800c732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c734:	6919      	ldr	r1, [r3, #16]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	6938      	ldr	r0, [r7, #16]
 800c73a:	fb00 f303 	mul.w	r3, r0, r3
 800c73e:	1acb      	subs	r3, r1, r3
 800c740:	441a      	add	r2, r3
 800c742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c744:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1331
            }
            ptr_pipe->num_transferring = 0U;
 800c746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c748:	2200      	movs	r2, #0
 800c74a:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1334
        }

        if ((hcint & USB_CH_HCINTMSK_NakMsk_Msk)!=0U) {                                /* if NAK */
 800c74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74e:	f003 0310 	and.w	r3, r3, #16
 800c752:	2b00      	cmp	r3, #0
 800c754:	d031      	beq.n	800c7ba <XMC_USBH_HandleIrq+0x4ba>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1335
            is_nack[ch] = true;
 800c756:	4a14      	ldr	r2, [pc, #80]	; (800c7a8 <XMC_USBH_HandleIrq+0x4a8>)
 800c758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c75a:	4413      	add	r3, r2
 800c75c:	2201      	movs	r2, #1
 800c75e:	701a      	strb	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1336
            ptr_pipe->event |= (uint8_t)XMC_USBH_EVENT_HANDSHAKE_NAK;
 800c760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c762:	7f9b      	ldrb	r3, [r3, #30]
 800c764:	f043 0302 	orr.w	r3, r3, #2
 800c768:	b2da      	uxtb	r2, r3
 800c76a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c76c:	779a      	strb	r2, [r3, #30]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1337
            ptr_ch->HCINT = USB_CH_HCINTMSK_NakMsk_Msk;                                /*    clear NAK interrupt */
 800c76e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c770:	2210      	movs	r2, #16
 800c772:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1338
            if ((ptr_ch->HCCHAR & USB_CH_HCCHAR_EPDir_Msk) != 0U) {                    /*    endpoint IN ? */
 800c774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d017      	beq.n	800c7b0 <XMC_USBH_HandleIrq+0x4b0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1339
              if (ptr_pipe->ep_type == (uint8_t)XMC_USBH_ENDPOINT_INTERRUPT) {                   /*     is endpoint of type interrupt ? */
 800c780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c782:	7e9b      	ldrb	r3, [r3, #26]
 800c784:	2b03      	cmp	r3, #3
 800c786:	d103      	bne.n	800c790 <XMC_USBH_HandleIrq+0x490>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1340
                XMC_lTriggerHaltChannel(ptr_ch);                                       /*      trigger channel halt (after halted will be restarted in next sof) */
 800c788:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c78a:	f7fe fee7 	bl	800b55c <XMC_lTriggerHaltChannel>
 800c78e:	e012      	b.n	800c7b6 <XMC_USBH_HandleIrq+0x4b6>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1342
              } else {                                                                 /*     is endpoint not of type interrupt ?*/
                ptr_ch->HCCHAR |= (uint32_t)USB_CH_HCCHAR_ChEna_Msk;                             /*      trigger next transfer */
 800c790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c79a:	601a      	str	r2, [r3, #0]
 800c79c:	e00b      	b.n	800c7b6 <XMC_USBH_HandleIrq+0x4b6>
 800c79e:	bf00      	nop
 800c7a0:	20000008 	.word	0x20000008
 800c7a4:	200003b8 	.word	0x200003b8
 800c7a8:	20000578 	.word	0x20000578
 800c7ac:	1ff80000 	.word	0x1ff80000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1345
              }
            } else { /* If endpoint OUT */                                             /*    endpoint OUT ? */
              XMC_lTriggerHaltChannel(ptr_ch);                                         /*     trigger channel halt */
 800c7b0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c7b2:	f7fe fed3 	bl	800b55c <XMC_lTriggerHaltChannel>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1347
            }
            hcint = 0U;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	63bb      	str	r3, [r7, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1350
        }

        if ((hcint & USB_CH_HCINTMSK_StallMsk_Msk) != 0U) {                              /* if STALL */
 800c7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7bc:	f003 0308 	and.w	r3, r3, #8
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d019      	beq.n	800c7f8 <XMC_USBH_HandleIrq+0x4f8>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1352
            /*Reset the packet data toggle*/
            ptr_ch->HCINT   = USB_CH_HCINTMSK_StallMsk_Msk;                              /*  clear STALL interrupt */
 800c7c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7c6:	2208      	movs	r2, #8
 800c7c8:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1353
            ptr_pipe->in_use = 0U;                                                       /*  release pipe */
 800c7ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	76da      	strb	r2, [r3, #27]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1354
            ptr_pipe->packet &= (uint32_t)(~XMC_USBH_PACKET_DATA_Msk);
 800c7d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c7d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7da:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1355
            ptr_pipe->packet   |=  (uint32_t)XMC_USBH_PACKET_DATA0;
 800c7dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f043 0210 	orr.w	r2, r3, #16
 800c7e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7e6:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1356
            ptr_pipe->event = (uint8_t)XMC_USBH_EVENT_HANDSHAKE_STALL;                            /*  prepare event notification */
 800c7e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7ea:	2210      	movs	r2, #16
 800c7ec:	779a      	strb	r2, [r3, #30]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1357
            XMC_lTriggerHaltChannel(ptr_ch);                                             /*  trigger channel halt */
 800c7ee:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c7f0:	f7fe feb4 	bl	800b55c <XMC_lTriggerHaltChannel>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1358
            hcint = 0U;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	63bb      	str	r3, [r7, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1360
        } 
        if ((hcint & USB_CH_HCINTx_ERRORS) != 0U) {                                      /* if transaction error */
 800c7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fa:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d00e      	beq.n	800c820 <XMC_USBH_HandleIrq+0x520>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1361
            ptr_ch->HCINT = USB_CH_HCINTx_ERRORS;                                        /*  clear all error interrupt */
 800c802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c804:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 800c808:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1362
            ptr_pipe->in_use = 0U;                                                       /*  release pipe */
 800c80a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c80c:	2200      	movs	r2, #0
 800c80e:	76da      	strb	r2, [r3, #27]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1363
            ptr_pipe->event = (uint8_t)XMC_USBH_EVENT_BUS_ERROR;                                  /*  prepare event notification */
 800c810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c812:	2240      	movs	r2, #64	; 0x40
 800c814:	779a      	strb	r2, [r3, #30]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1364
            XMC_lTriggerHaltChannel(ptr_ch);                                             /*  trigger channel halt */
 800c816:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c818:	f7fe fea0 	bl	800b55c <XMC_lTriggerHaltChannel>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1365
            hcint = 0U;
 800c81c:	2300      	movs	r3, #0
 800c81e:	63bb      	str	r3, [r7, #56]	; 0x38
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1367
        }
        if ((ptr_pipe->transfer_active == 0U) && (ptr_pipe->in_use == 0U) && (ptr_pipe->event != 0U)) {
 800c820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c822:	7f1b      	ldrb	r3, [r3, #28]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d111      	bne.n	800c84c <XMC_USBH_HandleIrq+0x54c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1367 (discriminator 1)
 800c828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c82a:	7edb      	ldrb	r3, [r3, #27]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d10d      	bne.n	800c84c <XMC_USBH_HandleIrq+0x54c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1367 (discriminator 2)
 800c830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c832:	7f9b      	ldrb	r3, [r3, #30]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d009      	beq.n	800c84c <XMC_USBH_HandleIrq+0x54c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1368
          XMC_USBH0_device.SignalPipeEvent_cb((XMC_USBH_EP_HANDLE)ptr_ch, (uint32_t)ptr_pipe->event);
 800c838:	4b46      	ldr	r3, [pc, #280]	; (800c954 <XMC_USBH_HandleIrq+0x654>)
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c83e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c840:	7f92      	ldrb	r2, [r2, #30]
 800c842:	4611      	mov	r1, r2
 800c844:	4798      	blx	r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1369
          ptr_pipe->event  = 0U;
 800c846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c848:	2200      	movs	r2, #0
 800c84a:	779a      	strb	r2, [r3, #30]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1269 (discriminator 2)
  }
  
  /* Handle host ctrl interrupt */
  if ((gintsts & USB_GINTSTS_HOSTMODE_HChInt_Msk) != 0U) {
    haint = XMC_USBH0_device.global_register->HAINT;
    for (ch = 0U; ch < USBH0_MAX_PIPE_NUM; ch++) {
 800c84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c84e:	3301      	adds	r3, #1
 800c850:	637b      	str	r3, [r7, #52]	; 0x34
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1269 (discriminator 1)
 800c852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c854:	2b0d      	cmp	r3, #13
 800c856:	f67f aea5 	bls.w	800c5a4 <XMC_USBH_HandleIrq+0x2a4>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1375
        }
      }
    }
  }
  /*Check if remote wakeup event detected*/
  if ((gintsts & USB_GINTSTS_HOSTMODE_WkUpInt_Msk) != 0U)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	da0f      	bge.n	800c880 <XMC_USBH_HandleIrq+0x580>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1377
  {
    XMC_USBH0_device.global_register->GINTSTS_HOSTMODE =  USB_GINTSTS_HOSTMODE_WkUpInt_Msk; /* Clear wakeup interrupt */
 800c860:	4b3c      	ldr	r3, [pc, #240]	; (800c954 <XMC_USBH_HandleIrq+0x654>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c868:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1379
    /*Recover PHY clock*/
    XMC_USBH0_device.global_register->PCGCCTL = XMC_USBH_PHY_CLK_UNGATE;
 800c86a:	4b3a      	ldr	r3, [pc, #232]	; (800c954 <XMC_USBH_HandleIrq+0x654>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c872:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1381
    /*Callback function execution*/
    XMC_USBH0_device.SignalPortEvent_cb(0U, XMC_USBH_EVENT_REMOTE_WAKEUP);
 800c876:	4b37      	ldr	r3, [pc, #220]	; (800c954 <XMC_USBH_HandleIrq+0x654>)
 800c878:	689b      	ldr	r3, [r3, #8]
 800c87a:	2140      	movs	r1, #64	; 0x40
 800c87c:	2000      	movs	r0, #0
 800c87e:	4798      	blx	r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1385
  }

  /* Handle restarts of unfinished transfers (due to NAK or ACK) */
  ptr_pipe = (XMC_USBH0_pipe_t *)(pipe);
 800c880:	4b35      	ldr	r3, [pc, #212]	; (800c958 <XMC_USBH_HandleIrq+0x658>)
 800c882:	647b      	str	r3, [r7, #68]	; 0x44
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1386
  for (ch = 0U; ch < USBH0_MAX_PIPE_NUM; ch++) {
 800c884:	2300      	movs	r3, #0
 800c886:	637b      	str	r3, [r7, #52]	; 0x34
 800c888:	e05d      	b.n	800c946 <XMC_USBH_HandleIrq+0x646>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1387
    if ((ptr_pipe->in_use == 1U) && (ptr_pipe->transfer_active == 0U)) {
 800c88a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c88c:	7edb      	ldrb	r3, [r3, #27]
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d153      	bne.n	800c93a <XMC_USBH_HandleIrq+0x63a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1387 (discriminator 1)
 800c892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c894:	7f1b      	ldrb	r3, [r3, #28]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d14f      	bne.n	800c93a <XMC_USBH_HandleIrq+0x63a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1389
      /* Restart periodic transfer if not in progress and interval expired */
      if (ptr_pipe->ep_type != (uint8_t)XMC_USBH_ENDPOINT_INTERRUPT) 
 800c89a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c89c:	7e9b      	ldrb	r3, [r3, #26]
 800c89e:	2b03      	cmp	r3, #3
 800c8a0:	d030      	beq.n	800c904 <XMC_USBH_HandleIrq+0x604>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1392
      {
            /*Data toggle if NACK not received*/
            if (!is_nack[ch])
 800c8a2:	4a2e      	ldr	r2, [pc, #184]	; (800c95c <XMC_USBH_HandleIrq+0x65c>)
 800c8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a6:	4413      	add	r3, r2
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	f083 0301 	eor.w	r3, r3, #1
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d022      	beq.n	800c8fa <XMC_USBH_HandleIrq+0x5fa>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1394
            {
              switch (ptr_pipe->packet & (uint32_t)XMC_USBH_PACKET_DATA_Msk)
 800c8b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c8bc:	2b10      	cmp	r3, #16
 800c8be:	d002      	beq.n	800c8c6 <XMC_USBH_HandleIrq+0x5c6>
 800c8c0:	2b20      	cmp	r3, #32
 800c8c2:	d00d      	beq.n	800c8e0 <XMC_USBH_HandleIrq+0x5e0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1405
                case XMC_USBH_PACKET_DATA1:
                  ptr_pipe->packet   &= (uint32_t)~XMC_USBH_PACKET_DATA_Msk;
                  ptr_pipe->packet   |= (uint32_t)XMC_USBH_PACKET_DATA0;
                  break;
                default:
                  break;
 800c8c4:	e01e      	b.n	800c904 <XMC_USBH_HandleIrq+0x604>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1397
            if (!is_nack[ch])
            {
              switch (ptr_pipe->packet & (uint32_t)XMC_USBH_PACKET_DATA_Msk)
              {
                case XMC_USBH_PACKET_DATA0:
                  ptr_pipe->packet   &= (uint32_t)~XMC_USBH_PACKET_DATA_Msk;
 800c8c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c8ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8d0:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1398
                  ptr_pipe->packet   |= (uint32_t)XMC_USBH_PACKET_DATA1;
 800c8d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f043 0220 	orr.w	r2, r3, #32
 800c8da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8dc:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1399
                  break;
 800c8de:	e011      	b.n	800c904 <XMC_USBH_HandleIrq+0x604>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1401
                case XMC_USBH_PACKET_DATA1:
                  ptr_pipe->packet   &= (uint32_t)~XMC_USBH_PACKET_DATA_Msk;
 800c8e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c8e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8ea:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1402
                  ptr_pipe->packet   |= (uint32_t)XMC_USBH_PACKET_DATA0;
 800c8ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f043 0210 	orr.w	r2, r3, #16
 800c8f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8f6:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1403
                  break;
 800c8f8:	e004      	b.n	800c904 <XMC_USBH_HandleIrq+0x604>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1410
                  break;
              }
            }
            else
            {
              is_nack[ch] = false;
 800c8fa:	4a18      	ldr	r2, [pc, #96]	; (800c95c <XMC_USBH_HandleIrq+0x65c>)
 800c8fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8fe:	4413      	add	r3, r2
 800c900:	2200      	movs	r2, #0
 800c902:	701a      	strb	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1413
            }
      }
      if (((ptr_pipe->ep_type == (uint8_t)XMC_USBH_ENDPOINT_INTERRUPT)&&(ptr_pipe->interrupt_triggered == 1U))||
 800c904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c906:	7e9b      	ldrb	r3, [r3, #26]
 800c908:	2b03      	cmp	r3, #3
 800c90a:	d103      	bne.n	800c914 <XMC_USBH_HandleIrq+0x614>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1413 (discriminator 1)
 800c90c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c90e:	7f5b      	ldrb	r3, [r3, #29]
 800c910:	2b01      	cmp	r3, #1
 800c912:	d003      	beq.n	800c91c <XMC_USBH_HandleIrq+0x61c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1414 (discriminator 3)
                (ptr_pipe->ep_type != (uint8_t)XMC_USBH_ENDPOINT_INTERRUPT))
 800c914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c916:	7e9b      	ldrb	r3, [r3, #26]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1413 (discriminator 3)
            else
            {
              is_nack[ch] = false;
            }
      }
      if (((ptr_pipe->ep_type == (uint8_t)XMC_USBH_ENDPOINT_INTERRUPT)&&(ptr_pipe->interrupt_triggered == 1U))||
 800c918:	2b03      	cmp	r3, #3
 800c91a:	d00e      	beq.n	800c93a <XMC_USBH_HandleIrq+0x63a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1416
                (ptr_pipe->ep_type != (uint8_t)XMC_USBH_ENDPOINT_INTERRUPT))
      {
        ptr_pipe->interrupt_triggered = 0U;
 800c91c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c91e:	2200      	movs	r2, #0
 800c920:	775a      	strb	r2, [r3, #29]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1417
        ptr_pipe->transfer_active = 1U;
 800c922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c924:	2201      	movs	r2, #1
 800c926:	771a      	strb	r2, [r3, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1418
        (void)XMC_lStartTransfer (ptr_pipe, (((USB0_CH_TypeDef *)(XMC_USBH0_device.host_channel_registers)) + ch));
 800c928:	4b0a      	ldr	r3, [pc, #40]	; (800c954 <XMC_USBH_HandleIrq+0x654>)
 800c92a:	685a      	ldr	r2, [r3, #4]
 800c92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c92e:	015b      	lsls	r3, r3, #5
 800c930:	4413      	add	r3, r2
 800c932:	4619      	mov	r1, r3
 800c934:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c936:	f7fe fe23 	bl	800b580 <XMC_lStartTransfer>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1421 (discriminator 2)
      }
    }
    ptr_pipe++;
 800c93a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c93c:	3320      	adds	r3, #32
 800c93e:	647b      	str	r3, [r7, #68]	; 0x44
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1386 (discriminator 2)
    XMC_USBH0_device.SignalPortEvent_cb(0U, XMC_USBH_EVENT_REMOTE_WAKEUP);
  }

  /* Handle restarts of unfinished transfers (due to NAK or ACK) */
  ptr_pipe = (XMC_USBH0_pipe_t *)(pipe);
  for (ch = 0U; ch < USBH0_MAX_PIPE_NUM; ch++) {
 800c940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c942:	3301      	adds	r3, #1
 800c944:	637b      	str	r3, [r7, #52]	; 0x34
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1386 (discriminator 1)
 800c946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c948:	2b0d      	cmp	r3, #13
 800c94a:	d99e      	bls.n	800c88a <XMC_USBH_HandleIrq+0x58a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1423
        (void)XMC_lStartTransfer (ptr_pipe, (((USB0_CH_TypeDef *)(XMC_USBH0_device.host_channel_registers)) + ch));
      }
    }
    ptr_pipe++;
  }
}
 800c94c:	bf00      	nop
 800c94e:	3748      	adds	r7, #72	; 0x48
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}
 800c954:	20000008 	.word	0x20000008
 800c958:	200003b8 	.word	0x200003b8
 800c95c:	20000578 	.word	0x20000578

0800c960 <XMC_USBH_GetInterruptStatus>:
XMC_USBH_GetInterruptStatus():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1427

/*Function provides host mode interrupt status*/
uint32_t XMC_USBH_GetInterruptStatus(void)
{
 800c960:	b480      	push	{r7}
 800c962:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1428
  return XMC_USBH0_device.global_register->GINTSTS_HOSTMODE;
 800c964:	4b03      	ldr	r3, [pc, #12]	; (800c974 <XMC_USBH_GetInterruptStatus+0x14>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	695b      	ldr	r3, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1429
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bc80      	pop	{r7}
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop
 800c974:	20000008 	.word	0x20000008

0800c978 <XMC_USBH_Select_VBUS>:
XMC_USBH_Select_VBUS():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1433

/*Function selects the port pin used as DRIVEVBUS*/
void XMC_USBH_Select_VBUS(XMC_GPIO_PORT_t* port, uint32_t pin)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1434
  VBUS_port = port;
 800c982:	4a09      	ldr	r2, [pc, #36]	; (800c9a8 <XMC_USBH_Select_VBUS+0x30>)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6013      	str	r3, [r2, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1435
  VBUS_pin = pin;
 800c988:	4a08      	ldr	r2, [pc, #32]	; (800c9ac <XMC_USBH_Select_VBUS+0x34>)
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	6013      	str	r3, [r2, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1438

  /*Configure the port pin alternate function*/
  XMC_GPIO_SetMode(VBUS_port, (uint8_t)VBUS_pin, XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1);
 800c98e:	4b06      	ldr	r3, [pc, #24]	; (800c9a8 <XMC_USBH_Select_VBUS+0x30>)
 800c990:	6818      	ldr	r0, [r3, #0]
 800c992:	4b06      	ldr	r3, [pc, #24]	; (800c9ac <XMC_USBH_Select_VBUS+0x34>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	b2db      	uxtb	r3, r3
 800c998:	2288      	movs	r2, #136	; 0x88
 800c99a:	4619      	mov	r1, r3
 800c99c:	f7fb f94a 	bl	8007c34 <XMC_GPIO_SetMode>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1439
}
 800c9a0:	bf00      	nop
 800c9a2:	3708      	adds	r7, #8
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	20000000 	.word	0x20000000
 800c9ac:	20000004 	.word	0x20000004

0800c9b0 <XMC_USBH_TurnOffResumeBit>:
XMC_USBH_TurnOffResumeBit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1443

/*Function asserts the remote wakeup request by device by clearing the resume bit*/
void XMC_USBH_TurnOffResumeBit(void)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b083      	sub	sp, #12
 800c9b4:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1446
  uint32_t hprt;
  /*Clear resume bit*/
  hprt = XMC_USBH0_device.global_register->HPRT;
 800c9b6:	4b0b      	ldr	r3, [pc, #44]	; (800c9e4 <XMC_USBH_TurnOffResumeBit+0x34>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 800c9be:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1447
  hprt &= (uint32_t)~(USB_HPRT_PrtEna_Msk);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f023 0304 	bic.w	r3, r3, #4
 800c9c6:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1448
  hprt &= (uint32_t)~((uint32_t)USB_HPRT_PrtRes_Msk);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9ce:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1449
  XMC_USBH0_device.global_register->HPRT = hprt;
 800c9d0:	4b04      	ldr	r3, [pc, #16]	; (800c9e4 <XMC_USBH_TurnOffResumeBit+0x34>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1450
}
 800c9da:	bf00      	nop
 800c9dc:	370c      	adds	r7, #12
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bc80      	pop	{r7}
 800c9e2:	4770      	bx	lr
 800c9e4:	20000008 	.word	0x20000008

0800c9e8 <XMC_USBH_osDelay>:
XMC_USBH_osDelay():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1479
};


/*Weak definition of delay function*/
__WEAK uint8_t XMC_USBH_osDelay(uint32_t MS)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usbh.c:1484 (discriminator 1)
  /*A precise time delay implementation for this function has to be provided*/
  while (1)
  {
    /*Wait*/
  }
 800c9f0:	e7fe      	b.n	800c9f0 <XMC_USBH_osDelay+0x8>
 800c9f2:	bf00      	nop

0800c9f4 <XMC_USIC_CH_SetInputTriggerCombinationMode>:
XMC_USIC_CH_SetInputTriggerCombinationMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:919
 * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
		                                                        const XMC_USIC_CH_INPUT_t input,
		                                                        const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b083      	sub	sp, #12
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	70fb      	strb	r3, [r7, #3]
 800ca00:	4613      	mov	r3, r2
 800ca02:	70bb      	strb	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:920
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
 800ca04:	78f8      	ldrb	r0, [r7, #3]
 800ca06:	78fb      	ldrb	r3, [r7, #3]
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	3306      	adds	r3, #6
 800ca0c:	009b      	lsls	r3, r3, #2
 800ca0e:	4413      	add	r3, r2
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:921
                         ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
 800ca16:	78bb      	ldrb	r3, [r7, #2]
 800ca18:	029b      	lsls	r3, r3, #10
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:920
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
		                                                        const XMC_USIC_CH_INPUT_t input,
		                                                        const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode)
{
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
 800ca1a:	431a      	orrs	r2, r3
 800ca1c:	6879      	ldr	r1, [r7, #4]
 800ca1e:	1d83      	adds	r3, r0, #6
 800ca20:	009b      	lsls	r3, r3, #2
 800ca22:	440b      	add	r3, r1
 800ca24:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:922
                         ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
}
 800ca26:	bf00      	nop
 800ca28:	370c      	adds	r7, #12
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bc80      	pop	{r7}
 800ca2e:	4770      	bx	lr

0800ca30 <XMC_USIC_CH_SetBRGInputClockSource>:
XMC_USIC_CH_SetBRGInputClockSource():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:937
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_BRG_CLOCK_SOURCE_t clock_source)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b083      	sub	sp, #12
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	460b      	mov	r3, r1
 800ca3a:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:938
  channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	695b      	ldr	r3, [r3, #20]
 800ca40:	f023 0203 	bic.w	r2, r3, #3
 800ca44:	78fb      	ldrb	r3, [r7, #3]
 800ca46:	431a      	orrs	r2, r3
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_usic.h:939
}
 800ca4c:	bf00      	nop
 800ca4e:	370c      	adds	r7, #12
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bc80      	pop	{r7}
 800ca54:	4770      	bx	lr
 800ca56:	bf00      	nop

0800ca58 <XMC_USIC_CH_Enable>:
XMC_USIC_CH_Enable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:80
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:83
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	4a1b      	ldr	r2, [pc, #108]	; (800cad0 <XMC_USIC_CH_Enable+0x78>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d003      	beq.n	800ca70 <XMC_USIC_CH_Enable+0x18>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:83 (discriminator 1)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	4a1a      	ldr	r2, [pc, #104]	; (800cad4 <XMC_USIC_CH_Enable+0x7c>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d103      	bne.n	800ca78 <XMC_USIC_CH_Enable+0x20>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:85
  {
    XMC_USIC_Enable(XMC_USIC0);
 800ca70:	4819      	ldr	r0, [pc, #100]	; (800cad8 <XMC_USIC_CH_Enable+0x80>)
 800ca72:	f000 f9d7 	bl	800ce24 <XMC_USIC_Enable>
 800ca76:	e016      	b.n	800caa6 <XMC_USIC_CH_Enable+0x4e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:88
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	4a18      	ldr	r2, [pc, #96]	; (800cadc <XMC_USIC_CH_Enable+0x84>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d003      	beq.n	800ca88 <XMC_USIC_CH_Enable+0x30>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:88 (discriminator 1)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	4a17      	ldr	r2, [pc, #92]	; (800cae0 <XMC_USIC_CH_Enable+0x88>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d103      	bne.n	800ca90 <XMC_USIC_CH_Enable+0x38>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:90
  {
    XMC_USIC_Enable(XMC_USIC1);
 800ca88:	4816      	ldr	r0, [pc, #88]	; (800cae4 <XMC_USIC_CH_Enable+0x8c>)
 800ca8a:	f000 f9cb 	bl	800ce24 <XMC_USIC_Enable>
 800ca8e:	e00a      	b.n	800caa6 <XMC_USIC_CH_Enable+0x4e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:94
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	4a15      	ldr	r2, [pc, #84]	; (800cae8 <XMC_USIC_CH_Enable+0x90>)
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d003      	beq.n	800caa0 <XMC_USIC_CH_Enable+0x48>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:94 (discriminator 1)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	4a14      	ldr	r2, [pc, #80]	; (800caec <XMC_USIC_CH_Enable+0x94>)
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d102      	bne.n	800caa6 <XMC_USIC_CH_Enable+0x4e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:96
  {
    XMC_USIC_Enable(XMC_USIC2);
 800caa0:	4813      	ldr	r0, [pc, #76]	; (800caf0 <XMC_USIC_CH_Enable+0x98>)
 800caa2:	f000 f9bf 	bl	800ce24 <XMC_USIC_Enable>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:105
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2203      	movs	r2, #3
 800caaa:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:106
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 800caac:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:106 (discriminator 1)
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	68db      	ldr	r3, [r3, #12]
 800cab2:	f003 0301 	and.w	r3, r3, #1
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d0f9      	beq.n	800caae <XMC_USIC_CH_Enable+0x56>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:112
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cabe:	f023 020f 	bic.w	r2, r3, #15
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	641a      	str	r2, [r3, #64]	; 0x40
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:113
}
 800cac6:	bf00      	nop
 800cac8:	3708      	adds	r7, #8
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
 800cace:	bf00      	nop
 800cad0:	40030000 	.word	0x40030000
 800cad4:	40030200 	.word	0x40030200
 800cad8:	40030008 	.word	0x40030008
 800cadc:	48020000 	.word	0x48020000
 800cae0:	48020200 	.word	0x48020200
 800cae4:	48020008 	.word	0x48020008
 800cae8:	48024000 	.word	0x48024000
 800caec:	48024200 	.word	0x48024200
 800caf0:	48024008 	.word	0x48024008

0800caf4 <XMC_USIC_CH_Disable>:
XMC_USIC_CH_Disable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:116

void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:117
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	68db      	ldr	r3, [r3, #12]
 800cb00:	f023 0303 	bic.w	r3, r3, #3
 800cb04:	f043 0202 	orr.w	r2, r3, #2
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	60da      	str	r2, [r3, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:118
}
 800cb0c:	bf00      	nop
 800cb0e:	370c      	adds	r7, #12
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bc80      	pop	{r7}
 800cb14:	4770      	bx	lr
 800cb16:	bf00      	nop

0800cb18 <XMC_USIC_CH_SetBaudrate>:
XMC_USIC_CH_SetBaudrate():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:121

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b08e      	sub	sp, #56	; 0x38
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	60f8      	str	r0, [r7, #12]
 800cb20:	60b9      	str	r1, [r7, #8]
 800cb22:	607a      	str	r2, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:137
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	2b63      	cmp	r3, #99	; 0x63
 800cb28:	d958      	bls.n	800cbdc <XMC_USIC_CH_SetBaudrate+0xc4>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:137 (discriminator 1)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d055      	beq.n	800cbdc <XMC_USIC_CH_SetBaudrate+0xc4>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:139
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 800cb30:	f7f4 ff9e 	bl	8001a70 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 800cb34:	4602      	mov	r2, r0
 800cb36:	4b2e      	ldr	r3, [pc, #184]	; (800cbf0 <XMC_USIC_CH_SetBaudrate+0xd8>)
 800cb38:	fba3 2302 	umull	r2, r3, r3, r2
 800cb3c:	095b      	lsrs	r3, r3, #5
 800cb3e:	623b      	str	r3, [r7, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:140
    rate = rate / 100U;
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	4a2b      	ldr	r2, [pc, #172]	; (800cbf0 <XMC_USIC_CH_SetBaudrate+0xd8>)
 800cb44:	fba2 2303 	umull	r2, r3, r2, r3
 800cb48:	095b      	lsrs	r3, r3, #5
 800cb4a:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:142

    clock_divider_min = 1U;
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:143
    pdiv_int_min = 1U;
 800cb50:	2301      	movs	r3, #1
 800cb52:	62bb      	str	r3, [r7, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:144
    pdiv_frac_min = 0x3ffU;
 800cb54:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800cb58:	627b      	str	r3, [r7, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:146

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 800cb5a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800cb5e:	633b      	str	r3, [r7, #48]	; 0x30
 800cb60:	e022      	b.n	800cba8 <XMC_USIC_CH_SetBaudrate+0x90>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:148
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 800cb62:	6a3b      	ldr	r3, [r7, #32]
 800cb64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb66:	fb02 f203 	mul.w	r2, r2, r3
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	6879      	ldr	r1, [r7, #4]
 800cb6e:	fb01 f303 	mul.w	r3, r1, r3
 800cb72:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb76:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:149
      pdiv_int = pdiv >> 10U;
 800cb78:	69fb      	ldr	r3, [r7, #28]
 800cb7a:	0a9b      	lsrs	r3, r3, #10
 800cb7c:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:150
      pdiv_frac = pdiv & 0x3ffU;
 800cb7e:	69fb      	ldr	r3, [r7, #28]
 800cb80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb84:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:152

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 800cb86:	69bb      	ldr	r3, [r7, #24]
 800cb88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb8c:	d209      	bcs.n	800cba2 <XMC_USIC_CH_SetBaudrate+0x8a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:152 (discriminator 1)
 800cb8e:	697a      	ldr	r2, [r7, #20]
 800cb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d205      	bcs.n	800cba2 <XMC_USIC_CH_SetBaudrate+0x8a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:154
      {
        pdiv_frac_min = pdiv_frac;
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	627b      	str	r3, [r7, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:155
        pdiv_int_min = pdiv_int;
 800cb9a:	69bb      	ldr	r3, [r7, #24]
 800cb9c:	62bb      	str	r3, [r7, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:156
        clock_divider_min = clock_divider;
 800cb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba0:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:146 (discriminator 2)

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 800cba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba4:	3b01      	subs	r3, #1
 800cba6:	633b      	str	r3, [r7, #48]	; 0x30
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:146 (discriminator 1)
 800cba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d1d9      	bne.n	800cb62 <XMC_USIC_CH_SetBaudrate+0x4a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:160
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 800cbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	611a      	str	r2, [r3, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:163
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	695a      	ldr	r2, [r3, #20]
 800cbbc:	4b0d      	ldr	r3, [pc, #52]	; (800cbf4 <XMC_USIC_CH_SetBaudrate+0xdc>)
 800cbbe:	4013      	ands	r3, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:167
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800cbc0:	687a      	ldr	r2, [r7, #4]
 800cbc2:	3a01      	subs	r2, #1
 800cbc4:	0292      	lsls	r2, r2, #10
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:166
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 800cbc6:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:168
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 800cbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbca:	3b01      	subs	r3, #1
 800cbcc:	041b      	lsls	r3, r3, #16
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:167

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800cbce:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:163
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:170
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800cbda:	e002      	b.n	800cbe2 <XMC_USIC_CH_SetBaudrate+0xca>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:174
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 800cbdc:	2301      	movs	r3, #1
 800cbde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:177
  }
  
  return status;
 800cbe2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:178
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3738      	adds	r7, #56	; 0x38
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	51eb851f 	.word	0x51eb851f
 800cbf4:	fc0080ef 	.word	0xfc0080ef

0800cbf8 <XMC_USIC_CH_ConfigExternalInputSignalToBRG>:
XMC_USIC_CH_ConfigExternalInputSignalToBRG():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:184

void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
		                                        const uint16_t pdiv,
												const uint32_t oversampling,
												const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b084      	sub	sp, #16
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	607a      	str	r2, [r7, #4]
 800cc02:	461a      	mov	r2, r3
 800cc04:	460b      	mov	r3, r1
 800cc06:	817b      	strh	r3, [r7, #10]
 800cc08:	4613      	mov	r3, r2
 800cc0a:	727b      	strb	r3, [r7, #9]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:189
  XMC_ASSERT("XMC_USIC_CH_ConfigExternalInputSignalToBRG: Divider out of range", ((1U < pdiv) || (pdiv < 1024U)));
  XMC_ASSERT("XMC_USIC_CH_ConfigExternalInputSignalToBRG: Oversampling out of range", ((1U < oversampling) || (oversampling < 32U)));

  /* Setting the external input frequency source through DX1 */
  XMC_USIC_CH_SetBRGInputClockSource(channel, XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T);
 800cc0c:	2102      	movs	r1, #2
 800cc0e:	68f8      	ldr	r0, [r7, #12]
 800cc10:	f7ff ff0e 	bl	800ca30 <XMC_USIC_CH_SetBRGInputClockSource>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:192

  /* Setting the trigger combination mode */
  XMC_USIC_CH_SetInputTriggerCombinationMode(channel,XMC_USIC_CH_INPUT_DX1,combination_mode);
 800cc14:	7a7b      	ldrb	r3, [r7, #9]
 800cc16:	461a      	mov	r2, r3
 800cc18:	2101      	movs	r1, #1
 800cc1a:	68f8      	ldr	r0, [r7, #12]
 800cc1c:	f7ff feea 	bl	800c9f4 <XMC_USIC_CH_SetInputTriggerCombinationMode>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:195

  /* Configuring the dividers and oversampling */
  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	695a      	ldr	r2, [r3, #20]
 800cc24:	4b07      	ldr	r3, [pc, #28]	; (800cc44 <XMC_USIC_CH_ConfigExternalInputSignalToBRG+0x4c>)
 800cc26:	4013      	ands	r3, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:199
                                   USIC_CH_BRG_PDIV_Msk |
                                   USIC_CH_BRG_PCTQ_Msk |
                                   USIC_CH_BRG_PPPEN_Msk)) |
                  (((oversampling) - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800cc28:	687a      	ldr	r2, [r7, #4]
 800cc2a:	3a01      	subs	r2, #1
 800cc2c:	0292      	lsls	r2, r2, #10
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:198

  /* Configuring the dividers and oversampling */
  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                   USIC_CH_BRG_PDIV_Msk |
                                   USIC_CH_BRG_PCTQ_Msk |
                                   USIC_CH_BRG_PPPEN_Msk)) |
 800cc2e:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:200
                  (((oversampling) - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                  (((pdiv) - 1U) << USIC_CH_BRG_PDIV_Pos);
 800cc30:	897b      	ldrh	r3, [r7, #10]
 800cc32:	3b01      	subs	r3, #1
 800cc34:	041b      	lsls	r3, r3, #16
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:199
  /* Configuring the dividers and oversampling */
  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                   USIC_CH_BRG_PDIV_Msk |
                                   USIC_CH_BRG_PCTQ_Msk |
                                   USIC_CH_BRG_PPPEN_Msk)) |
                  (((oversampling) - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800cc36:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:195

  /* Setting the trigger combination mode */
  XMC_USIC_CH_SetInputTriggerCombinationMode(channel,XMC_USIC_CH_INPUT_DX1,combination_mode);

  /* Configuring the dividers and oversampling */
  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	615a      	str	r2, [r3, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:201
                                   USIC_CH_BRG_PDIV_Msk |
                                   USIC_CH_BRG_PCTQ_Msk |
                                   USIC_CH_BRG_PPPEN_Msk)) |
                  (((oversampling) - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                  (((pdiv) - 1U) << USIC_CH_BRG_PDIV_Pos);
}
 800cc3c:	bf00      	nop
 800cc3e:	3710      	adds	r7, #16
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	fc0080ef 	.word	0xfc0080ef

0800cc48 <XMC_USIC_CH_TXFIFO_Configure>:
XMC_USIC_CH_TXFIFO_Configure():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:207

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b085      	sub	sp, #20
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	60f8      	str	r0, [r7, #12]
 800cc50:	60b9      	str	r1, [r7, #8]
 800cc52:	603b      	str	r3, [r7, #0]
 800cc54:	4613      	mov	r3, r2
 800cc56:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:209
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800cc5e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:216
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800cc6e:	4b09      	ldr	r3, [pc, #36]	; (800cc94 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 800cc70:	4013      	ands	r3, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:219
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 800cc72:	683a      	ldr	r2, [r7, #0]
 800cc74:	0211      	lsls	r1, r2, #8
 800cc76:	68ba      	ldr	r2, [r7, #8]
 800cc78:	4311      	orrs	r1, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:221
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 800cc7a:	79fa      	ldrb	r2, [r7, #7]
 800cc7c:	0612      	lsls	r2, r2, #24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:219
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 800cc7e:	430a      	orrs	r2, r1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:218
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 800cc80:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:216
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:222
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 800cc88:	bf00      	nop
 800cc8a:	3714      	adds	r7, #20
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bc80      	pop	{r7}
 800cc90:	4770      	bx	lr
 800cc92:	bf00      	nop
 800cc94:	f8ffc0c0 	.word	0xf8ffc0c0

0800cc98 <XMC_USIC_CH_RXFIFO_Configure>:
XMC_USIC_CH_RXFIFO_Configure():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:229

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b085      	sub	sp, #20
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	60f8      	str	r0, [r7, #12]
 800cca0:	60b9      	str	r1, [r7, #8]
 800cca2:	603b      	str	r3, [r7, #0]
 800cca4:	4613      	mov	r3, r2
 800cca6:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:231
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ccae:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:236

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800ccbe:	4b0a      	ldr	r3, [pc, #40]	; (800cce8 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 800ccc0:	4013      	ands	r3, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:239
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 800ccc2:	683a      	ldr	r2, [r7, #0]
 800ccc4:	0211      	lsls	r1, r2, #8
 800ccc6:	68ba      	ldr	r2, [r7, #8]
 800ccc8:	4311      	orrs	r1, r2
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:241
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 800ccca:	79fa      	ldrb	r2, [r7, #7]
 800cccc:	0612      	lsls	r2, r2, #24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:240
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 800ccce:	430a      	orrs	r2, r1
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:236
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 800ccd0:	4313      	orrs	r3, r2
 800ccd2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:243
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 800ccdc:	bf00      	nop
 800ccde:	3714      	adds	r7, #20
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bc80      	pop	{r7}
 800cce4:	4770      	bx	lr
 800cce6:	bf00      	nop
 800cce8:	efffc0c0 	.word	0xefffc0c0

0800ccec <XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit>:
XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:248

void XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b085      	sub	sp, #20
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	60f8      	str	r0, [r7, #12]
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	607a      	str	r2, [r7, #4]
 800ccf8:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:250
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800cd00:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:255

  /* STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)((uint32_t)(channel->TBCTR & (uint32_t)~USIC_CH_TBCTR_LIMIT_Msk) |
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800cd10:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:256
                   (limit << USIC_CH_TBCTR_LIMIT_Pos) |
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	021b      	lsls	r3, r3, #8
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:255
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;

  /* STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)((uint32_t)(channel->TBCTR & (uint32_t)~USIC_CH_TBCTR_LIMIT_Msk) |
 800cd18:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:257
                   (limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 800cd1a:	7afb      	ldrb	r3, [r7, #11]
 800cd1c:	061b      	lsls	r3, r3, #24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:255
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;

  /* STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)((uint32_t)(channel->TBCTR & (uint32_t)~USIC_CH_TBCTR_LIMIT_Msk) |
 800cd1e:	431a      	orrs	r2, r3
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:258
                   (limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 800cd26:	bf00      	nop
 800cd28:	3714      	adds	r7, #20
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bc80      	pop	{r7}
 800cd2e:	4770      	bx	lr

0800cd30 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:263

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b085      	sub	sp, #20
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	607a      	str	r2, [r7, #4]
 800cd3c:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:265
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800cd44:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:267

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800cd54:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:268
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	021b      	lsls	r3, r3, #8
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:267
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 800cd5c:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:269
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 800cd5e:	7afb      	ldrb	r3, [r7, #11]
 800cd60:	061b      	lsls	r3, r3, #24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:267
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 800cd62:	431a      	orrs	r2, r3
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:270
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
 800cd6a:	bf00      	nop
 800cd6c:	3714      	adds	r7, #20
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bc80      	pop	{r7}
 800cd72:	4770      	bx	lr

0800cd74 <XMC_USIC_CH_SetInterruptNodePointer>:
XMC_USIC_CH_SetInterruptNodePointer():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:275

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b085      	sub	sp, #20
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	460b      	mov	r3, r1
 800cd7e:	607a      	str	r2, [r7, #4]
 800cd80:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:276
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	699a      	ldr	r2, [r3, #24]
 800cd86:	7afb      	ldrb	r3, [r7, #11]
 800cd88:	2107      	movs	r1, #7
 800cd8a:	fa01 f303 	lsl.w	r3, r1, r3
 800cd8e:	43db      	mvns	r3, r3
 800cd90:	401a      	ands	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:277
                  (service_request << (uint32_t)interrupt_node));
 800cd92:	7afb      	ldrb	r3, [r7, #11]
 800cd94:	6879      	ldr	r1, [r7, #4]
 800cd96:	fa01 f303 	lsl.w	r3, r1, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:276

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800cd9a:	431a      	orrs	r2, r3
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	619a      	str	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:278
                  (service_request << (uint32_t)interrupt_node));
}
 800cda0:	bf00      	nop
 800cda2:	3714      	adds	r7, #20
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bc80      	pop	{r7}
 800cda8:	4770      	bx	lr
 800cdaa:	bf00      	nop

0800cdac <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:
XMC_USIC_CH_TXFIFO_SetInterruptNodePointer():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:283

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b085      	sub	sp, #20
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	460b      	mov	r3, r1
 800cdb6:	607a      	str	r2, [r7, #4]
 800cdb8:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:284
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800cdc0:	7afb      	ldrb	r3, [r7, #11]
 800cdc2:	2107      	movs	r1, #7
 800cdc4:	fa01 f303 	lsl.w	r3, r1, r3
 800cdc8:	43db      	mvns	r3, r3
 800cdca:	401a      	ands	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:285
                   (service_request << (uint32_t)interrupt_node));
 800cdcc:	7afb      	ldrb	r3, [r7, #11]
 800cdce:	6879      	ldr	r1, [r7, #4]
 800cdd0:	fa01 f303 	lsl.w	r3, r1, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:284

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800cdd4:	431a      	orrs	r2, r3
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:286
                   (service_request << (uint32_t)interrupt_node));
}
 800cddc:	bf00      	nop
 800cdde:	3714      	adds	r7, #20
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bc80      	pop	{r7}
 800cde4:	4770      	bx	lr
 800cde6:	bf00      	nop

0800cde8 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:
XMC_USIC_CH_RXFIFO_SetInterruptNodePointer():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:291

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b085      	sub	sp, #20
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	607a      	str	r2, [r7, #4]
 800cdf4:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:292
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800cdfc:	7afb      	ldrb	r3, [r7, #11]
 800cdfe:	2107      	movs	r1, #7
 800ce00:	fa01 f303 	lsl.w	r3, r1, r3
 800ce04:	43db      	mvns	r3, r3
 800ce06:	401a      	ands	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:293
                   (service_request << (uint32_t)interrupt_node));
 800ce08:	7afb      	ldrb	r3, [r7, #11]
 800ce0a:	6879      	ldr	r1, [r7, #4]
 800ce0c:	fa01 f303 	lsl.w	r3, r1, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:292

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800ce10:	431a      	orrs	r2, r3
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:294
                   (service_request << (uint32_t)interrupt_node));
}
 800ce18:	bf00      	nop
 800ce1a:	3714      	adds	r7, #20
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bc80      	pop	{r7}
 800ce20:	4770      	bx	lr
 800ce22:	bf00      	nop

0800ce24 <XMC_USIC_Enable>:
XMC_USIC_Enable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:297

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:298
  if (usic == USIC0)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	4a0d      	ldr	r2, [pc, #52]	; (800ce64 <XMC_USIC_Enable+0x40>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d104      	bne.n	800ce3e <XMC_USIC_Enable+0x1a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:304
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 800ce34:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ce38:	f7f4 fca8 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:333
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 800ce3c:	e00e      	b.n	800ce5c <XMC_USIC_Enable+0x38>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:308
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	4a09      	ldr	r2, [pc, #36]	; (800ce68 <XMC_USIC_Enable+0x44>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d103      	bne.n	800ce4e <XMC_USIC_Enable+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:314
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 800ce46:	4809      	ldr	r0, [pc, #36]	; (800ce6c <XMC_USIC_Enable+0x48>)
 800ce48:	f7f4 fca0 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:333
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 800ce4c:	e006      	b.n	800ce5c <XMC_USIC_Enable+0x38>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:319
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4a07      	ldr	r2, [pc, #28]	; (800ce70 <XMC_USIC_Enable+0x4c>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d102      	bne.n	800ce5c <XMC_USIC_Enable+0x38>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:325
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 800ce56:	4807      	ldr	r0, [pc, #28]	; (800ce74 <XMC_USIC_Enable+0x50>)
 800ce58:	f7f4 fc98 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:333
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 800ce5c:	bf00      	nop
 800ce5e:	3708      	adds	r7, #8
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	40030008 	.word	0x40030008
 800ce68:	48020008 	.word	0x48020008
 800ce6c:	10000080 	.word	0x10000080
 800ce70:	48024008 	.word	0x48024008
 800ce74:	10000100 	.word	0x10000100

0800ce78 <XMC_USIC_Disable>:
XMC_USIC_Disable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:336

void XMC_USIC_Disable(XMC_USIC_t *const usic)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:337
  if (usic == (XMC_USIC_t *)USIC0)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	4a0d      	ldr	r2, [pc, #52]	; (800ceb8 <XMC_USIC_Disable+0x40>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d104      	bne.n	800ce92 <XMC_USIC_Disable+0x1a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:340
  {
#if defined(PERIPHERAL_RESET_SUPPORTED)  
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 800ce88:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ce8c:	f7f4 fc62 	bl	8001754 <XMC_SCU_RESET_AssertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:373
  else
  {
	  XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
  
}
 800ce90:	e00e      	b.n	800ceb0 <XMC_USIC_Disable+0x38>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:347
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
  }
#if defined(USIC1)  
  else if (usic == (XMC_USIC_t *)USIC1)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	4a09      	ldr	r2, [pc, #36]	; (800cebc <XMC_USIC_Disable+0x44>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d103      	bne.n	800cea2 <XMC_USIC_Disable+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:350
  {
#if defined(PERIPHERAL_RESET_SUPPORTED)  
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 800ce9a:	4809      	ldr	r0, [pc, #36]	; (800cec0 <XMC_USIC_Disable+0x48>)
 800ce9c:	f7f4 fc5a 	bl	8001754 <XMC_SCU_RESET_AssertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:373
  else
  {
	  XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
  
}
 800cea0:	e006      	b.n	800ceb0 <XMC_USIC_Disable+0x38>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:358
    XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif
  }
#endif  
#if defined(USIC2)  
  else if (usic == (XMC_USIC_t *)USIC2)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	4a07      	ldr	r2, [pc, #28]	; (800cec4 <XMC_USIC_Disable+0x4c>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d102      	bne.n	800ceb0 <XMC_USIC_Disable+0x38>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:361
  {
#if defined(PERIPHERAL_RESET_SUPPORTED)  
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 800ceaa:	4807      	ldr	r0, [pc, #28]	; (800cec8 <XMC_USIC_Disable+0x50>)
 800ceac:	f7f4 fc52 	bl	8001754 <XMC_SCU_RESET_AssertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_usic.c:373
  else
  {
	  XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
  
}
 800ceb0:	bf00      	nop
 800ceb2:	3708      	adds	r7, #8
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	40030008 	.word	0x40030008
 800cebc:	48020008 	.word	0x48020008
 800cec0:	10000080 	.word	0x10000080
 800cec4:	48024008 	.word	0x48024008
 800cec8:	10000100 	.word	0x10000100

0800cecc <XMC_VADC_GROUP_ExternalMuxControlInit>:
XMC_VADC_GROUP_ExternalMuxControlInit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:2542
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 800cecc:	b480      	push	{r7}
 800cece:	b085      	sub	sp, #20
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:2547
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 800ced6:	783b      	ldrb	r3, [r7, #0]
 800ced8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	461a      	mov	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:2548
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 800cee0:	78bb      	ldrb	r3, [r7, #2]
 800cee2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	041b      	lsls	r3, r3, #16
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:2547
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 800ceea:	4313      	orrs	r3, r2
 800ceec:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:2550
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	68fa      	ldr	r2, [r7, #12]
 800cef2:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:2551
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 800cef6:	78fb      	ldrb	r3, [r7, #3]
 800cef8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	071a      	lsls	r2, r3, #28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:2552
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
 800cf00:	78fb      	ldrb	r3, [r7, #3]
 800cf02:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800cf06:	b2db      	uxtb	r3, r3
 800cf08:	069b      	lsls	r3, r3, #26
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:2551

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 800cf0a:	431a      	orrs	r2, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:2553
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 800cf0c:	78fb      	ldrb	r3, [r7, #3]
 800cf0e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800cf12:	b2db      	uxtb	r3, r3
 800cf14:	075b      	lsls	r3, r3, #29
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:2551

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 800cf16:	4313      	orrs	r3, r2
 800cf18:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:2558
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	4313      	orrs	r3, r2
 800cf24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:2559
}
 800cf2e:	bf00      	nop
 800cf30:	3714      	adds	r7, #20
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bc80      	pop	{r7}
 800cf36:	4770      	bx	lr

0800cf38 <XMC_VADC_GROUP_ScanEnableArbitrationSlot>:
XMC_VADC_GROUP_ScanEnableArbitrationSlot():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:2671
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ScanEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b083      	sub	sp, #12
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:2673
  XMC_ASSERT("XMC_VADC_GROUP_ScanEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN1_Msk;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf46:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:2674
}
 800cf50:	bf00      	nop
 800cf52:	370c      	adds	r7, #12
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bc80      	pop	{r7}
 800cf58:	4770      	bx	lr
 800cf5a:	bf00      	nop

0800cf5c <XMC_VADC_GROUP_ScanDisableArbitrationSlot>:
XMC_VADC_GROUP_ScanDisableArbitrationSlot():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:2692
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ScanDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	b083      	sub	sp, #12
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:2694
  XMC_ASSERT("XMC_VADC_GROUP_ScanDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN1_Msk);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:2695
}
 800cf74:	bf00      	nop
 800cf76:	370c      	adds	r7, #12
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bc80      	pop	{r7}
 800cf7c:	4770      	bx	lr
 800cf7e:	bf00      	nop

0800cf80 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
XMC_VADC_GROUP_BackgroundEnableArbitrationSlot():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:3192
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:3194
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf8e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:3195
}
 800cf98:	bf00      	nop
 800cf9a:	370c      	adds	r7, #12
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bc80      	pop	{r7}
 800cfa0:	4770      	bx	lr
 800cfa2:	bf00      	nop

0800cfa4 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
XMC_VADC_GROUP_BackgroundDisableArbitrationSlot():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:3214
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:3216
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfb2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:3217
}
 800cfbc:	bf00      	nop
 800cfbe:	370c      	adds	r7, #12
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bc80      	pop	{r7}
 800cfc4:	4770      	bx	lr
 800cfc6:	bf00      	nop

0800cfc8 <XMC_VADC_GROUP_QueueEnableArbitrationSlot>:
XMC_VADC_GROUP_QueueEnableArbitrationSlot():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:3682
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b083      	sub	sp, #12
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:3684
  XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfd6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:3685
}
 800cfe0:	bf00      	nop
 800cfe2:	370c      	adds	r7, #12
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bc80      	pop	{r7}
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop

0800cfec <XMC_VADC_GROUP_QueueDisableArbitrationSlot>:
XMC_VADC_GROUP_QueueDisableArbitrationSlot():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:3703
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:3705
  XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cffa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:3706
}
 800d004:	bf00      	nop
 800d006:	370c      	adds	r7, #12
 800d008:	46bd      	mov	sp, r7
 800d00a:	bc80      	pop	{r7}
 800d00c:	4770      	bx	lr
 800d00e:	bf00      	nop

0800d010 <XMC_VADC_GROUP_QueueFlushEntries>:
XMC_VADC_GROUP_QueueFlushEntries():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:3897
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueAbortSequence(0<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueFlushEntries(XMC_VADC_GROUP_t *const group_ptr)
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:3899
  /* Initiate flushing of the queue */
  group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_FLUSH_Msk;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800d01e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:3901

  while( !((group_ptr->QSR0)& (uint32_t)VADC_G_QSR0_EMPTY_Msk))
 800d028:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:3901 (discriminator 1)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d030:	f003 0320 	and.w	r3, r3, #32
 800d034:	2b00      	cmp	r3, #0
 800d036:	d0f8      	beq.n	800d02a <XMC_VADC_GROUP_QueueFlushEntries+0x1a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_vadc.h:3905
  {
    /* Wait until the queue is indeed flushed */
  }
}
 800d038:	bf00      	nop
 800d03a:	370c      	adds	r7, #12
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bc80      	pop	{r7}
 800d040:	4770      	bx	lr
 800d042:	bf00      	nop

0800d044 <XMC_VADC_GLOBAL_EnableModule>:
XMC_VADC_GLOBAL_EnableModule():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:143
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:162
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 800d048:	2001      	movs	r0, #1
 800d04a:	f7f4 fb9f 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:164
#endif
}
 800d04e:	bf00      	nop
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop

0800d054 <XMC_VADC_GLOBAL_DisableModule>:
XMC_VADC_GLOBAL_DisableModule():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:168

/*API to Disable the VADC Module*/
void XMC_VADC_GLOBAL_DisableModule(void)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:171
#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_AssertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 800d058:	2001      	movs	r0, #1
 800d05a:	f7f4 fb7b 	bl	8001754 <XMC_SCU_RESET_AssertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:178

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif

}
 800d05e:	bf00      	nop
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop

0800d064 <XMC_VADC_GLOBAL_Init>:
XMC_VADC_GLOBAL_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:183


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:190
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 800d06e:	f7ff ffe9 	bl	800d044 <XMC_VADC_GLOBAL_EnableModule>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:192

  global_ptr->CLC = (uint32_t)(config->clc);
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	695a      	ldr	r2, [r3, #20]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:197

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:201
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	689a      	ldr	r2, [r3, #8]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:204

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	68da      	ldr	r2, [r3, #12]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:208


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	691a      	ldr	r2, [r3, #16]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:213

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:229

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 800d0b0:	bf00      	nop
 800d0b2:	3708      	adds	r7, #8
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <XMC_VADC_GLOBAL_InputClassInit>:
XMC_VADC_GLOBAL_InputClassInit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:234

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b085      	sub	sp, #20
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	60b9      	str	r1, [r7, #8]
 800d0c2:	603b      	str	r3, [r7, #0]
 800d0c4:	4613      	mov	r3, r2
 800d0c6:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:241
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 800d0c8:	79fb      	ldrb	r3, [r7, #7]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d109      	bne.n	800d0e2 <XMC_VADC_GLOBAL_InputClassInit+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:244
  {
#endif
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 800d0ce:	68ba      	ldr	r2, [r7, #8]
 800d0d0:	f240 731f 	movw	r3, #1823	; 0x71f
 800d0d4:	4013      	ands	r3, r2
 800d0d6:	68fa      	ldr	r2, [r7, #12]
 800d0d8:	6839      	ldr	r1, [r7, #0]
 800d0da:	3128      	adds	r1, #40	; 0x28
 800d0dc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:253
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
  }
#endif
}
 800d0e0:	e007      	b.n	800d0f2 <XMC_VADC_GLOBAL_InputClassInit+0x3a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:250
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 800d0e2:	68ba      	ldr	r2, [r7, #8]
 800d0e4:	4b05      	ldr	r3, [pc, #20]	; (800d0fc <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 800d0e6:	4013      	ands	r3, r2
 800d0e8:	68fa      	ldr	r2, [r7, #12]
 800d0ea:	6839      	ldr	r1, [r7, #0]
 800d0ec:	3128      	adds	r1, #40	; 0x28
 800d0ee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:253
  }
#endif
}
 800d0f2:	bf00      	nop
 800d0f4:	3714      	adds	r7, #20
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bc80      	pop	{r7}
 800d0fa:	4770      	bx	lr
 800d0fc:	071f0000 	.word	0x071f0000

0800d100 <XMC_VADC_GLOBAL_StartupCalibration>:
XMC_VADC_GLOBAL_StartupCalibration():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:257

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 800d100:	b480      	push	{r7}
 800d102:	b085      	sub	sp, #20
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:265
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d10e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:269

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800d118:	2300      	movs	r3, #0
 800d11a:	73fb      	strb	r3, [r7, #15]
 800d11c:	e016      	b.n	800d14c <XMC_VADC_GLOBAL_StartupCalibration+0x4c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:271
  {
    group_ptr = g_xmc_vadc_group_array[i];
 800d11e:	7bfb      	ldrb	r3, [r7, #15]
 800d120:	4a0e      	ldr	r2, [pc, #56]	; (800d15c <XMC_VADC_GLOBAL_StartupCalibration+0x5c>)
 800d122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d126:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:272
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d12e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d132:	2b00      	cmp	r3, #0
 800d134:	d007      	beq.n	800d146 <XMC_VADC_GLOBAL_StartupCalibration+0x46>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:275
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 800d136:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:275 (discriminator 1)
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d13e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d142:	2b00      	cmp	r3, #0
 800d144:	d1f8      	bne.n	800d138 <XMC_VADC_GLOBAL_StartupCalibration+0x38>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:269 (discriminator 2)

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800d146:	7bfb      	ldrb	r3, [r7, #15]
 800d148:	3301      	adds	r3, #1
 800d14a:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:269 (discriminator 1)
 800d14c:	7bfb      	ldrb	r3, [r7, #15]
 800d14e:	2b03      	cmp	r3, #3
 800d150:	d9e5      	bls.n	800d11e <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:289
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    /* NOP */
  }
#endif
}
 800d152:	bf00      	nop
 800d154:	3714      	adds	r7, #20
 800d156:	46bd      	mov	sp, r7
 800d158:	bc80      	pop	{r7}
 800d15a:	4770      	bx	lr
 800d15c:	0800ef50 	.word	0x0800ef50

0800d160 <XMC_VADC_GLOBAL_SetBoundaries>:
XMC_VADC_GLOBAL_SetBoundaries():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:296
/* API to set boudaries for result of conversion. Should the boundaries be violated, interrupts are generated */
#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr,
                                   const uint32_t boundary0,
                                   const uint32_t boundary1)
{
 800d160:	b480      	push	{r7}
 800d162:	b087      	sub	sp, #28
 800d164:	af00      	add	r7, sp, #0
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	607a      	str	r2, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:301
  uint32_t globbound;

  XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))

  globbound = 0U;
 800d16c:	2300      	movs	r3, #0
 800d16e:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:302
  globbound |= (uint32_t) (boundary0 << VADC_GLOBBOUND_BOUNDARY0_Pos);
 800d170:	697a      	ldr	r2, [r7, #20]
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	4313      	orrs	r3, r2
 800d176:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:303
  globbound |= (uint32_t) (boundary1 << VADC_GLOBBOUND_BOUNDARY1_Pos);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	041b      	lsls	r3, r3, #16
 800d17c:	697a      	ldr	r2, [r7, #20]
 800d17e:	4313      	orrs	r3, r2
 800d180:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:305

  global_ptr->GLOBBOUND = globbound;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	697a      	ldr	r2, [r7, #20]
 800d186:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:306
}
 800d18a:	bf00      	nop
 800d18c:	371c      	adds	r7, #28
 800d18e:	46bd      	mov	sp, r7
 800d190:	bc80      	pop	{r7}
 800d192:	4770      	bx	lr

0800d194 <XMC_VADC_GLOBAL_SetIndividualBoundary>:
XMC_VADC_GLOBAL_SetIndividualBoundary():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:312

/* API to set an individual boundary for conversion results */
void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
                                           const uint16_t boundary_value)
{
 800d194:	b480      	push	{r7}
 800d196:	b085      	sub	sp, #20
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	460b      	mov	r3, r1
 800d19e:	70fb      	strb	r3, [r7, #3]
 800d1a0:	4613      	mov	r3, r2
 800d1a2:	803b      	strh	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:322
  XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Boundary Selection",
             ((XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection) ||
              (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)))

  /* Program the Boundary registers */
  globbound = global_ptr->GLOBBOUND;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d1aa:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:324

  if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection)
 800d1ac:	78fb      	ldrb	r3, [r7, #3]
 800d1ae:	2b02      	cmp	r3, #2
 800d1b0:	d10a      	bne.n	800d1c8 <XMC_VADC_GLOBAL_SetIndividualBoundary+0x34>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:326
  {
    globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY0_Msk);
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d1b8:	f023 030f 	bic.w	r3, r3, #15
 800d1bc:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:327
    globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY0_Pos);
 800d1be:	883b      	ldrh	r3, [r7, #0]
 800d1c0:	68fa      	ldr	r2, [r7, #12]
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	60fb      	str	r3, [r7, #12]
 800d1c6:	e00d      	b.n	800d1e4 <XMC_VADC_GLOBAL_SetIndividualBoundary+0x50>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:329
  }
  else if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)
 800d1c8:	78fb      	ldrb	r3, [r7, #3]
 800d1ca:	2b03      	cmp	r3, #3
 800d1cc:	d10a      	bne.n	800d1e4 <XMC_VADC_GLOBAL_SetIndividualBoundary+0x50>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:331
  {
    globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY1_Msk);
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 800d1d4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800d1d8:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:332
    globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY1_Pos);
 800d1da:	883b      	ldrh	r3, [r7, #0]
 800d1dc:	041b      	lsls	r3, r3, #16
 800d1de:	68fa      	ldr	r2, [r7, #12]
 800d1e0:	4313      	orrs	r3, r2
 800d1e2:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:338
  }
  else
  {
    /* For MISRA*/
  }
  global_ptr->GLOBBOUND = globbound;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	68fa      	ldr	r2, [r7, #12]
 800d1e8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:340

}
 800d1ec:	bf00      	nop
 800d1ee:	3714      	adds	r7, #20
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bc80      	pop	{r7}
 800d1f4:	4770      	bx	lr
 800d1f6:	bf00      	nop

0800d1f8 <XMC_VADC_GLOBAL_SetCompareValue>:
XMC_VADC_GLOBAL_SetCompareValue():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:346

#endif

/* API to set compare value for the result register. Result of conversion is compared against this compare value */
void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZE_t compare_val)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	460b      	mov	r3, r1
 800d202:	807b      	strh	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:349
  XMC_ASSERT("XMC_VADC_GLOBAL_SetCompareValue:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBRES &= ~((uint32_t)VADC_GLOBRES_RESULT_Msk);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d20a:	0c1b      	lsrs	r3, r3, #16
 800d20c:	041b      	lsls	r3, r3, #16
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:350
  global_ptr->GLOBRES |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
 800d21a:	887b      	ldrh	r3, [r7, #2]
 800d21c:	009b      	lsls	r3, r3, #2
 800d21e:	431a      	orrs	r2, r3
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:351
}
 800d226:	bf00      	nop
 800d228:	370c      	adds	r7, #12
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bc80      	pop	{r7}
 800d22e:	4770      	bx	lr

0800d230 <XMC_VADC_GLOBAL_GetCompareResult>:
XMC_VADC_GLOBAL_GetCompareResult():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:355

/* API to retrieve the result of comparison */
XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr)
{
 800d230:	b480      	push	{r7}
 800d232:	b085      	sub	sp, #20
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:361
  XMC_VADC_FAST_COMPARE_t result;
  uint32_t res;

  XMC_ASSERT("XMC_VADC_GLOBAL_GetCompareResult:Wrong Module Pointer", (global_ptr == VADC))

  res = global_ptr->GLOBRES;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d23e:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:363

  if (res & (uint32_t)VADC_GLOBRES_VF_Msk)
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	2b00      	cmp	r3, #0
 800d244:	da06      	bge.n	800d254 <XMC_VADC_GLOBAL_GetCompareResult+0x24>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:365
  {
    result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_GLOBRES_FCR_Pos) & (uint32_t)1);
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	0f9b      	lsrs	r3, r3, #30
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	f003 0301 	and.w	r3, r3, #1
 800d250:	73fb      	strb	r3, [r7, #15]
 800d252:	e001      	b.n	800d258 <XMC_VADC_GLOBAL_GetCompareResult+0x28>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:369
  }
  else
  {
    result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 800d254:	2302      	movs	r3, #2
 800d256:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:372
  }

  return result;
 800d258:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:373
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3714      	adds	r7, #20
 800d25e:	46bd      	mov	sp, r7
 800d260:	bc80      	pop	{r7}
 800d262:	4770      	bx	lr

0800d264 <XMC_VADC_GLOBAL_BindGroupToEMux>:
XMC_VADC_GLOBAL_BindGroupToEMux():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:378

/* Bind one of the four groups to one of the two EMUX interfaces */
#if (XMC_VADC_EMUX_AVAILABLE == 1U)
void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, const uint32_t group)
{
 800d264:	b480      	push	{r7}
 800d266:	b087      	sub	sp, #28
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	607a      	str	r2, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:386

  XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong EMUX Group", (emuxif < XMC_VADC_NUM_EMUX_INTERFACES))
  XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong VADC Group", (group < XMC_VADC_MAXIMUM_NUM_GROUPS))

  if (0U == emuxif)
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d104      	bne.n	800d280 <XMC_VADC_GLOBAL_BindGroupToEMux+0x1c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:388
  {
    pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Pos;
 800d276:	2300      	movs	r3, #0
 800d278:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:389
    mask = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Msk;
 800d27a:	230f      	movs	r3, #15
 800d27c:	617b      	str	r3, [r7, #20]
 800d27e:	e003      	b.n	800d288 <XMC_VADC_GLOBAL_BindGroupToEMux+0x24>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:393
  }
  else
  {
    pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Pos;
 800d280:	2304      	movs	r3, #4
 800d282:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:394
    mask = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Msk;
 800d284:	23f0      	movs	r3, #240	; 0xf0
 800d286:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:397
  }

  global_ptr->EMUXSEL &= ~(mask);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	; 0x3f0
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	43db      	mvns	r3, r3
 800d292:	401a      	ands	r2, r3
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:398
  global_ptr->EMUXSEL |= (uint32_t) (group << pos);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	; 0x3f0
 800d2a0:	6879      	ldr	r1, [r7, #4]
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	fa01 f303 	lsl.w	r3, r1, r3
 800d2a8:	431a      	orrs	r2, r3
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:400

}
 800d2b0:	bf00      	nop
 800d2b2:	371c      	adds	r7, #28
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bc80      	pop	{r7}
 800d2b8:	4770      	bx	lr
 800d2ba:	bf00      	nop

0800d2bc <XMC_VADC_GLOBAL_SetResultEventInterruptNode>:
XMC_VADC_GLOBAL_SetResultEventInterruptNode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:405
#endif 

/* API to bind result event with a service request line */
void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b085      	sub	sp, #20
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	460b      	mov	r3, r1
 800d2c6:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:411
  uint32_t node;
  
  XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong SR Number", (sr <= XMC_VADC_SR_SHARED_SR3))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 800d2c8:	78fb      	ldrb	r3, [r7, #3]
 800d2ca:	2b03      	cmp	r3, #3
 800d2cc:	d903      	bls.n	800d2d6 <XMC_VADC_GLOBAL_SetResultEventInterruptNode+0x1a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:413
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 800d2ce:	78fb      	ldrb	r3, [r7, #3]
 800d2d0:	3b04      	subs	r3, #4
 800d2d2:	60fb      	str	r3, [r7, #12]
 800d2d4:	e001      	b.n	800d2da <XMC_VADC_GLOBAL_SetResultEventInterruptNode+0x1e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:417
  }
  else
  {
    node = (uint32_t)sr;
 800d2d6:	78fb      	ldrb	r3, [r7, #3]
 800d2d8:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:420
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_REV0NP_Msk);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d2e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:421
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	041b      	lsls	r3, r3, #16
 800d2f4:	431a      	orrs	r2, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:422
}
 800d2fc:	bf00      	nop
 800d2fe:	3714      	adds	r7, #20
 800d300:	46bd      	mov	sp, r7
 800d302:	bc80      	pop	{r7}
 800d304:	4770      	bx	lr
 800d306:	bf00      	nop

0800d308 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:426

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 800d308:	b480      	push	{r7}
 800d30a:	b085      	sub	sp, #20
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	460b      	mov	r3, r1
 800d312:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:431
  uint32_t node;
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 800d314:	78fb      	ldrb	r3, [r7, #3]
 800d316:	2b03      	cmp	r3, #3
 800d318:	d903      	bls.n	800d322 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:433
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 800d31a:	78fb      	ldrb	r3, [r7, #3]
 800d31c:	3b04      	subs	r3, #4
 800d31e:	60fb      	str	r3, [r7, #12]
 800d320:	e001      	b.n	800d326 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:437
  }
  else
  {
    node = (uint32_t)sr;
 800d322:	78fb      	ldrb	r3, [r7, #3]
 800d324:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:440
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d32c:	f023 020f 	bic.w	r2, r3, #15
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:441
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	431a      	orrs	r2, r3
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:442
}
 800d346:	bf00      	nop
 800d348:	3714      	adds	r7, #20
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bc80      	pop	{r7}
 800d34e:	4770      	bx	lr

0800d350 <XMC_VADC_GROUP_Init>:
XMC_VADC_GROUP_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:447

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:451
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 800d35a:	6839      	ldr	r1, [r7, #0]
 800d35c:	2300      	movs	r3, #0
 800d35e:	2200      	movs	r2, #0
 800d360:	6849      	ldr	r1, [r1, #4]
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f000 f828 	bl	800d3b8 <XMC_VADC_GROUP_InputClassInit>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:452
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 800d368:	6839      	ldr	r1, [r7, #0]
 800d36a:	2300      	movs	r3, #0
 800d36c:	2201      	movs	r2, #1
 800d36e:	6849      	ldr	r1, [r1, #4]
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f000 f821 	bl	800d3b8 <XMC_VADC_GROUP_InputClassInit>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:453
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 800d376:	6839      	ldr	r1, [r7, #0]
 800d378:	2301      	movs	r3, #1
 800d37a:	2200      	movs	r2, #0
 800d37c:	6889      	ldr	r1, [r1, #8]
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 f81a 	bl	800d3b8 <XMC_VADC_GROUP_InputClassInit>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:454
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 800d384:	6839      	ldr	r1, [r7, #0]
 800d386:	2301      	movs	r3, #1
 800d388:	2201      	movs	r2, #1
 800d38a:	6889      	ldr	r1, [r1, #8]
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f000 f813 	bl	800d3b8 <XMC_VADC_GROUP_InputClassInit>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:456

  group_ptr->ARBCFG = config->g_arbcfg;
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	691a      	ldr	r2, [r3, #16]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:458

  group_ptr->BOUND = config->g_bound;
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	68da      	ldr	r2, [r3, #12]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:461

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	6819      	ldr	r1, [r3, #0]
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f7ff fd8e 	bl	800cecc <XMC_VADC_GROUP_ExternalMuxControlInit>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:463

}
 800d3b0:	bf00      	nop
 800d3b2:	3708      	adds	r7, #8
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <XMC_VADC_GROUP_InputClassInit>:
XMC_VADC_GROUP_InputClassInit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:468

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b08d      	sub	sp, #52	; 0x34
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	603b      	str	r3, [r7, #0]
 800d3c4:	4613      	mov	r3, r2
 800d3c6:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:485

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 800d3c8:	79fb      	ldrb	r3, [r7, #7]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d113      	bne.n	800d3f6 <XMC_VADC_GROUP_InputClassInit+0x3e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:487
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 800d3ce:	2308      	movs	r3, #8
 800d3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:488
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 800d3d2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800d3d6:	627b      	str	r3, [r7, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:489
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	62bb      	str	r3, [r7, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:490
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 800d3dc:	231f      	movs	r3, #31
 800d3de:	623b      	str	r3, [r7, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:491
    sample_time      = (uint32_t) config.sample_time_std_conv;
 800d3e0:	7a3b      	ldrb	r3, [r7, #8]
 800d3e2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:492
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 800d3ea:	7a7b      	ldrb	r3, [r7, #9]
 800d3ec:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800d3f0:	b2db      	uxtb	r3, r3
 800d3f2:	76fb      	strb	r3, [r7, #27]
 800d3f4:	e013      	b.n	800d41e <XMC_VADC_GROUP_InputClassInit+0x66>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:496
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 800d3f6:	2318      	movs	r3, #24
 800d3f8:	62fb      	str	r3, [r7, #44]	; 0x2c
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:497
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 800d3fa:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 800d3fe:	627b      	str	r3, [r7, #36]	; 0x24
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:498
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 800d400:	2310      	movs	r3, #16
 800d402:	62bb      	str	r3, [r7, #40]	; 0x28
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:499
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 800d404:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 800d408:	623b      	str	r3, [r7, #32]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:500
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 800d40a:	7abb      	ldrb	r3, [r7, #10]
 800d40c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800d410:	b2db      	uxtb	r3, r3
 800d412:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:501
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 800d414:	7afb      	ldrb	r3, [r7, #11]
 800d416:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800d41a:	b2db      	uxtb	r3, r3
 800d41c:	76fb      	strb	r3, [r7, #27]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:505
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	683a      	ldr	r2, [r7, #0]
 800d422:	3228      	adds	r2, #40	; 0x28
 800d424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d428:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:508

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 800d42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42c:	43db      	mvns	r3, r3
 800d42e:	697a      	ldr	r2, [r7, #20]
 800d430:	4013      	ands	r3, r2
 800d432:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:509
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 800d434:	7efa      	ldrb	r2, [r7, #27]
 800d436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d438:	fa02 f303 	lsl.w	r3, r2, r3
 800d43c:	697a      	ldr	r2, [r7, #20]
 800d43e:	4313      	orrs	r3, r2
 800d440:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:510
  conv_class &= ~(sample_time_mask);
 800d442:	6a3b      	ldr	r3, [r7, #32]
 800d444:	43db      	mvns	r3, r3
 800d446:	697a      	ldr	r2, [r7, #20]
 800d448:	4013      	ands	r3, r2
 800d44a:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:511
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 800d44c:	69fa      	ldr	r2, [r7, #28]
 800d44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d450:	fa02 f303 	lsl.w	r3, r2, r3
 800d454:	697a      	ldr	r2, [r7, #20]
 800d456:	4313      	orrs	r3, r2
 800d458:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:512
  group_ptr->ICLASS[set_num] = conv_class;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	683a      	ldr	r2, [r7, #0]
 800d45e:	3228      	adds	r2, #40	; 0x28
 800d460:	6979      	ldr	r1, [r7, #20]
 800d462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:513
}
 800d466:	bf00      	nop
 800d468:	3734      	adds	r7, #52	; 0x34
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bc80      	pop	{r7}
 800d46e:	4770      	bx	lr

0800d470 <XMC_VADC_GROUP_SetPowerMode>:
XMC_VADC_GROUP_SetPowerMode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:517

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 800d470:	b480      	push	{r7}
 800d472:	b085      	sub	sp, #20
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	460b      	mov	r3, r1
 800d47a:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:523
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d482:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:525

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	f023 0303 	bic.w	r3, r3, #3
 800d48a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:526
  arbcfg |= (uint32_t)power_mode;
 800d48c:	78fb      	ldrb	r3, [r7, #3]
 800d48e:	68fa      	ldr	r2, [r7, #12]
 800d490:	4313      	orrs	r3, r2
 800d492:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:528

  group_ptr->ARBCFG = arbcfg;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	68fa      	ldr	r2, [r7, #12]
 800d498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:529
}
 800d49c:	bf00      	nop
 800d49e:	3714      	adds	r7, #20
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bc80      	pop	{r7}
 800d4a4:	4770      	bx	lr
 800d4a6:	bf00      	nop

0800d4a8 <XMC_VADC_GROUP_SetSyncSlave>:
XMC_VADC_GROUP_SetSyncSlave():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:533

/* API which programs a group as a slave group during sync conversions */
void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t slave_grp)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b087      	sub	sp, #28
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	60f8      	str	r0, [r7, #12]
 800d4b0:	60b9      	str	r1, [r7, #8]
 800d4b2:	607a      	str	r2, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:542
  XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlave:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  
  #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )

  /* Determine the coding of SYNCTR */
  if (slave_grp > master_grp)
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d902      	bls.n	800d4c2 <XMC_VADC_GROUP_SetSyncSlave+0x1a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:544
  {
    master_grp = master_grp + 1U;
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	3301      	adds	r3, #1
 800d4c0:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:549
  }
  #endif
  
  /* Program SYNCTR */
  synctr = group_ptr->SYNCTR;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d4c8:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:550
  synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	f023 0303 	bic.w	r3, r3, #3
 800d4d0:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:551
  synctr   |= master_grp;
 800d4d2:	697a      	ldr	r2, [r7, #20]
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:552
  group_ptr->SYNCTR = synctr;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	697a      	ldr	r2, [r7, #20]
 800d4de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:553
}
 800d4e2:	bf00      	nop
 800d4e4:	371c      	adds	r7, #28
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bc80      	pop	{r7}
 800d4ea:	4770      	bx	lr

0800d4ec <XMC_VADC_GROUP_SetSyncMaster>:
XMC_VADC_GROUP_SetSyncMaster():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:557

/* API which programs a group as a master group during sync conversions */
void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b085      	sub	sp, #20
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:562
  uint32_t synctr;

  XMC_ASSERT("XMC_VADC_GROUP_SetSyncMaster:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  synctr = group_ptr->SYNCTR;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d4fa:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:563
  synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	f023 0303 	bic.w	r3, r3, #3
 800d502:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:564
  group_ptr->SYNCTR = synctr;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	68fa      	ldr	r2, [r7, #12]
 800d508:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:565
}
 800d50c:	bf00      	nop
 800d50e:	3714      	adds	r7, #20
 800d510:	46bd      	mov	sp, r7
 800d512:	bc80      	pop	{r7}
 800d514:	4770      	bx	lr
 800d516:	bf00      	nop

0800d518 <XMC_VADC_GROUP_CheckSlaveReadiness>:
XMC_VADC_GROUP_CheckSlaveReadiness():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:569

/* API to enable checking of readiness of slaves before a synchronous conversion request is issued */
void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
{
 800d518:	b480      	push	{r7}
 800d51a:	b085      	sub	sp, #20
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:573
  uint32_t i,master_grp_num;
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  master_grp_num =0;
 800d522:	2300      	movs	r3, #0
 800d524:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:574
  for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800d526:	2300      	movs	r3, #0
 800d528:	60fb      	str	r3, [r7, #12]
 800d52a:	e00b      	b.n	800d544 <XMC_VADC_GROUP_CheckSlaveReadiness+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:576
  {
    if(g_xmc_vadc_group_array[i] == group_ptr)
 800d52c:	4a13      	ldr	r2, [pc, #76]	; (800d57c <XMC_VADC_GROUP_CheckSlaveReadiness+0x64>)
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	429a      	cmp	r2, r3
 800d538:	d101      	bne.n	800d53e <XMC_VADC_GROUP_CheckSlaveReadiness+0x26>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:578
    {
      master_grp_num = i;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:574 (discriminator 2)
{
  uint32_t i,master_grp_num;
  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  master_grp_num =0;
  for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	3301      	adds	r3, #1
 800d542:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:574 (discriminator 1)
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2b03      	cmp	r3, #3
 800d548:	d9f0      	bls.n	800d52c <XMC_VADC_GROUP_CheckSlaveReadiness+0x14>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:584
    }
  }

  XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Slave group", (master_grp_num == slave_group ))

  if(slave_group < master_grp_num)
 800d54a:	683a      	ldr	r2, [r7, #0]
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	429a      	cmp	r2, r3
 800d550:	d202      	bcs.n	800d558 <XMC_VADC_GROUP_CheckSlaveReadiness+0x40>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:586
  {
    slave_group++;
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	3301      	adds	r3, #1
 800d556:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:588
  }
  group_ptr->SYNCTR |= (1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	3303      	adds	r3, #3
 800d562:	2101      	movs	r1, #1
 800d564:	fa01 f303 	lsl.w	r3, r1, r3
 800d568:	431a      	orrs	r2, r3
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:589
}
 800d570:	bf00      	nop
 800d572:	3714      	adds	r7, #20
 800d574:	46bd      	mov	sp, r7
 800d576:	bc80      	pop	{r7}
 800d578:	4770      	bx	lr
 800d57a:	bf00      	nop
 800d57c:	0800ef50 	.word	0x0800ef50

0800d580 <XMC_VADC_GROUP_IgnoreSlaveReadiness>:
XMC_VADC_GROUP_IgnoreSlaveReadiness():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:593

/* API to disable checking of readiness of slaves during synchronous conversions */
void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
{
 800d580:	b480      	push	{r7}
 800d582:	b085      	sub	sp, #20
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:597
  uint32_t i,master_grp_num;
  XMC_ASSERT("XMC_VADC_GROUP_IgnoreSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  master_grp_num =0;
 800d58a:	2300      	movs	r3, #0
 800d58c:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:598
  for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800d58e:	2300      	movs	r3, #0
 800d590:	60fb      	str	r3, [r7, #12]
 800d592:	e00b      	b.n	800d5ac <XMC_VADC_GROUP_IgnoreSlaveReadiness+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:600
  {
	if(g_xmc_vadc_group_array[i] == group_ptr)
 800d594:	4a13      	ldr	r2, [pc, #76]	; (800d5e4 <XMC_VADC_GROUP_IgnoreSlaveReadiness+0x64>)
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d101      	bne.n	800d5a6 <XMC_VADC_GROUP_IgnoreSlaveReadiness+0x26>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:602
	{
	  master_grp_num = i;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:598 (discriminator 2)
{
  uint32_t i,master_grp_num;
  XMC_ASSERT("XMC_VADC_GROUP_IgnoreSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  master_grp_num =0;
  for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:598 (discriminator 1)
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2b03      	cmp	r3, #3
 800d5b0:	d9f0      	bls.n	800d594 <XMC_VADC_GROUP_IgnoreSlaveReadiness+0x14>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:608
	}
  }

  XMC_ASSERT("XMC_VADC_GROUP_IgnoreSlaveReadiness:Wrong Slave group", (master_grp_num == slave_group ))

  if(slave_group < master_grp_num)
 800d5b2:	683a      	ldr	r2, [r7, #0]
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d202      	bcs.n	800d5c0 <XMC_VADC_GROUP_IgnoreSlaveReadiness+0x40>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:610
  {
	slave_group++;
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	3301      	adds	r3, #1
 800d5be:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:612
  }
  group_ptr->SYNCTR &= ~(1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	3303      	adds	r3, #3
 800d5ca:	2101      	movs	r1, #1
 800d5cc:	fa01 f303 	lsl.w	r3, r1, r3
 800d5d0:	43db      	mvns	r3, r3
 800d5d2:	401a      	ands	r2, r3
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:613
}
 800d5da:	bf00      	nop
 800d5dc:	3714      	adds	r7, #20
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bc80      	pop	{r7}
 800d5e2:	4770      	bx	lr
 800d5e4:	0800ef50 	.word	0x0800ef50

0800d5e8 <XMC_VADC_GROUP_SetSyncSlaveReadySignal>:
XMC_VADC_GROUP_SetSyncSlaveReadySignal():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:619

/* API to configure EVAL bit in the slave groups*/
void XMC_VADC_GROUP_SetSyncSlaveReadySignal(XMC_VADC_GROUP_t *const group_ptr,
                                            uint32_t eval_waiting_group,
                                            uint32_t eval_origin_group)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b085      	sub	sp, #20
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	60f8      	str	r0, [r7, #12]
 800d5f0:	60b9      	str	r1, [r7, #8]
 800d5f2:	607a      	str	r2, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:623
  XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlaveReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlaveReadySignal:Wrong Group numbers", (eval_waiting_group == eval_origin_group ))

  if(eval_origin_group < eval_waiting_group)
 800d5f4:	687a      	ldr	r2, [r7, #4]
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d202      	bcs.n	800d602 <XMC_VADC_GROUP_SetSyncSlaveReadySignal+0x1a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:625
  {
	  eval_origin_group++;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	3301      	adds	r3, #1
 800d600:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:627
  }
  group_ptr->SYNCTR |= (1U << (eval_origin_group + XMC_VADC_SYNCTR_START_LOCATION));
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	3303      	adds	r3, #3
 800d60c:	2101      	movs	r1, #1
 800d60e:	fa01 f303 	lsl.w	r3, r1, r3
 800d612:	431a      	orrs	r2, r3
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:628
}
 800d61a:	bf00      	nop
 800d61c:	3714      	adds	r7, #20
 800d61e:	46bd      	mov	sp, r7
 800d620:	bc80      	pop	{r7}
 800d622:	4770      	bx	lr

0800d624 <XMC_VADC_GROUP_EnableChannelSyncRequest>:
XMC_VADC_GROUP_EnableChannelSyncRequest():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:633


/* API to enable the synchronous conversion feature - Applicable only to kernel configured as master */
void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)
{
 800d624:	b480      	push	{r7}
 800d626:	b085      	sub	sp, #20
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:640

  XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  synctr  = group_ptr->SYNCTR;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d634:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:642

  if (!(synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk))
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	f003 0303 	and.w	r3, r3, #3
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d10b      	bne.n	800d658 <XMC_VADC_GROUP_EnableChannelSyncRequest+0x34>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:644
  {
    group_ptr->CHCTR[ch_num] |= (uint32_t)((uint32_t)1 << VADC_G_CHCTR_SYNC_Pos);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	683a      	ldr	r2, [r7, #0]
 800d644:	3280      	adds	r2, #128	; 0x80
 800d646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d64a:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	683a      	ldr	r2, [r7, #0]
 800d652:	3280      	adds	r2, #128	; 0x80
 800d654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:646
  }
}
 800d658:	bf00      	nop
 800d65a:	3714      	adds	r7, #20
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bc80      	pop	{r7}
 800d660:	4770      	bx	lr
 800d662:	bf00      	nop

0800d664 <XMC_VADC_GROUP_DisableChannelSyncRequest>:
XMC_VADC_GROUP_DisableChannelSyncRequest():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:650

/* API to disable synchronous conversion feature */
void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)
{
 800d664:	b480      	push	{r7}
 800d666:	b085      	sub	sp, #20
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:657

  XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  synctr  = group_ptr->SYNCTR;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d674:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:659

  if (synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk)
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f003 0303 	and.w	r3, r3, #3
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d00b      	beq.n	800d698 <XMC_VADC_GROUP_DisableChannelSyncRequest+0x34>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:661
  {
    group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_SYNC_Msk);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	683a      	ldr	r2, [r7, #0]
 800d684:	3280      	adds	r2, #128	; 0x80
 800d686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d68a:	f423 6180 	bic.w	r1, r3, #1024	; 0x400
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	683a      	ldr	r2, [r7, #0]
 800d692:	3280      	adds	r2, #128	; 0x80
 800d694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:663
  }
}
 800d698:	bf00      	nop
 800d69a:	3714      	adds	r7, #20
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bc80      	pop	{r7}
 800d6a0:	4770      	bx	lr
 800d6a2:	bf00      	nop

0800d6a4 <XMC_VADC_GROUP_IsConverterBusy>:
XMC_VADC_GROUP_IsConverterBusy():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:667

/* API to retrieve the converter state - Idle vs Busy */ 
XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b085      	sub	sp, #20
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:672
  uint32_t      arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_IsConverterBusy:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  arbcfg  = group_ptr->ARBCFG;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6b2:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:673
  arbcfg &= (uint32_t)VADC_G_ARBCFG_BUSY_Msk;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d6ba:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:674
  arbcfg = arbcfg >> VADC_G_ARBCFG_BUSY_Pos;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	0f9b      	lsrs	r3, r3, #30
 800d6c0:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:676

  return( (XMC_VADC_GROUP_STATE_t)arbcfg);
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	b2db      	uxtb	r3, r3
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:677
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3714      	adds	r7, #20
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bc80      	pop	{r7}
 800d6ce:	4770      	bx	lr

0800d6d0 <XMC_VADC_GROUP_SetBoundaries>:
XMC_VADC_GROUP_SetBoundaries():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:681

/* API to set boundaries for conversion results */
void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, const uint32_t boundary0, const uint32_t boundary1)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b087      	sub	sp, #28
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	607a      	str	r2, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:687
  uint32_t bound;

  XMC_ASSERT("XMC_VADC_GROUP_SetBoundaries:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the Boundary registers */
  bound  = group_ptr->BOUND;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d6e2:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:688
  bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d6ea:	f023 030f 	bic.w	r3, r3, #15
 800d6ee:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:689
  bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 800d6f6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800d6fa:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:690
  bound |= (uint32_t) ((uint32_t) boundary0 << VADC_G_BOUND_BOUNDARY0_Pos);
 800d6fc:	697a      	ldr	r2, [r7, #20]
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	4313      	orrs	r3, r2
 800d702:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:691
  bound |= (uint32_t) ((uint32_t) boundary1 << VADC_G_BOUND_BOUNDARY1_Pos);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	041b      	lsls	r3, r3, #16
 800d708:	697a      	ldr	r2, [r7, #20]
 800d70a:	4313      	orrs	r3, r2
 800d70c:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:692
  group_ptr->BOUND = bound;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	697a      	ldr	r2, [r7, #20]
 800d712:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:693
}
 800d716:	bf00      	nop
 800d718:	371c      	adds	r7, #28
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bc80      	pop	{r7}
 800d71e:	4770      	bx	lr

0800d720 <XMC_VADC_GROUP_SetIndividualBoundary>:
XMC_VADC_GROUP_SetIndividualBoundary():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:699

/* API to set an individual boundary for conversion results */
void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
                                          const XMC_VADC_CHANNEL_BOUNDARY_t selection,
                                          const uint16_t boundary_value)
{
 800d720:	b480      	push	{r7}
 800d722:	b085      	sub	sp, #20
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	460b      	mov	r3, r1
 800d72a:	70fb      	strb	r3, [r7, #3]
 800d72c:	4613      	mov	r3, r2
 800d72e:	803b      	strh	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:709
  XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Boundary Selection",
               ((XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection) ||
                (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)))

  /* Program the Boundary registers */
  bound  = group_ptr->BOUND;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d736:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:710
  if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection)
 800d738:	78fb      	ldrb	r3, [r7, #3]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d10a      	bne.n	800d754 <XMC_VADC_GROUP_SetIndividualBoundary+0x34>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:712
  {
    bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d744:	f023 030f 	bic.w	r3, r3, #15
 800d748:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:713
    bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY0_Pos);
 800d74a:	883b      	ldrh	r3, [r7, #0]
 800d74c:	68fa      	ldr	r2, [r7, #12]
 800d74e:	4313      	orrs	r3, r2
 800d750:	60fb      	str	r3, [r7, #12]
 800d752:	e00d      	b.n	800d770 <XMC_VADC_GROUP_SetIndividualBoundary+0x50>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:715
  }
  else if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)
 800d754:	78fb      	ldrb	r3, [r7, #3]
 800d756:	2b01      	cmp	r3, #1
 800d758:	d10a      	bne.n	800d770 <XMC_VADC_GROUP_SetIndividualBoundary+0x50>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:717
  {
    bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 800d760:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800d764:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:718
    bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY1_Pos);
 800d766:	883b      	ldrh	r3, [r7, #0]
 800d768:	041b      	lsls	r3, r3, #16
 800d76a:	68fa      	ldr	r2, [r7, #12]
 800d76c:	4313      	orrs	r3, r2
 800d76e:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:724
  }
  else
  {
    /* For MISRA*/
  }
  group_ptr->BOUND = bound;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	68fa      	ldr	r2, [r7, #12]
 800d774:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:726

}
 800d778:	bf00      	nop
 800d77a:	3714      	adds	r7, #20
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bc80      	pop	{r7}
 800d780:	4770      	bx	lr
 800d782:	bf00      	nop

0800d784 <XMC_VADC_GROUP_TriggerServiceRequest>:
XMC_VADC_GROUP_TriggerServiceRequest():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:732

/* Manually assert service request (Interrupt) to NVIC */
void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr,
                                          const uint32_t sr_num,
                                          const XMC_VADC_GROUP_IRQ_t type)
{
 800d784:	b480      	push	{r7}
 800d786:	b087      	sub	sp, #28
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	4613      	mov	r3, r2
 800d790:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:739

  XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR number", (sr_num <= XMC_VADC_SR_SHARED_SR3))
  XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR type", ((type)<= XMC_VADC_GROUP_IRQ_SHARED))

  sract = group_ptr->SRACT;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800d798:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:741

  if (XMC_VADC_GROUP_IRQ_KERNEL == type)
 800d79a:	79fb      	ldrb	r3, [r7, #7]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d107      	bne.n	800d7b0 <XMC_VADC_GROUP_TriggerServiceRequest+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:743
  {
    sract |= (uint32_t)((uint32_t)1 << sr_num);
 800d7a0:	2201      	movs	r2, #1
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	fa02 f303 	lsl.w	r3, r2, r3
 800d7a8:	697a      	ldr	r2, [r7, #20]
 800d7aa:	4313      	orrs	r3, r2
 800d7ac:	617b      	str	r3, [r7, #20]
 800d7ae:	e007      	b.n	800d7c0 <XMC_VADC_GROUP_TriggerServiceRequest+0x3c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:747
  }
  else
  {
    sract |= (uint32_t)((uint32_t)1 << (sr_num + (uint32_t)8));
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	3308      	adds	r3, #8
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d7ba:	697a      	ldr	r2, [r7, #20]
 800d7bc:	4313      	orrs	r3, r2
 800d7be:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:750
  }

  group_ptr->SRACT = sract;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	697a      	ldr	r2, [r7, #20]
 800d7c4:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:751
}
 800d7c8:	bf00      	nop
 800d7ca:	371c      	adds	r7, #28
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bc80      	pop	{r7}
 800d7d0:	4770      	bx	lr
 800d7d2:	bf00      	nop

0800d7d4 <XMC_VADC_GROUP_ScanInit>:
XMC_VADC_GROUP_ScanInit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1030
#endif

#if (XMC_VADC_GSCAN_AVAILABLE == 1U)   
/* API to initialize the group scan hardware of a kernel */
void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *config)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1036
  uint32_t      reg;

  XMC_ASSERT("XMC_VADC_GROUP_ScanInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* All configurations have to be performed with the arbitration slot disabled */
  XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f7ff fbbc 	bl	800cf5c <XMC_VADC_GROUP_ScanDisableArbitrationSlot>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1039
  
  /* Read in the existing contents of arbitration priority register */
  reg = group_ptr->ARBPR;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7ea:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1042

  /* Program the priority of the request source */
  reg &= ~(uint32_t)VADC_G_ARBPR_PRIO1_Msk;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800d7f2:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1043
  reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO1_Pos);
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	011b      	lsls	r3, r3, #4
 800d800:	68fa      	ldr	r2, [r7, #12]
 800d802:	4313      	orrs	r3, r2
 800d804:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1046
  
  /* Program the start mode */
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	f003 0303 	and.w	r3, r3, #3
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	2b00      	cmp	r3, #0
 800d812:	d003      	beq.n	800d81c <XMC_VADC_GROUP_ScanInit+0x48>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1048
  {
    reg |= (uint32_t)(VADC_G_ARBPR_CSM1_Msk);
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d81a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1051
  }

  group_ptr->ARBPR = reg;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	68fa      	ldr	r2, [r7, #12]
 800d820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1053

  group_ptr->ASCTRL = (uint32_t)(config->asctrl |(VADC_G_ASCTRL_XTWC_Msk) |(VADC_G_ASCTRL_GTWC_Msk) |
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d82c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d830:	687a      	ldr	r2, [r7, #4]
 800d832:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1056
                                                 (VADC_G_ASCTRL_TMWC_Msk));

  group_ptr->ASMR  = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_G_ASMR_ENGT_Pos));
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	689b      	ldr	r3, [r3, #8]
 800d83a:	f043 0201 	orr.w	r2, r3, #1
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1058
  
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	f003 0303 	and.w	r3, r3, #3
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	2b02      	cmp	r3, #2
 800d850:	d107      	bne.n	800d862 <XMC_VADC_GROUP_ScanInit+0x8e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1060
  {
    group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_RPTDIS_Msk;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800d858:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1064
  }
  
  /* Enable arbitration slot now */
  XMC_VADC_GROUP_ScanEnableArbitrationSlot(group_ptr);
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f7ff fb68 	bl	800cf38 <XMC_VADC_GROUP_ScanEnableArbitrationSlot>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1066
  
}
 800d868:	bf00      	nop
 800d86a:	3710      	adds	r7, #16
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}

0800d870 <XMC_VADC_GROUP_ScanSelectTrigger>:
XMC_VADC_GROUP_ScanSelectTrigger():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1070

/* API to select one of the 16 inputs as a trigger input for Group Scan request source */
void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SELECT_t trigger_input)
{
 800d870:	b480      	push	{r7}
 800d872:	b085      	sub	sp, #20
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	460b      	mov	r3, r1
 800d87a:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1076
  uint32_t scanctrl;

  XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Trigger Port", ((trigger_input)< XMC_VADC_NUM_PORTS))

  scanctrl      = group_ptr->ASCTRL;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800d882:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1077
  scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d88a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1078
  scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTSEL_Msk);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d892:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1079
  scanctrl     |= (uint32_t)((uint32_t)trigger_input << VADC_G_ASCTRL_XTSEL_Pos);
 800d894:	78fb      	ldrb	r3, [r7, #3]
 800d896:	021b      	lsls	r3, r3, #8
 800d898:	68fa      	ldr	r2, [r7, #12]
 800d89a:	4313      	orrs	r3, r2
 800d89c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1080
  group_ptr->ASCTRL  = scanctrl;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	68fa      	ldr	r2, [r7, #12]
 800d8a2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1081
}
 800d8a6:	bf00      	nop
 800d8a8:	3714      	adds	r7, #20
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bc80      	pop	{r7}
 800d8ae:	4770      	bx	lr

0800d8b0 <XMC_VADC_GROUP_ScanSelectTriggerEdge>:
XMC_VADC_GROUP_ScanSelectTriggerEdge():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1085

/* Select a trigger edge*/
void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER_EDGE_t trigger_edge)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b085      	sub	sp, #20
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	460b      	mov	r3, r1
 800d8ba:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1091
  uint32_t scanctrl;

  XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Trigger Port", ((trigger_edge)<= XMC_VADC_TRIGGER_EDGE_ANY))

  scanctrl      = group_ptr->ASCTRL;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800d8c2:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1092
  scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d8ca:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1093
  scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTMODE_Msk);
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800d8d2:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1094
  scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_G_ASCTRL_XTMODE_Pos);
 800d8d4:	78fb      	ldrb	r3, [r7, #3]
 800d8d6:	035b      	lsls	r3, r3, #13
 800d8d8:	68fa      	ldr	r2, [r7, #12]
 800d8da:	4313      	orrs	r3, r2
 800d8dc:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1095
  group_ptr->ASCTRL  = scanctrl;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	68fa      	ldr	r2, [r7, #12]
 800d8e2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1096
}
 800d8e6:	bf00      	nop
 800d8e8:	3714      	adds	r7, #20
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bc80      	pop	{r7}
 800d8ee:	4770      	bx	lr

0800d8f0 <XMC_VADC_GROUP_ScanSelectGating>:
XMC_VADC_GROUP_ScanSelectGating():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1100

/* API to select one of the 16 inputs as a trigger gating input for Group Scan request source */
void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_t gating_input)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b085      	sub	sp, #20
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1106
  uint32_t scanctrl;

  XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Gating Port", ((gating_input)< XMC_VADC_NUM_PORTS))

  scanctrl      = group_ptr->ASCTRL;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800d902:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1107
  scanctrl     |= (uint32_t)VADC_G_ASCTRL_GTWC_Msk;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d90a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1108
  scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_GTSEL_Msk);
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800d912:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1109
  scanctrl     |= (uint32_t)((uint32_t)gating_input << VADC_G_ASCTRL_GTSEL_Pos);
 800d914:	78fb      	ldrb	r3, [r7, #3]
 800d916:	041b      	lsls	r3, r3, #16
 800d918:	68fa      	ldr	r2, [r7, #12]
 800d91a:	4313      	orrs	r3, r2
 800d91c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1110
  group_ptr->ASCTRL  = scanctrl;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	68fa      	ldr	r2, [r7, #12]
 800d922:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1111
}
 800d926:	bf00      	nop
 800d928:	3714      	adds	r7, #20
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bc80      	pop	{r7}
 800d92e:	4770      	bx	lr

0800d930 <XMC_VADC_GROUP_ScanSequenceAbort>:
XMC_VADC_GROUP_ScanSequenceAbort():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1115

/* API to stop an ongoing conversion of a sequence */
void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b084      	sub	sp, #16
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1122
  bool arbitration_status;

  XMC_ASSERT("XMC_VADC_GROUP_ScanSequenceAbort:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* To disable trigger and gating before abort*/
  asctrl = group_ptr->ASCTRL;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800d93e:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1124

  group_ptr->ASCTRL =(0U | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	4a1b      	ldr	r2, [pc, #108]	; (800d9b0 <XMC_VADC_GROUP_ScanSequenceAbort+0x80>)
 800d944:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1128
                                  (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_Msk );

  /* To disable Arbitration before abort*/
  arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN1_Pos) & 1U);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d94e:	0e5b      	lsrs	r3, r3, #25
 800d950:	f003 0301 	and.w	r3, r3, #1
 800d954:	2b00      	cmp	r3, #0
 800d956:	bf14      	ite	ne
 800d958:	2301      	movne	r3, #1
 800d95a:	2300      	moveq	r3, #0
 800d95c:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1129
  XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f7ff fafc 	bl	800cf5c <XMC_VADC_GROUP_ScanDisableArbitrationSlot>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1131

  group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENGT_Msk);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800d96a:	f023 0203 	bic.w	r2, r3, #3
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1132
  group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_CLRPND_Msk;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800d97a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1135

    /* Enable the arbitration slot 1*/
  group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN1_Pos);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800d98a:	7afb      	ldrb	r3, [r7, #11]
 800d98c:	065b      	lsls	r3, r3, #25
 800d98e:	431a      	orrs	r2, r3
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1139

  /* Enable any disabled gating*/
  group_ptr->ASCTRL =(asctrl | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
                                  (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_Msk );
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d99c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1138

    /* Enable the arbitration slot 1*/
  group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN1_Pos);

  /* Enable any disabled gating*/
  group_ptr->ASCTRL =(asctrl | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
 800d9a0:	687a      	ldr	r2, [r7, #4]
 800d9a2:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1140
                                  (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_Msk );
}
 800d9a6:	bf00      	nop
 800d9a8:	3710      	adds	r7, #16
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}
 800d9ae:	bf00      	nop
 800d9b0:	80808000 	.word	0x80808000

0800d9b4 <XMC_VADC_GROUP_ScanGetNumChannelsPending>:
XMC_VADC_GROUP_ScanGetNumChannelsPending():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1144

/* API to find out number of channels awaiting conversion */
uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b087      	sub	sp, #28
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1152
  uint32_t count;

  XMC_ASSERT("XMC_VADC_GROUP_ScanGetNumChannelsPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))


  count = 0U;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1154

  if (group_ptr->ASPND)
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d017      	beq.n	800d9fa <XMC_VADC_GROUP_ScanGetNumChannelsPending+0x46>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1156
  {
    reg = group_ptr->ASPND;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800d9d0:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1158

    for(i=0U;i<XMC_VADC_NUM_CHANNELS_PER_GROUP;i++)
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	613b      	str	r3, [r7, #16]
 800d9d6:	e00d      	b.n	800d9f4 <XMC_VADC_GROUP_ScanGetNumChannelsPending+0x40>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1160
    {
      if (reg & 1U)
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	f003 0301 	and.w	r3, r3, #1
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d002      	beq.n	800d9e8 <XMC_VADC_GROUP_ScanGetNumChannelsPending+0x34>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1162
      {
        count++;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	3301      	adds	r3, #1
 800d9e6:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1164 (discriminator 2)
      }
      reg = (uint32_t)(reg >> (uint32_t)1);
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	085b      	lsrs	r3, r3, #1
 800d9ec:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1158 (discriminator 2)

  if (group_ptr->ASPND)
  {
    reg = group_ptr->ASPND;

    for(i=0U;i<XMC_VADC_NUM_CHANNELS_PER_GROUP;i++)
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1158 (discriminator 1)
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	2b07      	cmp	r3, #7
 800d9f8:	d9ee      	bls.n	800d9d8 <XMC_VADC_GROUP_ScanGetNumChannelsPending+0x24>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1168
      }
      reg = (uint32_t)(reg >> (uint32_t)1);
    }
  }

  return count;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1169
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	371c      	adds	r7, #28
 800da00:	46bd      	mov	sp, r7
 800da02:	bc80      	pop	{r7}
 800da04:	4770      	bx	lr
 800da06:	bf00      	nop

0800da08 <XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode>:
XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1173

/* API to select a service request line (NVIC Node) for request source event */
void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SR_t sr)
{
 800da08:	b480      	push	{r7}
 800da0a:	b085      	sub	sp, #20
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	460b      	mov	r3, r1
 800da12:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1175
  uint32_t sevnp;
  sevnp = group_ptr->SEVNP;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800da1a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1180

  XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV1NP_Msk);
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800da22:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1181
  sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV1NP_Pos);
 800da24:	78fb      	ldrb	r3, [r7, #3]
 800da26:	011b      	lsls	r3, r3, #4
 800da28:	68fa      	ldr	r2, [r7, #12]
 800da2a:	4313      	orrs	r3, r2
 800da2c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1183

  group_ptr->SEVNP = sevnp;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	68fa      	ldr	r2, [r7, #12]
 800da32:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1184
}
 800da36:	bf00      	nop
 800da38:	3714      	adds	r7, #20
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bc80      	pop	{r7}
 800da3e:	4770      	bx	lr

0800da40 <XMC_VADC_GROUP_ScanRemoveChannel>:
XMC_VADC_GROUP_ScanRemoveChannel():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1188

/* Removes the selected channel from conversion*/
void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num)
{
 800da40:	b480      	push	{r7}
 800da42:	b085      	sub	sp, #20
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1194
  uint32_t assel;

  XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong channel number", ((channel_num)< XMC_VADC_NUM_CHANNELS_PER_GROUP))

  assel = group_ptr->ASSEL; 
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800da50:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1195
  assel &= (~( 1 << channel_num));
 800da52:	2201      	movs	r2, #1
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	fa02 f303 	lsl.w	r3, r2, r3
 800da5a:	43db      	mvns	r3, r3
 800da5c:	461a      	mov	r2, r3
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	4013      	ands	r3, r2
 800da62:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1196
  group_ptr->ASSEL  = assel;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	68fa      	ldr	r2, [r7, #12]
 800da68:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1197
}
 800da6c:	bf00      	nop
 800da6e:	3714      	adds	r7, #20
 800da70:	46bd      	mov	sp, r7
 800da72:	bc80      	pop	{r7}
 800da74:	4770      	bx	lr
 800da76:	bf00      	nop

0800da78 <XMC_VADC_GLOBAL_BackgroundInit>:
XMC_VADC_GLOBAL_BackgroundInit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1202
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b086      	sub	sp, #24
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1212
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800da82:	2300      	movs	r3, #0
 800da84:	75fb      	strb	r3, [r7, #23]
 800da86:	e009      	b.n	800da9c <XMC_VADC_GLOBAL_BackgroundInit+0x24>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1214 (discriminator 3)
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 800da88:	7dfb      	ldrb	r3, [r7, #23]
 800da8a:	4a39      	ldr	r2, [pc, #228]	; (800db70 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 800da8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da90:	4618      	mov	r0, r3
 800da92:	f7ff fa87 	bl	800cfa4 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1212 (discriminator 3)
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800da96:	7dfb      	ldrb	r3, [r7, #23]
 800da98:	3301      	adds	r3, #1
 800da9a:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1212 (discriminator 1)
 800da9c:	7dfb      	ldrb	r3, [r7, #23]
 800da9e:	2b03      	cmp	r3, #3
 800daa0:	d9f2      	bls.n	800da88 <XMC_VADC_GLOBAL_BackgroundInit+0x10>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1217
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
 800daa2:	2300      	movs	r3, #0
 800daa4:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1218
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	781b      	ldrb	r3, [r3, #0]
 800daaa:	f003 0303 	and.w	r3, r3, #3
 800daae:	b2db      	uxtb	r3, r3
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d002      	beq.n	800daba <XMC_VADC_GLOBAL_BackgroundInit+0x42>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1220
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 800dab4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dab8:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1223
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800daba:	2300      	movs	r3, #0
 800dabc:	75fb      	strb	r3, [r7, #23]
 800dabe:	e021      	b.n	800db04 <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1225 (discriminator 3)
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 800dac0:	7dfb      	ldrb	r3, [r7, #23]
 800dac2:	4a2b      	ldr	r2, [pc, #172]	; (800db70 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 800dac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dacc:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1227 (discriminator 3)

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dad4:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1230 (discriminator 3)

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800dade:	b2db      	uxtb	r3, r3
 800dae0:	021b      	lsls	r3, r3, #8
 800dae2:	68fa      	ldr	r2, [r7, #12]
 800dae4:	4313      	orrs	r3, r2
 800dae6:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1233 (discriminator 3)
  
    /* Program the start mode */
    reg |= conv_start_mask;
 800dae8:	68fa      	ldr	r2, [r7, #12]
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	4313      	orrs	r3, r2
 800daee:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1235 (discriminator 3)

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 800daf0:	7dfb      	ldrb	r3, [r7, #23]
 800daf2:	4a1f      	ldr	r2, [pc, #124]	; (800db70 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 800daf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daf8:	68fa      	ldr	r2, [r7, #12]
 800dafa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1223 (discriminator 3)
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800dafe:	7dfb      	ldrb	r3, [r7, #23]
 800db00:	3301      	adds	r3, #1
 800db02:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1223 (discriminator 1)
 800db04:	7dfb      	ldrb	r3, [r7, #23]
 800db06:	2b03      	cmp	r3, #3
 800db08:	d9da      	bls.n	800dac0 <XMC_VADC_GLOBAL_BackgroundInit+0x48>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1241
  
  }
  #endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	685b      	ldr	r3, [r3, #4]
 800db0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800db12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db16:	687a      	ldr	r2, [r7, #4]
 800db18:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1244

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	689b      	ldr	r3, [r3, #8]
 800db20:	f043 0201 	orr.w	r2, r3, #1
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1247
  
#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	f003 0303 	and.w	r3, r3, #3
 800db32:	b2db      	uxtb	r3, r3
 800db34:	2b02      	cmp	r3, #2
 800db36:	d107      	bne.n	800db48 <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1249
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800db3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1254
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800db48:	2300      	movs	r3, #0
 800db4a:	75fb      	strb	r3, [r7, #23]
 800db4c:	e009      	b.n	800db62 <XMC_VADC_GLOBAL_BackgroundInit+0xea>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1256 (discriminator 3)
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 800db4e:	7dfb      	ldrb	r3, [r7, #23]
 800db50:	4a07      	ldr	r2, [pc, #28]	; (800db70 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 800db52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db56:	4618      	mov	r0, r3
 800db58:	f7ff fa12 	bl	800cf80 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1254 (discriminator 3)
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800db5c:	7dfb      	ldrb	r3, [r7, #23]
 800db5e:	3301      	adds	r3, #1
 800db60:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1254 (discriminator 1)
 800db62:	7dfb      	ldrb	r3, [r7, #23]
 800db64:	2b03      	cmp	r3, #3
 800db66:	d9f2      	bls.n	800db4e <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1260
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  #endif
  
}
 800db68:	bf00      	nop
 800db6a:	3718      	adds	r7, #24
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}
 800db70:	0800ef50 	.word	0x0800ef50

0800db74 <XMC_VADC_GLOBAL_BackgroundSelectTrigger>:
XMC_VADC_GLOBAL_BackgroundSelectTrigger():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1264

/* API to select one of the 16 inputs as a trigger for background scan request source */
void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t input_num)
{
 800db74:	b480      	push	{r7}
 800db76:	b085      	sub	sp, #20
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1271

  XMC_ASSERT("VADC_BCKGND_SelectTriggerInput:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTrigger:Wrong Trigger Port", ((input_num)< XMC_VADC_NUM_PORTS))

  
  scanctrl       = global_ptr->BRSCTRL;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800db84:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1272
  scanctrl      |= (uint32_t)VADC_BRSCTRL_XTWC_Msk;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db8c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1273
  scanctrl      &= ~((uint32_t)VADC_BRSCTRL_XTSEL_Msk);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800db94:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1274
  scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_XTSEL_Pos);
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	021b      	lsls	r3, r3, #8
 800db9a:	68fa      	ldr	r2, [r7, #12]
 800db9c:	4313      	orrs	r3, r2
 800db9e:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1275
  global_ptr->BRSCTRL  = scanctrl;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	68fa      	ldr	r2, [r7, #12]
 800dba4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1276
}
 800dba8:	bf00      	nop
 800dbaa:	3714      	adds	r7, #20
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bc80      	pop	{r7}
 800dbb0:	4770      	bx	lr
 800dbb2:	bf00      	nop

0800dbb4 <XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge>:
XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1281

/* Select a trigger edge*/
void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr,
                                                 const XMC_VADC_TRIGGER_EDGE_t trigger_edge)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b085      	sub	sp, #20
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1288

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Global Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Trigger Port",
            ((trigger_edge)<= XMC_VADC_TRIGGER_EDGE_ANY))

  scanctrl      = global_ptr->BRSCTRL;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800dbc6:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1289
  scanctrl     |= (uint32_t) VADC_BRSCTRL_XTWC_Msk;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dbce:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1290
  scanctrl     &= ~((uint32_t)VADC_BRSCTRL_XTMODE_Msk);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800dbd6:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1291
  scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_BRSCTRL_XTMODE_Pos);
 800dbd8:	78fb      	ldrb	r3, [r7, #3]
 800dbda:	035b      	lsls	r3, r3, #13
 800dbdc:	68fa      	ldr	r2, [r7, #12]
 800dbde:	4313      	orrs	r3, r2
 800dbe0:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1292
  global_ptr->BRSCTRL  = scanctrl;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	68fa      	ldr	r2, [r7, #12]
 800dbe6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1293
}
 800dbea:	bf00      	nop
 800dbec:	3714      	adds	r7, #20
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bc80      	pop	{r7}
 800dbf2:	4770      	bx	lr

0800dbf4 <XMC_VADC_GLOBAL_BackgroundSelectGating>:
XMC_VADC_GLOBAL_BackgroundSelectGating():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1298


/* API to select one of the 16 inputs as a trigger gate for background scan request source */
void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t input_num)
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b085      	sub	sp, #20
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1304
  uint32_t scanctrl;

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Gating Port", ((input_num)< XMC_VADC_NUM_PORTS))

  scanctrl       = global_ptr->BRSCTRL;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800dc04:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1305
  scanctrl      |= (uint32_t)VADC_BRSCTRL_GTWC_Msk;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dc0c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1306
  scanctrl      &= ~((uint32_t)VADC_BRSCTRL_GTSEL_Msk);
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800dc14:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1307
  scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_GTSEL_Pos);
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	041b      	lsls	r3, r3, #16
 800dc1a:	68fa      	ldr	r2, [r7, #12]
 800dc1c:	4313      	orrs	r3, r2
 800dc1e:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1308
  global_ptr->BRSCTRL  = scanctrl;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	68fa      	ldr	r2, [r7, #12]
 800dc24:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1309
}
 800dc28:	bf00      	nop
 800dc2a:	3714      	adds	r7, #20
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bc80      	pop	{r7}
 800dc30:	4770      	bx	lr
 800dc32:	bf00      	nop

0800dc34 <XMC_VADC_GLOBAL_BackgroundAbortSequence>:
XMC_VADC_GLOBAL_BackgroundAbortSequence():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1313

/* API to abort ongoing conversion of a sequence */
void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b086      	sub	sp, #24
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1322
  uint8_t grp_asen2_flag[XMC_VADC_MAXIMUM_NUM_GROUPS];
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAbortSequence:Wrong Module Pointer", (global_ptr == VADC))

  /* To disable trigger and gating before abort*/
  brsctrl = global_ptr->BRSCTRL;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800dc42:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1324

  global_ptr->BRSCTRL =(0U | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	4a26      	ldr	r2, [pc, #152]	; (800dce0 <XMC_VADC_GLOBAL_BackgroundAbortSequence+0xac>)
 800dc48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1329

  /* Disable Background Request source */

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	617b      	str	r3, [r7, #20]
 800dc50:	e017      	b.n	800dc82 <XMC_VADC_GLOBAL_BackgroundAbortSequence+0x4e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1331 (discriminator 3)
  {
    grp_asen2_flag[i] = (uint8_t)(g_xmc_vadc_group_array[i]->ARBPR >> VADC_G_ARBPR_ASEN2_Pos);
 800dc52:	4a24      	ldr	r2, [pc, #144]	; (800dce4 <XMC_VADC_GLOBAL_BackgroundAbortSequence+0xb0>)
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc5e:	0e9b      	lsrs	r3, r3, #26
 800dc60:	b2d9      	uxtb	r1, r3
 800dc62:	f107 020c 	add.w	r2, r7, #12
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	4413      	add	r3, r2
 800dc6a:	460a      	mov	r2, r1
 800dc6c:	701a      	strb	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1332 (discriminator 3)
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 800dc6e:	4a1d      	ldr	r2, [pc, #116]	; (800dce4 <XMC_VADC_GLOBAL_BackgroundAbortSequence+0xb0>)
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7ff f994 	bl	800cfa4 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1329 (discriminator 3)
  global_ptr->BRSCTRL =(0U | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);

  /* Disable Background Request source */

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	3301      	adds	r3, #1
 800dc80:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1329 (discriminator 1)
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	2b03      	cmp	r3, #3
 800dc86:	d9e4      	bls.n	800dc52 <XMC_VADC_GLOBAL_BackgroundAbortSequence+0x1e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1337
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
#endif

  /* Abort the ongoing sequence */
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_CLRPND_Msk;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800dc8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1341

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  /* Enable Background Request source */
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800dc98:	2300      	movs	r3, #0
 800dc9a:	617b      	str	r3, [r7, #20]
 800dc9c:	e010      	b.n	800dcc0 <XMC_VADC_GLOBAL_BackgroundAbortSequence+0x8c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1343
  {
    if ((uint8_t)1 == grp_asen2_flag[i])
 800dc9e:	f107 020c 	add.w	r2, r7, #12
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	4413      	add	r3, r2
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d106      	bne.n	800dcba <XMC_VADC_GLOBAL_BackgroundAbortSequence+0x86>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1345
    {
      XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t*)g_xmc_vadc_group_array[i]);
 800dcac:	4a0d      	ldr	r2, [pc, #52]	; (800dce4 <XMC_VADC_GLOBAL_BackgroundAbortSequence+0xb0>)
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7ff f963 	bl	800cf80 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1341 (discriminator 2)
  /* Abort the ongoing sequence */
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_CLRPND_Msk;

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  /* Enable Background Request source */
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1341 (discriminator 1)
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	2b03      	cmp	r3, #3
 800dcc4:	d9eb      	bls.n	800dc9e <XMC_VADC_GLOBAL_BackgroundAbortSequence+0x6a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1351
    }
  }
#endif

  /* Re-enable any disabled trigger and gating*/
  global_ptr->BRSCTRL =(brsctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dcd0:	687a      	ldr	r2, [r7, #4]
 800dcd2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1352
}
 800dcd6:	bf00      	nop
 800dcd8:	3718      	adds	r7, #24
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	bf00      	nop
 800dce0:	00808000 	.word	0x00808000
 800dce4:	0800ef50 	.word	0x0800ef50

0800dce8 <XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending>:
XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1356

/* API to determine how many channels are awaiting conversion */
uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr)
{
 800dce8:	b480      	push	{r7}
 800dcea:	b087      	sub	sp, #28
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1364
  uint32_t j;
  uint32_t count;

  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:Wrong Module Pointer", (global_ptr == VADC))

  count = 0U;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1367
  
  /* Loop through all groups and find out who is awaiting conversion */
  for(i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	613b      	str	r3, [r7, #16]
 800dcf8:	e023      	b.n	800dd42 <XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending+0x5a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1369
  {
    if (global_ptr->BRSSEL[i])
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	693a      	ldr	r2, [r7, #16]
 800dcfe:	3260      	adds	r2, #96	; 0x60
 800dd00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d019      	beq.n	800dd3c <XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending+0x54>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1371
    {
      reg = global_ptr->BRSPND[i];
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	693a      	ldr	r2, [r7, #16]
 800dd0c:	3270      	adds	r2, #112	; 0x70
 800dd0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd12:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1373

      for(j=0U;j<XMC_VADC_NUM_CHANNELS_PER_GROUP;j++)
 800dd14:	2300      	movs	r3, #0
 800dd16:	60fb      	str	r3, [r7, #12]
 800dd18:	e00d      	b.n	800dd36 <XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending+0x4e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1375
      {
        if (reg & 1U)
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	f003 0301 	and.w	r3, r3, #1
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d002      	beq.n	800dd2a <XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending+0x42>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1377
        {
          count++;
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	3301      	adds	r3, #1
 800dd28:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1380 (discriminator 2)
        }

        reg = reg >> 1U;
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	085b      	lsrs	r3, r3, #1
 800dd2e:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1373 (discriminator 2)
  {
    if (global_ptr->BRSSEL[i])
    {
      reg = global_ptr->BRSPND[i];

      for(j=0U;j<XMC_VADC_NUM_CHANNELS_PER_GROUP;j++)
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	3301      	adds	r3, #1
 800dd34:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1373 (discriminator 1)
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	2b07      	cmp	r3, #7
 800dd3a:	d9ee      	bls.n	800dd1a <XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending+0x32>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1367 (discriminator 2)
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:Wrong Module Pointer", (global_ptr == VADC))

  count = 0U;
  
  /* Loop through all groups and find out who is awaiting conversion */
  for(i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	3301      	adds	r3, #1
 800dd40:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1367 (discriminator 1)
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	2b03      	cmp	r3, #3
 800dd46:	d9d8      	bls.n	800dcfa <XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending+0x12>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1385
        reg = reg >> 1U;
      }
    }
  }

  return count;
 800dd48:	68bb      	ldr	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1386
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	371c      	adds	r7, #28
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bc80      	pop	{r7}
 800dd52:	4770      	bx	lr

0800dd54 <XMC_VADC_GROUP_QueueInit>:
XMC_VADC_GROUP_QueueInit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1391

#if (XMC_VADC_QUEUE_AVAILABLE == 1U)  
/* API to initialize queue request source */
void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *config)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b084      	sub	sp, #16
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1397
  uint32_t          reg;

  XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Disable arbitration slot of the queue request source */
  XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f7ff f944 	bl	800cfec <XMC_VADC_GROUP_QueueDisableArbitrationSlot>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1399
  
  reg = group_ptr->ARBPR;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd6a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1402

  /* Request Source priority */
  reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f023 0303 	bic.w	r3, r3, #3
 800dd72:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1403
  reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	461a      	mov	r2, r3
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	4313      	orrs	r3, r2
 800dd84:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1406

  /* Conversion Start mode */
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	f003 0303 	and.w	r3, r3, #3
 800dd8e:	b2db      	uxtb	r3, r3
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d003      	beq.n	800dd9c <XMC_VADC_GROUP_QueueInit+0x48>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1408
  {
    reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f043 0308 	orr.w	r3, r3, #8
 800dd9a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1411
  }

  group_ptr->ARBPR = reg;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	68fa      	ldr	r2, [r7, #12]
 800dda0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1414


  group_ptr->QCTRL0 = (uint32_t)((config->qctrl0)|(uint32_t)(VADC_G_QCTRL0_XTWC_Msk)|
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	685b      	ldr	r3, [r3, #4]
 800dda8:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ddac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ddb0:	687a      	ldr	r2, [r7, #4]
 800ddb2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1419
                                                    (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
                                                    (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));

  /* Gating mode */
  group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_G_QMR0_ENGT_Pos));
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	689b      	ldr	r3, [r3, #8]
 800ddba:	f043 0201 	orr.w	r2, r3, #1
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1421

  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode) )
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	f003 0303 	and.w	r3, r3, #3
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	2b02      	cmp	r3, #2
 800ddd0:	d107      	bne.n	800dde2 <XMC_VADC_GROUP_QueueInit+0x8e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1423
  {
    group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800ddd8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1426
  }
  /* Enable arbitration slot for the queue request source */
  XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f7ff f8f0 	bl	800cfc8 <XMC_VADC_GROUP_QueueEnableArbitrationSlot>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1428

}
 800dde8:	bf00      	nop
 800ddea:	3710      	adds	r7, #16
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <XMC_VADC_GROUP_QueueSelectTrigger>:
XMC_VADC_GROUP_QueueSelectTrigger():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1433

/* API to select one of the 16 possible triggers as a conversion trigger for queue request source */
void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr,
                                       const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num)
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b085      	sub	sp, #20
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	460b      	mov	r3, r1
 800ddfa:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1441
  XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Trigger Port", ((input_num)< XMC_VADC_NUM_PORTS))

  
  /* Now select the conversion trigger */
  qctrl  = group_ptr->QCTRL0;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800de02:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1442
  qctrl  |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de0a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1443
  qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTSEL_Msk);
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800de12:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1444
  qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_XTSEL_Pos);
 800de14:	78fb      	ldrb	r3, [r7, #3]
 800de16:	021b      	lsls	r3, r3, #8
 800de18:	68fa      	ldr	r2, [r7, #12]
 800de1a:	4313      	orrs	r3, r2
 800de1c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1445
  group_ptr->QCTRL0 = qctrl;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	68fa      	ldr	r2, [r7, #12]
 800de22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1446
}
 800de26:	bf00      	nop
 800de28:	3714      	adds	r7, #20
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bc80      	pop	{r7}
 800de2e:	4770      	bx	lr

0800de30 <XMC_VADC_GROUP_QueueSelectTriggerEdge>:
XMC_VADC_GROUP_QueueSelectTriggerEdge():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1450

/* Select a trigger edge*/
void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER_EDGE_t trigger_edge)
{
 800de30:	b480      	push	{r7}
 800de32:	b085      	sub	sp, #20
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	460b      	mov	r3, r1
 800de3a:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1457

  XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Gating Port", ((trigger_edge)<= XMC_VADC_TRIGGER_EDGE_ANY))

  /* Now select the gating input */
  qctrl  = group_ptr->QCTRL0;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800de42:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1458
  qctrl |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de4a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1459
  qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTMODE_Msk);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800de52:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1460
  qctrl |= (uint32_t)((uint32_t)trigger_edge << VADC_G_QCTRL0_XTMODE_Pos);
 800de54:	78fb      	ldrb	r3, [r7, #3]
 800de56:	035b      	lsls	r3, r3, #13
 800de58:	68fa      	ldr	r2, [r7, #12]
 800de5a:	4313      	orrs	r3, r2
 800de5c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1461
  group_ptr->QCTRL0 = qctrl;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	68fa      	ldr	r2, [r7, #12]
 800de62:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1462
}
 800de66:	bf00      	nop
 800de68:	3714      	adds	r7, #20
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bc80      	pop	{r7}
 800de6e:	4770      	bx	lr

0800de70 <XMC_VADC_GROUP_QueueSelectGating>:
XMC_VADC_GROUP_QueueSelectGating():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1466

/* API to select one of the 16 possible trigger gates as a trigger gating signal for queue request source */
void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_SELECT_t input_num)
{
 800de70:	b480      	push	{r7}
 800de72:	b085      	sub	sp, #20
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	460b      	mov	r3, r1
 800de7a:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1473

  XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Gating Port", ((input_num)< XMC_VADC_NUM_PORTS))
  
  /* Now select the gating input */
  qctrl  = group_ptr->QCTRL0;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800de82:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1474
  qctrl |= (uint32_t)VADC_G_QCTRL0_GTWC_Msk;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800de8a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1475
  qctrl &= ~((uint32_t)VADC_G_QCTRL0_GTSEL_Msk);
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800de92:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1476
  qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_GTSEL_Pos);
 800de94:	78fb      	ldrb	r3, [r7, #3]
 800de96:	041b      	lsls	r3, r3, #16
 800de98:	68fa      	ldr	r2, [r7, #12]
 800de9a:	4313      	orrs	r3, r2
 800de9c:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1477
  group_ptr->QCTRL0 = qctrl;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	68fa      	ldr	r2, [r7, #12]
 800dea2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1478
}
 800dea6:	bf00      	nop
 800dea8:	3714      	adds	r7, #20
 800deaa:	46bd      	mov	sp, r7
 800deac:	bc80      	pop	{r7}
 800deae:	4770      	bx	lr

0800deb0 <XMC_VADC_GROUP_QueueGetLength>:
XMC_VADC_GROUP_QueueGetLength():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1482

/* API to determine the number of channels in the queue (length includes the valid channel in the Backup register)*/
uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr)
{
 800deb0:	b480      	push	{r7}
 800deb2:	b087      	sub	sp, #28
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1489
  uint32_t        qbur0;
  uint32_t        length;

  XMC_ASSERT("XMC_VADC_GROUP_QueueGetLength:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  qsr = group_ptr->QSR0;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800debe:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1490
  qbur0 = group_ptr->QBUR0;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800dec6:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1492

  if (qsr & (uint32_t)VADC_G_QSR0_EMPTY_Msk)
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	f003 0320 	and.w	r3, r3, #32
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d002      	beq.n	800ded8 <XMC_VADC_GROUP_QueueGetLength+0x28>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1494
  {
    length = 0U;
 800ded2:	2300      	movs	r3, #0
 800ded4:	617b      	str	r3, [r7, #20]
 800ded6:	e004      	b.n	800dee2 <XMC_VADC_GROUP_QueueGetLength+0x32>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1498
  }
  else
  {
    length = (qsr & (uint32_t)VADC_G_QSR0_FILL_Msk) + 1U;
 800ded8:	693b      	ldr	r3, [r7, #16]
 800deda:	f003 030f 	and.w	r3, r3, #15
 800dede:	3301      	adds	r3, #1
 800dee0:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1501
  }
  
  if (qbur0 & (uint32_t)VADC_G_QBUR0_V_Msk )
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d002      	beq.n	800def2 <XMC_VADC_GROUP_QueueGetLength+0x42>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1503
  {
    length++;
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	3301      	adds	r3, #1
 800def0:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1506
  }

  return length;
 800def2:	697b      	ldr	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1507
}
 800def4:	4618      	mov	r0, r3
 800def6:	371c      	adds	r7, #28
 800def8:	46bd      	mov	sp, r7
 800defa:	bc80      	pop	{r7}
 800defc:	4770      	bx	lr
 800defe:	bf00      	nop

0800df00 <XMC_VADC_GROUP_QueueAbortSequence>:
XMC_VADC_GROUP_QueueAbortSequence():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1511

/* API to abort ongoing conversion of a channel sequence */
void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b084      	sub	sp, #16
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1518
  bool arbitration_status;

  XMC_ASSERT("XMC_VADC_GROUP_QueueAbortSequence:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Disable any gating if present*/
  qctrl0 = group_ptr->QCTRL0;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800df0e:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1520

  group_ptr->QCTRL0 =(0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	4a14      	ldr	r2, [pc, #80]	; (800df64 <XMC_VADC_GROUP_QueueAbortSequence+0x64>)
 800df14:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1524
                                  (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_Msk );
  
  /* Disable the Arbitration 0 in the group before abort*/
  arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df1e:	0e1b      	lsrs	r3, r3, #24
 800df20:	f003 0301 	and.w	r3, r3, #1
 800df24:	2b00      	cmp	r3, #0
 800df26:	bf14      	ite	ne
 800df28:	2301      	movne	r3, #1
 800df2a:	2300      	moveq	r3, #0
 800df2c:	72fb      	strb	r3, [r7, #11]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1525
  XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f7ff f85c 	bl	800cfec <XMC_VADC_GROUP_QueueDisableArbitrationSlot>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1528
   
  /* Flush the Entries from queue*/
  XMC_VADC_GROUP_QueueFlushEntries(group_ptr);
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f7ff f86b 	bl	800d010 <XMC_VADC_GROUP_QueueFlushEntries>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1531
  
  /* Enable the arbitration slot 0*/
  group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800df40:	7afb      	ldrb	r3, [r7, #11]
 800df42:	061b      	lsls	r3, r3, #24
 800df44:	431a      	orrs	r2, r3
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1535
  
  /* Enable any disabled gating*/
  group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_Msk );
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800df52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1534
  
  /* Enable the arbitration slot 0*/
  group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
  
  /* Enable any disabled gating*/
  group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 800df56:	687a      	ldr	r2, [r7, #4]
 800df58:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1536
                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_Msk );
}
 800df5c:	bf00      	nop
 800df5e:	3710      	adds	r7, #16
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}
 800df64:	80808000 	.word	0x80808000

0800df68 <XMC_VADC_GROUP_QueueRemoveChannel>:
XMC_VADC_GROUP_QueueRemoveChannel():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1540

/* API to abort conversion of the channel queued up next */
void XMC_VADC_GROUP_QueueRemoveChannel(XMC_VADC_GROUP_t *const group_ptr)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b086      	sub	sp, #24
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1549
  bool arbitration_status;

  XMC_ASSERT("XMC_VADC_GROUP_QueueRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  
  /* Disable any gating if present*/
  qctrl0= group_ptr->QCTRL0;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800df76:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1551

  group_ptr->QCTRL0 =(0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	4a21      	ldr	r2, [pc, #132]	; (800e000 <XMC_VADC_GROUP_QueueRemoveChannel+0x98>)
 800df7c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1555
                                  (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_Msk );
  
  /* Disable the Arbitration 0 in the group before abort*/
  arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df86:	0e1b      	lsrs	r3, r3, #24
 800df88:	f003 0301 	and.w	r3, r3, #1
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	bf14      	ite	ne
 800df90:	2301      	movne	r3, #1
 800df92:	2300      	moveq	r3, #0
 800df94:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1556
  XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f7ff f828 	bl	800cfec <XMC_VADC_GROUP_QueueDisableArbitrationSlot>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1558

  length_before_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f7ff ff87 	bl	800deb0 <XMC_VADC_GROUP_QueueGetLength>
 800dfa2:	60b8      	str	r0, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1560

  if (length_before_abort)
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d014      	beq.n	800dfd4 <XMC_VADC_GROUP_QueueRemoveChannel+0x6c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1563
  {
    /* Remove the first entry of the queue */
    group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_CLRV_Msk;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800dfb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1565

    length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f7ff ff78 	bl	800deb0 <XMC_VADC_GROUP_QueueGetLength>
 800dfc0:	6178      	str	r0, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1568

    /* Loop until a reduction in queue length is assessed */
    while(length_after_abort == length_before_abort)
 800dfc2:	e003      	b.n	800dfcc <XMC_VADC_GROUP_QueueRemoveChannel+0x64>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1570
    {
      length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f7ff ff73 	bl	800deb0 <XMC_VADC_GROUP_QueueGetLength>
 800dfca:	6178      	str	r0, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1568
    group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_CLRV_Msk;

    length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);

    /* Loop until a reduction in queue length is assessed */
    while(length_after_abort == length_before_abort)
 800dfcc:	697a      	ldr	r2, [r7, #20]
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	429a      	cmp	r2, r3
 800dfd2:	d0f7      	beq.n	800dfc4 <XMC_VADC_GROUP_QueueRemoveChannel+0x5c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1574
    {
      length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
    }
  }
  /* Enable the arbitration slot 0*/
  group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800dfda:	7bfb      	ldrb	r3, [r7, #15]
 800dfdc:	061b      	lsls	r3, r3, #24
 800dfde:	431a      	orrs	r2, r3
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1578
  
  /* Enable any disabled gating*/
  group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_Msk );
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800dfec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1577
  }
  /* Enable the arbitration slot 0*/
  group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
  
  /* Enable any disabled gating*/
  group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1579
                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_Msk );
}
 800dff6:	bf00      	nop
 800dff8:	3718      	adds	r7, #24
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	bf00      	nop
 800e000:	80808000 	.word	0x80808000

0800e004 <XMC_VADC_GROUP_QueueGetNextChannel>:
XMC_VADC_GROUP_QueueGetNextChannel():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1583

/* Get details of channel meant to be converted right after the ongoing conversion */
int32_t XMC_VADC_GROUP_QueueGetNextChannel(XMC_VADC_GROUP_t *const group_ptr)
{
 800e004:	b480      	push	{r7}
 800e006:	b085      	sub	sp, #20
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1592
  
  /*
   * Check if there is something in the backup stage. If not, read queue-0
   * entry.
   */
  if ( (group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800e012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e016:	2b00      	cmp	r3, #0
 800e018:	d006      	beq.n	800e028 <XMC_VADC_GROUP_QueueGetNextChannel+0x24>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1594
  {
    ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800e020:	f003 031f 	and.w	r3, r3, #31
 800e024:	60fb      	str	r3, [r7, #12]
 800e026:	e010      	b.n	800e04a <XMC_VADC_GROUP_QueueGetNextChannel+0x46>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1596
  }
  else if ( (group_ptr->Q0R0) & (uint32_t)VADC_G_Q0R0_V_Msk)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800e02e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e032:	2b00      	cmp	r3, #0
 800e034:	d006      	beq.n	800e044 <XMC_VADC_GROUP_QueueGetNextChannel+0x40>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1598
  {
    ch_num = (int32_t)(group_ptr->Q0R0 & (uint32_t)VADC_G_Q0R0_REQCHNR_Msk);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800e03c:	f003 031f 	and.w	r3, r3, #31
 800e040:	60fb      	str	r3, [r7, #12]
 800e042:	e002      	b.n	800e04a <XMC_VADC_GROUP_QueueGetNextChannel+0x46>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1603
  }
  else
  {
    /* Nothing is pending */
    ch_num = -1;
 800e044:	f04f 33ff 	mov.w	r3, #4294967295
 800e048:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1606
  }

  return ch_num;
 800e04a:	68fb      	ldr	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1607
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3714      	adds	r7, #20
 800e050:	46bd      	mov	sp, r7
 800e052:	bc80      	pop	{r7}
 800e054:	4770      	bx	lr
 800e056:	bf00      	nop

0800e058 <XMC_VADC_GROUP_QueueGetInterruptedChannel>:
XMC_VADC_GROUP_QueueGetInterruptedChannel():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1611

/* Get the channel number of the channel whose conversion had been interrupted */
int32_t XMC_VADC_GROUP_QueueGetInterruptedChannel(XMC_VADC_GROUP_t *const group_ptr)
{
 800e058:	b480      	push	{r7}
 800e05a:	b085      	sub	sp, #20
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1616
  int32_t ch_num;

  XMC_ASSERT("XMC_VADC_GROUP_QueueGetInterruptedChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  
  if ((group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800e066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d006      	beq.n	800e07c <XMC_VADC_GROUP_QueueGetInterruptedChannel+0x24>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1618
  {
    ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800e074:	f003 031f 	and.w	r3, r3, #31
 800e078:	60fb      	str	r3, [r7, #12]
 800e07a:	e002      	b.n	800e082 <XMC_VADC_GROUP_QueueGetInterruptedChannel+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1623
  }
  else
  {
    /* No such channel */
    ch_num = -1;
 800e07c:	f04f 33ff 	mov.w	r3, #4294967295
 800e080:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1626
  }

  return ch_num;
 800e082:	68fb      	ldr	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1627
}
 800e084:	4618      	mov	r0, r3
 800e086:	3714      	adds	r7, #20
 800e088:	46bd      	mov	sp, r7
 800e08a:	bc80      	pop	{r7}
 800e08c:	4770      	bx	lr
 800e08e:	bf00      	nop

0800e090 <XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode>:
XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1631

/* Select a Service Request line for the request source event */
void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SR_t sr)
{
 800e090:	b480      	push	{r7}
 800e092:	b085      	sub	sp, #20
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	460b      	mov	r3, r1
 800e09a:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1637
  uint32_t sevnp;

  XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  sevnp = group_ptr->SEVNP;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800e0a2:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1639

  sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV0NP_Msk);
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	f023 030f 	bic.w	r3, r3, #15
 800e0aa:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1640
  sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV0NP_Pos);
 800e0ac:	78fb      	ldrb	r3, [r7, #3]
 800e0ae:	68fa      	ldr	r2, [r7, #12]
 800e0b0:	4313      	orrs	r3, r2
 800e0b2:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1642

  group_ptr->SEVNP = sevnp;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	68fa      	ldr	r2, [r7, #12]
 800e0b8:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1644

}
 800e0bc:	bf00      	nop
 800e0be:	3714      	adds	r7, #20
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bc80      	pop	{r7}
 800e0c4:	4770      	bx	lr
 800e0c6:	bf00      	nop

0800e0c8 <XMC_VADC_GROUP_ChannelInit>:
XMC_VADC_GROUP_ChannelInit():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1651

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 800e0c8:	b480      	push	{r7}
 800e0ca:	b089      	sub	sp, #36	; 0x24
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	60f8      	str	r0, [r7, #12]
 800e0d0:	60b9      	str	r1, [r7, #8]
 800e0d2:	607a      	str	r2, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1660


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	7a1b      	ldrb	r3, [r3, #8]
 800e0d8:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1663

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0e0:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1664
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	fa02 f303 	lsl.w	r3, r2, r3
 800e0ea:	43db      	mvns	r3, r3
 800e0ec:	697a      	ldr	r2, [r7, #20]
 800e0ee:	4013      	ands	r3, r2
 800e0f0:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1665
  ch_assign |= (uint32_t)(prio << ch_num);
 800e0f2:	69ba      	ldr	r2, [r7, #24]
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	fa02 f303 	lsl.w	r3, r2, r3
 800e0fa:	697a      	ldr	r2, [r7, #20]
 800e0fc:	4313      	orrs	r3, r2
 800e0fe:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1666
  group_ptr->CHASS = ch_assign;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	697a      	ldr	r2, [r7, #20]
 800e104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1669

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	db2a      	blt.n	800e168 <XMC_VADC_GROUP_ChannelInit+0xa0>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1671
  {
    mask = (uint32_t)0;
 800e112:	2300      	movs	r3, #0
 800e114:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1672
    if ((uint32_t)1 == ch_num)
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	2b01      	cmp	r3, #1
 800e11a:	d10a      	bne.n	800e132 <XMC_VADC_GROUP_ChannelInit+0x6a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1674
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 800e11c:	2308      	movs	r3, #8
 800e11e:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1675
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e126:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800e130:	e00c      	b.n	800e14c <XMC_VADC_GROUP_ChannelInit+0x84>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1677
    }
    else if ((uint32_t)0 == ch_num)
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d109      	bne.n	800e14c <XMC_VADC_GROUP_ChannelInit+0x84>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1679
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 800e138:	2300      	movs	r3, #0
 800e13a:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1680
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e142:	f023 021f 	bic.w	r2, r3, #31
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1683
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e152:	687a      	ldr	r2, [r7, #4]
 800e154:	f992 2009 	ldrsb.w	r2, [r2, #9]
 800e158:	4611      	mov	r1, r2
 800e15a:	69fa      	ldr	r2, [r7, #28]
 800e15c:	fa01 f202 	lsl.w	r2, r1, r2
 800e160:	431a      	orrs	r2, r3
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1686
  }

  group_ptr->BFL |= config->bfl;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	685b      	ldr	r3, [r3, #4]
 800e172:	431a      	orrs	r2, r3
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1692

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6819      	ldr	r1, [r3, #0]
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	68ba      	ldr	r2, [r7, #8]
 800e182:	3280      	adds	r2, #128	; 0x80
 800e184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1694

}
 800e188:	bf00      	nop
 800e18a:	3724      	adds	r7, #36	; 0x24
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bc80      	pop	{r7}
 800e190:	4770      	bx	lr
 800e192:	bf00      	nop

0800e194 <XMC_VADC_GROUP_SetChannelAlias>:
XMC_VADC_GROUP_SetChannelAlias():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1700

/* API to set an alias channel for channels numbered 2 through 7 */
void XMC_VADC_GROUP_SetChannelAlias(XMC_VADC_GROUP_t *const group_ptr,
                                    const uint32_t src_ch_num,
                                    const uint32_t alias_ch_num)
{
 800e194:	b480      	push	{r7}
 800e196:	b089      	sub	sp, #36	; 0x24
 800e198:	af00      	add	r7, sp, #0
 800e19a:	60f8      	str	r0, [r7, #12]
 800e19c:	60b9      	str	r1, [r7, #8]
 800e19e:	607a      	str	r2, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1709

  XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Alias Channel", ((alias_ch_num == 0)|| (alias_ch_num == 1U)))
  XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Aliased Channel", ((src_ch_num < 8U)))

  alias = group_ptr->ALIAS;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e1a6:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1711

  if (0U == alias_ch_num)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d104      	bne.n	800e1b8 <XMC_VADC_GROUP_SetChannelAlias+0x24>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1713
  {
    mask = (uint32_t) VADC_G_ALIAS_ALIAS0_Msk;
 800e1ae:	231f      	movs	r3, #31
 800e1b0:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1714
    pos  = (uint32_t) VADC_G_ALIAS_ALIAS0_Pos;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	61bb      	str	r3, [r7, #24]
 800e1b6:	e004      	b.n	800e1c2 <XMC_VADC_GROUP_SetChannelAlias+0x2e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1718
  }
  else
  {
    mask = (uint32_t) VADC_G_ALIAS_ALIAS1_Msk;
 800e1b8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800e1bc:	61fb      	str	r3, [r7, #28]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1719
    pos  = (uint32_t) VADC_G_ALIAS_ALIAS1_Pos;
 800e1be:	2308      	movs	r3, #8
 800e1c0:	61bb      	str	r3, [r7, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1721
  }
  alias &= ~mask;
 800e1c2:	69fb      	ldr	r3, [r7, #28]
 800e1c4:	43db      	mvns	r3, r3
 800e1c6:	697a      	ldr	r2, [r7, #20]
 800e1c8:	4013      	ands	r3, r2
 800e1ca:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1722
  alias |= (uint32_t)(src_ch_num << pos);
 800e1cc:	68ba      	ldr	r2, [r7, #8]
 800e1ce:	69bb      	ldr	r3, [r7, #24]
 800e1d0:	fa02 f303 	lsl.w	r3, r2, r3
 800e1d4:	697a      	ldr	r2, [r7, #20]
 800e1d6:	4313      	orrs	r3, r2
 800e1d8:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1724

  group_ptr->ALIAS = alias;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	697a      	ldr	r2, [r7, #20]
 800e1de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1725
}
 800e1e2:	bf00      	nop
 800e1e4:	3724      	adds	r7, #36	; 0x24
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bc80      	pop	{r7}
 800e1ea:	4770      	bx	lr

0800e1ec <XMC_VADC_GROUP_ChannelIsResultOutOfBounds>:
XMC_VADC_GROUP_ChannelIsResultOutOfBounds():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1729

/* API to determine whether input to a channel has violated boundary conditions */
bool XMC_VADC_GROUP_ChannelIsResultOutOfBounds(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b087      	sub	sp, #28
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1738

  XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  retval = (bool)false;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1744
  /*
    Check if the Channel event is configured to be generated in the event of
    boundary violation and if affirmative, check if the channel event is set.
  */
  /* Extract CHEVMODE for requested channel */
  chctr  = group_ptr->CHCTR[ch_num];
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	683a      	ldr	r2, [r7, #0]
 800e1fe:	3280      	adds	r2, #128	; 0x80
 800e200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e204:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1745
  chctr  = (uint32_t)(chctr >> (uint32_t)VADC_G_CHCTR_CHEVMODE_Pos)& (uint32_t)0x3;
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	0a1b      	lsrs	r3, r3, #8
 800e20a:	f003 0303 	and.w	r3, r3, #3
 800e20e:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1748

  /* Extract CEFLAG for the requested channel */
  ceflag = group_ptr->CEFLAG;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800e216:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1749
  ceflag = ceflag & ((uint32_t)((uint32_t)1 << ch_num) );
 800e218:	2201      	movs	r2, #1
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	fa02 f303 	lsl.w	r3, r2, r3
 800e220:	68fa      	ldr	r2, [r7, #12]
 800e222:	4013      	ands	r3, r2
 800e224:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1752

  /* Check what was the channel event generation criteria */
  if ( (( (uint32_t)XMC_VADC_CHANNEL_EVGEN_INBOUND == chctr) \
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	2b01      	cmp	r3, #1
 800e22a:	d002      	beq.n	800e232 <XMC_VADC_GROUP_ChannelIsResultOutOfBounds+0x46>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1753
      || ((uint32_t) XMC_VADC_CHANNEL_EVGEN_OUTBOUND == chctr)) && (ceflag) )
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	2b02      	cmp	r3, #2
 800e230:	d104      	bne.n	800e23c <XMC_VADC_GROUP_ChannelIsResultOutOfBounds+0x50>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1753 (discriminator 1)
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d001      	beq.n	800e23c <XMC_VADC_GROUP_ChannelIsResultOutOfBounds+0x50>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1755
  {
    retval = (bool)true;
 800e238:	2301      	movs	r3, #1
 800e23a:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1758
  }

  return retval;
 800e23c:	7dfb      	ldrb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1759
}
 800e23e:	4618      	mov	r0, r3
 800e240:	371c      	adds	r7, #28
 800e242:	46bd      	mov	sp, r7
 800e244:	bc80      	pop	{r7}
 800e246:	4770      	bx	lr

0800e248 <XMC_VADC_GROUP_ChannelSetInputReference>:
XMC_VADC_GROUP_ChannelSetInputReference():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1765

/* Set a reference voltage for conversion */
void XMC_VADC_GROUP_ChannelSetInputReference(XMC_VADC_GROUP_t *const group_ptr,
                                             const uint32_t ch_num,
                                             const XMC_VADC_CHANNEL_REF_t ref)
{
 800e248:	b480      	push	{r7}
 800e24a:	b087      	sub	sp, #28
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	60f8      	str	r0, [r7, #12]
 800e250:	60b9      	str	r1, [r7, #8]
 800e252:	4613      	mov	r3, r2
 800e254:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1771
  uint32_t chctr;
  XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Voltage Reference", ((ref)<= XMC_VADC_CHANNEL_REF_ALT_CH0))

  chctr = group_ptr->CHCTR[ch_num];
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	68ba      	ldr	r2, [r7, #8]
 800e25a:	3280      	adds	r2, #128	; 0x80
 800e25c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e260:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1772
  chctr &= ~((uint32_t)VADC_G_CHCTR_REFSEL_Msk);
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e268:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1773
  chctr |= (uint32_t)((uint32_t)ref <<  VADC_G_CHCTR_REFSEL_Pos);
 800e26a:	79fb      	ldrb	r3, [r7, #7]
 800e26c:	02db      	lsls	r3, r3, #11
 800e26e:	697a      	ldr	r2, [r7, #20]
 800e270:	4313      	orrs	r3, r2
 800e272:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1775

  group_ptr->CHCTR[ch_num] = chctr;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	68ba      	ldr	r2, [r7, #8]
 800e278:	3280      	adds	r2, #128	; 0x80
 800e27a:	6979      	ldr	r1, [r7, #20]
 800e27c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1776
}
 800e280:	bf00      	nop
 800e282:	371c      	adds	r7, #28
 800e284:	46bd      	mov	sp, r7
 800e286:	bc80      	pop	{r7}
 800e288:	4770      	bx	lr
 800e28a:	bf00      	nop

0800e28c <XMC_VADC_GROUP_ChannelSetResultRegister>:
XMC_VADC_GROUP_ChannelSetResultRegister():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1782

/* API to select one of the available 16 registers for storing the channel result */
void XMC_VADC_GROUP_ChannelSetResultRegister(XMC_VADC_GROUP_t *const group_ptr,
                                             const uint32_t ch_num,
                                             const uint32_t result_reg_num)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b087      	sub	sp, #28
 800e290:	af00      	add	r7, sp, #0
 800e292:	60f8      	str	r0, [r7, #12]
 800e294:	60b9      	str	r1, [r7, #8]
 800e296:	607a      	str	r2, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1791
  XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Result Register",
             ((result_reg_num) < XMC_VADC_NUM_RESULT_REGISTERS))

  chctr = group_ptr->CHCTR[ch_num];
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	68ba      	ldr	r2, [r7, #8]
 800e29c:	3280      	adds	r2, #128	; 0x80
 800e29e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2a2:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1792
  chctr &= ~((uint32_t)VADC_G_CHCTR_RESREG_Msk);
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800e2aa:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1793
  chctr |= (uint32_t)(result_reg_num <<  VADC_G_CHCTR_RESREG_Pos);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	041b      	lsls	r3, r3, #16
 800e2b0:	697a      	ldr	r2, [r7, #20]
 800e2b2:	4313      	orrs	r3, r2
 800e2b4:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1795

  group_ptr->CHCTR[ch_num] = chctr;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	68ba      	ldr	r2, [r7, #8]
 800e2ba:	3280      	adds	r2, #128	; 0x80
 800e2bc:	6979      	ldr	r1, [r7, #20]
 800e2be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1796
}
 800e2c2:	bf00      	nop
 800e2c4:	371c      	adds	r7, #28
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bc80      	pop	{r7}
 800e2ca:	4770      	bx	lr

0800e2cc <XMC_VADC_GROUP_ChannelSetIclass>:
XMC_VADC_GROUP_ChannelSetIclass():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1802

/* API to select one of the available 4 class conversion */
void XMC_VADC_GROUP_ChannelSetIclass(XMC_VADC_GROUP_t *const group_ptr,
                                     const uint32_t ch_num,
                                     const XMC_VADC_CHANNEL_CONV_t conversion_class)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b087      	sub	sp, #28
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	60f8      	str	r0, [r7, #12]
 800e2d4:	60b9      	str	r1, [r7, #8]
 800e2d6:	4613      	mov	r3, r2
 800e2d8:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1812
  XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong input class ",
             (XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1 >= conversion_class))

  chctr = group_ptr->CHCTR[ch_num];
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	68ba      	ldr	r2, [r7, #8]
 800e2de:	3280      	adds	r2, #128	; 0x80
 800e2e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2e4:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1813
  chctr &= ~((uint32_t)VADC_G_CHCTR_ICLSEL_Msk);
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	f023 0303 	bic.w	r3, r3, #3
 800e2ec:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1814
  chctr |= (uint32_t)((uint32_t)conversion_class <<  (uint32_t)VADC_G_CHCTR_ICLSEL_Pos);
 800e2ee:	79fb      	ldrb	r3, [r7, #7]
 800e2f0:	697a      	ldr	r2, [r7, #20]
 800e2f2:	4313      	orrs	r3, r2
 800e2f4:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1816

  group_ptr->CHCTR[ch_num] = chctr;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	68ba      	ldr	r2, [r7, #8]
 800e2fa:	3280      	adds	r2, #128	; 0x80
 800e2fc:	6979      	ldr	r1, [r7, #20]
 800e2fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1818

}
 800e302:	bf00      	nop
 800e304:	371c      	adds	r7, #28
 800e306:	46bd      	mov	sp, r7
 800e308:	bc80      	pop	{r7}
 800e30a:	4770      	bx	lr

0800e30c <XMC_VADC_GROUP_ChannelGetResultRegister>:
XMC_VADC_GROUP_ChannelGetResultRegister():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1822

/* API to retrieve the result register bound with specified channel */
uint8_t XMC_VADC_GROUP_ChannelGetResultRegister(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)
{
 800e30c:	b480      	push	{r7}
 800e30e:	b085      	sub	sp, #20
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
 800e314:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1829

  XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  resreg = (uint8_t)((group_ptr->CHCTR[ch_num] & (uint32_t)VADC_G_CHCTR_RESREG_Msk) >> VADC_G_CHCTR_RESREG_Pos) ;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	683a      	ldr	r2, [r7, #0]
 800e31a:	3280      	adds	r2, #128	; 0x80
 800e31c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e320:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800e324:	0c1b      	lsrs	r3, r3, #16
 800e326:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1831

  return resreg;
 800e328:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1832
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3714      	adds	r7, #20
 800e32e:	46bd      	mov	sp, r7
 800e330:	bc80      	pop	{r7}
 800e332:	4770      	bx	lr

0800e334 <XMC_VADC_GROUP_ChannelTriggerEvent>:
XMC_VADC_GROUP_ChannelTriggerEvent():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1836

/* API to manually assert channel event */
void XMC_VADC_GROUP_ChannelTriggerEvent(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)
{
 800e334:	b480      	push	{r7}
 800e336:	b085      	sub	sp, #20
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1842
  uint32_t ceflag;

  XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  ceflag  = group_ptr->CEFLAG;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800e344:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1843
  ceflag |= (uint32_t)((uint32_t)1 << ch_num);
 800e346:	2201      	movs	r2, #1
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	fa02 f303 	lsl.w	r3, r2, r3
 800e34e:	68fa      	ldr	r2, [r7, #12]
 800e350:	4313      	orrs	r3, r2
 800e352:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1844
  group_ptr->CEFLAG = ceflag;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	68fa      	ldr	r2, [r7, #12]
 800e358:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1845
}
 800e35c:	bf00      	nop
 800e35e:	3714      	adds	r7, #20
 800e360:	46bd      	mov	sp, r7
 800e362:	bc80      	pop	{r7}
 800e364:	4770      	bx	lr
 800e366:	bf00      	nop

0800e368 <XMC_VADC_GROUP_ChannelSetEventInterruptNode>:
XMC_VADC_GROUP_ChannelSetEventInterruptNode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1851

/* API to bind channel event with a service request (NVIC Node) */
void XMC_VADC_GROUP_ChannelSetEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
                                                 const uint32_t ch_num,
                                                 const XMC_VADC_SR_t sr)
{
 800e368:	b480      	push	{r7}
 800e36a:	b087      	sub	sp, #28
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	60f8      	str	r0, [r7, #12]
 800e370:	60b9      	str	r1, [r7, #8]
 800e372:	4613      	mov	r3, r2
 800e374:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1859
  XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  route_mask  = group_ptr->CEVNP0;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800e37c:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1860
  route_mask &= ~((uint32_t)15 << (ch_num * (uint32_t)4));
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	009b      	lsls	r3, r3, #2
 800e382:	220f      	movs	r2, #15
 800e384:	fa02 f303 	lsl.w	r3, r2, r3
 800e388:	43db      	mvns	r3, r3
 800e38a:	697a      	ldr	r2, [r7, #20]
 800e38c:	4013      	ands	r3, r2
 800e38e:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1861
  route_mask |= (uint32_t)( (uint32_t)sr << (ch_num * (uint32_t)4));
 800e390:	79fa      	ldrb	r2, [r7, #7]
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	009b      	lsls	r3, r3, #2
 800e396:	fa02 f303 	lsl.w	r3, r2, r3
 800e39a:	697a      	ldr	r2, [r7, #20]
 800e39c:	4313      	orrs	r3, r2
 800e39e:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1862
  group_ptr->CEVNP0 = route_mask;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	697a      	ldr	r2, [r7, #20]
 800e3a4:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1863
}
 800e3a8:	bf00      	nop
 800e3aa:	371c      	adds	r7, #28
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bc80      	pop	{r7}
 800e3b0:	4770      	bx	lr
 800e3b2:	bf00      	nop

0800e3b4 <XMC_VADC_GROUP_ChannelTriggerEventGenCriteria>:
XMC_VADC_GROUP_ChannelTriggerEventGenCriteria():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1869

/* API to configure conditions for generation of channel event */
void XMC_VADC_GROUP_ChannelTriggerEventGenCriteria( XMC_VADC_GROUP_t *const group_ptr,
                                                   const uint32_t ch_num,
                                                   const XMC_VADC_CHANNEL_EVGEN_t criteria)
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	b087      	sub	sp, #28
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	60f8      	str	r0, [r7, #12]
 800e3bc:	60b9      	str	r1, [r7, #8]
 800e3be:	4613      	mov	r3, r2
 800e3c0:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1878
  XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Event Generation Criteria",
             ((criteria) <= XMC_VADC_CHANNEL_EVGEN_ALWAYS))

  chctr  = group_ptr->CHCTR[ch_num];
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	68ba      	ldr	r2, [r7, #8]
 800e3c6:	3280      	adds	r2, #128	; 0x80
 800e3c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3cc:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1879
  chctr &= ~((uint32_t)VADC_G_CHCTR_CHEVMODE_Msk);
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e3d4:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1880
  chctr |= (uint32_t)((uint32_t)criteria << VADC_G_CHCTR_CHEVMODE_Pos);
 800e3d6:	79fb      	ldrb	r3, [r7, #7]
 800e3d8:	021b      	lsls	r3, r3, #8
 800e3da:	697a      	ldr	r2, [r7, #20]
 800e3dc:	4313      	orrs	r3, r2
 800e3de:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1881
  group_ptr->CHCTR[ch_num] = chctr;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	68ba      	ldr	r2, [r7, #8]
 800e3e4:	3280      	adds	r2, #128	; 0x80
 800e3e6:	6979      	ldr	r1, [r7, #20]
 800e3e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1882
}
 800e3ec:	bf00      	nop
 800e3ee:	371c      	adds	r7, #28
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bc80      	pop	{r7}
 800e3f4:	4770      	bx	lr
 800e3f6:	bf00      	nop

0800e3f8 <XMC_VADC_GROUP_ChannelSetBoundarySelection>:
XMC_VADC_GROUP_ChannelSetBoundarySelection():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1889
/* API to configure the boundary selection */
void  XMC_VADC_GROUP_ChannelSetBoundarySelection(XMC_VADC_GROUP_t *const group_ptr,
                                                 const uint32_t ch_num,
                                                 XMC_VADC_BOUNDARY_SELECT_t boundary_sel,
                                                 XMC_VADC_CHANNEL_BOUNDARY_t selection)
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b085      	sub	sp, #20
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	60f8      	str	r0, [r7, #12]
 800e400:	60b9      	str	r1, [r7, #8]
 800e402:	4611      	mov	r1, r2
 800e404:	461a      	mov	r2, r3
 800e406:	460b      	mov	r3, r1
 800e408:	71fb      	strb	r3, [r7, #7]
 800e40a:	4613      	mov	r3, r2
 800e40c:	71bb      	strb	r3, [r7, #6]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1894
  XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Channel Number",
              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_BNDSELL_Msk << boundary_sel);
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	68ba      	ldr	r2, [r7, #8]
 800e412:	3280      	adds	r2, #128	; 0x80
 800e414:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e418:	79fb      	ldrb	r3, [r7, #7]
 800e41a:	2130      	movs	r1, #48	; 0x30
 800e41c:	fa01 f303 	lsl.w	r3, r1, r3
 800e420:	43db      	mvns	r3, r3
 800e422:	ea02 0103 	and.w	r1, r2, r3
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	68ba      	ldr	r2, [r7, #8]
 800e42a:	3280      	adds	r2, #128	; 0x80
 800e42c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1895
  group_ptr->CHCTR[ch_num] |= (selection<< ((uint32_t)VADC_G_CHCTR_BNDSELL_Pos + (uint32_t)boundary_sel));
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	68ba      	ldr	r2, [r7, #8]
 800e434:	3280      	adds	r2, #128	; 0x80
 800e436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e43a:	79b9      	ldrb	r1, [r7, #6]
 800e43c:	79fa      	ldrb	r2, [r7, #7]
 800e43e:	3204      	adds	r2, #4
 800e440:	fa01 f202 	lsl.w	r2, r1, r2
 800e444:	ea43 0102 	orr.w	r1, r3, r2
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	68ba      	ldr	r2, [r7, #8]
 800e44c:	3280      	adds	r2, #128	; 0x80
 800e44e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1896
}
 800e452:	bf00      	nop
 800e454:	3714      	adds	r7, #20
 800e456:	46bd      	mov	sp, r7
 800e458:	bc80      	pop	{r7}
 800e45a:	4770      	bx	lr

0800e45c <XMC_VADC_GROUP_AddResultToFifo>:
XMC_VADC_GROUP_AddResultToFifo():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1900

/* Make the specified result register part of Result FIFO */ 
void XMC_VADC_GROUP_AddResultToFifo(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)
{
 800e45c:	b480      	push	{r7}
 800e45e:	b085      	sub	sp, #20
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1907

  XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  /* Extract and clear the FIFO enable field */
  fen = group_ptr->RCR[res_reg];
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	683a      	ldr	r2, [r7, #0]
 800e46a:	32a0      	adds	r2, #160	; 0xa0
 800e46c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e470:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1908
  fen &= ~((uint32_t)VADC_G_RCR_FEN_Msk);
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800e478:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1910
  /* Set this register up as a FIFO member */
  fen |= (uint32_t)((uint32_t)1 << VADC_G_RCR_FEN_Pos);
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e480:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1911
  group_ptr->RCR[res_reg] = fen;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	683a      	ldr	r2, [r7, #0]
 800e486:	32a0      	adds	r2, #160	; 0xa0
 800e488:	68f9      	ldr	r1, [r7, #12]
 800e48a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1912
}
 800e48e:	bf00      	nop
 800e490:	3714      	adds	r7, #20
 800e492:	46bd      	mov	sp, r7
 800e494:	bc80      	pop	{r7}
 800e496:	4770      	bx	lr

0800e498 <XMC_VADC_GROUP_SetResultFastCompareValue>:
XMC_VADC_GROUP_SetResultFastCompareValue():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1919

/* Applicable to fast compare mode, this API sets up the value which is to be compared against conversion result */
void XMC_VADC_GROUP_SetResultFastCompareValue(XMC_VADC_GROUP_t *const group_ptr,
                                              const uint32_t res_reg,
                                              const XMC_VADC_RESULT_SIZE_t compare_val)
{
 800e498:	b480      	push	{r7}
 800e49a:	b087      	sub	sp, #28
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	60f8      	str	r0, [r7, #12]
 800e4a0:	60b9      	str	r1, [r7, #8]
 800e4a2:	4613      	mov	r3, r2
 800e4a4:	80fb      	strh	r3, [r7, #6]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1920
  uint32_t res = group_ptr->RES[res_reg];
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	68ba      	ldr	r2, [r7, #8]
 800e4aa:	32c0      	adds	r2, #192	; 0xc0
 800e4ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4b0:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1926

  XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Result Register",
            ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	0c1b      	lsrs	r3, r3, #16
 800e4b6:	041b      	lsls	r3, r3, #16
 800e4b8:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1927
  res |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 800e4ba:	88fb      	ldrh	r3, [r7, #6]
 800e4bc:	009b      	lsls	r3, r3, #2
 800e4be:	697a      	ldr	r2, [r7, #20]
 800e4c0:	4313      	orrs	r3, r2
 800e4c2:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1928
  group_ptr->RES[res_reg] = res;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	68ba      	ldr	r2, [r7, #8]
 800e4c8:	32c0      	adds	r2, #192	; 0xc0
 800e4ca:	6979      	ldr	r1, [r7, #20]
 800e4cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1929
}
 800e4d0:	bf00      	nop
 800e4d2:	371c      	adds	r7, #28
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bc80      	pop	{r7}
 800e4d8:	4770      	bx	lr
 800e4da:	bf00      	nop

0800e4dc <XMC_VADC_GROUP_GetFastCompareResult>:
XMC_VADC_GROUP_GetFastCompareResult():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1933

/* API to retrieve the result of fast mode comparison */
XMC_VADC_FAST_COMPARE_t XMC_VADC_GROUP_GetFastCompareResult(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b085      	sub	sp, #20
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
 800e4e4:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1940
  uint32_t res;

  XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  res = group_ptr->RES[res_reg];
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	683a      	ldr	r2, [r7, #0]
 800e4ea:	32c0      	adds	r2, #192	; 0xc0
 800e4ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4f0:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1942

  if (res & (uint32_t)VADC_G_RES_VF_Msk)
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	da06      	bge.n	800e506 <XMC_VADC_GROUP_GetFastCompareResult+0x2a>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1944
  {
    result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_G_RES_FCR_Pos) & (uint32_t)1);
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	0f9b      	lsrs	r3, r3, #30
 800e4fc:	b2db      	uxtb	r3, r3
 800e4fe:	f003 0301 	and.w	r3, r3, #1
 800e502:	73fb      	strb	r3, [r7, #15]
 800e504:	e001      	b.n	800e50a <XMC_VADC_GROUP_GetFastCompareResult+0x2e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1948
  }
  else
  {
    result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 800e506:	2302      	movs	r3, #2
 800e508:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1951
  }

  return result;
 800e50a:	7bfb      	ldrb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1952
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3714      	adds	r7, #20
 800e510:	46bd      	mov	sp, r7
 800e512:	bc80      	pop	{r7}
 800e514:	4770      	bx	lr
 800e516:	bf00      	nop

0800e518 <XMC_VADC_GROUP_SetResultSubtractionValue>:
XMC_VADC_GROUP_SetResultSubtractionValue():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1957

/* Applicable to fast compare mode, this API sets up the value which is to be compared against conversion result */
void XMC_VADC_GROUP_SetResultSubtractionValue(XMC_VADC_GROUP_t *const group_ptr,
                                              const uint16_t subtraction_val)
{
 800e518:	b480      	push	{r7}
 800e51a:	b085      	sub	sp, #20
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	460b      	mov	r3, r1
 800e522:	807b      	strh	r3, [r7, #2]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1962
  uint32_t res;

  XMC_ASSERT("XMC_VADC_GROUP_SetResultSubtractionValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  res = group_ptr->RES[0];
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e52a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1963
  res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	0c1b      	lsrs	r3, r3, #16
 800e530:	041b      	lsls	r3, r3, #16
 800e532:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1964
  res |= (uint32_t)subtraction_val;
 800e534:	887b      	ldrh	r3, [r7, #2]
 800e536:	68fa      	ldr	r2, [r7, #12]
 800e538:	4313      	orrs	r3, r2
 800e53a:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1965
  group_ptr->RES[0] = res;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	68fa      	ldr	r2, [r7, #12]
 800e540:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1966
}
 800e544:	bf00      	nop
 800e546:	3714      	adds	r7, #20
 800e548:	46bd      	mov	sp, r7
 800e54a:	bc80      	pop	{r7}
 800e54c:	4770      	bx	lr
 800e54e:	bf00      	nop

0800e550 <XMC_VADC_GROUP_SetResultInterruptNode>:
XMC_VADC_GROUP_SetResultInterruptNode():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1973

/* API to select a service request line (NVIC Node) for result event of specified unit of result hardware */
void XMC_VADC_GROUP_SetResultInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
                                           const uint32_t res_reg,
                                           const XMC_VADC_SR_t sr)
{
 800e550:	b480      	push	{r7}
 800e552:	b087      	sub	sp, #28
 800e554:	af00      	add	r7, sp, #0
 800e556:	60f8      	str	r0, [r7, #12]
 800e558:	60b9      	str	r1, [r7, #8]
 800e55a:	4613      	mov	r3, r2
 800e55c:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1980

  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  if (res_reg <= 7U)
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	2b07      	cmp	r3, #7
 800e562:	d819      	bhi.n	800e598 <XMC_VADC_GROUP_SetResultInterruptNode+0x48>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1982
  {
    route_mask  = group_ptr->REVNP0;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800e56a:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1983
    route_mask &= ~((uint32_t)((uint32_t)15 << (res_reg * (uint32_t)4) ));
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	009b      	lsls	r3, r3, #2
 800e570:	220f      	movs	r2, #15
 800e572:	fa02 f303 	lsl.w	r3, r2, r3
 800e576:	43db      	mvns	r3, r3
 800e578:	697a      	ldr	r2, [r7, #20]
 800e57a:	4013      	ands	r3, r2
 800e57c:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1984
    route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
 800e57e:	79fa      	ldrb	r2, [r7, #7]
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	009b      	lsls	r3, r3, #2
 800e584:	fa02 f303 	lsl.w	r3, r2, r3
 800e588:	697a      	ldr	r2, [r7, #20]
 800e58a:	4313      	orrs	r3, r2
 800e58c:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1985
    group_ptr->REVNP0 = route_mask;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	697a      	ldr	r2, [r7, #20]
 800e592:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1994
    route_mask = group_ptr->REVNP1;
    route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
    route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
    group_ptr->REVNP1 = route_mask;
  }
}
 800e596:	e01e      	b.n	800e5d6 <XMC_VADC_GROUP_SetResultInterruptNode+0x86>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1989
    route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
    group_ptr->REVNP0 = route_mask;
  }
  else
  {
    route_mask = group_ptr->REVNP1;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800e59e:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1990
    route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e5a6:	3b08      	subs	r3, #8
 800e5a8:	009b      	lsls	r3, r3, #2
 800e5aa:	220f      	movs	r2, #15
 800e5ac:	fa02 f303 	lsl.w	r3, r2, r3
 800e5b0:	43db      	mvns	r3, r3
 800e5b2:	697a      	ldr	r2, [r7, #20]
 800e5b4:	4013      	ands	r3, r2
 800e5b6:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1991
    route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
 800e5b8:	79fa      	ldrb	r2, [r7, #7]
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e5c0:	3b08      	subs	r3, #8
 800e5c2:	009b      	lsls	r3, r3, #2
 800e5c4:	fa02 f303 	lsl.w	r3, r2, r3
 800e5c8:	697a      	ldr	r2, [r7, #20]
 800e5ca:	4313      	orrs	r3, r2
 800e5cc:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1992
    group_ptr->REVNP1 = route_mask;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	697a      	ldr	r2, [r7, #20]
 800e5d2:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1994
  }
}
 800e5d6:	bf00      	nop
 800e5d8:	371c      	adds	r7, #28
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bc80      	pop	{r7}
 800e5de:	4770      	bx	lr

0800e5e0 <XMC_VADC_GROUP_GetResultFifoTail>:
XMC_VADC_GROUP_GetResultFifoTail():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:1998

/* API to retrieve the tail of the fifo which the specified result register is a part of */
uint32_t XMC_VADC_GROUP_GetResultFifoTail(XMC_VADC_GROUP_t *const group_ptr, uint32_t res_reg)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b086      	sub	sp, #24
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
 800e5e8:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2007
  bool exit_flag;

  XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  tail = 0U;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2008
  exit_flag= (bool)false;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2010

  if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
 800e5f2:	6839      	ldr	r1, [r7, #0]
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f000 f869 	bl	800e6cc <XMC_VADC_GROUP_IsResultRegisterFifoHead>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d002      	beq.n	800e606 <XMC_VADC_GROUP_GetResultFifoTail+0x26>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2012
  {
    res_reg = res_reg - 1U;
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	3b01      	subs	r3, #1
 800e604:	603b      	str	r3, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2016
  }

  /* Border condition */
  if (0U == res_reg)
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d102      	bne.n	800e612 <XMC_VADC_GROUP_GetResultFifoTail+0x32>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2018
  {
    tail = 0U;
 800e60c:	2300      	movs	r3, #0
 800e60e:	617b      	str	r3, [r7, #20]
 800e610:	e027      	b.n	800e662 <XMC_VADC_GROUP_GetResultFifoTail+0x82>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2023
  }
  else
  {
    /* Stop either at a node that does not have FEN set or at Node-0 */
    for(i = (int32_t)res_reg; i >= (int32_t)0; i--)
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	613b      	str	r3, [r7, #16]
 800e616:	e01f      	b.n	800e658 <XMC_VADC_GROUP_GetResultFifoTail+0x78>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2025
    {
       rcr = group_ptr->RCR[i];
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	693a      	ldr	r2, [r7, #16]
 800e61c:	32a0      	adds	r2, #160	; 0xa0
 800e61e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e622:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2026
       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800e62a:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2028

       if (rcr)
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d007      	beq.n	800e642 <XMC_VADC_GROUP_GetResultFifoTail+0x62>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2030
       {
         if ((int32_t)0 == i)
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d109      	bne.n	800e64c <XMC_VADC_GROUP_GetResultFifoTail+0x6c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2033
         {
          /* No more nodes. Stop here */
          tail = (uint32_t)0;
 800e638:	2300      	movs	r3, #0
 800e63a:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2034
          exit_flag = (bool)true;
 800e63c:	2301      	movs	r3, #1
 800e63e:	73fb      	strb	r3, [r7, #15]
 800e640:	e004      	b.n	800e64c <XMC_VADC_GROUP_GetResultFifoTail+0x6c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2040
         }
       }
       else
       {
         /* The preceding register forms the tail of the FIFO */
         tail = (uint32_t)i + (uint32_t)1;
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	3301      	adds	r3, #1
 800e646:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2041
         exit_flag = (bool)true;
 800e648:	2301      	movs	r3, #1
 800e64a:	73fb      	strb	r3, [r7, #15]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2043
       }
       if (exit_flag)
 800e64c:	7bfb      	ldrb	r3, [r7, #15]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d106      	bne.n	800e660 <XMC_VADC_GROUP_GetResultFifoTail+0x80>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2023 (discriminator 2)
    tail = 0U;
  }
  else
  {
    /* Stop either at a node that does not have FEN set or at Node-0 */
    for(i = (int32_t)res_reg; i >= (int32_t)0; i--)
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	3b01      	subs	r3, #1
 800e656:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2023 (discriminator 1)
 800e658:	693b      	ldr	r3, [r7, #16]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	dadc      	bge.n	800e618 <XMC_VADC_GROUP_GetResultFifoTail+0x38>
 800e65e:	e000      	b.n	800e662 <XMC_VADC_GROUP_GetResultFifoTail+0x82>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2045
         tail = (uint32_t)i + (uint32_t)1;
         exit_flag = (bool)true;
       }
       if (exit_flag)
       {
         break;
 800e660:	bf00      	nop
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2049
       }
    }
  }
  return tail;
 800e662:	697b      	ldr	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2050
}
 800e664:	4618      	mov	r0, r3
 800e666:	3718      	adds	r7, #24
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd80      	pop	{r7, pc}

0800e66c <XMC_VADC_GROUP_GetResultFifoHead>:
XMC_VADC_GROUP_GetResultFifoHead():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2054

/* API to retrieve the head of the fifo which the specified result register is a part of */
uint32_t XMC_VADC_GROUP_GetResultFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b086      	sub	sp, #24
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2062
  uint32_t i;

  XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
 800e676:	6839      	ldr	r1, [r7, #0]
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f000 f827 	bl	800e6cc <XMC_VADC_GROUP_IsResultRegisterFifoHead>
 800e67e:	4603      	mov	r3, r0
 800e680:	2b00      	cmp	r3, #0
 800e682:	d002      	beq.n	800e68a <XMC_VADC_GROUP_GetResultFifoHead+0x1e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2064
  {
      head = res_reg;
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	617b      	str	r3, [r7, #20]
 800e688:	e01a      	b.n	800e6c0 <XMC_VADC_GROUP_GetResultFifoHead+0x54>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2068
  }
  else
  {
    head = XMC_VADC_NUM_RESULT_REGISTERS - (uint32_t)1;
 800e68a:	230f      	movs	r3, #15
 800e68c:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2070

    for(i = res_reg; i < XMC_VADC_NUM_RESULT_REGISTERS ; i++)
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	613b      	str	r3, [r7, #16]
 800e692:	e012      	b.n	800e6ba <XMC_VADC_GROUP_GetResultFifoHead+0x4e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2072
    {
      rcr = group_ptr->RCR[i];
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	693a      	ldr	r2, [r7, #16]
 800e698:	32a0      	adds	r2, #160	; 0xa0
 800e69a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e69e:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2073
      rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800e6a6:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2075

      if (!rcr)
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d102      	bne.n	800e6b4 <XMC_VADC_GROUP_GetResultFifoHead+0x48>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2078
      {
        /* This node forms the head of the FIFO */
        head = i ;
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	617b      	str	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2079
        break;
 800e6b2:	e005      	b.n	800e6c0 <XMC_VADC_GROUP_GetResultFifoHead+0x54>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2070 (discriminator 2)
  }
  else
  {
    head = XMC_VADC_NUM_RESULT_REGISTERS - (uint32_t)1;

    for(i = res_reg; i < XMC_VADC_NUM_RESULT_REGISTERS ; i++)
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2070 (discriminator 1)
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	2b0f      	cmp	r3, #15
 800e6be:	d9e9      	bls.n	800e694 <XMC_VADC_GROUP_GetResultFifoHead+0x28>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2083
        head = i ;
        break;
      }
    }
  }
  return head;
 800e6c0:	697b      	ldr	r3, [r7, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2084
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3718      	adds	r7, #24
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}
 800e6ca:	bf00      	nop

0800e6cc <XMC_VADC_GROUP_IsResultRegisterFifoHead>:
XMC_VADC_GROUP_IsResultRegisterFifoHead():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2088

/* API to determine if the specified result register is the head of a result fifo */
bool XMC_VADC_GROUP_IsResultRegisterFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b087      	sub	sp, #28
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	6039      	str	r1, [r7, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2097

  XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Result Register",
             ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  rcr_head = group_ptr->RCR[res_reg];
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	683a      	ldr	r2, [r7, #0]
 800e6da:	32a0      	adds	r2, #160	; 0xa0
 800e6dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6e0:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2098
  rcr_head &= (uint32_t)VADC_G_RCR_FEN_Msk;
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800e6e8:	613b      	str	r3, [r7, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2099
  rcr_next = group_ptr->RCR[res_reg - (uint32_t)1];
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	1e5a      	subs	r2, r3, #1
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	32a0      	adds	r2, #160	; 0xa0
 800e6f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6f6:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2100
  rcr_next &= (uint32_t)VADC_G_RCR_FEN_Msk;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800e6fe:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2102

  if (rcr_head)
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d002      	beq.n	800e70c <XMC_VADC_GROUP_IsResultRegisterFifoHead+0x40>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2104
  {
    ret_val = (bool)false;
 800e706:	2300      	movs	r3, #0
 800e708:	75fb      	strb	r3, [r7, #23]
 800e70a:	e007      	b.n	800e71c <XMC_VADC_GROUP_IsResultRegisterFifoHead+0x50>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2106
  }
  else if (rcr_next)
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d002      	beq.n	800e718 <XMC_VADC_GROUP_IsResultRegisterFifoHead+0x4c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2108
  {
    ret_val = (bool)true;
 800e712:	2301      	movs	r3, #1
 800e714:	75fb      	strb	r3, [r7, #23]
 800e716:	e001      	b.n	800e71c <XMC_VADC_GROUP_IsResultRegisterFifoHead+0x50>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2112
  }
  else
  {
    ret_val = (bool)false;
 800e718:	2300      	movs	r3, #0
 800e71a:	75fb      	strb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2115
  }

  return ret_val;
 800e71c:	7dfb      	ldrb	r3, [r7, #23]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_vadc.c:2116
}
 800e71e:	4618      	mov	r0, r3
 800e720:	371c      	adds	r7, #28
 800e722:	46bd      	mov	sp, r7
 800e724:	bc80      	pop	{r7}
 800e726:	4770      	bx	lr

0800e728 <XMC_WDT_Enable>:
XMC_WDT_Enable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_wdt.c:60
 * API IMPLEMENTATION
  ********************************************************************************************************************/

/* Enables watchdog clock and releases watchdog reset. */
void XMC_WDT_Enable(void)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_wdt.c:62
#if UC_FAMILY == XMC4
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_WDT);
 800e72c:	2020      	movs	r0, #32
 800e72e:	f7f3 faff 	bl	8001d30 <XMC_SCU_CLOCK_EnableClock>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_wdt.c:69

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_WDT);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_WDT);
 800e732:	4802      	ldr	r0, [pc, #8]	; (800e73c <XMC_WDT_Enable+0x14>)
 800e734:	f7f3 f82a 	bl	800178c <XMC_SCU_RESET_DeassertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_wdt.c:71
#endif  
}
 800e738:	bf00      	nop
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	20000002 	.word	0x20000002

0800e740 <XMC_WDT_Disable>:
XMC_WDT_Disable():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_wdt.c:75

/* Disables watchdog clock and resets watchdog. */
void XMC_WDT_Disable(void)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_wdt.c:77
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_WDT);
 800e744:	4803      	ldr	r0, [pc, #12]	; (800e754 <XMC_WDT_Disable+0x14>)
 800e746:	f7f3 f805 	bl	8001754 <XMC_SCU_RESET_AssertPeripheralReset>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_wdt.c:84
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_WDT); 
#endif

#if UC_FAMILY == XMC4
  XMC_SCU_CLOCK_DisableClock(XMC_SCU_CLOCK_WDT);
 800e74a:	2020      	movs	r0, #32
 800e74c:	f7f3 fb00 	bl	8001d50 <XMC_SCU_CLOCK_DisableClock>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_wdt.c:86
#endif
}
 800e750:	bf00      	nop
 800e752:	bd80      	pop	{r7, pc}
 800e754:	20000002 	.word	0x20000002

0800e758 <XMC_WDT_Init>:
XMC_WDT_Init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_wdt.c:89
/* Initializes and configures watchdog with configuration data pointed by \a config. */
void XMC_WDT_Init(const XMC_WDT_CONFIG_t *const config)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b082      	sub	sp, #8
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_wdt.c:90
  XMC_WDT_Enable();
 800e760:	f7ff ffe2 	bl	800e728 <XMC_WDT_Enable>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_wdt.c:91
  WDT->CTR = config->wdt_ctr;
 800e764:	4a07      	ldr	r2, [pc, #28]	; (800e784 <XMC_WDT_Init+0x2c>)
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	689b      	ldr	r3, [r3, #8]
 800e76a:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_wdt.c:92
  WDT->WLB = config->window_lower_bound;
 800e76c:	4a05      	ldr	r2, [pc, #20]	; (800e784 <XMC_WDT_Init+0x2c>)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	685b      	ldr	r3, [r3, #4]
 800e772:	6113      	str	r3, [r2, #16]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_wdt.c:93
  WDT->WUB = config->window_upper_bound;
 800e774:	4a03      	ldr	r2, [pc, #12]	; (800e784 <XMC_WDT_Init+0x2c>)
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	6153      	str	r3, [r2, #20]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/XMCLib/src/xmc_wdt.c:94
}
 800e77c:	bf00      	nop
 800e77e:	3708      	adds	r7, #8
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}
 800e784:	50008000 	.word	0x50008000

0800e788 <_sbrk>:
_sbrk():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/NewLib/syscalls.c:66

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b084      	sub	sp, #16
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/NewLib/syscalls.c:70
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 800e790:	4b14      	ldr	r3, [pc, #80]	; (800e7e4 <_sbrk+0x5c>)
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d102      	bne.n	800e79e <_sbrk+0x16>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/NewLib/syscalls.c:71
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 800e798:	4b12      	ldr	r3, [pc, #72]	; (800e7e4 <_sbrk+0x5c>)
 800e79a:	4a13      	ldr	r2, [pc, #76]	; (800e7e8 <_sbrk+0x60>)
 800e79c:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/NewLib/syscalls.c:74
  }

  base = heap_ptr;
 800e79e:	4b11      	ldr	r3, [pc, #68]	; (800e7e4 <_sbrk+0x5c>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	60fb      	str	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/NewLib/syscalls.c:77

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	3303      	adds	r3, #3
 800e7a8:	f023 0303 	bic.w	r3, r3, #3
 800e7ac:	607b      	str	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/NewLib/syscalls.c:78
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 800e7ae:	4b0d      	ldr	r3, [pc, #52]	; (800e7e4 <_sbrk+0x5c>)
 800e7b0:	681a      	ldr	r2, [r3, #0]
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	4413      	add	r3, r2
 800e7b6:	4a0d      	ldr	r2, [pc, #52]	; (800e7ec <_sbrk+0x64>)
 800e7b8:	4293      	cmp	r3, r2
 800e7ba:	d207      	bcs.n	800e7cc <_sbrk+0x44>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/NewLib/syscalls.c:80
  {
    heap_ptr += nbytes;
 800e7bc:	4b09      	ldr	r3, [pc, #36]	; (800e7e4 <_sbrk+0x5c>)
 800e7be:	681a      	ldr	r2, [r3, #0]
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	4413      	add	r3, r2
 800e7c4:	4a07      	ldr	r2, [pc, #28]	; (800e7e4 <_sbrk+0x5c>)
 800e7c6:	6013      	str	r3, [r2, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/NewLib/syscalls.c:81
    return (base);
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	e006      	b.n	800e7da <_sbrk+0x52>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/NewLib/syscalls.c:86
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 800e7cc:	f000 fb38 	bl	800ee40 <__errno>
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	230c      	movs	r3, #12
 800e7d4:	6013      	str	r3, [r2, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/NewLib/syscalls.c:87
    return ((caddr_t)-1);
 800e7d6:	f04f 33ff 	mov.w	r3, #4294967295
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/NewLib/syscalls.c:89
  }
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3710      	adds	r7, #16
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
 800e7e2:	bf00      	nop
 800e7e4:	200000f4 	.word	0x200000f4
 800e7e8:	20000588 	.word	0x20000588
 800e7ec:	2000ffc0 	.word	0x2000ffc0

0800e7f0 <_init>:
_init():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../Libraries/NewLib/syscalls.c:93

/* Init */
void _init(void)
{}
 800e7f0:	b480      	push	{r7}
 800e7f2:	af00      	add	r7, sp, #0
 800e7f4:	bf00      	nop
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bc80      	pop	{r7}
 800e7fa:	4770      	bx	lr

0800e7fc <NVIC_SetPriority>:
NVIC_SetPriority():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1699
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b083      	sub	sp, #12
 800e800:	af00      	add	r7, sp, #0
 800e802:	4603      	mov	r3, r0
 800e804:	6039      	str	r1, [r7, #0]
 800e806:	71fb      	strb	r3, [r7, #7]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1700
  if ((int32_t)(IRQn) < 0)
 800e808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	da0b      	bge.n	800e828 <NVIC_SetPriority+0x2c>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1702
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e810:	490d      	ldr	r1, [pc, #52]	; (800e848 <NVIC_SetPriority+0x4c>)
 800e812:	79fb      	ldrb	r3, [r7, #7]
 800e814:	f003 030f 	and.w	r3, r3, #15
 800e818:	3b04      	subs	r3, #4
 800e81a:	683a      	ldr	r2, [r7, #0]
 800e81c:	b2d2      	uxtb	r2, r2
 800e81e:	0092      	lsls	r2, r2, #2
 800e820:	b2d2      	uxtb	r2, r2
 800e822:	440b      	add	r3, r1
 800e824:	761a      	strb	r2, [r3, #24]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1708
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800e826:	e009      	b.n	800e83c <NVIC_SetPriority+0x40>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1706
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e828:	4908      	ldr	r1, [pc, #32]	; (800e84c <NVIC_SetPriority+0x50>)
 800e82a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e82e:	683a      	ldr	r2, [r7, #0]
 800e830:	b2d2      	uxtb	r2, r2
 800e832:	0092      	lsls	r2, r2, #2
 800e834:	b2d2      	uxtb	r2, r2
 800e836:	440b      	add	r3, r1
 800e838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1708
  }
}
 800e83c:	bf00      	nop
 800e83e:	370c      	adds	r7, #12
 800e840:	46bd      	mov	sp, r7
 800e842:	bc80      	pop	{r7}
 800e844:	4770      	bx	lr
 800e846:	bf00      	nop
 800e848:	e000ed00 	.word	0xe000ed00
 800e84c:	e000e100 	.word	0xe000e100

0800e850 <SysTick_Config>:
SysTick_Config():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1831
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b082      	sub	sp, #8
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1832
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	3b01      	subs	r3, #1
 800e85c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e860:	d301      	bcc.n	800e866 <SysTick_Config+0x16>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1834
  {
    return (1UL);                                                   /* Reload value impossible */
 800e862:	2301      	movs	r3, #1
 800e864:	e00f      	b.n	800e886 <SysTick_Config+0x36>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1837
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e866:	4a0a      	ldr	r2, [pc, #40]	; (800e890 <SysTick_Config+0x40>)
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	3b01      	subs	r3, #1
 800e86c:	6053      	str	r3, [r2, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1838
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e86e:	213f      	movs	r1, #63	; 0x3f
 800e870:	f04f 30ff 	mov.w	r0, #4294967295
 800e874:	f7ff ffc2 	bl	800e7fc <NVIC_SetPriority>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1839
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e878:	4b05      	ldr	r3, [pc, #20]	; (800e890 <SysTick_Config+0x40>)
 800e87a:	2200      	movs	r2, #0
 800e87c:	609a      	str	r2, [r3, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1840
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e87e:	4b04      	ldr	r3, [pc, #16]	; (800e890 <SysTick_Config+0x40>)
 800e880:	2207      	movs	r2, #7
 800e882:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1843
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e884:	2300      	movs	r3, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/CMSIS/Include/core_cm4.h:1844
}
 800e886:	4618      	mov	r0, r3
 800e888:	3708      	adds	r7, #8
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	e000e010 	.word	0xe000e010

0800e894 <XMC_GPIO_ToggleOutput>:
XMC_GPIO_ToggleOutput():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_gpio.h:309
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800e894:	b480      	push	{r7}
 800e896:	b083      	sub	sp, #12
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	460b      	mov	r3, r1
 800e89e:	70fb      	strb	r3, [r7, #3]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_gpio.h:312
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 800e8a0:	78fb      	ldrb	r3, [r7, #3]
 800e8a2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800e8a6:	409a      	lsls	r2, r3
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	605a      	str	r2, [r3, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Libraries/XMCLib/inc/xmc_gpio.h:313
}
 800e8ac:	bf00      	nop
 800e8ae:	370c      	adds	r7, #12
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bc80      	pop	{r7}
 800e8b4:	4770      	bx	lr
 800e8b6:	bf00      	nop

0800e8b8 <SysTick_Handler>:
SysTick_Handler():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../main.c:44

#define LED1 P1_1
#define LED2 P1_0

void SysTick_Handler(void)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../main.c:47
  static uint32_t ticks = 0;

  ticks++;
 800e8bc:	4b0b      	ldr	r3, [pc, #44]	; (800e8ec <SysTick_Handler+0x34>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	3301      	adds	r3, #1
 800e8c2:	4a0a      	ldr	r2, [pc, #40]	; (800e8ec <SysTick_Handler+0x34>)
 800e8c4:	6013      	str	r3, [r2, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../main.c:48
  if (ticks == TICKS_WAIT)
 800e8c6:	4b09      	ldr	r3, [pc, #36]	; (800e8ec <SysTick_Handler+0x34>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800e8ce:	d10a      	bne.n	800e8e6 <SysTick_Handler+0x2e>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../main.c:50
  {
    XMC_GPIO_ToggleOutput(LED1);
 800e8d0:	2101      	movs	r1, #1
 800e8d2:	4807      	ldr	r0, [pc, #28]	; (800e8f0 <SysTick_Handler+0x38>)
 800e8d4:	f7ff ffde 	bl	800e894 <XMC_GPIO_ToggleOutput>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../main.c:51
    XMC_GPIO_ToggleOutput(LED2);
 800e8d8:	2100      	movs	r1, #0
 800e8da:	4805      	ldr	r0, [pc, #20]	; (800e8f0 <SysTick_Handler+0x38>)
 800e8dc:	f7ff ffda 	bl	800e894 <XMC_GPIO_ToggleOutput>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../main.c:52
    ticks = 0;
 800e8e0:	4b02      	ldr	r3, [pc, #8]	; (800e8ec <SysTick_Handler+0x34>)
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	601a      	str	r2, [r3, #0]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../main.c:54
  }
}
 800e8e6:	bf00      	nop
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	200000f8 	.word	0x200000f8
 800e8f0:	48028100 	.word	0x48028100

0800e8f4 <main>:
main():
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../main.c:58


int main(void)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b084      	sub	sp, #16
 800e8f8:	af00      	add	r7, sp, #0
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../main.c:61
  XMC_GPIO_CONFIG_t config;

  config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 800e8fa:	2380      	movs	r3, #128	; 0x80
 800e8fc:	713b      	strb	r3, [r7, #4]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../main.c:62
  config.output_level = XMC_GPIO_OUTPUT_LEVEL_HIGH;
 800e8fe:	2301      	movs	r3, #1
 800e900:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../main.c:63
  config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 800e902:	2304      	movs	r3, #4
 800e904:	733b      	strb	r3, [r7, #12]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../main.c:65

  XMC_GPIO_Init(LED1, &config);
 800e906:	1d3b      	adds	r3, r7, #4
 800e908:	461a      	mov	r2, r3
 800e90a:	2101      	movs	r1, #1
 800e90c:	480a      	ldr	r0, [pc, #40]	; (800e938 <main+0x44>)
 800e90e:	f7f2 fa0d 	bl	8000d2c <XMC_GPIO_Init>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../main.c:67

  config.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 800e912:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e916:	60bb      	str	r3, [r7, #8]
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../main.c:68
  XMC_GPIO_Init(LED2, &config);
 800e918:	1d3b      	adds	r3, r7, #4
 800e91a:	461a      	mov	r2, r3
 800e91c:	2100      	movs	r1, #0
 800e91e:	4806      	ldr	r0, [pc, #24]	; (800e938 <main+0x44>)
 800e920:	f7f2 fa04 	bl	8000d2c <XMC_GPIO_Init>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../main.c:71

  /* System timer configuration */
  SysTick_Config(SystemCoreClock / TICKS_PER_SECOND);
 800e924:	4b05      	ldr	r3, [pc, #20]	; (800e93c <main+0x48>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	4a05      	ldr	r2, [pc, #20]	; (800e940 <main+0x4c>)
 800e92a:	fba2 2303 	umull	r2, r3, r2, r3
 800e92e:	099b      	lsrs	r3, r3, #6
 800e930:	4618      	mov	r0, r3
 800e932:	f7ff ff8d 	bl	800e850 <SysTick_Config>
/home/hackdino/Documents/mbed_master_thesis/Workspace_Test_XMCLib/XMC4500_Blinky/Debug/../main.c:76 (discriminator 1)

  while(1)
  {
    /* Infinite loop */
  }
 800e936:	e7fe      	b.n	800e936 <main+0x42>
 800e938:	48028100 	.word	0x48028100
 800e93c:	2000ffc0 	.word	0x2000ffc0
 800e940:	10624dd3 	.word	0x10624dd3

0800e944 <__aeabi_frsub>:
__aeabi_frsub():
 800e944:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800e948:	e002      	b.n	800e950 <__addsf3>
 800e94a:	bf00      	nop

0800e94c <__aeabi_fsub>:
__aeabi_fsub():
 800e94c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800e950 <__addsf3>:
__addsf3():
 800e950:	0042      	lsls	r2, r0, #1
 800e952:	bf1f      	itttt	ne
 800e954:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800e958:	ea92 0f03 	teqne	r2, r3
 800e95c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800e960:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800e964:	d06a      	beq.n	800ea3c <__addsf3+0xec>
 800e966:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800e96a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800e96e:	bfc1      	itttt	gt
 800e970:	18d2      	addgt	r2, r2, r3
 800e972:	4041      	eorgt	r1, r0
 800e974:	4048      	eorgt	r0, r1
 800e976:	4041      	eorgt	r1, r0
 800e978:	bfb8      	it	lt
 800e97a:	425b      	neglt	r3, r3
 800e97c:	2b19      	cmp	r3, #25
 800e97e:	bf88      	it	hi
 800e980:	4770      	bxhi	lr
 800e982:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800e986:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800e98a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800e98e:	bf18      	it	ne
 800e990:	4240      	negne	r0, r0
 800e992:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800e996:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800e99a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800e99e:	bf18      	it	ne
 800e9a0:	4249      	negne	r1, r1
 800e9a2:	ea92 0f03 	teq	r2, r3
 800e9a6:	d03f      	beq.n	800ea28 <__addsf3+0xd8>
 800e9a8:	f1a2 0201 	sub.w	r2, r2, #1
 800e9ac:	fa41 fc03 	asr.w	ip, r1, r3
 800e9b0:	eb10 000c 	adds.w	r0, r0, ip
 800e9b4:	f1c3 0320 	rsb	r3, r3, #32
 800e9b8:	fa01 f103 	lsl.w	r1, r1, r3
 800e9bc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800e9c0:	d502      	bpl.n	800e9c8 <__addsf3+0x78>
 800e9c2:	4249      	negs	r1, r1
 800e9c4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800e9c8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800e9cc:	d313      	bcc.n	800e9f6 <__addsf3+0xa6>
 800e9ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800e9d2:	d306      	bcc.n	800e9e2 <__addsf3+0x92>
 800e9d4:	0840      	lsrs	r0, r0, #1
 800e9d6:	ea4f 0131 	mov.w	r1, r1, rrx
 800e9da:	f102 0201 	add.w	r2, r2, #1
 800e9de:	2afe      	cmp	r2, #254	; 0xfe
 800e9e0:	d251      	bcs.n	800ea86 <__addsf3+0x136>
 800e9e2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800e9e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800e9ea:	bf08      	it	eq
 800e9ec:	f020 0001 	biceq.w	r0, r0, #1
 800e9f0:	ea40 0003 	orr.w	r0, r0, r3
 800e9f4:	4770      	bx	lr
 800e9f6:	0049      	lsls	r1, r1, #1
 800e9f8:	eb40 0000 	adc.w	r0, r0, r0
 800e9fc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800ea00:	f1a2 0201 	sub.w	r2, r2, #1
 800ea04:	d1ed      	bne.n	800e9e2 <__addsf3+0x92>
 800ea06:	fab0 fc80 	clz	ip, r0
 800ea0a:	f1ac 0c08 	sub.w	ip, ip, #8
 800ea0e:	ebb2 020c 	subs.w	r2, r2, ip
 800ea12:	fa00 f00c 	lsl.w	r0, r0, ip
 800ea16:	bfaa      	itet	ge
 800ea18:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800ea1c:	4252      	neglt	r2, r2
 800ea1e:	4318      	orrge	r0, r3
 800ea20:	bfbc      	itt	lt
 800ea22:	40d0      	lsrlt	r0, r2
 800ea24:	4318      	orrlt	r0, r3
 800ea26:	4770      	bx	lr
 800ea28:	f092 0f00 	teq	r2, #0
 800ea2c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800ea30:	bf06      	itte	eq
 800ea32:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800ea36:	3201      	addeq	r2, #1
 800ea38:	3b01      	subne	r3, #1
 800ea3a:	e7b5      	b.n	800e9a8 <__addsf3+0x58>
 800ea3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800ea40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800ea44:	bf18      	it	ne
 800ea46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800ea4a:	d021      	beq.n	800ea90 <__addsf3+0x140>
 800ea4c:	ea92 0f03 	teq	r2, r3
 800ea50:	d004      	beq.n	800ea5c <__addsf3+0x10c>
 800ea52:	f092 0f00 	teq	r2, #0
 800ea56:	bf08      	it	eq
 800ea58:	4608      	moveq	r0, r1
 800ea5a:	4770      	bx	lr
 800ea5c:	ea90 0f01 	teq	r0, r1
 800ea60:	bf1c      	itt	ne
 800ea62:	2000      	movne	r0, #0
 800ea64:	4770      	bxne	lr
 800ea66:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800ea6a:	d104      	bne.n	800ea76 <__addsf3+0x126>
 800ea6c:	0040      	lsls	r0, r0, #1
 800ea6e:	bf28      	it	cs
 800ea70:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800ea74:	4770      	bx	lr
 800ea76:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800ea7a:	bf3c      	itt	cc
 800ea7c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800ea80:	4770      	bxcc	lr
 800ea82:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800ea86:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800ea8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800ea8e:	4770      	bx	lr
 800ea90:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800ea94:	bf16      	itet	ne
 800ea96:	4608      	movne	r0, r1
 800ea98:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800ea9c:	4601      	movne	r1, r0
 800ea9e:	0242      	lsls	r2, r0, #9
 800eaa0:	bf06      	itte	eq
 800eaa2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800eaa6:	ea90 0f01 	teqeq	r0, r1
 800eaaa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800eaae:	4770      	bx	lr

0800eab0 <__aeabi_ui2f>:
__floatunsisf():
 800eab0:	f04f 0300 	mov.w	r3, #0
 800eab4:	e004      	b.n	800eac0 <__aeabi_i2f+0x8>
 800eab6:	bf00      	nop

0800eab8 <__aeabi_i2f>:
__floatsisf():
 800eab8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800eabc:	bf48      	it	mi
 800eabe:	4240      	negmi	r0, r0
 800eac0:	ea5f 0c00 	movs.w	ip, r0
 800eac4:	bf08      	it	eq
 800eac6:	4770      	bxeq	lr
 800eac8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800eacc:	4601      	mov	r1, r0
 800eace:	f04f 0000 	mov.w	r0, #0
 800ead2:	e01c      	b.n	800eb0e <__aeabi_l2f+0x2a>

0800ead4 <__aeabi_ul2f>:
__aeabi_ul2f():
 800ead4:	ea50 0201 	orrs.w	r2, r0, r1
 800ead8:	bf08      	it	eq
 800eada:	4770      	bxeq	lr
 800eadc:	f04f 0300 	mov.w	r3, #0
 800eae0:	e00a      	b.n	800eaf8 <__aeabi_l2f+0x14>
 800eae2:	bf00      	nop

0800eae4 <__aeabi_l2f>:
__aeabi_l2f():
 800eae4:	ea50 0201 	orrs.w	r2, r0, r1
 800eae8:	bf08      	it	eq
 800eaea:	4770      	bxeq	lr
 800eaec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800eaf0:	d502      	bpl.n	800eaf8 <__aeabi_l2f+0x14>
 800eaf2:	4240      	negs	r0, r0
 800eaf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800eaf8:	ea5f 0c01 	movs.w	ip, r1
 800eafc:	bf02      	ittt	eq
 800eafe:	4684      	moveq	ip, r0
 800eb00:	4601      	moveq	r1, r0
 800eb02:	2000      	moveq	r0, #0
 800eb04:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800eb08:	bf08      	it	eq
 800eb0a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800eb0e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800eb12:	fabc f28c 	clz	r2, ip
 800eb16:	3a08      	subs	r2, #8
 800eb18:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800eb1c:	db10      	blt.n	800eb40 <__aeabi_l2f+0x5c>
 800eb1e:	fa01 fc02 	lsl.w	ip, r1, r2
 800eb22:	4463      	add	r3, ip
 800eb24:	fa00 fc02 	lsl.w	ip, r0, r2
 800eb28:	f1c2 0220 	rsb	r2, r2, #32
 800eb2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800eb30:	fa20 f202 	lsr.w	r2, r0, r2
 800eb34:	eb43 0002 	adc.w	r0, r3, r2
 800eb38:	bf08      	it	eq
 800eb3a:	f020 0001 	biceq.w	r0, r0, #1
 800eb3e:	4770      	bx	lr
 800eb40:	f102 0220 	add.w	r2, r2, #32
 800eb44:	fa01 fc02 	lsl.w	ip, r1, r2
 800eb48:	f1c2 0220 	rsb	r2, r2, #32
 800eb4c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800eb50:	fa21 f202 	lsr.w	r2, r1, r2
 800eb54:	eb43 0002 	adc.w	r0, r3, r2
 800eb58:	bf08      	it	eq
 800eb5a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800eb5e:	4770      	bx	lr

0800eb60 <__aeabi_fmul>:
__aeabi_fmul():
 800eb60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800eb64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800eb68:	bf1e      	ittt	ne
 800eb6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800eb6e:	ea92 0f0c 	teqne	r2, ip
 800eb72:	ea93 0f0c 	teqne	r3, ip
 800eb76:	d06f      	beq.n	800ec58 <__aeabi_fmul+0xf8>
 800eb78:	441a      	add	r2, r3
 800eb7a:	ea80 0c01 	eor.w	ip, r0, r1
 800eb7e:	0240      	lsls	r0, r0, #9
 800eb80:	bf18      	it	ne
 800eb82:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800eb86:	d01e      	beq.n	800ebc6 <__aeabi_fmul+0x66>
 800eb88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eb8c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800eb90:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800eb94:	fba0 3101 	umull	r3, r1, r0, r1
 800eb98:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800eb9c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800eba0:	bf3e      	ittt	cc
 800eba2:	0049      	lslcc	r1, r1, #1
 800eba4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800eba8:	005b      	lslcc	r3, r3, #1
 800ebaa:	ea40 0001 	orr.w	r0, r0, r1
 800ebae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800ebb2:	2afd      	cmp	r2, #253	; 0xfd
 800ebb4:	d81d      	bhi.n	800ebf2 <__aeabi_fmul+0x92>
 800ebb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ebba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800ebbe:	bf08      	it	eq
 800ebc0:	f020 0001 	biceq.w	r0, r0, #1
 800ebc4:	4770      	bx	lr
 800ebc6:	f090 0f00 	teq	r0, #0
 800ebca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800ebce:	bf08      	it	eq
 800ebd0:	0249      	lsleq	r1, r1, #9
 800ebd2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800ebd6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800ebda:	3a7f      	subs	r2, #127	; 0x7f
 800ebdc:	bfc2      	ittt	gt
 800ebde:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800ebe2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800ebe6:	4770      	bxgt	lr
 800ebe8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800ebec:	f04f 0300 	mov.w	r3, #0
 800ebf0:	3a01      	subs	r2, #1
 800ebf2:	dc5d      	bgt.n	800ecb0 <__aeabi_fmul+0x150>
 800ebf4:	f112 0f19 	cmn.w	r2, #25
 800ebf8:	bfdc      	itt	le
 800ebfa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800ebfe:	4770      	bxle	lr
 800ec00:	f1c2 0200 	rsb	r2, r2, #0
 800ec04:	0041      	lsls	r1, r0, #1
 800ec06:	fa21 f102 	lsr.w	r1, r1, r2
 800ec0a:	f1c2 0220 	rsb	r2, r2, #32
 800ec0e:	fa00 fc02 	lsl.w	ip, r0, r2
 800ec12:	ea5f 0031 	movs.w	r0, r1, rrx
 800ec16:	f140 0000 	adc.w	r0, r0, #0
 800ec1a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800ec1e:	bf08      	it	eq
 800ec20:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800ec24:	4770      	bx	lr
 800ec26:	f092 0f00 	teq	r2, #0
 800ec2a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800ec2e:	bf02      	ittt	eq
 800ec30:	0040      	lsleq	r0, r0, #1
 800ec32:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800ec36:	3a01      	subeq	r2, #1
 800ec38:	d0f9      	beq.n	800ec2e <__aeabi_fmul+0xce>
 800ec3a:	ea40 000c 	orr.w	r0, r0, ip
 800ec3e:	f093 0f00 	teq	r3, #0
 800ec42:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800ec46:	bf02      	ittt	eq
 800ec48:	0049      	lsleq	r1, r1, #1
 800ec4a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800ec4e:	3b01      	subeq	r3, #1
 800ec50:	d0f9      	beq.n	800ec46 <__aeabi_fmul+0xe6>
 800ec52:	ea41 010c 	orr.w	r1, r1, ip
 800ec56:	e78f      	b.n	800eb78 <__aeabi_fmul+0x18>
 800ec58:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800ec5c:	ea92 0f0c 	teq	r2, ip
 800ec60:	bf18      	it	ne
 800ec62:	ea93 0f0c 	teqne	r3, ip
 800ec66:	d00a      	beq.n	800ec7e <__aeabi_fmul+0x11e>
 800ec68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800ec6c:	bf18      	it	ne
 800ec6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800ec72:	d1d8      	bne.n	800ec26 <__aeabi_fmul+0xc6>
 800ec74:	ea80 0001 	eor.w	r0, r0, r1
 800ec78:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800ec7c:	4770      	bx	lr
 800ec7e:	f090 0f00 	teq	r0, #0
 800ec82:	bf17      	itett	ne
 800ec84:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800ec88:	4608      	moveq	r0, r1
 800ec8a:	f091 0f00 	teqne	r1, #0
 800ec8e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800ec92:	d014      	beq.n	800ecbe <__aeabi_fmul+0x15e>
 800ec94:	ea92 0f0c 	teq	r2, ip
 800ec98:	d101      	bne.n	800ec9e <__aeabi_fmul+0x13e>
 800ec9a:	0242      	lsls	r2, r0, #9
 800ec9c:	d10f      	bne.n	800ecbe <__aeabi_fmul+0x15e>
 800ec9e:	ea93 0f0c 	teq	r3, ip
 800eca2:	d103      	bne.n	800ecac <__aeabi_fmul+0x14c>
 800eca4:	024b      	lsls	r3, r1, #9
 800eca6:	bf18      	it	ne
 800eca8:	4608      	movne	r0, r1
 800ecaa:	d108      	bne.n	800ecbe <__aeabi_fmul+0x15e>
 800ecac:	ea80 0001 	eor.w	r0, r0, r1
 800ecb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800ecb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800ecb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800ecbc:	4770      	bx	lr
 800ecbe:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800ecc2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800ecc6:	4770      	bx	lr

0800ecc8 <__aeabi_fdiv>:
__aeabi_fdiv():
 800ecc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800eccc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800ecd0:	bf1e      	ittt	ne
 800ecd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800ecd6:	ea92 0f0c 	teqne	r2, ip
 800ecda:	ea93 0f0c 	teqne	r3, ip
 800ecde:	d069      	beq.n	800edb4 <__aeabi_fdiv+0xec>
 800ece0:	eba2 0203 	sub.w	r2, r2, r3
 800ece4:	ea80 0c01 	eor.w	ip, r0, r1
 800ece8:	0249      	lsls	r1, r1, #9
 800ecea:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800ecee:	d037      	beq.n	800ed60 <__aeabi_fdiv+0x98>
 800ecf0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ecf4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800ecf8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800ecfc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800ed00:	428b      	cmp	r3, r1
 800ed02:	bf38      	it	cc
 800ed04:	005b      	lslcc	r3, r3, #1
 800ed06:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800ed0a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800ed0e:	428b      	cmp	r3, r1
 800ed10:	bf24      	itt	cs
 800ed12:	1a5b      	subcs	r3, r3, r1
 800ed14:	ea40 000c 	orrcs.w	r0, r0, ip
 800ed18:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800ed1c:	bf24      	itt	cs
 800ed1e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800ed22:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800ed26:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800ed2a:	bf24      	itt	cs
 800ed2c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800ed30:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800ed34:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800ed38:	bf24      	itt	cs
 800ed3a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800ed3e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800ed42:	011b      	lsls	r3, r3, #4
 800ed44:	bf18      	it	ne
 800ed46:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800ed4a:	d1e0      	bne.n	800ed0e <__aeabi_fdiv+0x46>
 800ed4c:	2afd      	cmp	r2, #253	; 0xfd
 800ed4e:	f63f af50 	bhi.w	800ebf2 <__aeabi_fmul+0x92>
 800ed52:	428b      	cmp	r3, r1
 800ed54:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800ed58:	bf08      	it	eq
 800ed5a:	f020 0001 	biceq.w	r0, r0, #1
 800ed5e:	4770      	bx	lr
 800ed60:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800ed64:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800ed68:	327f      	adds	r2, #127	; 0x7f
 800ed6a:	bfc2      	ittt	gt
 800ed6c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800ed70:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800ed74:	4770      	bxgt	lr
 800ed76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800ed7a:	f04f 0300 	mov.w	r3, #0
 800ed7e:	3a01      	subs	r2, #1
 800ed80:	e737      	b.n	800ebf2 <__aeabi_fmul+0x92>
 800ed82:	f092 0f00 	teq	r2, #0
 800ed86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800ed8a:	bf02      	ittt	eq
 800ed8c:	0040      	lsleq	r0, r0, #1
 800ed8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800ed92:	3a01      	subeq	r2, #1
 800ed94:	d0f9      	beq.n	800ed8a <__aeabi_fdiv+0xc2>
 800ed96:	ea40 000c 	orr.w	r0, r0, ip
 800ed9a:	f093 0f00 	teq	r3, #0
 800ed9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800eda2:	bf02      	ittt	eq
 800eda4:	0049      	lsleq	r1, r1, #1
 800eda6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800edaa:	3b01      	subeq	r3, #1
 800edac:	d0f9      	beq.n	800eda2 <__aeabi_fdiv+0xda>
 800edae:	ea41 010c 	orr.w	r1, r1, ip
 800edb2:	e795      	b.n	800ece0 <__aeabi_fdiv+0x18>
 800edb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800edb8:	ea92 0f0c 	teq	r2, ip
 800edbc:	d108      	bne.n	800edd0 <__aeabi_fdiv+0x108>
 800edbe:	0242      	lsls	r2, r0, #9
 800edc0:	f47f af7d 	bne.w	800ecbe <__aeabi_fmul+0x15e>
 800edc4:	ea93 0f0c 	teq	r3, ip
 800edc8:	f47f af70 	bne.w	800ecac <__aeabi_fmul+0x14c>
 800edcc:	4608      	mov	r0, r1
 800edce:	e776      	b.n	800ecbe <__aeabi_fmul+0x15e>
 800edd0:	ea93 0f0c 	teq	r3, ip
 800edd4:	d104      	bne.n	800ede0 <__aeabi_fdiv+0x118>
 800edd6:	024b      	lsls	r3, r1, #9
 800edd8:	f43f af4c 	beq.w	800ec74 <__aeabi_fmul+0x114>
 800eddc:	4608      	mov	r0, r1
 800edde:	e76e      	b.n	800ecbe <__aeabi_fmul+0x15e>
 800ede0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800ede4:	bf18      	it	ne
 800ede6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800edea:	d1ca      	bne.n	800ed82 <__aeabi_fdiv+0xba>
 800edec:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800edf0:	f47f af5c 	bne.w	800ecac <__aeabi_fmul+0x14c>
 800edf4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800edf8:	f47f af3c 	bne.w	800ec74 <__aeabi_fmul+0x114>
 800edfc:	e75f      	b.n	800ecbe <__aeabi_fmul+0x15e>
 800edfe:	bf00      	nop

0800ee00 <__aeabi_f2uiz>:
__fixunssfsi():
 800ee00:	0042      	lsls	r2, r0, #1
 800ee02:	d20e      	bcs.n	800ee22 <__aeabi_f2uiz+0x22>
 800ee04:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800ee08:	d30b      	bcc.n	800ee22 <__aeabi_f2uiz+0x22>
 800ee0a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800ee0e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800ee12:	d409      	bmi.n	800ee28 <__aeabi_f2uiz+0x28>
 800ee14:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800ee18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ee1c:	fa23 f002 	lsr.w	r0, r3, r2
 800ee20:	4770      	bx	lr
 800ee22:	f04f 0000 	mov.w	r0, #0
 800ee26:	4770      	bx	lr
 800ee28:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800ee2c:	d101      	bne.n	800ee32 <__aeabi_f2uiz+0x32>
 800ee2e:	0242      	lsls	r2, r0, #9
 800ee30:	d102      	bne.n	800ee38 <__aeabi_f2uiz+0x38>
 800ee32:	f04f 30ff 	mov.w	r0, #4294967295
 800ee36:	4770      	bx	lr
 800ee38:	f04f 0000 	mov.w	r0, #0
 800ee3c:	4770      	bx	lr
 800ee3e:	bf00      	nop

0800ee40 <__errno>:
__errno():
 800ee40:	4b01      	ldr	r3, [pc, #4]	; (800ee48 <__errno+0x8>)
 800ee42:	6818      	ldr	r0, [r3, #0]
 800ee44:	4770      	bx	lr
 800ee46:	bf00      	nop
 800ee48:	2000007c 	.word	0x2000007c

0800ee4c <__libc_init_array>:
__libc_init_array():
 800ee4c:	b570      	push	{r4, r5, r6, lr}
 800ee4e:	4b0e      	ldr	r3, [pc, #56]	; (800ee88 <__libc_init_array+0x3c>)
 800ee50:	4c0e      	ldr	r4, [pc, #56]	; (800ee8c <__libc_init_array+0x40>)
 800ee52:	1ae4      	subs	r4, r4, r3
 800ee54:	10a4      	asrs	r4, r4, #2
 800ee56:	2500      	movs	r5, #0
 800ee58:	461e      	mov	r6, r3
 800ee5a:	42a5      	cmp	r5, r4
 800ee5c:	d004      	beq.n	800ee68 <__libc_init_array+0x1c>
 800ee5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ee62:	4798      	blx	r3
 800ee64:	3501      	adds	r5, #1
 800ee66:	e7f8      	b.n	800ee5a <__libc_init_array+0xe>
 800ee68:	f7ff fcc2 	bl	800e7f0 <_init>
 800ee6c:	4c08      	ldr	r4, [pc, #32]	; (800ee90 <__libc_init_array+0x44>)
 800ee6e:	4b09      	ldr	r3, [pc, #36]	; (800ee94 <__libc_init_array+0x48>)
 800ee70:	1ae4      	subs	r4, r4, r3
 800ee72:	10a4      	asrs	r4, r4, #2
 800ee74:	2500      	movs	r5, #0
 800ee76:	461e      	mov	r6, r3
 800ee78:	42a5      	cmp	r5, r4
 800ee7a:	d004      	beq.n	800ee86 <__libc_init_array+0x3a>
 800ee7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ee80:	4798      	blx	r3
 800ee82:	3501      	adds	r5, #1
 800ee84:	e7f8      	b.n	800ee78 <__libc_init_array+0x2c>
 800ee86:	bd70      	pop	{r4, r5, r6, pc}
 800ee88:	20000080 	.word	0x20000080
 800ee8c:	20000080 	.word	0x20000080
 800ee90:	20000080 	.word	0x20000080
 800ee94:	20000080 	.word	0x20000080

0800ee98 <memcpy>:
memcpy():
 800ee98:	b510      	push	{r4, lr}
 800ee9a:	1e43      	subs	r3, r0, #1
 800ee9c:	440a      	add	r2, r1
 800ee9e:	4291      	cmp	r1, r2
 800eea0:	d004      	beq.n	800eeac <memcpy+0x14>
 800eea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eea6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eeaa:	e7f8      	b.n	800ee9e <memcpy+0x6>
 800eeac:	bd10      	pop	{r4, pc}

0800eeae <memset>:
memset():
 800eeae:	4402      	add	r2, r0
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d002      	beq.n	800eebc <memset+0xe>
 800eeb6:	f803 1b01 	strb.w	r1, [r3], #1
 800eeba:	e7fa      	b.n	800eeb2 <memset+0x4>
 800eebc:	4770      	bx	lr
	...

0800eec0 <Driver_USBD0>:
 800eec0:	a825 0800 a88d 0800 aac9 0800 ab05 0800     %...............
 800eed0:	ab39 0800 ab6d 0800 ad75 0800 af91 0800     9...m...u.......
 800eee0:	b289 0800 adc1 0800 abd1 0800 ac59 0800     ............Y...
 800eef0:	acd1 0800 af0d 0800 b3f9 0800 b425 0800     ............%...

0800ef00 <xmc_usbh_driver_version>:
 800ef00:	0201 0108                                   ....

0800ef04 <xmc_usbh_driver_capabilities>:
 800ef04:	0001 0003                                   ....

0800ef08 <Driver_USBH0>:
 800ef08:	b7f1 0800 b819 0800 b83d 0800 b8b9 0800     ........=.......
 800ef18:	b8d5 0800 bad9 0800 bb75 0800 bc1d 0800     ........u.......
 800ef28:	bc91 0800 bd25 0800 bdad 0800 bef5 0800     ....%...........
 800ef38:	bfa1 0800 c025 0800 c09d 0800 c1b5 0800     ....%...........
 800ef48:	c1f5 0800 c2cd 0800                         ........

0800ef50 <g_xmc_vadc_group_array>:
 800ef50:	4400 4000 4800 4000 4c00 4000 5000 4000     .D.@.H.@.L.@.P.@
 800ef60:	0043 0000                                   C...

0800ef64 <_global_impure_ptr>:
 800ef64:	001c 2000                                   ... 
